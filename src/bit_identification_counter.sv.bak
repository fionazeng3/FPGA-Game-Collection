// This is the bit identification counter module
//
// Input:
//		clk_i: the clock that this module runs on
//		rst_i: the reset signal for  this module
//		en_i: the enable signal for whole module
//		count_i: 
//
// Output:
//		char_sent_o: the signal that indicates the parallel form data is sent
	
module bit_identification_counter
	(input	logic		clk_i
	,input	logic		rst_i
	,input	logic		en_i
	,output	logic		char_sent_o
	);
	
	// bic_count register
	logic [3:0] bic_count;
	
	always_ff @(posedge clk_i or posedge rst_i) begin
		if (rst_i) begin
			bic_count <= 4'b0;
		end else if (en_i) begin
			bic_count <= bic_count + 1'b1;
			if (bic_count == 4'b1000) begin
				bic_count <= 4'b0000;
			end
		end else begin
			bic_count <= bic_count;
		end
	end
	
	assign char_sent_o = (bic_count == 4'b1000);
	
endmodule