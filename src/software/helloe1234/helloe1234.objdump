
helloe1234.elf:     file format elf32-littlenios2
helloe1234.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00005108 memsz 0x00005108 flags r-x
    LOAD off    0x00006128 vaddr 0x00005128 paddr 0x00005b54 align 2**12
         filesz 0x00000a2c memsz 0x00000a2c flags rw-
    LOAD off    0x00007580 vaddr 0x00006580 paddr 0x00006580 align 2**12
         filesz 0x00000000 memsz 0x00000044 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00006b54  2**0
                  CONTENTS
  2 .text         00005064  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000a4  00005084  00005084  00006084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000a2c  00005128  00005b54  00006128  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000044  00006580  00006580  00007580  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  000065c4  000065c4  00006b54  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00006b54  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000990  00000000  00000000  00006b78  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000188ef  00000000  00000000  00007508  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000605e  00000000  00000000  0001fdf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006b15  00000000  00000000  00025e55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001458  00000000  00000000  0002c96c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002069  00000000  00000000  0002ddc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000050c9  00000000  00000000  0002fe2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00034ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000006d0  00000000  00000000  00034f38  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003768e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00037691  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00037694  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00037695  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00037696  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0003769f  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  000376a8  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000005  00000000  00000000  000376b1  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001c  00000000  00000000  000376b6  2**0
                  CONTENTS, READONLY
 26 .jdi          00003753  00000000  00000000  000376d2  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0005d1e8  00000000  00000000  0003ae25  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00005084 l    d  .rodata	00000000 .rodata
00005128 l    d  .rwdata	00000000 .rwdata
00006580 l    d  .bss	00000000 .bss
000065c4 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../helloe1234_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
000001ec l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000618 l     F .text	00000034 alt_dev_reg
00005128 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00000a50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00000b84 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000bb0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000cb0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00000e10 l     F .text	0000003c alt_get_errno
00000e4c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
000052fc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00003568 l     F .text	00000008 __fp_unlock
0000357c l     F .text	0000019c __sinit.part.1
00003718 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 refill.c
000041b8 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00004a1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00004b10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00004bf8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00004d58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
00005b50 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00004f48 l     F .text	0000003c alt_get_errno
000046f8 g     F .text	00000054 _isatty_r
000002d8 g     F .text	0000006c alt_main
0000474c g     F .text	00000060 _lseek_r
00005b54 g       *ABS*	00000000 __flash_rwdata_start
000065c4 g       *ABS*	00000000 __alt_heap_start
00004480 g     F .text	0000005c __sseek
000038c8 g     F .text	00000010 __sinit
00002e94 g     F .text	00000140 __swbuf_r
00003720 g     F .text	00000078 __sfmoreglue
00004d34 g     F .text	00000024 __malloc_unlock
000024f8 g     F .text	0000015c memmove
000038b0 g     F .text	00000018 _cleanup
000005ac g     F .text	0000003c alt_putstr
00001118 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000469c g     F .text	0000005c _fstat_r
0000658c g     O .bss	00000004 errno
00002d94 g     F .text	00000014 __srget
000043fc g     F .text	00000008 __seofread
00006584 g     O .bss	00000004 alt_argv
0000db28 g       *ABS*	00000000 _gp
000005e8 g     F .text	00000030 usleep
0000517c g     O .rwdata	00000180 alt_fd_list
0000194c g     F .text	00000070 _getc_r
000019bc g     F .text	00000088 getc
0000113c g     F .text	00000090 alt_find_dev
000023b0 g     F .text	00000148 memcpy
00003570 g     F .text	0000000c _cleanup_r
00000d94 g     F .text	0000007c alt_io_redirect
00000778 g     F .text	000000ec altera_avalon_jtag_uart_read
00004904 g     F .text	00000064 .hidden __udivsi3
00004b4c g     F .text	000000ac isatty
00006598 g     O .bss	00000004 __malloc_top_pad
00001484 g     F .text	000004c8 __sfvwrite_r
00002da8 g     F .text	00000054 _sbrk_r
000047ac g     F .text	00000060 _read_r
00005b38 g     O .rwdata	00000004 alt_max_fd
00004598 g     F .text	000000f0 _fclose_r
00003538 g     F .text	00000030 fflush
00006594 g     O .bss	00000004 __malloc_max_sbrked_mem
00004c34 g     F .text	000000dc lseek
00005b40 g     O .rwdata	00000004 _global_impure_ptr
000027bc g     F .text	00000564 _realloc_r
000065c4 g       *ABS*	00000000 __bss_end
000001b8 g     F .text	00000034 alt_getchar
000038e8 g     F .text	00000018 __fp_lock_all
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
00005154 g     O .rwdata	00000028 alt_dev_null
00000b64 g     F .text	00000020 alt_dcache_flush_all
00005b54 g       *ABS*	00000000 __ram_rwdata_end
00005b30 g     O .rwdata	00000008 alt_dev_list
00004f84 g     F .text	00000100 write
00002654 g     F .text	000000a0 _putc_r
00005128 g       *ABS*	00000000 __ram_rodata_end
00004a58 g     F .text	000000b8 fstat
00004968 g     F .text	00000058 .hidden __umodsi3
000065c4 g       *ABS*	00000000 end
000186a0 g       *ABS*	00000000 __alt_stack_pointer
00000864 g     F .text	00000094 altera_avalon_jtag_uart_write
000038d8 g     F .text	00000004 __sfp_lock_acquire
00002250 g     F .text	000000e4 memchr
00003a3c g     F .text	00000310 _free_r
00000344 g     F .text	0000022c alt_printf
00002d20 g     F .text	00000074 __srget_r
00003140 g     F .text	00000180 __call_exitprocs
00005b48 g     O .rwdata	00000004 __malloc_sbrk_base
00000020 g     F .text	0000003c _start
00004d94 g     F .text	00000104 read
00000684 g     F .text	00000034 alt_sys_init
000049c0 g     F .text	00000028 .hidden __mulsi3
00005128 g       *ABS*	00000000 __ram_rwdata_start
00005084 g       *ABS*	00000000 __ram_rodata_start
0000659c g     O .bss	00000028 __malloc_current_mallinfo
000006b8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000012d4 g     F .text	000000c4 alt_get_fd
000008f8 g     F .text	00000158 alt_busy_sleep
00004544 g     F .text	00000054 _close_r
00002334 g     F .text	0000007c memcmp
000065c4 g       *ABS*	00000000 __alt_stack_base
00002fec g     F .text	00000154 __swsetup_r
00003798 g     F .text	00000118 __sfp
00005720 g     O .rwdata	00000408 __malloc_av_
000038e4 g     F .text	00000004 __sinit_lock_release
000043a8 g     F .text	00000054 __sread
000011cc g     F .text	00000108 alt_find_file
00000bec g     F .text	000000a4 alt_dev_llist_insert
00004d10 g     F .text	00000024 __malloc_lock
00004e98 g     F .text	000000b0 sbrk
000034dc g     F .text	0000005c _fflush_r
00006580 g       *ABS*	00000000 __bss_start
00004090 g     F .text	00000128 memset
0000005c g     F .text	0000015c main
00006588 g     O .bss	00000004 alt_envp
00006590 g     O .bss	00000004 __malloc_max_total_mem
00000718 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00002fd4 g     F .text	00000018 __swbuf
000044dc g     F .text	00000008 __sclose
000186a0 g       *ABS*	00000000 __alt_heap_limit
00004688 g     F .text	00000014 fclose
00001a44 g     F .text	0000080c _malloc_r
00005b3c g     O .rwdata	00000004 alt_errno
00003d4c g     F .text	000000c4 _fwalk
000026f4 g     F .text	000000c8 putc
0000480c g     F .text	00000084 .hidden __divsi3
00003918 g     F .text	00000124 _malloc_trim_r
00005084 g       *ABS*	00000000 __flash_rodata_start
0000064c g     F .text	00000038 alt_irq_init
00001094 g     F .text	00000084 alt_release_fd
000044e4 g     F .text	00000060 _write_r
00005b44 g     O .rwdata	00000004 _impure_ptr
00006580 g     O .bss	00000004 alt_argc
000032c0 g     F .text	0000021c __sflush_r
000041d4 g     F .text	000001d4 __srefill_r
00003900 g     F .text	00000018 __fp_unlock_all
00005b28 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005b54 g       *ABS*	00000000 _edata
000065c4 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
000013d0 g     F .text	0000009c _fputs_r
00004404 g     F .text	0000007c __swrite
00005b4c g     O .rwdata	00000004 __malloc_trim_threshold
00001398 g     F .text	00000038 exit
00003e10 g     F .text	000000c4 _fwalk_reent
00004890 g     F .text	00000074 .hidden __modsi3
000186a0 g       *ABS*	00000000 __alt_data_end
000038dc g     F .text	00000004 __sfp_lock_release
000049e8 g     F .text	00000034 _exit
00003ed4 g     F .text	000001bc __smakebuf_r
00002dfc g     F .text	00000098 strlen
00000f38 g     F .text	0000015c open
00000570 g     F .text	0000003c alt_putchar
00000c90 g     F .text	00000020 alt_icache_flush_all
0000146c g     F .text	00000018 fputs
00000a8c g     F .text	000000d8 close
00000254 g     F .text	00000084 alt_load
000038e0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
      20:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
      24:	dee1a814 	ori	sp,sp,34464
    movhi gp, %hi(_gp)
      28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
      2c:	d6b6ca14 	ori	gp,gp,56104
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
      34:	10996014 	ori	r2,r2,25984

    movhi r3, %hi(__bss_end)
      38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
      3c:	18d97114 	ori	r3,r3,26052

    beq r2, r3, 1f
      40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
      44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      4c:	10fffd36 	bltu	r2,r3,44 <__alt_data_end+0xfffe79a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      50:	00002540 	call	254 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      54:	00002d80 	call	2d8 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      58:	003fff06 	br	58 <__alt_data_end+0xfffe79b8>

0000005c <main>:
#define charSent (volatile char*) 0x21010
#define charRec (volatile char*) 0x21000


int main()
{
      5c:	defffd04 	addi	sp,sp,-12
      60:	dfc00215 	stw	ra,8(sp)
      64:	df000115 	stw	fp,4(sp)
      68:	df000104 	addi	fp,sp,4
	alt_putstr("Receive or Send? Please enter the initial letter of your choice \n");
      6c:	01000034 	movhi	r4,0
      70:	21142104 	addi	r4,r4,20612
      74:	00005ac0 	call	5ac <alt_putstr>
	char choice = alt_getchar();
      78:	00001b80 	call	1b8 <alt_getchar>
      7c:	e0bfff05 	stb	r2,-4(fp)
	alt_getchar();
      80:	00001b80 	call	1b8 <alt_getchar>
	if(choice == 'r') {
      84:	e0bfff07 	ldb	r2,-4(fp)
      88:	10801c98 	cmpnei	r2,r2,114
      8c:	1000171e 	bne	r2,zero,ec <main+0x90>
		char result = '0';
      90:	00800c04 	movi	r2,48
      94:	e0bfff45 	stb	r2,-3(fp)
		while((*(charRec) & 0x1) != 0x1) {}
      98:	0001883a 	nop
      9c:	008000b4 	movhi	r2,2
      a0:	10840004 	addi	r2,r2,4096
      a4:	10800003 	ldbu	r2,0(r2)
      a8:	10803fcc 	andi	r2,r2,255
      ac:	1080004c 	andi	r2,r2,1
      b0:	103ffa26 	beq	r2,zero,9c <__alt_data_end+0xfffe79fc>
		result = *(busin);
      b4:	008000b4 	movhi	r2,2
      b8:	10841404 	addi	r2,r2,4176
      bc:	10800003 	ldbu	r2,0(r2)
      c0:	e0bfff45 	stb	r2,-3(fp)
		alt_printf("received char %c\n", result);
      c4:	e0bfff47 	ldb	r2,-3(fp)
      c8:	100b883a 	mov	r5,r2
      cc:	01000034 	movhi	r4,0
      d0:	21143204 	addi	r4,r4,20680
      d4:	00003440 	call	344 <alt_printf>
		*LED = result;
      d8:	008000b4 	movhi	r2,2
      dc:	10841804 	addi	r2,r2,4192
      e0:	e0ffff43 	ldbu	r3,-3(fp)
      e4:	10c00005 	stb	r3,0(r2)
      e8:	00002d06 	br	1a0 <main+0x144>
	} else {
		while(1){
			alt_printf("please write\n");
      ec:	01000034 	movhi	r4,0
      f0:	21143704 	addi	r4,r4,20700
      f4:	00003440 	call	344 <alt_printf>
			char data = alt_getchar();
      f8:	00001b80 	call	1b8 <alt_getchar>
      fc:	e0bfff85 	stb	r2,-2(fp)
			alt_getchar();
     100:	00001b80 	call	1b8 <alt_getchar>
			*(busout) = data;
     104:	008000b4 	movhi	r2,2
     108:	10841004 	addi	r2,r2,4160
     10c:	e0ffff83 	ldbu	r3,-2(fp)
     110:	10c00005 	stb	r3,0(r2)
			*(transmit) = 1;
     114:	008000b4 	movhi	r2,2
     118:	10840804 	addi	r2,r2,4128
     11c:	00c00044 	movi	r3,1
     120:	10c00005 	stb	r3,0(r2)
			usleep(1000);
     124:	0100fa04 	movi	r4,1000
     128:	00005e80 	call	5e8 <usleep>
			*(load) = 1;
     12c:	008000b4 	movhi	r2,2
     130:	10840c04 	addi	r2,r2,4144
     134:	00c00044 	movi	r3,1
     138:	10c00005 	stb	r3,0(r2)
			while(!charRec){}
     13c:	0001883a 	nop
			usleep(2000);
     140:	0101f404 	movi	r4,2000
     144:	00005e80 	call	5e8 <usleep>
			*(load) = 0;
     148:	008000b4 	movhi	r2,2
     14c:	10840c04 	addi	r2,r2,4144
     150:	10000005 	stb	zero,0(r2)
			*(transmit) = 0;
     154:	008000b4 	movhi	r2,2
     158:	10840804 	addi	r2,r2,4128
     15c:	10000005 	stb	zero,0(r2)

			// input is connected to our own output for test purpose
			char output = *(busin);
     160:	008000b4 	movhi	r2,2
     164:	10841404 	addi	r2,r2,4176
     168:	10800003 	ldbu	r2,0(r2)
     16c:	e0bfffc5 	stb	r2,-1(fp)
			*(LED) = *(busin);
     170:	008000b4 	movhi	r2,2
     174:	10841804 	addi	r2,r2,4192
     178:	00c000b4 	movhi	r3,2
     17c:	18c41404 	addi	r3,r3,4176
     180:	18c00003 	ldbu	r3,0(r3)
     184:	10c00005 	stb	r3,0(r2)
			alt_printf("data is %c\n", output);
     188:	e0bfffc7 	ldb	r2,-1(fp)
     18c:	100b883a 	mov	r5,r2
     190:	01000034 	movhi	r4,0
     194:	21143b04 	addi	r4,r4,20716
     198:	00003440 	call	344 <alt_printf>
		}
     19c:	003fd306 	br	ec <__alt_data_end+0xfffe7a4c>
	}

	return 0;
     1a0:	0005883a 	mov	r2,zero
}
     1a4:	e037883a 	mov	sp,fp
     1a8:	dfc00117 	ldw	ra,4(sp)
     1ac:	df000017 	ldw	fp,0(sp)
     1b0:	dec00204 	addi	sp,sp,8
     1b4:	f800283a 	ret

000001b8 <alt_getchar>:
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
     1b8:	defffe04 	addi	sp,sp,-8
     1bc:	dfc00115 	stw	ra,4(sp)
     1c0:	df000015 	stw	fp,0(sp)
     1c4:	d839883a 	mov	fp,sp
    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    }
    return c;
#else
    return getchar();
     1c8:	d0a00717 	ldw	r2,-32740(gp)
     1cc:	10800117 	ldw	r2,4(r2)
     1d0:	1009883a 	mov	r4,r2
     1d4:	00019bc0 	call	19bc <getc>
#endif
#endif
}
     1d8:	e037883a 	mov	sp,fp
     1dc:	dfc00117 	ldw	ra,4(sp)
     1e0:	df000017 	ldw	fp,0(sp)
     1e4:	dec00204 	addi	sp,sp,8
     1e8:	f800283a 	ret

000001ec <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     1ec:	defffc04 	addi	sp,sp,-16
     1f0:	df000315 	stw	fp,12(sp)
     1f4:	df000304 	addi	fp,sp,12
     1f8:	e13ffd15 	stw	r4,-12(fp)
     1fc:	e17ffe15 	stw	r5,-8(fp)
     200:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     204:	e0fffe17 	ldw	r3,-8(fp)
     208:	e0bffd17 	ldw	r2,-12(fp)
     20c:	18800c26 	beq	r3,r2,240 <alt_load_section+0x54>
  {
    while( to != end )
     210:	00000806 	br	234 <alt_load_section+0x48>
    {
      *to++ = *from++;
     214:	e0bffe17 	ldw	r2,-8(fp)
     218:	10c00104 	addi	r3,r2,4
     21c:	e0fffe15 	stw	r3,-8(fp)
     220:	e0fffd17 	ldw	r3,-12(fp)
     224:	19000104 	addi	r4,r3,4
     228:	e13ffd15 	stw	r4,-12(fp)
     22c:	18c00017 	ldw	r3,0(r3)
     230:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     234:	e0fffe17 	ldw	r3,-8(fp)
     238:	e0bfff17 	ldw	r2,-4(fp)
     23c:	18bff51e 	bne	r3,r2,214 <__alt_data_end+0xfffe7b74>
    {
      *to++ = *from++;
    }
  }
}
     240:	0001883a 	nop
     244:	e037883a 	mov	sp,fp
     248:	df000017 	ldw	fp,0(sp)
     24c:	dec00104 	addi	sp,sp,4
     250:	f800283a 	ret

00000254 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     254:	defffe04 	addi	sp,sp,-8
     258:	dfc00115 	stw	ra,4(sp)
     25c:	df000015 	stw	fp,0(sp)
     260:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     264:	01800034 	movhi	r6,0
     268:	3196d504 	addi	r6,r6,23380
     26c:	01400034 	movhi	r5,0
     270:	29544a04 	addi	r5,r5,20776
     274:	01000034 	movhi	r4,0
     278:	2116d504 	addi	r4,r4,23380
     27c:	00001ec0 	call	1ec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     280:	01800034 	movhi	r6,0
     284:	31800804 	addi	r6,r6,32
     288:	01400034 	movhi	r5,0
     28c:	29400804 	addi	r5,r5,32
     290:	01000034 	movhi	r4,0
     294:	21000804 	addi	r4,r4,32
     298:	00001ec0 	call	1ec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     29c:	01800034 	movhi	r6,0
     2a0:	31944a04 	addi	r6,r6,20776
     2a4:	01400034 	movhi	r5,0
     2a8:	29542104 	addi	r5,r5,20612
     2ac:	01000034 	movhi	r4,0
     2b0:	21142104 	addi	r4,r4,20612
     2b4:	00001ec0 	call	1ec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     2b8:	0000b640 	call	b64 <alt_dcache_flush_all>
  alt_icache_flush_all();
     2bc:	0000c900 	call	c90 <alt_icache_flush_all>
}
     2c0:	0001883a 	nop
     2c4:	e037883a 	mov	sp,fp
     2c8:	dfc00117 	ldw	ra,4(sp)
     2cc:	df000017 	ldw	fp,0(sp)
     2d0:	dec00204 	addi	sp,sp,8
     2d4:	f800283a 	ret

000002d8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     2d8:	defffd04 	addi	sp,sp,-12
     2dc:	dfc00215 	stw	ra,8(sp)
     2e0:	df000115 	stw	fp,4(sp)
     2e4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     2e8:	0009883a 	mov	r4,zero
     2ec:	000064c0 	call	64c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
     2f0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     2f4:	00006840 	call	684 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     2f8:	01800034 	movhi	r6,0
     2fc:	31943e04 	addi	r6,r6,20728
     300:	01400034 	movhi	r5,0
     304:	29543e04 	addi	r5,r5,20728
     308:	01000034 	movhi	r4,0
     30c:	21143e04 	addi	r4,r4,20728
     310:	0000d940 	call	d94 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     314:	d0a29617 	ldw	r2,-30120(gp)
     318:	d0e29717 	ldw	r3,-30116(gp)
     31c:	d1229817 	ldw	r4,-30112(gp)
     320:	200d883a 	mov	r6,r4
     324:	180b883a 	mov	r5,r3
     328:	1009883a 	mov	r4,r2
     32c:	000005c0 	call	5c <main>
     330:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     334:	01000044 	movi	r4,1
     338:	0000a8c0 	call	a8c <close>
  exit (result);
     33c:	e13fff17 	ldw	r4,-4(fp)
     340:	00013980 	call	1398 <exit>

00000344 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
     344:	defff204 	addi	sp,sp,-56
     348:	dfc00a15 	stw	ra,40(sp)
     34c:	df000915 	stw	fp,36(sp)
     350:	df000904 	addi	fp,sp,36
     354:	e13fff15 	stw	r4,-4(fp)
     358:	e1400215 	stw	r5,8(fp)
     35c:	e1800315 	stw	r6,12(fp)
     360:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
     364:	e0800204 	addi	r2,fp,8
     368:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
     36c:	e0bfff17 	ldw	r2,-4(fp)
     370:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
     374:	00006f06 	br	534 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
     378:	e0bff807 	ldb	r2,-32(fp)
     37c:	10800960 	cmpeqi	r2,r2,37
     380:	1000041e 	bne	r2,zero,394 <alt_printf+0x50>
        {
            alt_putchar(c);
     384:	e0bff807 	ldb	r2,-32(fp)
     388:	1009883a 	mov	r4,r2
     38c:	00005700 	call	570 <alt_putchar>
     390:	00006806 	br	534 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
     394:	e0bff717 	ldw	r2,-36(fp)
     398:	10c00044 	addi	r3,r2,1
     39c:	e0fff715 	stw	r3,-36(fp)
     3a0:	10800003 	ldbu	r2,0(r2)
     3a4:	e0bff805 	stb	r2,-32(fp)
     3a8:	e0bff807 	ldb	r2,-32(fp)
     3ac:	10006926 	beq	r2,zero,554 <alt_printf+0x210>
            {
                if (c == '%')
     3b0:	e0bff807 	ldb	r2,-32(fp)
     3b4:	10800958 	cmpnei	r2,r2,37
     3b8:	1000041e 	bne	r2,zero,3cc <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
     3bc:	e0bff807 	ldb	r2,-32(fp)
     3c0:	1009883a 	mov	r4,r2
     3c4:	00005700 	call	570 <alt_putchar>
     3c8:	00005a06 	br	534 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
     3cc:	e0bff807 	ldb	r2,-32(fp)
     3d0:	108018d8 	cmpnei	r2,r2,99
     3d4:	1000081e 	bne	r2,zero,3f8 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
     3d8:	e0bffe17 	ldw	r2,-8(fp)
     3dc:	10c00104 	addi	r3,r2,4
     3e0:	e0fffe15 	stw	r3,-8(fp)
     3e4:	10800017 	ldw	r2,0(r2)
     3e8:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
     3ec:	e13ffd17 	ldw	r4,-12(fp)
     3f0:	00005700 	call	570 <alt_putchar>
     3f4:	00004f06 	br	534 <alt_printf+0x1f0>
                }
                else if (c == 'x')
     3f8:	e0bff807 	ldb	r2,-32(fp)
     3fc:	10801e18 	cmpnei	r2,r2,120
     400:	1000341e 	bne	r2,zero,4d4 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
     404:	e0bffe17 	ldw	r2,-8(fp)
     408:	10c00104 	addi	r3,r2,4
     40c:	e0fffe15 	stw	r3,-8(fp)
     410:	10800017 	ldw	r2,0(r2)
     414:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
     418:	e0bffb17 	ldw	r2,-20(fp)
     41c:	1000031e 	bne	r2,zero,42c <alt_printf+0xe8>
                    {
                        alt_putchar('0');
     420:	01000c04 	movi	r4,48
     424:	00005700 	call	570 <alt_putchar>
                        continue;
     428:	00004206 	br	534 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
     42c:	00800704 	movi	r2,28
     430:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
     434:	00000306 	br	444 <alt_printf+0x100>
                        digit_shift -= 4;
     438:	e0bff917 	ldw	r2,-28(fp)
     43c:	10bfff04 	addi	r2,r2,-4
     440:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     444:	00c003c4 	movi	r3,15
     448:	e0bff917 	ldw	r2,-28(fp)
     44c:	1884983a 	sll	r2,r3,r2
     450:	1007883a 	mov	r3,r2
     454:	e0bffb17 	ldw	r2,-20(fp)
     458:	1884703a 	and	r2,r3,r2
     45c:	103ff626 	beq	r2,zero,438 <__alt_data_end+0xfffe7d98>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     460:	00001906 	br	4c8 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
     464:	00c003c4 	movi	r3,15
     468:	e0bff917 	ldw	r2,-28(fp)
     46c:	1884983a 	sll	r2,r3,r2
     470:	1007883a 	mov	r3,r2
     474:	e0bffb17 	ldw	r2,-20(fp)
     478:	1886703a 	and	r3,r3,r2
     47c:	e0bff917 	ldw	r2,-28(fp)
     480:	1884d83a 	srl	r2,r3,r2
     484:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
     488:	e0bffc17 	ldw	r2,-16(fp)
     48c:	108002a8 	cmpgeui	r2,r2,10
     490:	1000041e 	bne	r2,zero,4a4 <alt_printf+0x160>
                            c = '0' + digit;
     494:	e0bffc17 	ldw	r2,-16(fp)
     498:	10800c04 	addi	r2,r2,48
     49c:	e0bff805 	stb	r2,-32(fp)
     4a0:	00000306 	br	4b0 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
     4a4:	e0bffc17 	ldw	r2,-16(fp)
     4a8:	108015c4 	addi	r2,r2,87
     4ac:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
     4b0:	e0bff807 	ldb	r2,-32(fp)
     4b4:	1009883a 	mov	r4,r2
     4b8:	00005700 	call	570 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     4bc:	e0bff917 	ldw	r2,-28(fp)
     4c0:	10bfff04 	addi	r2,r2,-4
     4c4:	e0bff915 	stw	r2,-28(fp)
     4c8:	e0bff917 	ldw	r2,-28(fp)
     4cc:	103fe50e 	bge	r2,zero,464 <__alt_data_end+0xfffe7dc4>
     4d0:	00001806 	br	534 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
     4d4:	e0bff807 	ldb	r2,-32(fp)
     4d8:	10801cd8 	cmpnei	r2,r2,115
     4dc:	1000151e 	bne	r2,zero,534 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
     4e0:	e0bffe17 	ldw	r2,-8(fp)
     4e4:	10c00104 	addi	r3,r2,4
     4e8:	e0fffe15 	stw	r3,-8(fp)
     4ec:	10800017 	ldw	r2,0(r2)
     4f0:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
     4f4:	00000906 	br	51c <alt_printf+0x1d8>
                      alt_putchar(*s++);
     4f8:	e0bffa17 	ldw	r2,-24(fp)
     4fc:	10c00044 	addi	r3,r2,1
     500:	e0fffa15 	stw	r3,-24(fp)
     504:	10800003 	ldbu	r2,0(r2)
     508:	10803fcc 	andi	r2,r2,255
     50c:	1080201c 	xori	r2,r2,128
     510:	10bfe004 	addi	r2,r2,-128
     514:	1009883a 	mov	r4,r2
     518:	00005700 	call	570 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
     51c:	e0bffa17 	ldw	r2,-24(fp)
     520:	10800003 	ldbu	r2,0(r2)
     524:	10803fcc 	andi	r2,r2,255
     528:	1080201c 	xori	r2,r2,128
     52c:	10bfe004 	addi	r2,r2,-128
     530:	103ff11e 	bne	r2,zero,4f8 <__alt_data_end+0xfffe7e58>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     534:	e0bff717 	ldw	r2,-36(fp)
     538:	10c00044 	addi	r3,r2,1
     53c:	e0fff715 	stw	r3,-36(fp)
     540:	10800003 	ldbu	r2,0(r2)
     544:	e0bff805 	stb	r2,-32(fp)
     548:	e0bff807 	ldb	r2,-32(fp)
     54c:	103f8a1e 	bne	r2,zero,378 <__alt_data_end+0xfffe7cd8>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
     550:	00000106 	br	558 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
     554:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
     558:	0001883a 	nop
     55c:	e037883a 	mov	sp,fp
     560:	dfc00117 	ldw	ra,4(sp)
     564:	df000017 	ldw	fp,0(sp)
     568:	dec00504 	addi	sp,sp,20
     56c:	f800283a 	ret

00000570 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
     570:	defffd04 	addi	sp,sp,-12
     574:	dfc00215 	stw	ra,8(sp)
     578:	df000115 	stw	fp,4(sp)
     57c:	df000104 	addi	fp,sp,4
     580:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
     584:	d0a00717 	ldw	r2,-32740(gp)
     588:	10800217 	ldw	r2,8(r2)
     58c:	100b883a 	mov	r5,r2
     590:	e13fff17 	ldw	r4,-4(fp)
     594:	00026f40 	call	26f4 <putc>
#endif
#endif
}
     598:	e037883a 	mov	sp,fp
     59c:	dfc00117 	ldw	ra,4(sp)
     5a0:	df000017 	ldw	fp,0(sp)
     5a4:	dec00204 	addi	sp,sp,8
     5a8:	f800283a 	ret

000005ac <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
     5ac:	defffd04 	addi	sp,sp,-12
     5b0:	dfc00215 	stw	ra,8(sp)
     5b4:	df000115 	stw	fp,4(sp)
     5b8:	df000104 	addi	fp,sp,4
     5bc:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
     5c0:	d0a00717 	ldw	r2,-32740(gp)
     5c4:	10800217 	ldw	r2,8(r2)
     5c8:	100b883a 	mov	r5,r2
     5cc:	e13fff17 	ldw	r4,-4(fp)
     5d0:	000146c0 	call	146c <fputs>
#endif
#endif
}
     5d4:	e037883a 	mov	sp,fp
     5d8:	dfc00117 	ldw	ra,4(sp)
     5dc:	df000017 	ldw	fp,0(sp)
     5e0:	dec00204 	addi	sp,sp,8
     5e4:	f800283a 	ret

000005e8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
     5e8:	defffd04 	addi	sp,sp,-12
     5ec:	dfc00215 	stw	ra,8(sp)
     5f0:	df000115 	stw	fp,4(sp)
     5f4:	df000104 	addi	fp,sp,4
     5f8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
     5fc:	e13fff17 	ldw	r4,-4(fp)
     600:	00008f80 	call	8f8 <alt_busy_sleep>
}
     604:	e037883a 	mov	sp,fp
     608:	dfc00117 	ldw	ra,4(sp)
     60c:	df000017 	ldw	fp,0(sp)
     610:	dec00204 	addi	sp,sp,8
     614:	f800283a 	ret

00000618 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
     618:	defffd04 	addi	sp,sp,-12
     61c:	dfc00215 	stw	ra,8(sp)
     620:	df000115 	stw	fp,4(sp)
     624:	df000104 	addi	fp,sp,4
     628:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     62c:	d1600204 	addi	r5,gp,-32760
     630:	e13fff17 	ldw	r4,-4(fp)
     634:	0000bec0 	call	bec <alt_dev_llist_insert>
}
     638:	e037883a 	mov	sp,fp
     63c:	dfc00117 	ldw	ra,4(sp)
     640:	df000017 	ldw	fp,0(sp)
     644:	dec00204 	addi	sp,sp,8
     648:	f800283a 	ret

0000064c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     64c:	defffd04 	addi	sp,sp,-12
     650:	dfc00215 	stw	ra,8(sp)
     654:	df000115 	stw	fp,4(sp)
     658:	df000104 	addi	fp,sp,4
     65c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
     660:	00011180 	call	1118 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     664:	00800044 	movi	r2,1
     668:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     66c:	0001883a 	nop
     670:	e037883a 	mov	sp,fp
     674:	dfc00117 	ldw	ra,4(sp)
     678:	df000017 	ldw	fp,0(sp)
     67c:	dec00204 	addi	sp,sp,8
     680:	f800283a 	ret

00000684 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     684:	defffe04 	addi	sp,sp,-8
     688:	dfc00115 	stw	ra,4(sp)
     68c:	df000015 	stw	fp,0(sp)
     690:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
     694:	01000034 	movhi	r4,0
     698:	21144a04 	addi	r4,r4,20776
     69c:	00006180 	call	618 <alt_dev_reg>
}
     6a0:	0001883a 	nop
     6a4:	e037883a 	mov	sp,fp
     6a8:	dfc00117 	ldw	ra,4(sp)
     6ac:	df000017 	ldw	fp,0(sp)
     6b0:	dec00204 	addi	sp,sp,8
     6b4:	f800283a 	ret

000006b8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     6b8:	defffa04 	addi	sp,sp,-24
     6bc:	dfc00515 	stw	ra,20(sp)
     6c0:	df000415 	stw	fp,16(sp)
     6c4:	df000404 	addi	fp,sp,16
     6c8:	e13ffd15 	stw	r4,-12(fp)
     6cc:	e17ffe15 	stw	r5,-8(fp)
     6d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     6d4:	e0bffd17 	ldw	r2,-12(fp)
     6d8:	10800017 	ldw	r2,0(r2)
     6dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     6e0:	e0bffc17 	ldw	r2,-16(fp)
     6e4:	10c00a04 	addi	r3,r2,40
     6e8:	e0bffd17 	ldw	r2,-12(fp)
     6ec:	10800217 	ldw	r2,8(r2)
     6f0:	100f883a 	mov	r7,r2
     6f4:	e1bfff17 	ldw	r6,-4(fp)
     6f8:	e17ffe17 	ldw	r5,-8(fp)
     6fc:	1809883a 	mov	r4,r3
     700:	00007780 	call	778 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     704:	e037883a 	mov	sp,fp
     708:	dfc00117 	ldw	ra,4(sp)
     70c:	df000017 	ldw	fp,0(sp)
     710:	dec00204 	addi	sp,sp,8
     714:	f800283a 	ret

00000718 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     718:	defffa04 	addi	sp,sp,-24
     71c:	dfc00515 	stw	ra,20(sp)
     720:	df000415 	stw	fp,16(sp)
     724:	df000404 	addi	fp,sp,16
     728:	e13ffd15 	stw	r4,-12(fp)
     72c:	e17ffe15 	stw	r5,-8(fp)
     730:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     734:	e0bffd17 	ldw	r2,-12(fp)
     738:	10800017 	ldw	r2,0(r2)
     73c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     740:	e0bffc17 	ldw	r2,-16(fp)
     744:	10c00a04 	addi	r3,r2,40
     748:	e0bffd17 	ldw	r2,-12(fp)
     74c:	10800217 	ldw	r2,8(r2)
     750:	100f883a 	mov	r7,r2
     754:	e1bfff17 	ldw	r6,-4(fp)
     758:	e17ffe17 	ldw	r5,-8(fp)
     75c:	1809883a 	mov	r4,r3
     760:	00008640 	call	864 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     764:	e037883a 	mov	sp,fp
     768:	dfc00117 	ldw	ra,4(sp)
     76c:	df000017 	ldw	fp,0(sp)
     770:	dec00204 	addi	sp,sp,8
     774:	f800283a 	ret

00000778 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
     778:	defff704 	addi	sp,sp,-36
     77c:	df000815 	stw	fp,32(sp)
     780:	df000804 	addi	fp,sp,32
     784:	e13ffc15 	stw	r4,-16(fp)
     788:	e17ffd15 	stw	r5,-12(fp)
     78c:	e1bffe15 	stw	r6,-8(fp)
     790:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
     794:	e0bffc17 	ldw	r2,-16(fp)
     798:	10800017 	ldw	r2,0(r2)
     79c:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
     7a0:	e0bffd17 	ldw	r2,-12(fp)
     7a4:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
     7a8:	e0bffe17 	ldw	r2,-8(fp)
     7ac:	e0fffd17 	ldw	r3,-12(fp)
     7b0:	1885883a 	add	r2,r3,r2
     7b4:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
     7b8:	00001206 	br	804 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     7bc:	e0bff917 	ldw	r2,-28(fp)
     7c0:	10800037 	ldwio	r2,0(r2)
     7c4:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
     7c8:	e0bffb17 	ldw	r2,-20(fp)
     7cc:	10a0000c 	andi	r2,r2,32768
     7d0:	10000626 	beq	r2,zero,7ec <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     7d4:	e0bff817 	ldw	r2,-32(fp)
     7d8:	10c00044 	addi	r3,r2,1
     7dc:	e0fff815 	stw	r3,-32(fp)
     7e0:	e0fffb17 	ldw	r3,-20(fp)
     7e4:	10c00005 	stb	r3,0(r2)
     7e8:	00000606 	br	804 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
     7ec:	e0fff817 	ldw	r3,-32(fp)
     7f0:	e0bffd17 	ldw	r2,-12(fp)
     7f4:	1880071e 	bne	r3,r2,814 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
     7f8:	e0bfff17 	ldw	r2,-4(fp)
     7fc:	1090000c 	andi	r2,r2,16384
     800:	1000061e 	bne	r2,zero,81c <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
     804:	e0fff817 	ldw	r3,-32(fp)
     808:	e0bffa17 	ldw	r2,-24(fp)
     80c:	18bfeb36 	bltu	r3,r2,7bc <__alt_data_end+0xfffe811c>
     810:	00000306 	br	820 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
     814:	0001883a 	nop
     818:	00000106 	br	820 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
     81c:	0001883a 	nop
    
  }

  if (ptr != buffer)
     820:	e0fff817 	ldw	r3,-32(fp)
     824:	e0bffd17 	ldw	r2,-12(fp)
     828:	18800426 	beq	r3,r2,83c <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
     82c:	e0fff817 	ldw	r3,-32(fp)
     830:	e0bffd17 	ldw	r2,-12(fp)
     834:	1885c83a 	sub	r2,r3,r2
     838:	00000606 	br	854 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
     83c:	e0bfff17 	ldw	r2,-4(fp)
     840:	1090000c 	andi	r2,r2,16384
     844:	10000226 	beq	r2,zero,850 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
     848:	00bffd44 	movi	r2,-11
     84c:	00000106 	br	854 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
     850:	00bffec4 	movi	r2,-5
}
     854:	e037883a 	mov	sp,fp
     858:	df000017 	ldw	fp,0(sp)
     85c:	dec00104 	addi	sp,sp,4
     860:	f800283a 	ret

00000864 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
     864:	defff904 	addi	sp,sp,-28
     868:	df000615 	stw	fp,24(sp)
     86c:	df000604 	addi	fp,sp,24
     870:	e13ffc15 	stw	r4,-16(fp)
     874:	e17ffd15 	stw	r5,-12(fp)
     878:	e1bffe15 	stw	r6,-8(fp)
     87c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
     880:	e0bffc17 	ldw	r2,-16(fp)
     884:	10800017 	ldw	r2,0(r2)
     888:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
     88c:	e0bffe17 	ldw	r2,-8(fp)
     890:	e0fffd17 	ldw	r3,-12(fp)
     894:	1885883a 	add	r2,r3,r2
     898:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
     89c:	00000e06 	br	8d8 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
     8a0:	e0bffa17 	ldw	r2,-24(fp)
     8a4:	10800104 	addi	r2,r2,4
     8a8:	10800037 	ldwio	r2,0(r2)
     8ac:	10bfffec 	andhi	r2,r2,65535
     8b0:	10000926 	beq	r2,zero,8d8 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
     8b4:	e0fffa17 	ldw	r3,-24(fp)
     8b8:	e0bffd17 	ldw	r2,-12(fp)
     8bc:	11000044 	addi	r4,r2,1
     8c0:	e13ffd15 	stw	r4,-12(fp)
     8c4:	10800003 	ldbu	r2,0(r2)
     8c8:	10803fcc 	andi	r2,r2,255
     8cc:	1080201c 	xori	r2,r2,128
     8d0:	10bfe004 	addi	r2,r2,-128
     8d4:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
     8d8:	e0fffd17 	ldw	r3,-12(fp)
     8dc:	e0bffb17 	ldw	r2,-20(fp)
     8e0:	18bfef36 	bltu	r3,r2,8a0 <__alt_data_end+0xfffe8200>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
     8e4:	e0bffe17 	ldw	r2,-8(fp)
}
     8e8:	e037883a 	mov	sp,fp
     8ec:	df000017 	ldw	fp,0(sp)
     8f0:	dec00104 	addi	sp,sp,4
     8f4:	f800283a 	ret

000008f8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
     8f8:	defffa04 	addi	sp,sp,-24
     8fc:	dfc00515 	stw	ra,20(sp)
     900:	df000415 	stw	fp,16(sp)
     904:	df000404 	addi	fp,sp,16
     908:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
     90c:	00800244 	movi	r2,9
     910:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
     914:	014003f4 	movhi	r5,15
     918:	29509004 	addi	r5,r5,16960
     91c:	e13ffd17 	ldw	r4,-12(fp)
     920:	00049c00 	call	49c0 <__mulsi3>
     924:	100b883a 	mov	r5,r2
     928:	0100bef4 	movhi	r4,763
     92c:	213c2004 	addi	r4,r4,-3968
     930:	00049040 	call	4904 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
     934:	100b883a 	mov	r5,r2
     938:	01200034 	movhi	r4,32768
     93c:	213fffc4 	addi	r4,r4,-1
     940:	00049040 	call	4904 <__udivsi3>
     944:	100b883a 	mov	r5,r2
     948:	e13fff17 	ldw	r4,-4(fp)
     94c:	00049040 	call	4904 <__udivsi3>
     950:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
     954:	e0bffe17 	ldw	r2,-8(fp)
     958:	10002a26 	beq	r2,zero,a04 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
     95c:	e03ffc15 	stw	zero,-16(fp)
     960:	00001706 	br	9c0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
     964:	00a00034 	movhi	r2,32768
     968:	10bfffc4 	addi	r2,r2,-1
     96c:	10bfffc4 	addi	r2,r2,-1
     970:	103ffe1e 	bne	r2,zero,96c <__alt_data_end+0xfffe82cc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
     974:	014003f4 	movhi	r5,15
     978:	29509004 	addi	r5,r5,16960
     97c:	e13ffd17 	ldw	r4,-12(fp)
     980:	00049c00 	call	49c0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
     984:	100b883a 	mov	r5,r2
     988:	0100bef4 	movhi	r4,763
     98c:	213c2004 	addi	r4,r4,-3968
     990:	00049040 	call	4904 <__udivsi3>
     994:	100b883a 	mov	r5,r2
     998:	01200034 	movhi	r4,32768
     99c:	213fffc4 	addi	r4,r4,-1
     9a0:	00049040 	call	4904 <__udivsi3>
     9a4:	1007883a 	mov	r3,r2
     9a8:	e0bfff17 	ldw	r2,-4(fp)
     9ac:	10c5c83a 	sub	r2,r2,r3
     9b0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
     9b4:	e0bffc17 	ldw	r2,-16(fp)
     9b8:	10800044 	addi	r2,r2,1
     9bc:	e0bffc15 	stw	r2,-16(fp)
     9c0:	e0fffc17 	ldw	r3,-16(fp)
     9c4:	e0bffe17 	ldw	r2,-8(fp)
     9c8:	18bfe616 	blt	r3,r2,964 <__alt_data_end+0xfffe82c4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     9cc:	014003f4 	movhi	r5,15
     9d0:	29509004 	addi	r5,r5,16960
     9d4:	e13ffd17 	ldw	r4,-12(fp)
     9d8:	00049c00 	call	49c0 <__mulsi3>
     9dc:	100b883a 	mov	r5,r2
     9e0:	0100bef4 	movhi	r4,763
     9e4:	213c2004 	addi	r4,r4,-3968
     9e8:	00049040 	call	4904 <__udivsi3>
     9ec:	e17fff17 	ldw	r5,-4(fp)
     9f0:	1009883a 	mov	r4,r2
     9f4:	00049c00 	call	49c0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
     9f8:	10bfffc4 	addi	r2,r2,-1
     9fc:	103ffe1e 	bne	r2,zero,9f8 <__alt_data_end+0xfffe8358>
     a00:	00000d06 	br	a38 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     a04:	014003f4 	movhi	r5,15
     a08:	29509004 	addi	r5,r5,16960
     a0c:	e13ffd17 	ldw	r4,-12(fp)
     a10:	00049c00 	call	49c0 <__mulsi3>
     a14:	100b883a 	mov	r5,r2
     a18:	0100bef4 	movhi	r4,763
     a1c:	213c2004 	addi	r4,r4,-3968
     a20:	00049040 	call	4904 <__udivsi3>
     a24:	e17fff17 	ldw	r5,-4(fp)
     a28:	1009883a 	mov	r4,r2
     a2c:	00049c00 	call	49c0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
     a30:	10bfffc4 	addi	r2,r2,-1
     a34:	00bffe16 	blt	zero,r2,a30 <__alt_data_end+0xfffe8390>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
     a38:	0005883a 	mov	r2,zero
}
     a3c:	e037883a 	mov	sp,fp
     a40:	dfc00117 	ldw	ra,4(sp)
     a44:	df000017 	ldw	fp,0(sp)
     a48:	dec00204 	addi	sp,sp,8
     a4c:	f800283a 	ret

00000a50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
     a50:	defffe04 	addi	sp,sp,-8
     a54:	dfc00115 	stw	ra,4(sp)
     a58:	df000015 	stw	fp,0(sp)
     a5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
     a60:	d0a00517 	ldw	r2,-32748(gp)
     a64:	10000326 	beq	r2,zero,a74 <alt_get_errno+0x24>
     a68:	d0a00517 	ldw	r2,-32748(gp)
     a6c:	103ee83a 	callr	r2
     a70:	00000106 	br	a78 <alt_get_errno+0x28>
     a74:	d0a29904 	addi	r2,gp,-30108
}
     a78:	e037883a 	mov	sp,fp
     a7c:	dfc00117 	ldw	ra,4(sp)
     a80:	df000017 	ldw	fp,0(sp)
     a84:	dec00204 	addi	sp,sp,8
     a88:	f800283a 	ret

00000a8c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
     a8c:	defffb04 	addi	sp,sp,-20
     a90:	dfc00415 	stw	ra,16(sp)
     a94:	df000315 	stw	fp,12(sp)
     a98:	df000304 	addi	fp,sp,12
     a9c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
     aa0:	e0bfff17 	ldw	r2,-4(fp)
     aa4:	10000816 	blt	r2,zero,ac8 <close+0x3c>
     aa8:	01400304 	movi	r5,12
     aac:	e13fff17 	ldw	r4,-4(fp)
     ab0:	00049c00 	call	49c0 <__mulsi3>
     ab4:	1007883a 	mov	r3,r2
     ab8:	00800034 	movhi	r2,0
     abc:	10945f04 	addi	r2,r2,20860
     ac0:	1885883a 	add	r2,r3,r2
     ac4:	00000106 	br	acc <close+0x40>
     ac8:	0005883a 	mov	r2,zero
     acc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
     ad0:	e0bffd17 	ldw	r2,-12(fp)
     ad4:	10001926 	beq	r2,zero,b3c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
     ad8:	e0bffd17 	ldw	r2,-12(fp)
     adc:	10800017 	ldw	r2,0(r2)
     ae0:	10800417 	ldw	r2,16(r2)
     ae4:	10000626 	beq	r2,zero,b00 <close+0x74>
     ae8:	e0bffd17 	ldw	r2,-12(fp)
     aec:	10800017 	ldw	r2,0(r2)
     af0:	10800417 	ldw	r2,16(r2)
     af4:	e13ffd17 	ldw	r4,-12(fp)
     af8:	103ee83a 	callr	r2
     afc:	00000106 	br	b04 <close+0x78>
     b00:	0005883a 	mov	r2,zero
     b04:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
     b08:	e13fff17 	ldw	r4,-4(fp)
     b0c:	00010940 	call	1094 <alt_release_fd>
    if (rval < 0)
     b10:	e0bffe17 	ldw	r2,-8(fp)
     b14:	1000070e 	bge	r2,zero,b34 <close+0xa8>
    {
      ALT_ERRNO = -rval;
     b18:	0000a500 	call	a50 <alt_get_errno>
     b1c:	1007883a 	mov	r3,r2
     b20:	e0bffe17 	ldw	r2,-8(fp)
     b24:	0085c83a 	sub	r2,zero,r2
     b28:	18800015 	stw	r2,0(r3)
      return -1;
     b2c:	00bfffc4 	movi	r2,-1
     b30:	00000706 	br	b50 <close+0xc4>
    }
    return 0;
     b34:	0005883a 	mov	r2,zero
     b38:	00000506 	br	b50 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
     b3c:	0000a500 	call	a50 <alt_get_errno>
     b40:	1007883a 	mov	r3,r2
     b44:	00801444 	movi	r2,81
     b48:	18800015 	stw	r2,0(r3)
    return -1;
     b4c:	00bfffc4 	movi	r2,-1
  }
}
     b50:	e037883a 	mov	sp,fp
     b54:	dfc00117 	ldw	ra,4(sp)
     b58:	df000017 	ldw	fp,0(sp)
     b5c:	dec00204 	addi	sp,sp,8
     b60:	f800283a 	ret

00000b64 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
     b64:	deffff04 	addi	sp,sp,-4
     b68:	df000015 	stw	fp,0(sp)
     b6c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
     b70:	0001883a 	nop
     b74:	e037883a 	mov	sp,fp
     b78:	df000017 	ldw	fp,0(sp)
     b7c:	dec00104 	addi	sp,sp,4
     b80:	f800283a 	ret

00000b84 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
     b84:	defffc04 	addi	sp,sp,-16
     b88:	df000315 	stw	fp,12(sp)
     b8c:	df000304 	addi	fp,sp,12
     b90:	e13ffd15 	stw	r4,-12(fp)
     b94:	e17ffe15 	stw	r5,-8(fp)
     b98:	e1bfff15 	stw	r6,-4(fp)
  return len;
     b9c:	e0bfff17 	ldw	r2,-4(fp)
}
     ba0:	e037883a 	mov	sp,fp
     ba4:	df000017 	ldw	fp,0(sp)
     ba8:	dec00104 	addi	sp,sp,4
     bac:	f800283a 	ret

00000bb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
     bb0:	defffe04 	addi	sp,sp,-8
     bb4:	dfc00115 	stw	ra,4(sp)
     bb8:	df000015 	stw	fp,0(sp)
     bbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
     bc0:	d0a00517 	ldw	r2,-32748(gp)
     bc4:	10000326 	beq	r2,zero,bd4 <alt_get_errno+0x24>
     bc8:	d0a00517 	ldw	r2,-32748(gp)
     bcc:	103ee83a 	callr	r2
     bd0:	00000106 	br	bd8 <alt_get_errno+0x28>
     bd4:	d0a29904 	addi	r2,gp,-30108
}
     bd8:	e037883a 	mov	sp,fp
     bdc:	dfc00117 	ldw	ra,4(sp)
     be0:	df000017 	ldw	fp,0(sp)
     be4:	dec00204 	addi	sp,sp,8
     be8:	f800283a 	ret

00000bec <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
     bec:	defffa04 	addi	sp,sp,-24
     bf0:	dfc00515 	stw	ra,20(sp)
     bf4:	df000415 	stw	fp,16(sp)
     bf8:	df000404 	addi	fp,sp,16
     bfc:	e13ffe15 	stw	r4,-8(fp)
     c00:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
     c04:	e0bffe17 	ldw	r2,-8(fp)
     c08:	10000326 	beq	r2,zero,c18 <alt_dev_llist_insert+0x2c>
     c0c:	e0bffe17 	ldw	r2,-8(fp)
     c10:	10800217 	ldw	r2,8(r2)
     c14:	1000061e 	bne	r2,zero,c30 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
     c18:	0000bb00 	call	bb0 <alt_get_errno>
     c1c:	1007883a 	mov	r3,r2
     c20:	00800584 	movi	r2,22
     c24:	18800015 	stw	r2,0(r3)
    return -EINVAL;
     c28:	00bffa84 	movi	r2,-22
     c2c:	00001306 	br	c7c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
     c30:	e0bffe17 	ldw	r2,-8(fp)
     c34:	e0ffff17 	ldw	r3,-4(fp)
     c38:	e0fffc15 	stw	r3,-16(fp)
     c3c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
     c40:	e0bffd17 	ldw	r2,-12(fp)
     c44:	e0fffc17 	ldw	r3,-16(fp)
     c48:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
     c4c:	e0bffc17 	ldw	r2,-16(fp)
     c50:	10c00017 	ldw	r3,0(r2)
     c54:	e0bffd17 	ldw	r2,-12(fp)
     c58:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
     c5c:	e0bffc17 	ldw	r2,-16(fp)
     c60:	10800017 	ldw	r2,0(r2)
     c64:	e0fffd17 	ldw	r3,-12(fp)
     c68:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
     c6c:	e0bffc17 	ldw	r2,-16(fp)
     c70:	e0fffd17 	ldw	r3,-12(fp)
     c74:	10c00015 	stw	r3,0(r2)

  return 0;  
     c78:	0005883a 	mov	r2,zero
}
     c7c:	e037883a 	mov	sp,fp
     c80:	dfc00117 	ldw	ra,4(sp)
     c84:	df000017 	ldw	fp,0(sp)
     c88:	dec00204 	addi	sp,sp,8
     c8c:	f800283a 	ret

00000c90 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
     c90:	deffff04 	addi	sp,sp,-4
     c94:	df000015 	stw	fp,0(sp)
     c98:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
     c9c:	0001883a 	nop
     ca0:	e037883a 	mov	sp,fp
     ca4:	df000017 	ldw	fp,0(sp)
     ca8:	dec00104 	addi	sp,sp,4
     cac:	f800283a 	ret

00000cb0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
     cb0:	defff804 	addi	sp,sp,-32
     cb4:	dfc00715 	stw	ra,28(sp)
     cb8:	df000615 	stw	fp,24(sp)
     cbc:	dc000515 	stw	r16,20(sp)
     cc0:	df000604 	addi	fp,sp,24
     cc4:	e13ffb15 	stw	r4,-20(fp)
     cc8:	e17ffc15 	stw	r5,-16(fp)
     ccc:	e1bffd15 	stw	r6,-12(fp)
     cd0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
     cd4:	e1bffe17 	ldw	r6,-8(fp)
     cd8:	e17ffd17 	ldw	r5,-12(fp)
     cdc:	e13ffc17 	ldw	r4,-16(fp)
     ce0:	0000f380 	call	f38 <open>
     ce4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
     ce8:	e0bffa17 	ldw	r2,-24(fp)
     cec:	10002216 	blt	r2,zero,d78 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
     cf0:	04000034 	movhi	r16,0
     cf4:	84145f04 	addi	r16,r16,20860
     cf8:	e0bffa17 	ldw	r2,-24(fp)
     cfc:	01400304 	movi	r5,12
     d00:	1009883a 	mov	r4,r2
     d04:	00049c00 	call	49c0 <__mulsi3>
     d08:	8085883a 	add	r2,r16,r2
     d0c:	10c00017 	ldw	r3,0(r2)
     d10:	e0bffb17 	ldw	r2,-20(fp)
     d14:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
     d18:	04000034 	movhi	r16,0
     d1c:	84145f04 	addi	r16,r16,20860
     d20:	e0bffa17 	ldw	r2,-24(fp)
     d24:	01400304 	movi	r5,12
     d28:	1009883a 	mov	r4,r2
     d2c:	00049c00 	call	49c0 <__mulsi3>
     d30:	8085883a 	add	r2,r16,r2
     d34:	10800104 	addi	r2,r2,4
     d38:	10c00017 	ldw	r3,0(r2)
     d3c:	e0bffb17 	ldw	r2,-20(fp)
     d40:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
     d44:	04000034 	movhi	r16,0
     d48:	84145f04 	addi	r16,r16,20860
     d4c:	e0bffa17 	ldw	r2,-24(fp)
     d50:	01400304 	movi	r5,12
     d54:	1009883a 	mov	r4,r2
     d58:	00049c00 	call	49c0 <__mulsi3>
     d5c:	8085883a 	add	r2,r16,r2
     d60:	10800204 	addi	r2,r2,8
     d64:	10c00017 	ldw	r3,0(r2)
     d68:	e0bffb17 	ldw	r2,-20(fp)
     d6c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
     d70:	e13ffa17 	ldw	r4,-24(fp)
     d74:	00010940 	call	1094 <alt_release_fd>
  }
} 
     d78:	0001883a 	nop
     d7c:	e6ffff04 	addi	sp,fp,-4
     d80:	dfc00217 	ldw	ra,8(sp)
     d84:	df000117 	ldw	fp,4(sp)
     d88:	dc000017 	ldw	r16,0(sp)
     d8c:	dec00304 	addi	sp,sp,12
     d90:	f800283a 	ret

00000d94 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
     d94:	defffb04 	addi	sp,sp,-20
     d98:	dfc00415 	stw	ra,16(sp)
     d9c:	df000315 	stw	fp,12(sp)
     da0:	df000304 	addi	fp,sp,12
     da4:	e13ffd15 	stw	r4,-12(fp)
     da8:	e17ffe15 	stw	r5,-8(fp)
     dac:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
     db0:	01c07fc4 	movi	r7,511
     db4:	01800044 	movi	r6,1
     db8:	e17ffd17 	ldw	r5,-12(fp)
     dbc:	01000034 	movhi	r4,0
     dc0:	21146204 	addi	r4,r4,20872
     dc4:	0000cb00 	call	cb0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
     dc8:	01c07fc4 	movi	r7,511
     dcc:	000d883a 	mov	r6,zero
     dd0:	e17ffe17 	ldw	r5,-8(fp)
     dd4:	01000034 	movhi	r4,0
     dd8:	21145f04 	addi	r4,r4,20860
     ddc:	0000cb00 	call	cb0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
     de0:	01c07fc4 	movi	r7,511
     de4:	01800044 	movi	r6,1
     de8:	e17fff17 	ldw	r5,-4(fp)
     dec:	01000034 	movhi	r4,0
     df0:	21146504 	addi	r4,r4,20884
     df4:	0000cb00 	call	cb0 <alt_open_fd>
}  
     df8:	0001883a 	nop
     dfc:	e037883a 	mov	sp,fp
     e00:	dfc00117 	ldw	ra,4(sp)
     e04:	df000017 	ldw	fp,0(sp)
     e08:	dec00204 	addi	sp,sp,8
     e0c:	f800283a 	ret

00000e10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
     e10:	defffe04 	addi	sp,sp,-8
     e14:	dfc00115 	stw	ra,4(sp)
     e18:	df000015 	stw	fp,0(sp)
     e1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
     e20:	d0a00517 	ldw	r2,-32748(gp)
     e24:	10000326 	beq	r2,zero,e34 <alt_get_errno+0x24>
     e28:	d0a00517 	ldw	r2,-32748(gp)
     e2c:	103ee83a 	callr	r2
     e30:	00000106 	br	e38 <alt_get_errno+0x28>
     e34:	d0a29904 	addi	r2,gp,-30108
}
     e38:	e037883a 	mov	sp,fp
     e3c:	dfc00117 	ldw	ra,4(sp)
     e40:	df000017 	ldw	fp,0(sp)
     e44:	dec00204 	addi	sp,sp,8
     e48:	f800283a 	ret

00000e4c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
     e4c:	defffb04 	addi	sp,sp,-20
     e50:	dfc00415 	stw	ra,16(sp)
     e54:	df000315 	stw	fp,12(sp)
     e58:	dc000215 	stw	r16,8(sp)
     e5c:	df000304 	addi	fp,sp,12
     e60:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
     e64:	e0bffe17 	ldw	r2,-8(fp)
     e68:	10800217 	ldw	r2,8(r2)
     e6c:	10d00034 	orhi	r3,r2,16384
     e70:	e0bffe17 	ldw	r2,-8(fp)
     e74:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
     e78:	e03ffd15 	stw	zero,-12(fp)
     e7c:	00002306 	br	f0c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
     e80:	04000034 	movhi	r16,0
     e84:	84145f04 	addi	r16,r16,20860
     e88:	e0bffd17 	ldw	r2,-12(fp)
     e8c:	01400304 	movi	r5,12
     e90:	1009883a 	mov	r4,r2
     e94:	00049c00 	call	49c0 <__mulsi3>
     e98:	8085883a 	add	r2,r16,r2
     e9c:	10c00017 	ldw	r3,0(r2)
     ea0:	e0bffe17 	ldw	r2,-8(fp)
     ea4:	10800017 	ldw	r2,0(r2)
     ea8:	1880151e 	bne	r3,r2,f00 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
     eac:	04000034 	movhi	r16,0
     eb0:	84145f04 	addi	r16,r16,20860
     eb4:	e0bffd17 	ldw	r2,-12(fp)
     eb8:	01400304 	movi	r5,12
     ebc:	1009883a 	mov	r4,r2
     ec0:	00049c00 	call	49c0 <__mulsi3>
     ec4:	8085883a 	add	r2,r16,r2
     ec8:	10800204 	addi	r2,r2,8
     ecc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
     ed0:	10000b0e 	bge	r2,zero,f00 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
     ed4:	01400304 	movi	r5,12
     ed8:	e13ffd17 	ldw	r4,-12(fp)
     edc:	00049c00 	call	49c0 <__mulsi3>
     ee0:	1007883a 	mov	r3,r2
     ee4:	00800034 	movhi	r2,0
     ee8:	10945f04 	addi	r2,r2,20860
     eec:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
     ef0:	e0bffe17 	ldw	r2,-8(fp)
     ef4:	18800226 	beq	r3,r2,f00 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
     ef8:	00bffcc4 	movi	r2,-13
     efc:	00000806 	br	f20 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
     f00:	e0bffd17 	ldw	r2,-12(fp)
     f04:	10800044 	addi	r2,r2,1
     f08:	e0bffd15 	stw	r2,-12(fp)
     f0c:	d0a00417 	ldw	r2,-32752(gp)
     f10:	1007883a 	mov	r3,r2
     f14:	e0bffd17 	ldw	r2,-12(fp)
     f18:	18bfd92e 	bgeu	r3,r2,e80 <__alt_data_end+0xfffe87e0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
     f1c:	0005883a 	mov	r2,zero
}
     f20:	e6ffff04 	addi	sp,fp,-4
     f24:	dfc00217 	ldw	ra,8(sp)
     f28:	df000117 	ldw	fp,4(sp)
     f2c:	dc000017 	ldw	r16,0(sp)
     f30:	dec00304 	addi	sp,sp,12
     f34:	f800283a 	ret

00000f38 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
     f38:	defff604 	addi	sp,sp,-40
     f3c:	dfc00915 	stw	ra,36(sp)
     f40:	df000815 	stw	fp,32(sp)
     f44:	df000804 	addi	fp,sp,32
     f48:	e13ffd15 	stw	r4,-12(fp)
     f4c:	e17ffe15 	stw	r5,-8(fp)
     f50:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
     f54:	00bfffc4 	movi	r2,-1
     f58:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
     f5c:	00bffb44 	movi	r2,-19
     f60:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
     f64:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
     f68:	d1600204 	addi	r5,gp,-32760
     f6c:	e13ffd17 	ldw	r4,-12(fp)
     f70:	000113c0 	call	113c <alt_find_dev>
     f74:	e0bff815 	stw	r2,-32(fp)
     f78:	e0bff817 	ldw	r2,-32(fp)
     f7c:	1000051e 	bne	r2,zero,f94 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
     f80:	e13ffd17 	ldw	r4,-12(fp)
     f84:	00011cc0 	call	11cc <alt_find_file>
     f88:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
     f8c:	00800044 	movi	r2,1
     f90:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
     f94:	e0bff817 	ldw	r2,-32(fp)
     f98:	10002b26 	beq	r2,zero,1048 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
     f9c:	e13ff817 	ldw	r4,-32(fp)
     fa0:	00012d40 	call	12d4 <alt_get_fd>
     fa4:	e0bff915 	stw	r2,-28(fp)
     fa8:	e0bff917 	ldw	r2,-28(fp)
     fac:	1000030e 	bge	r2,zero,fbc <open+0x84>
    {
      status = index;
     fb0:	e0bff917 	ldw	r2,-28(fp)
     fb4:	e0bffa15 	stw	r2,-24(fp)
     fb8:	00002506 	br	1050 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
     fbc:	01400304 	movi	r5,12
     fc0:	e13ff917 	ldw	r4,-28(fp)
     fc4:	00049c00 	call	49c0 <__mulsi3>
     fc8:	1007883a 	mov	r3,r2
     fcc:	00800034 	movhi	r2,0
     fd0:	10945f04 	addi	r2,r2,20860
     fd4:	1885883a 	add	r2,r3,r2
     fd8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
     fdc:	e0fffe17 	ldw	r3,-8(fp)
     fe0:	00900034 	movhi	r2,16384
     fe4:	10bfffc4 	addi	r2,r2,-1
     fe8:	1886703a 	and	r3,r3,r2
     fec:	e0bffc17 	ldw	r2,-16(fp)
     ff0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
     ff4:	e0bffb17 	ldw	r2,-20(fp)
     ff8:	1000051e 	bne	r2,zero,1010 <open+0xd8>
     ffc:	e13ffc17 	ldw	r4,-16(fp)
    1000:	0000e4c0 	call	e4c <alt_file_locked>
    1004:	e0bffa15 	stw	r2,-24(fp)
    1008:	e0bffa17 	ldw	r2,-24(fp)
    100c:	10001016 	blt	r2,zero,1050 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    1010:	e0bff817 	ldw	r2,-32(fp)
    1014:	10800317 	ldw	r2,12(r2)
    1018:	10000826 	beq	r2,zero,103c <open+0x104>
    101c:	e0bff817 	ldw	r2,-32(fp)
    1020:	10800317 	ldw	r2,12(r2)
    1024:	e1ffff17 	ldw	r7,-4(fp)
    1028:	e1bffe17 	ldw	r6,-8(fp)
    102c:	e17ffd17 	ldw	r5,-12(fp)
    1030:	e13ffc17 	ldw	r4,-16(fp)
    1034:	103ee83a 	callr	r2
    1038:	00000106 	br	1040 <open+0x108>
    103c:	0005883a 	mov	r2,zero
    1040:	e0bffa15 	stw	r2,-24(fp)
    1044:	00000206 	br	1050 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    1048:	00bffb44 	movi	r2,-19
    104c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    1050:	e0bffa17 	ldw	r2,-24(fp)
    1054:	1000090e 	bge	r2,zero,107c <open+0x144>
  {
    alt_release_fd (index);  
    1058:	e13ff917 	ldw	r4,-28(fp)
    105c:	00010940 	call	1094 <alt_release_fd>
    ALT_ERRNO = -status;
    1060:	0000e100 	call	e10 <alt_get_errno>
    1064:	1007883a 	mov	r3,r2
    1068:	e0bffa17 	ldw	r2,-24(fp)
    106c:	0085c83a 	sub	r2,zero,r2
    1070:	18800015 	stw	r2,0(r3)
    return -1;
    1074:	00bfffc4 	movi	r2,-1
    1078:	00000106 	br	1080 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    107c:	e0bff917 	ldw	r2,-28(fp)
}
    1080:	e037883a 	mov	sp,fp
    1084:	dfc00117 	ldw	ra,4(sp)
    1088:	df000017 	ldw	fp,0(sp)
    108c:	dec00204 	addi	sp,sp,8
    1090:	f800283a 	ret

00001094 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    1094:	defffc04 	addi	sp,sp,-16
    1098:	dfc00315 	stw	ra,12(sp)
    109c:	df000215 	stw	fp,8(sp)
    10a0:	dc000115 	stw	r16,4(sp)
    10a4:	df000204 	addi	fp,sp,8
    10a8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    10ac:	e0bffe17 	ldw	r2,-8(fp)
    10b0:	108000d0 	cmplti	r2,r2,3
    10b4:	1000111e 	bne	r2,zero,10fc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    10b8:	04000034 	movhi	r16,0
    10bc:	84145f04 	addi	r16,r16,20860
    10c0:	e0bffe17 	ldw	r2,-8(fp)
    10c4:	01400304 	movi	r5,12
    10c8:	1009883a 	mov	r4,r2
    10cc:	00049c00 	call	49c0 <__mulsi3>
    10d0:	8085883a 	add	r2,r16,r2
    10d4:	10800204 	addi	r2,r2,8
    10d8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    10dc:	04000034 	movhi	r16,0
    10e0:	84145f04 	addi	r16,r16,20860
    10e4:	e0bffe17 	ldw	r2,-8(fp)
    10e8:	01400304 	movi	r5,12
    10ec:	1009883a 	mov	r4,r2
    10f0:	00049c00 	call	49c0 <__mulsi3>
    10f4:	8085883a 	add	r2,r16,r2
    10f8:	10000015 	stw	zero,0(r2)
  }
}
    10fc:	0001883a 	nop
    1100:	e6ffff04 	addi	sp,fp,-4
    1104:	dfc00217 	ldw	ra,8(sp)
    1108:	df000117 	ldw	fp,4(sp)
    110c:	dc000017 	ldw	r16,0(sp)
    1110:	dec00304 	addi	sp,sp,12
    1114:	f800283a 	ret

00001118 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    1118:	deffff04 	addi	sp,sp,-4
    111c:	df000015 	stw	fp,0(sp)
    1120:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    1124:	000170fa 	wrctl	ienable,zero
}
    1128:	0001883a 	nop
    112c:	e037883a 	mov	sp,fp
    1130:	df000017 	ldw	fp,0(sp)
    1134:	dec00104 	addi	sp,sp,4
    1138:	f800283a 	ret

0000113c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    113c:	defffa04 	addi	sp,sp,-24
    1140:	dfc00515 	stw	ra,20(sp)
    1144:	df000415 	stw	fp,16(sp)
    1148:	df000404 	addi	fp,sp,16
    114c:	e13ffe15 	stw	r4,-8(fp)
    1150:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    1154:	e0bfff17 	ldw	r2,-4(fp)
    1158:	10800017 	ldw	r2,0(r2)
    115c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    1160:	e13ffe17 	ldw	r4,-8(fp)
    1164:	0002dfc0 	call	2dfc <strlen>
    1168:	10800044 	addi	r2,r2,1
    116c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    1170:	00000d06 	br	11a8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    1174:	e0bffc17 	ldw	r2,-16(fp)
    1178:	10800217 	ldw	r2,8(r2)
    117c:	e0fffd17 	ldw	r3,-12(fp)
    1180:	180d883a 	mov	r6,r3
    1184:	e17ffe17 	ldw	r5,-8(fp)
    1188:	1009883a 	mov	r4,r2
    118c:	00023340 	call	2334 <memcmp>
    1190:	1000021e 	bne	r2,zero,119c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    1194:	e0bffc17 	ldw	r2,-16(fp)
    1198:	00000706 	br	11b8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    119c:	e0bffc17 	ldw	r2,-16(fp)
    11a0:	10800017 	ldw	r2,0(r2)
    11a4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    11a8:	e0fffc17 	ldw	r3,-16(fp)
    11ac:	e0bfff17 	ldw	r2,-4(fp)
    11b0:	18bff01e 	bne	r3,r2,1174 <__alt_data_end+0xfffe8ad4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    11b4:	0005883a 	mov	r2,zero
}
    11b8:	e037883a 	mov	sp,fp
    11bc:	dfc00117 	ldw	ra,4(sp)
    11c0:	df000017 	ldw	fp,0(sp)
    11c4:	dec00204 	addi	sp,sp,8
    11c8:	f800283a 	ret

000011cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    11cc:	defffb04 	addi	sp,sp,-20
    11d0:	dfc00415 	stw	ra,16(sp)
    11d4:	df000315 	stw	fp,12(sp)
    11d8:	df000304 	addi	fp,sp,12
    11dc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    11e0:	d0a00017 	ldw	r2,-32768(gp)
    11e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    11e8:	00003106 	br	12b0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    11ec:	e0bffd17 	ldw	r2,-12(fp)
    11f0:	10800217 	ldw	r2,8(r2)
    11f4:	1009883a 	mov	r4,r2
    11f8:	0002dfc0 	call	2dfc <strlen>
    11fc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    1200:	e0bffd17 	ldw	r2,-12(fp)
    1204:	10c00217 	ldw	r3,8(r2)
    1208:	e0bffe17 	ldw	r2,-8(fp)
    120c:	10bfffc4 	addi	r2,r2,-1
    1210:	1885883a 	add	r2,r3,r2
    1214:	10800003 	ldbu	r2,0(r2)
    1218:	10803fcc 	andi	r2,r2,255
    121c:	1080201c 	xori	r2,r2,128
    1220:	10bfe004 	addi	r2,r2,-128
    1224:	10800bd8 	cmpnei	r2,r2,47
    1228:	1000031e 	bne	r2,zero,1238 <alt_find_file+0x6c>
    {
      len -= 1;
    122c:	e0bffe17 	ldw	r2,-8(fp)
    1230:	10bfffc4 	addi	r2,r2,-1
    1234:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    1238:	e0bffe17 	ldw	r2,-8(fp)
    123c:	e0ffff17 	ldw	r3,-4(fp)
    1240:	1885883a 	add	r2,r3,r2
    1244:	10800003 	ldbu	r2,0(r2)
    1248:	10803fcc 	andi	r2,r2,255
    124c:	1080201c 	xori	r2,r2,128
    1250:	10bfe004 	addi	r2,r2,-128
    1254:	10800be0 	cmpeqi	r2,r2,47
    1258:	1000081e 	bne	r2,zero,127c <alt_find_file+0xb0>
    125c:	e0bffe17 	ldw	r2,-8(fp)
    1260:	e0ffff17 	ldw	r3,-4(fp)
    1264:	1885883a 	add	r2,r3,r2
    1268:	10800003 	ldbu	r2,0(r2)
    126c:	10803fcc 	andi	r2,r2,255
    1270:	1080201c 	xori	r2,r2,128
    1274:	10bfe004 	addi	r2,r2,-128
    1278:	10000a1e 	bne	r2,zero,12a4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    127c:	e0bffd17 	ldw	r2,-12(fp)
    1280:	10800217 	ldw	r2,8(r2)
    1284:	e0fffe17 	ldw	r3,-8(fp)
    1288:	180d883a 	mov	r6,r3
    128c:	e17fff17 	ldw	r5,-4(fp)
    1290:	1009883a 	mov	r4,r2
    1294:	00023340 	call	2334 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    1298:	1000021e 	bne	r2,zero,12a4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    129c:	e0bffd17 	ldw	r2,-12(fp)
    12a0:	00000706 	br	12c0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    12a4:	e0bffd17 	ldw	r2,-12(fp)
    12a8:	10800017 	ldw	r2,0(r2)
    12ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    12b0:	e0fffd17 	ldw	r3,-12(fp)
    12b4:	d0a00004 	addi	r2,gp,-32768
    12b8:	18bfcc1e 	bne	r3,r2,11ec <__alt_data_end+0xfffe8b4c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    12bc:	0005883a 	mov	r2,zero
}
    12c0:	e037883a 	mov	sp,fp
    12c4:	dfc00117 	ldw	ra,4(sp)
    12c8:	df000017 	ldw	fp,0(sp)
    12cc:	dec00204 	addi	sp,sp,8
    12d0:	f800283a 	ret

000012d4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    12d4:	defffa04 	addi	sp,sp,-24
    12d8:	dfc00515 	stw	ra,20(sp)
    12dc:	df000415 	stw	fp,16(sp)
    12e0:	dc000315 	stw	r16,12(sp)
    12e4:	df000404 	addi	fp,sp,16
    12e8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    12ec:	00bffa04 	movi	r2,-24
    12f0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    12f4:	e03ffc15 	stw	zero,-16(fp)
    12f8:	00001d06 	br	1370 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    12fc:	04000034 	movhi	r16,0
    1300:	84145f04 	addi	r16,r16,20860
    1304:	e0bffc17 	ldw	r2,-16(fp)
    1308:	01400304 	movi	r5,12
    130c:	1009883a 	mov	r4,r2
    1310:	00049c00 	call	49c0 <__mulsi3>
    1314:	8085883a 	add	r2,r16,r2
    1318:	10800017 	ldw	r2,0(r2)
    131c:	1000111e 	bne	r2,zero,1364 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    1320:	04000034 	movhi	r16,0
    1324:	84145f04 	addi	r16,r16,20860
    1328:	e0bffc17 	ldw	r2,-16(fp)
    132c:	01400304 	movi	r5,12
    1330:	1009883a 	mov	r4,r2
    1334:	00049c00 	call	49c0 <__mulsi3>
    1338:	8085883a 	add	r2,r16,r2
    133c:	e0fffe17 	ldw	r3,-8(fp)
    1340:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    1344:	d0e00417 	ldw	r3,-32752(gp)
    1348:	e0bffc17 	ldw	r2,-16(fp)
    134c:	1880020e 	bge	r3,r2,1358 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    1350:	e0bffc17 	ldw	r2,-16(fp)
    1354:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
    1358:	e0bffc17 	ldw	r2,-16(fp)
    135c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    1360:	00000606 	br	137c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    1364:	e0bffc17 	ldw	r2,-16(fp)
    1368:	10800044 	addi	r2,r2,1
    136c:	e0bffc15 	stw	r2,-16(fp)
    1370:	e0bffc17 	ldw	r2,-16(fp)
    1374:	10800810 	cmplti	r2,r2,32
    1378:	103fe01e 	bne	r2,zero,12fc <__alt_data_end+0xfffe8c5c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    137c:	e0bffd17 	ldw	r2,-12(fp)
}
    1380:	e6ffff04 	addi	sp,fp,-4
    1384:	dfc00217 	ldw	ra,8(sp)
    1388:	df000117 	ldw	fp,4(sp)
    138c:	dc000017 	ldw	r16,0(sp)
    1390:	dec00304 	addi	sp,sp,12
    1394:	f800283a 	ret

00001398 <exit>:
    1398:	defffe04 	addi	sp,sp,-8
    139c:	000b883a 	mov	r5,zero
    13a0:	dc000015 	stw	r16,0(sp)
    13a4:	dfc00115 	stw	ra,4(sp)
    13a8:	2021883a 	mov	r16,r4
    13ac:	00031400 	call	3140 <__call_exitprocs>
    13b0:	00800034 	movhi	r2,0
    13b4:	1096d004 	addi	r2,r2,23360
    13b8:	11000017 	ldw	r4,0(r2)
    13bc:	20800f17 	ldw	r2,60(r4)
    13c0:	10000126 	beq	r2,zero,13c8 <exit+0x30>
    13c4:	103ee83a 	callr	r2
    13c8:	8009883a 	mov	r4,r16
    13cc:	00049e80 	call	49e8 <_exit>

000013d0 <_fputs_r>:
    13d0:	defff804 	addi	sp,sp,-32
    13d4:	dc400615 	stw	r17,24(sp)
    13d8:	2023883a 	mov	r17,r4
    13dc:	2809883a 	mov	r4,r5
    13e0:	dc000515 	stw	r16,20(sp)
    13e4:	dfc00715 	stw	ra,28(sp)
    13e8:	3021883a 	mov	r16,r6
    13ec:	d9400315 	stw	r5,12(sp)
    13f0:	0002dfc0 	call	2dfc <strlen>
    13f4:	d8800215 	stw	r2,8(sp)
    13f8:	d8800415 	stw	r2,16(sp)
    13fc:	d8800304 	addi	r2,sp,12
    1400:	d8800015 	stw	r2,0(sp)
    1404:	00800044 	movi	r2,1
    1408:	d8800115 	stw	r2,4(sp)
    140c:	88000226 	beq	r17,zero,1418 <_fputs_r+0x48>
    1410:	88800e17 	ldw	r2,56(r17)
    1414:	10001226 	beq	r2,zero,1460 <_fputs_r+0x90>
    1418:	8080030b 	ldhu	r2,12(r16)
    141c:	10c8000c 	andi	r3,r2,8192
    1420:	1800061e 	bne	r3,zero,143c <_fputs_r+0x6c>
    1424:	81001917 	ldw	r4,100(r16)
    1428:	00f7ffc4 	movi	r3,-8193
    142c:	10880014 	ori	r2,r2,8192
    1430:	20c6703a 	and	r3,r4,r3
    1434:	8080030d 	sth	r2,12(r16)
    1438:	80c01915 	stw	r3,100(r16)
    143c:	d80d883a 	mov	r6,sp
    1440:	800b883a 	mov	r5,r16
    1444:	8809883a 	mov	r4,r17
    1448:	00014840 	call	1484 <__sfvwrite_r>
    144c:	dfc00717 	ldw	ra,28(sp)
    1450:	dc400617 	ldw	r17,24(sp)
    1454:	dc000517 	ldw	r16,20(sp)
    1458:	dec00804 	addi	sp,sp,32
    145c:	f800283a 	ret
    1460:	8809883a 	mov	r4,r17
    1464:	00038c80 	call	38c8 <__sinit>
    1468:	003feb06 	br	1418 <__alt_data_end+0xfffe8d78>

0000146c <fputs>:
    146c:	00800034 	movhi	r2,0
    1470:	1096d104 	addi	r2,r2,23364
    1474:	280d883a 	mov	r6,r5
    1478:	200b883a 	mov	r5,r4
    147c:	11000017 	ldw	r4,0(r2)
    1480:	00013d01 	jmpi	13d0 <_fputs_r>

00001484 <__sfvwrite_r>:
    1484:	30800217 	ldw	r2,8(r6)
    1488:	10006726 	beq	r2,zero,1628 <__sfvwrite_r+0x1a4>
    148c:	28c0030b 	ldhu	r3,12(r5)
    1490:	defff404 	addi	sp,sp,-48
    1494:	dd400715 	stw	r21,28(sp)
    1498:	dd000615 	stw	r20,24(sp)
    149c:	dc000215 	stw	r16,8(sp)
    14a0:	dfc00b15 	stw	ra,44(sp)
    14a4:	df000a15 	stw	fp,40(sp)
    14a8:	ddc00915 	stw	r23,36(sp)
    14ac:	dd800815 	stw	r22,32(sp)
    14b0:	dcc00515 	stw	r19,20(sp)
    14b4:	dc800415 	stw	r18,16(sp)
    14b8:	dc400315 	stw	r17,12(sp)
    14bc:	1880020c 	andi	r2,r3,8
    14c0:	2821883a 	mov	r16,r5
    14c4:	202b883a 	mov	r21,r4
    14c8:	3029883a 	mov	r20,r6
    14cc:	10002726 	beq	r2,zero,156c <__sfvwrite_r+0xe8>
    14d0:	28800417 	ldw	r2,16(r5)
    14d4:	10002526 	beq	r2,zero,156c <__sfvwrite_r+0xe8>
    14d8:	1880008c 	andi	r2,r3,2
    14dc:	a4400017 	ldw	r17,0(r20)
    14e0:	10002a26 	beq	r2,zero,158c <__sfvwrite_r+0x108>
    14e4:	05a00034 	movhi	r22,32768
    14e8:	0027883a 	mov	r19,zero
    14ec:	0025883a 	mov	r18,zero
    14f0:	b5bf0004 	addi	r22,r22,-1024
    14f4:	980d883a 	mov	r6,r19
    14f8:	a809883a 	mov	r4,r21
    14fc:	90004626 	beq	r18,zero,1618 <__sfvwrite_r+0x194>
    1500:	900f883a 	mov	r7,r18
    1504:	b480022e 	bgeu	r22,r18,1510 <__sfvwrite_r+0x8c>
    1508:	01e00034 	movhi	r7,32768
    150c:	39ff0004 	addi	r7,r7,-1024
    1510:	80800917 	ldw	r2,36(r16)
    1514:	81400717 	ldw	r5,28(r16)
    1518:	103ee83a 	callr	r2
    151c:	00805a0e 	bge	zero,r2,1688 <__sfvwrite_r+0x204>
    1520:	a0c00217 	ldw	r3,8(r20)
    1524:	98a7883a 	add	r19,r19,r2
    1528:	90a5c83a 	sub	r18,r18,r2
    152c:	1885c83a 	sub	r2,r3,r2
    1530:	a0800215 	stw	r2,8(r20)
    1534:	103fef1e 	bne	r2,zero,14f4 <__alt_data_end+0xfffe8e54>
    1538:	0005883a 	mov	r2,zero
    153c:	dfc00b17 	ldw	ra,44(sp)
    1540:	df000a17 	ldw	fp,40(sp)
    1544:	ddc00917 	ldw	r23,36(sp)
    1548:	dd800817 	ldw	r22,32(sp)
    154c:	dd400717 	ldw	r21,28(sp)
    1550:	dd000617 	ldw	r20,24(sp)
    1554:	dcc00517 	ldw	r19,20(sp)
    1558:	dc800417 	ldw	r18,16(sp)
    155c:	dc400317 	ldw	r17,12(sp)
    1560:	dc000217 	ldw	r16,8(sp)
    1564:	dec00c04 	addi	sp,sp,48
    1568:	f800283a 	ret
    156c:	800b883a 	mov	r5,r16
    1570:	a809883a 	mov	r4,r21
    1574:	0002fec0 	call	2fec <__swsetup_r>
    1578:	1000ee1e 	bne	r2,zero,1934 <__sfvwrite_r+0x4b0>
    157c:	80c0030b 	ldhu	r3,12(r16)
    1580:	a4400017 	ldw	r17,0(r20)
    1584:	1880008c 	andi	r2,r3,2
    1588:	103fd61e 	bne	r2,zero,14e4 <__alt_data_end+0xfffe8e44>
    158c:	1880004c 	andi	r2,r3,1
    1590:	1000421e 	bne	r2,zero,169c <__sfvwrite_r+0x218>
    1594:	0039883a 	mov	fp,zero
    1598:	0025883a 	mov	r18,zero
    159c:	90001a26 	beq	r18,zero,1608 <__sfvwrite_r+0x184>
    15a0:	1880800c 	andi	r2,r3,512
    15a4:	84c00217 	ldw	r19,8(r16)
    15a8:	10002126 	beq	r2,zero,1630 <__sfvwrite_r+0x1ac>
    15ac:	982f883a 	mov	r23,r19
    15b0:	94c09636 	bltu	r18,r19,180c <__sfvwrite_r+0x388>
    15b4:	1881200c 	andi	r2,r3,1152
    15b8:	1000a11e 	bne	r2,zero,1840 <__sfvwrite_r+0x3bc>
    15bc:	81000017 	ldw	r4,0(r16)
    15c0:	b80d883a 	mov	r6,r23
    15c4:	e00b883a 	mov	r5,fp
    15c8:	00024f80 	call	24f8 <memmove>
    15cc:	80c00217 	ldw	r3,8(r16)
    15d0:	81000017 	ldw	r4,0(r16)
    15d4:	9005883a 	mov	r2,r18
    15d8:	1ce7c83a 	sub	r19,r3,r19
    15dc:	25cf883a 	add	r7,r4,r23
    15e0:	84c00215 	stw	r19,8(r16)
    15e4:	81c00015 	stw	r7,0(r16)
    15e8:	a0c00217 	ldw	r3,8(r20)
    15ec:	e0b9883a 	add	fp,fp,r2
    15f0:	90a5c83a 	sub	r18,r18,r2
    15f4:	18a7c83a 	sub	r19,r3,r2
    15f8:	a4c00215 	stw	r19,8(r20)
    15fc:	983fce26 	beq	r19,zero,1538 <__alt_data_end+0xfffe8e98>
    1600:	80c0030b 	ldhu	r3,12(r16)
    1604:	903fe61e 	bne	r18,zero,15a0 <__alt_data_end+0xfffe8f00>
    1608:	8f000017 	ldw	fp,0(r17)
    160c:	8c800117 	ldw	r18,4(r17)
    1610:	8c400204 	addi	r17,r17,8
    1614:	003fe106 	br	159c <__alt_data_end+0xfffe8efc>
    1618:	8cc00017 	ldw	r19,0(r17)
    161c:	8c800117 	ldw	r18,4(r17)
    1620:	8c400204 	addi	r17,r17,8
    1624:	003fb306 	br	14f4 <__alt_data_end+0xfffe8e54>
    1628:	0005883a 	mov	r2,zero
    162c:	f800283a 	ret
    1630:	81000017 	ldw	r4,0(r16)
    1634:	80800417 	ldw	r2,16(r16)
    1638:	11005a36 	bltu	r2,r4,17a4 <__sfvwrite_r+0x320>
    163c:	85c00517 	ldw	r23,20(r16)
    1640:	95c05836 	bltu	r18,r23,17a4 <__sfvwrite_r+0x320>
    1644:	00a00034 	movhi	r2,32768
    1648:	10bfffc4 	addi	r2,r2,-1
    164c:	9009883a 	mov	r4,r18
    1650:	1480012e 	bgeu	r2,r18,1658 <__sfvwrite_r+0x1d4>
    1654:	1009883a 	mov	r4,r2
    1658:	b80b883a 	mov	r5,r23
    165c:	000480c0 	call	480c <__divsi3>
    1660:	b80b883a 	mov	r5,r23
    1664:	1009883a 	mov	r4,r2
    1668:	00049c00 	call	49c0 <__mulsi3>
    166c:	81400717 	ldw	r5,28(r16)
    1670:	80c00917 	ldw	r3,36(r16)
    1674:	100f883a 	mov	r7,r2
    1678:	e00d883a 	mov	r6,fp
    167c:	a809883a 	mov	r4,r21
    1680:	183ee83a 	callr	r3
    1684:	00bfd816 	blt	zero,r2,15e8 <__alt_data_end+0xfffe8f48>
    1688:	8080030b 	ldhu	r2,12(r16)
    168c:	10801014 	ori	r2,r2,64
    1690:	8080030d 	sth	r2,12(r16)
    1694:	00bfffc4 	movi	r2,-1
    1698:	003fa806 	br	153c <__alt_data_end+0xfffe8e9c>
    169c:	0027883a 	mov	r19,zero
    16a0:	0011883a 	mov	r8,zero
    16a4:	0039883a 	mov	fp,zero
    16a8:	0025883a 	mov	r18,zero
    16ac:	90001f26 	beq	r18,zero,172c <__sfvwrite_r+0x2a8>
    16b0:	40005a26 	beq	r8,zero,181c <__sfvwrite_r+0x398>
    16b4:	982d883a 	mov	r22,r19
    16b8:	94c0012e 	bgeu	r18,r19,16c0 <__sfvwrite_r+0x23c>
    16bc:	902d883a 	mov	r22,r18
    16c0:	81000017 	ldw	r4,0(r16)
    16c4:	80800417 	ldw	r2,16(r16)
    16c8:	b02f883a 	mov	r23,r22
    16cc:	81c00517 	ldw	r7,20(r16)
    16d0:	1100032e 	bgeu	r2,r4,16e0 <__sfvwrite_r+0x25c>
    16d4:	80c00217 	ldw	r3,8(r16)
    16d8:	38c7883a 	add	r3,r7,r3
    16dc:	1d801816 	blt	r3,r22,1740 <__sfvwrite_r+0x2bc>
    16e0:	b1c03e16 	blt	r22,r7,17dc <__sfvwrite_r+0x358>
    16e4:	80800917 	ldw	r2,36(r16)
    16e8:	81400717 	ldw	r5,28(r16)
    16ec:	e00d883a 	mov	r6,fp
    16f0:	da000115 	stw	r8,4(sp)
    16f4:	a809883a 	mov	r4,r21
    16f8:	103ee83a 	callr	r2
    16fc:	102f883a 	mov	r23,r2
    1700:	da000117 	ldw	r8,4(sp)
    1704:	00bfe00e 	bge	zero,r2,1688 <__alt_data_end+0xfffe8fe8>
    1708:	9de7c83a 	sub	r19,r19,r23
    170c:	98001f26 	beq	r19,zero,178c <__sfvwrite_r+0x308>
    1710:	a0800217 	ldw	r2,8(r20)
    1714:	e5f9883a 	add	fp,fp,r23
    1718:	95e5c83a 	sub	r18,r18,r23
    171c:	15efc83a 	sub	r23,r2,r23
    1720:	a5c00215 	stw	r23,8(r20)
    1724:	b83f8426 	beq	r23,zero,1538 <__alt_data_end+0xfffe8e98>
    1728:	903fe11e 	bne	r18,zero,16b0 <__alt_data_end+0xfffe9010>
    172c:	8f000017 	ldw	fp,0(r17)
    1730:	8c800117 	ldw	r18,4(r17)
    1734:	0011883a 	mov	r8,zero
    1738:	8c400204 	addi	r17,r17,8
    173c:	003fdb06 	br	16ac <__alt_data_end+0xfffe900c>
    1740:	180d883a 	mov	r6,r3
    1744:	e00b883a 	mov	r5,fp
    1748:	da000115 	stw	r8,4(sp)
    174c:	d8c00015 	stw	r3,0(sp)
    1750:	00024f80 	call	24f8 <memmove>
    1754:	d8c00017 	ldw	r3,0(sp)
    1758:	80800017 	ldw	r2,0(r16)
    175c:	800b883a 	mov	r5,r16
    1760:	a809883a 	mov	r4,r21
    1764:	10c5883a 	add	r2,r2,r3
    1768:	80800015 	stw	r2,0(r16)
    176c:	d8c00015 	stw	r3,0(sp)
    1770:	00034dc0 	call	34dc <_fflush_r>
    1774:	d8c00017 	ldw	r3,0(sp)
    1778:	da000117 	ldw	r8,4(sp)
    177c:	103fc21e 	bne	r2,zero,1688 <__alt_data_end+0xfffe8fe8>
    1780:	182f883a 	mov	r23,r3
    1784:	9de7c83a 	sub	r19,r19,r23
    1788:	983fe11e 	bne	r19,zero,1710 <__alt_data_end+0xfffe9070>
    178c:	800b883a 	mov	r5,r16
    1790:	a809883a 	mov	r4,r21
    1794:	00034dc0 	call	34dc <_fflush_r>
    1798:	103fbb1e 	bne	r2,zero,1688 <__alt_data_end+0xfffe8fe8>
    179c:	0011883a 	mov	r8,zero
    17a0:	003fdb06 	br	1710 <__alt_data_end+0xfffe9070>
    17a4:	94c0012e 	bgeu	r18,r19,17ac <__sfvwrite_r+0x328>
    17a8:	9027883a 	mov	r19,r18
    17ac:	980d883a 	mov	r6,r19
    17b0:	e00b883a 	mov	r5,fp
    17b4:	00024f80 	call	24f8 <memmove>
    17b8:	80800217 	ldw	r2,8(r16)
    17bc:	80c00017 	ldw	r3,0(r16)
    17c0:	14c5c83a 	sub	r2,r2,r19
    17c4:	1cc7883a 	add	r3,r3,r19
    17c8:	80800215 	stw	r2,8(r16)
    17cc:	80c00015 	stw	r3,0(r16)
    17d0:	10004326 	beq	r2,zero,18e0 <__sfvwrite_r+0x45c>
    17d4:	9805883a 	mov	r2,r19
    17d8:	003f8306 	br	15e8 <__alt_data_end+0xfffe8f48>
    17dc:	b00d883a 	mov	r6,r22
    17e0:	e00b883a 	mov	r5,fp
    17e4:	da000115 	stw	r8,4(sp)
    17e8:	00024f80 	call	24f8 <memmove>
    17ec:	80800217 	ldw	r2,8(r16)
    17f0:	80c00017 	ldw	r3,0(r16)
    17f4:	da000117 	ldw	r8,4(sp)
    17f8:	1585c83a 	sub	r2,r2,r22
    17fc:	1dad883a 	add	r22,r3,r22
    1800:	80800215 	stw	r2,8(r16)
    1804:	85800015 	stw	r22,0(r16)
    1808:	003fbf06 	br	1708 <__alt_data_end+0xfffe9068>
    180c:	81000017 	ldw	r4,0(r16)
    1810:	9027883a 	mov	r19,r18
    1814:	902f883a 	mov	r23,r18
    1818:	003f6906 	br	15c0 <__alt_data_end+0xfffe8f20>
    181c:	900d883a 	mov	r6,r18
    1820:	01400284 	movi	r5,10
    1824:	e009883a 	mov	r4,fp
    1828:	00022500 	call	2250 <memchr>
    182c:	10003e26 	beq	r2,zero,1928 <__sfvwrite_r+0x4a4>
    1830:	10800044 	addi	r2,r2,1
    1834:	1727c83a 	sub	r19,r2,fp
    1838:	02000044 	movi	r8,1
    183c:	003f9d06 	br	16b4 <__alt_data_end+0xfffe9014>
    1840:	80800517 	ldw	r2,20(r16)
    1844:	81400417 	ldw	r5,16(r16)
    1848:	81c00017 	ldw	r7,0(r16)
    184c:	10a7883a 	add	r19,r2,r2
    1850:	9885883a 	add	r2,r19,r2
    1854:	1026d7fa 	srli	r19,r2,31
    1858:	396dc83a 	sub	r22,r7,r5
    185c:	b1000044 	addi	r4,r22,1
    1860:	9885883a 	add	r2,r19,r2
    1864:	1027d07a 	srai	r19,r2,1
    1868:	2485883a 	add	r2,r4,r18
    186c:	980d883a 	mov	r6,r19
    1870:	9880022e 	bgeu	r19,r2,187c <__sfvwrite_r+0x3f8>
    1874:	1027883a 	mov	r19,r2
    1878:	100d883a 	mov	r6,r2
    187c:	18c1000c 	andi	r3,r3,1024
    1880:	18001c26 	beq	r3,zero,18f4 <__sfvwrite_r+0x470>
    1884:	300b883a 	mov	r5,r6
    1888:	a809883a 	mov	r4,r21
    188c:	0001a440 	call	1a44 <_malloc_r>
    1890:	102f883a 	mov	r23,r2
    1894:	10002926 	beq	r2,zero,193c <__sfvwrite_r+0x4b8>
    1898:	81400417 	ldw	r5,16(r16)
    189c:	b00d883a 	mov	r6,r22
    18a0:	1009883a 	mov	r4,r2
    18a4:	00023b00 	call	23b0 <memcpy>
    18a8:	8080030b 	ldhu	r2,12(r16)
    18ac:	00fedfc4 	movi	r3,-1153
    18b0:	10c4703a 	and	r2,r2,r3
    18b4:	10802014 	ori	r2,r2,128
    18b8:	8080030d 	sth	r2,12(r16)
    18bc:	bd89883a 	add	r4,r23,r22
    18c0:	9d8fc83a 	sub	r7,r19,r22
    18c4:	85c00415 	stw	r23,16(r16)
    18c8:	84c00515 	stw	r19,20(r16)
    18cc:	81000015 	stw	r4,0(r16)
    18d0:	9027883a 	mov	r19,r18
    18d4:	81c00215 	stw	r7,8(r16)
    18d8:	902f883a 	mov	r23,r18
    18dc:	003f3806 	br	15c0 <__alt_data_end+0xfffe8f20>
    18e0:	800b883a 	mov	r5,r16
    18e4:	a809883a 	mov	r4,r21
    18e8:	00034dc0 	call	34dc <_fflush_r>
    18ec:	103fb926 	beq	r2,zero,17d4 <__alt_data_end+0xfffe9134>
    18f0:	003f6506 	br	1688 <__alt_data_end+0xfffe8fe8>
    18f4:	a809883a 	mov	r4,r21
    18f8:	00027bc0 	call	27bc <_realloc_r>
    18fc:	102f883a 	mov	r23,r2
    1900:	103fee1e 	bne	r2,zero,18bc <__alt_data_end+0xfffe921c>
    1904:	81400417 	ldw	r5,16(r16)
    1908:	a809883a 	mov	r4,r21
    190c:	0003a3c0 	call	3a3c <_free_r>
    1910:	8080030b 	ldhu	r2,12(r16)
    1914:	00ffdfc4 	movi	r3,-129
    1918:	1884703a 	and	r2,r3,r2
    191c:	00c00304 	movi	r3,12
    1920:	a8c00015 	stw	r3,0(r21)
    1924:	003f5906 	br	168c <__alt_data_end+0xfffe8fec>
    1928:	94c00044 	addi	r19,r18,1
    192c:	02000044 	movi	r8,1
    1930:	003f6006 	br	16b4 <__alt_data_end+0xfffe9014>
    1934:	00bfffc4 	movi	r2,-1
    1938:	003f0006 	br	153c <__alt_data_end+0xfffe8e9c>
    193c:	00800304 	movi	r2,12
    1940:	a8800015 	stw	r2,0(r21)
    1944:	8080030b 	ldhu	r2,12(r16)
    1948:	003f5006 	br	168c <__alt_data_end+0xfffe8fec>

0000194c <_getc_r>:
    194c:	defffd04 	addi	sp,sp,-12
    1950:	dc000115 	stw	r16,4(sp)
    1954:	dfc00215 	stw	ra,8(sp)
    1958:	2021883a 	mov	r16,r4
    195c:	20000226 	beq	r4,zero,1968 <_getc_r+0x1c>
    1960:	20800e17 	ldw	r2,56(r4)
    1964:	10000c26 	beq	r2,zero,1998 <_getc_r+0x4c>
    1968:	28800117 	ldw	r2,4(r5)
    196c:	10bfffc4 	addi	r2,r2,-1
    1970:	28800115 	stw	r2,4(r5)
    1974:	10000c16 	blt	r2,zero,19a8 <_getc_r+0x5c>
    1978:	28800017 	ldw	r2,0(r5)
    197c:	10c00044 	addi	r3,r2,1
    1980:	28c00015 	stw	r3,0(r5)
    1984:	10800003 	ldbu	r2,0(r2)
    1988:	dfc00217 	ldw	ra,8(sp)
    198c:	dc000117 	ldw	r16,4(sp)
    1990:	dec00304 	addi	sp,sp,12
    1994:	f800283a 	ret
    1998:	d9400015 	stw	r5,0(sp)
    199c:	00038c80 	call	38c8 <__sinit>
    19a0:	d9400017 	ldw	r5,0(sp)
    19a4:	003ff006 	br	1968 <__alt_data_end+0xfffe92c8>
    19a8:	8009883a 	mov	r4,r16
    19ac:	dfc00217 	ldw	ra,8(sp)
    19b0:	dc000117 	ldw	r16,4(sp)
    19b4:	dec00304 	addi	sp,sp,12
    19b8:	0002d201 	jmpi	2d20 <__srget_r>

000019bc <getc>:
    19bc:	00800034 	movhi	r2,0
    19c0:	defffd04 	addi	sp,sp,-12
    19c4:	1096d104 	addi	r2,r2,23364
    19c8:	dc400115 	stw	r17,4(sp)
    19cc:	14400017 	ldw	r17,0(r2)
    19d0:	dc000015 	stw	r16,0(sp)
    19d4:	dfc00215 	stw	ra,8(sp)
    19d8:	2021883a 	mov	r16,r4
    19dc:	88000226 	beq	r17,zero,19e8 <getc+0x2c>
    19e0:	88800e17 	ldw	r2,56(r17)
    19e4:	10000d26 	beq	r2,zero,1a1c <getc+0x60>
    19e8:	80800117 	ldw	r2,4(r16)
    19ec:	10bfffc4 	addi	r2,r2,-1
    19f0:	80800115 	stw	r2,4(r16)
    19f4:	10000c16 	blt	r2,zero,1a28 <getc+0x6c>
    19f8:	80800017 	ldw	r2,0(r16)
    19fc:	10c00044 	addi	r3,r2,1
    1a00:	80c00015 	stw	r3,0(r16)
    1a04:	10800003 	ldbu	r2,0(r2)
    1a08:	dfc00217 	ldw	ra,8(sp)
    1a0c:	dc400117 	ldw	r17,4(sp)
    1a10:	dc000017 	ldw	r16,0(sp)
    1a14:	dec00304 	addi	sp,sp,12
    1a18:	f800283a 	ret
    1a1c:	8809883a 	mov	r4,r17
    1a20:	00038c80 	call	38c8 <__sinit>
    1a24:	003ff006 	br	19e8 <__alt_data_end+0xfffe9348>
    1a28:	800b883a 	mov	r5,r16
    1a2c:	8809883a 	mov	r4,r17
    1a30:	dfc00217 	ldw	ra,8(sp)
    1a34:	dc400117 	ldw	r17,4(sp)
    1a38:	dc000017 	ldw	r16,0(sp)
    1a3c:	dec00304 	addi	sp,sp,12
    1a40:	0002d201 	jmpi	2d20 <__srget_r>

00001a44 <_malloc_r>:
    1a44:	defff504 	addi	sp,sp,-44
    1a48:	dc800315 	stw	r18,12(sp)
    1a4c:	dfc00a15 	stw	ra,40(sp)
    1a50:	df000915 	stw	fp,36(sp)
    1a54:	ddc00815 	stw	r23,32(sp)
    1a58:	dd800715 	stw	r22,28(sp)
    1a5c:	dd400615 	stw	r21,24(sp)
    1a60:	dd000515 	stw	r20,20(sp)
    1a64:	dcc00415 	stw	r19,16(sp)
    1a68:	dc400215 	stw	r17,8(sp)
    1a6c:	dc000115 	stw	r16,4(sp)
    1a70:	288002c4 	addi	r2,r5,11
    1a74:	00c00584 	movi	r3,22
    1a78:	2025883a 	mov	r18,r4
    1a7c:	18807f2e 	bgeu	r3,r2,1c7c <_malloc_r+0x238>
    1a80:	047ffe04 	movi	r17,-8
    1a84:	1462703a 	and	r17,r2,r17
    1a88:	8800a316 	blt	r17,zero,1d18 <_malloc_r+0x2d4>
    1a8c:	8940a236 	bltu	r17,r5,1d18 <_malloc_r+0x2d4>
    1a90:	0004d100 	call	4d10 <__malloc_lock>
    1a94:	00807dc4 	movi	r2,503
    1a98:	1441e92e 	bgeu	r2,r17,2240 <_malloc_r+0x7fc>
    1a9c:	8804d27a 	srli	r2,r17,9
    1aa0:	1000a126 	beq	r2,zero,1d28 <_malloc_r+0x2e4>
    1aa4:	00c00104 	movi	r3,4
    1aa8:	18811e36 	bltu	r3,r2,1f24 <_malloc_r+0x4e0>
    1aac:	8804d1ba 	srli	r2,r17,6
    1ab0:	12000e44 	addi	r8,r2,57
    1ab4:	11c00e04 	addi	r7,r2,56
    1ab8:	4209883a 	add	r4,r8,r8
    1abc:	04c00034 	movhi	r19,0
    1ac0:	2109883a 	add	r4,r4,r4
    1ac4:	9cd5c804 	addi	r19,r19,22304
    1ac8:	2109883a 	add	r4,r4,r4
    1acc:	9909883a 	add	r4,r19,r4
    1ad0:	24000117 	ldw	r16,4(r4)
    1ad4:	213ffe04 	addi	r4,r4,-8
    1ad8:	24009726 	beq	r4,r16,1d38 <_malloc_r+0x2f4>
    1adc:	80800117 	ldw	r2,4(r16)
    1ae0:	01bfff04 	movi	r6,-4
    1ae4:	014003c4 	movi	r5,15
    1ae8:	1184703a 	and	r2,r2,r6
    1aec:	1447c83a 	sub	r3,r2,r17
    1af0:	28c00716 	blt	r5,r3,1b10 <_malloc_r+0xcc>
    1af4:	1800920e 	bge	r3,zero,1d40 <_malloc_r+0x2fc>
    1af8:	84000317 	ldw	r16,12(r16)
    1afc:	24008e26 	beq	r4,r16,1d38 <_malloc_r+0x2f4>
    1b00:	80800117 	ldw	r2,4(r16)
    1b04:	1184703a 	and	r2,r2,r6
    1b08:	1447c83a 	sub	r3,r2,r17
    1b0c:	28fff90e 	bge	r5,r3,1af4 <__alt_data_end+0xfffe9454>
    1b10:	3809883a 	mov	r4,r7
    1b14:	01800034 	movhi	r6,0
    1b18:	9c000417 	ldw	r16,16(r19)
    1b1c:	3195c804 	addi	r6,r6,22304
    1b20:	32000204 	addi	r8,r6,8
    1b24:	82013426 	beq	r16,r8,1ff8 <_malloc_r+0x5b4>
    1b28:	80c00117 	ldw	r3,4(r16)
    1b2c:	00bfff04 	movi	r2,-4
    1b30:	188e703a 	and	r7,r3,r2
    1b34:	3c45c83a 	sub	r2,r7,r17
    1b38:	00c003c4 	movi	r3,15
    1b3c:	18811f16 	blt	r3,r2,1fbc <_malloc_r+0x578>
    1b40:	32000515 	stw	r8,20(r6)
    1b44:	32000415 	stw	r8,16(r6)
    1b48:	10007f0e 	bge	r2,zero,1d48 <_malloc_r+0x304>
    1b4c:	00807fc4 	movi	r2,511
    1b50:	11c0fd36 	bltu	r2,r7,1f48 <_malloc_r+0x504>
    1b54:	3806d0fa 	srli	r3,r7,3
    1b58:	01c00044 	movi	r7,1
    1b5c:	30800117 	ldw	r2,4(r6)
    1b60:	19400044 	addi	r5,r3,1
    1b64:	294b883a 	add	r5,r5,r5
    1b68:	1807d0ba 	srai	r3,r3,2
    1b6c:	294b883a 	add	r5,r5,r5
    1b70:	294b883a 	add	r5,r5,r5
    1b74:	298b883a 	add	r5,r5,r6
    1b78:	38c6983a 	sll	r3,r7,r3
    1b7c:	29c00017 	ldw	r7,0(r5)
    1b80:	2a7ffe04 	addi	r9,r5,-8
    1b84:	1886b03a 	or	r3,r3,r2
    1b88:	82400315 	stw	r9,12(r16)
    1b8c:	81c00215 	stw	r7,8(r16)
    1b90:	30c00115 	stw	r3,4(r6)
    1b94:	2c000015 	stw	r16,0(r5)
    1b98:	3c000315 	stw	r16,12(r7)
    1b9c:	2005d0ba 	srai	r2,r4,2
    1ba0:	01400044 	movi	r5,1
    1ba4:	288a983a 	sll	r5,r5,r2
    1ba8:	19406f36 	bltu	r3,r5,1d68 <_malloc_r+0x324>
    1bac:	28c4703a 	and	r2,r5,r3
    1bb0:	10000a1e 	bne	r2,zero,1bdc <_malloc_r+0x198>
    1bb4:	00bfff04 	movi	r2,-4
    1bb8:	294b883a 	add	r5,r5,r5
    1bbc:	2088703a 	and	r4,r4,r2
    1bc0:	28c4703a 	and	r2,r5,r3
    1bc4:	21000104 	addi	r4,r4,4
    1bc8:	1000041e 	bne	r2,zero,1bdc <_malloc_r+0x198>
    1bcc:	294b883a 	add	r5,r5,r5
    1bd0:	28c4703a 	and	r2,r5,r3
    1bd4:	21000104 	addi	r4,r4,4
    1bd8:	103ffc26 	beq	r2,zero,1bcc <__alt_data_end+0xfffe952c>
    1bdc:	02bfff04 	movi	r10,-4
    1be0:	024003c4 	movi	r9,15
    1be4:	21800044 	addi	r6,r4,1
    1be8:	318d883a 	add	r6,r6,r6
    1bec:	318d883a 	add	r6,r6,r6
    1bf0:	318d883a 	add	r6,r6,r6
    1bf4:	998d883a 	add	r6,r19,r6
    1bf8:	333ffe04 	addi	r12,r6,-8
    1bfc:	2017883a 	mov	r11,r4
    1c00:	31800104 	addi	r6,r6,4
    1c04:	34000017 	ldw	r16,0(r6)
    1c08:	31fffd04 	addi	r7,r6,-12
    1c0c:	81c0041e 	bne	r16,r7,1c20 <_malloc_r+0x1dc>
    1c10:	0000fb06 	br	2000 <_malloc_r+0x5bc>
    1c14:	1801030e 	bge	r3,zero,2024 <_malloc_r+0x5e0>
    1c18:	84000317 	ldw	r16,12(r16)
    1c1c:	81c0f826 	beq	r16,r7,2000 <_malloc_r+0x5bc>
    1c20:	80800117 	ldw	r2,4(r16)
    1c24:	1284703a 	and	r2,r2,r10
    1c28:	1447c83a 	sub	r3,r2,r17
    1c2c:	48fff90e 	bge	r9,r3,1c14 <__alt_data_end+0xfffe9574>
    1c30:	80800317 	ldw	r2,12(r16)
    1c34:	81000217 	ldw	r4,8(r16)
    1c38:	89400054 	ori	r5,r17,1
    1c3c:	81400115 	stw	r5,4(r16)
    1c40:	20800315 	stw	r2,12(r4)
    1c44:	11000215 	stw	r4,8(r2)
    1c48:	8463883a 	add	r17,r16,r17
    1c4c:	9c400515 	stw	r17,20(r19)
    1c50:	9c400415 	stw	r17,16(r19)
    1c54:	18800054 	ori	r2,r3,1
    1c58:	88800115 	stw	r2,4(r17)
    1c5c:	8a000315 	stw	r8,12(r17)
    1c60:	8a000215 	stw	r8,8(r17)
    1c64:	88e3883a 	add	r17,r17,r3
    1c68:	88c00015 	stw	r3,0(r17)
    1c6c:	9009883a 	mov	r4,r18
    1c70:	0004d340 	call	4d34 <__malloc_unlock>
    1c74:	80800204 	addi	r2,r16,8
    1c78:	00001b06 	br	1ce8 <_malloc_r+0x2a4>
    1c7c:	04400404 	movi	r17,16
    1c80:	89402536 	bltu	r17,r5,1d18 <_malloc_r+0x2d4>
    1c84:	0004d100 	call	4d10 <__malloc_lock>
    1c88:	00800184 	movi	r2,6
    1c8c:	01000084 	movi	r4,2
    1c90:	04c00034 	movhi	r19,0
    1c94:	1085883a 	add	r2,r2,r2
    1c98:	9cd5c804 	addi	r19,r19,22304
    1c9c:	1085883a 	add	r2,r2,r2
    1ca0:	9885883a 	add	r2,r19,r2
    1ca4:	14000117 	ldw	r16,4(r2)
    1ca8:	10fffe04 	addi	r3,r2,-8
    1cac:	80c0d926 	beq	r16,r3,2014 <_malloc_r+0x5d0>
    1cb0:	80c00117 	ldw	r3,4(r16)
    1cb4:	81000317 	ldw	r4,12(r16)
    1cb8:	00bfff04 	movi	r2,-4
    1cbc:	1884703a 	and	r2,r3,r2
    1cc0:	81400217 	ldw	r5,8(r16)
    1cc4:	8085883a 	add	r2,r16,r2
    1cc8:	10c00117 	ldw	r3,4(r2)
    1ccc:	29000315 	stw	r4,12(r5)
    1cd0:	21400215 	stw	r5,8(r4)
    1cd4:	18c00054 	ori	r3,r3,1
    1cd8:	10c00115 	stw	r3,4(r2)
    1cdc:	9009883a 	mov	r4,r18
    1ce0:	0004d340 	call	4d34 <__malloc_unlock>
    1ce4:	80800204 	addi	r2,r16,8
    1ce8:	dfc00a17 	ldw	ra,40(sp)
    1cec:	df000917 	ldw	fp,36(sp)
    1cf0:	ddc00817 	ldw	r23,32(sp)
    1cf4:	dd800717 	ldw	r22,28(sp)
    1cf8:	dd400617 	ldw	r21,24(sp)
    1cfc:	dd000517 	ldw	r20,20(sp)
    1d00:	dcc00417 	ldw	r19,16(sp)
    1d04:	dc800317 	ldw	r18,12(sp)
    1d08:	dc400217 	ldw	r17,8(sp)
    1d0c:	dc000117 	ldw	r16,4(sp)
    1d10:	dec00b04 	addi	sp,sp,44
    1d14:	f800283a 	ret
    1d18:	00800304 	movi	r2,12
    1d1c:	90800015 	stw	r2,0(r18)
    1d20:	0005883a 	mov	r2,zero
    1d24:	003ff006 	br	1ce8 <__alt_data_end+0xfffe9648>
    1d28:	01002004 	movi	r4,128
    1d2c:	02001004 	movi	r8,64
    1d30:	01c00fc4 	movi	r7,63
    1d34:	003f6106 	br	1abc <__alt_data_end+0xfffe941c>
    1d38:	4009883a 	mov	r4,r8
    1d3c:	003f7506 	br	1b14 <__alt_data_end+0xfffe9474>
    1d40:	81000317 	ldw	r4,12(r16)
    1d44:	003fde06 	br	1cc0 <__alt_data_end+0xfffe9620>
    1d48:	81c5883a 	add	r2,r16,r7
    1d4c:	11400117 	ldw	r5,4(r2)
    1d50:	9009883a 	mov	r4,r18
    1d54:	29400054 	ori	r5,r5,1
    1d58:	11400115 	stw	r5,4(r2)
    1d5c:	0004d340 	call	4d34 <__malloc_unlock>
    1d60:	80800204 	addi	r2,r16,8
    1d64:	003fe006 	br	1ce8 <__alt_data_end+0xfffe9648>
    1d68:	9c000217 	ldw	r16,8(r19)
    1d6c:	00bfff04 	movi	r2,-4
    1d70:	85800117 	ldw	r22,4(r16)
    1d74:	b0ac703a 	and	r22,r22,r2
    1d78:	b4400336 	bltu	r22,r17,1d88 <_malloc_r+0x344>
    1d7c:	b445c83a 	sub	r2,r22,r17
    1d80:	00c003c4 	movi	r3,15
    1d84:	18805d16 	blt	r3,r2,1efc <_malloc_r+0x4b8>
    1d88:	05c00034 	movhi	r23,0
    1d8c:	00800034 	movhi	r2,0
    1d90:	10996604 	addi	r2,r2,26008
    1d94:	bdd6d204 	addi	r23,r23,23368
    1d98:	15400017 	ldw	r21,0(r2)
    1d9c:	b8c00017 	ldw	r3,0(r23)
    1da0:	00bfffc4 	movi	r2,-1
    1da4:	858d883a 	add	r6,r16,r22
    1da8:	8d6b883a 	add	r21,r17,r21
    1dac:	1880ea26 	beq	r3,r2,2158 <_malloc_r+0x714>
    1db0:	ad4403c4 	addi	r21,r21,4111
    1db4:	00bc0004 	movi	r2,-4096
    1db8:	a8aa703a 	and	r21,r21,r2
    1dbc:	a80b883a 	mov	r5,r21
    1dc0:	9009883a 	mov	r4,r18
    1dc4:	d9800015 	stw	r6,0(sp)
    1dc8:	0002da80 	call	2da8 <_sbrk_r>
    1dcc:	1029883a 	mov	r20,r2
    1dd0:	00bfffc4 	movi	r2,-1
    1dd4:	d9800017 	ldw	r6,0(sp)
    1dd8:	a080e826 	beq	r20,r2,217c <_malloc_r+0x738>
    1ddc:	a180a636 	bltu	r20,r6,2078 <_malloc_r+0x634>
    1de0:	07000034 	movhi	fp,0
    1de4:	e7196704 	addi	fp,fp,26012
    1de8:	e0800017 	ldw	r2,0(fp)
    1dec:	a887883a 	add	r3,r21,r2
    1df0:	e0c00015 	stw	r3,0(fp)
    1df4:	3500e626 	beq	r6,r20,2190 <_malloc_r+0x74c>
    1df8:	b9000017 	ldw	r4,0(r23)
    1dfc:	00bfffc4 	movi	r2,-1
    1e00:	2080ee26 	beq	r4,r2,21bc <_malloc_r+0x778>
    1e04:	a185c83a 	sub	r2,r20,r6
    1e08:	10c5883a 	add	r2,r2,r3
    1e0c:	e0800015 	stw	r2,0(fp)
    1e10:	a0c001cc 	andi	r3,r20,7
    1e14:	1800bc26 	beq	r3,zero,2108 <_malloc_r+0x6c4>
    1e18:	a0e9c83a 	sub	r20,r20,r3
    1e1c:	00840204 	movi	r2,4104
    1e20:	a5000204 	addi	r20,r20,8
    1e24:	10c7c83a 	sub	r3,r2,r3
    1e28:	a545883a 	add	r2,r20,r21
    1e2c:	1083ffcc 	andi	r2,r2,4095
    1e30:	18abc83a 	sub	r21,r3,r2
    1e34:	a80b883a 	mov	r5,r21
    1e38:	9009883a 	mov	r4,r18
    1e3c:	0002da80 	call	2da8 <_sbrk_r>
    1e40:	00ffffc4 	movi	r3,-1
    1e44:	10c0e126 	beq	r2,r3,21cc <_malloc_r+0x788>
    1e48:	1505c83a 	sub	r2,r2,r20
    1e4c:	1545883a 	add	r2,r2,r21
    1e50:	10800054 	ori	r2,r2,1
    1e54:	e0c00017 	ldw	r3,0(fp)
    1e58:	9d000215 	stw	r20,8(r19)
    1e5c:	a0800115 	stw	r2,4(r20)
    1e60:	a8c7883a 	add	r3,r21,r3
    1e64:	e0c00015 	stw	r3,0(fp)
    1e68:	84c00e26 	beq	r16,r19,1ea4 <_malloc_r+0x460>
    1e6c:	018003c4 	movi	r6,15
    1e70:	3580a72e 	bgeu	r6,r22,2110 <_malloc_r+0x6cc>
    1e74:	81400117 	ldw	r5,4(r16)
    1e78:	013ffe04 	movi	r4,-8
    1e7c:	b0bffd04 	addi	r2,r22,-12
    1e80:	1104703a 	and	r2,r2,r4
    1e84:	2900004c 	andi	r4,r5,1
    1e88:	2088b03a 	or	r4,r4,r2
    1e8c:	81000115 	stw	r4,4(r16)
    1e90:	01400144 	movi	r5,5
    1e94:	8089883a 	add	r4,r16,r2
    1e98:	21400115 	stw	r5,4(r4)
    1e9c:	21400215 	stw	r5,8(r4)
    1ea0:	3080cd36 	bltu	r6,r2,21d8 <_malloc_r+0x794>
    1ea4:	00800034 	movhi	r2,0
    1ea8:	10996504 	addi	r2,r2,26004
    1eac:	11000017 	ldw	r4,0(r2)
    1eb0:	20c0012e 	bgeu	r4,r3,1eb8 <_malloc_r+0x474>
    1eb4:	10c00015 	stw	r3,0(r2)
    1eb8:	00800034 	movhi	r2,0
    1ebc:	10996404 	addi	r2,r2,26000
    1ec0:	11000017 	ldw	r4,0(r2)
    1ec4:	9c000217 	ldw	r16,8(r19)
    1ec8:	20c0012e 	bgeu	r4,r3,1ed0 <_malloc_r+0x48c>
    1ecc:	10c00015 	stw	r3,0(r2)
    1ed0:	80c00117 	ldw	r3,4(r16)
    1ed4:	00bfff04 	movi	r2,-4
    1ed8:	1886703a 	and	r3,r3,r2
    1edc:	1c45c83a 	sub	r2,r3,r17
    1ee0:	1c400236 	bltu	r3,r17,1eec <_malloc_r+0x4a8>
    1ee4:	00c003c4 	movi	r3,15
    1ee8:	18800416 	blt	r3,r2,1efc <_malloc_r+0x4b8>
    1eec:	9009883a 	mov	r4,r18
    1ef0:	0004d340 	call	4d34 <__malloc_unlock>
    1ef4:	0005883a 	mov	r2,zero
    1ef8:	003f7b06 	br	1ce8 <__alt_data_end+0xfffe9648>
    1efc:	88c00054 	ori	r3,r17,1
    1f00:	80c00115 	stw	r3,4(r16)
    1f04:	8463883a 	add	r17,r16,r17
    1f08:	10800054 	ori	r2,r2,1
    1f0c:	9c400215 	stw	r17,8(r19)
    1f10:	88800115 	stw	r2,4(r17)
    1f14:	9009883a 	mov	r4,r18
    1f18:	0004d340 	call	4d34 <__malloc_unlock>
    1f1c:	80800204 	addi	r2,r16,8
    1f20:	003f7106 	br	1ce8 <__alt_data_end+0xfffe9648>
    1f24:	00c00504 	movi	r3,20
    1f28:	18804a2e 	bgeu	r3,r2,2054 <_malloc_r+0x610>
    1f2c:	00c01504 	movi	r3,84
    1f30:	18806e36 	bltu	r3,r2,20ec <_malloc_r+0x6a8>
    1f34:	8804d33a 	srli	r2,r17,12
    1f38:	12001bc4 	addi	r8,r2,111
    1f3c:	11c01b84 	addi	r7,r2,110
    1f40:	4209883a 	add	r4,r8,r8
    1f44:	003edd06 	br	1abc <__alt_data_end+0xfffe941c>
    1f48:	3804d27a 	srli	r2,r7,9
    1f4c:	00c00104 	movi	r3,4
    1f50:	1880442e 	bgeu	r3,r2,2064 <_malloc_r+0x620>
    1f54:	00c00504 	movi	r3,20
    1f58:	18808136 	bltu	r3,r2,2160 <_malloc_r+0x71c>
    1f5c:	11401704 	addi	r5,r2,92
    1f60:	10c016c4 	addi	r3,r2,91
    1f64:	294b883a 	add	r5,r5,r5
    1f68:	294b883a 	add	r5,r5,r5
    1f6c:	294b883a 	add	r5,r5,r5
    1f70:	994b883a 	add	r5,r19,r5
    1f74:	28800017 	ldw	r2,0(r5)
    1f78:	01800034 	movhi	r6,0
    1f7c:	297ffe04 	addi	r5,r5,-8
    1f80:	3195c804 	addi	r6,r6,22304
    1f84:	28806526 	beq	r5,r2,211c <_malloc_r+0x6d8>
    1f88:	01bfff04 	movi	r6,-4
    1f8c:	10c00117 	ldw	r3,4(r2)
    1f90:	1986703a 	and	r3,r3,r6
    1f94:	38c0022e 	bgeu	r7,r3,1fa0 <_malloc_r+0x55c>
    1f98:	10800217 	ldw	r2,8(r2)
    1f9c:	28bffb1e 	bne	r5,r2,1f8c <__alt_data_end+0xfffe98ec>
    1fa0:	11400317 	ldw	r5,12(r2)
    1fa4:	98c00117 	ldw	r3,4(r19)
    1fa8:	81400315 	stw	r5,12(r16)
    1fac:	80800215 	stw	r2,8(r16)
    1fb0:	2c000215 	stw	r16,8(r5)
    1fb4:	14000315 	stw	r16,12(r2)
    1fb8:	003ef806 	br	1b9c <__alt_data_end+0xfffe94fc>
    1fbc:	88c00054 	ori	r3,r17,1
    1fc0:	80c00115 	stw	r3,4(r16)
    1fc4:	8463883a 	add	r17,r16,r17
    1fc8:	34400515 	stw	r17,20(r6)
    1fcc:	34400415 	stw	r17,16(r6)
    1fd0:	10c00054 	ori	r3,r2,1
    1fd4:	8a000315 	stw	r8,12(r17)
    1fd8:	8a000215 	stw	r8,8(r17)
    1fdc:	88c00115 	stw	r3,4(r17)
    1fe0:	88a3883a 	add	r17,r17,r2
    1fe4:	88800015 	stw	r2,0(r17)
    1fe8:	9009883a 	mov	r4,r18
    1fec:	0004d340 	call	4d34 <__malloc_unlock>
    1ff0:	80800204 	addi	r2,r16,8
    1ff4:	003f3c06 	br	1ce8 <__alt_data_end+0xfffe9648>
    1ff8:	30c00117 	ldw	r3,4(r6)
    1ffc:	003ee706 	br	1b9c <__alt_data_end+0xfffe94fc>
    2000:	5ac00044 	addi	r11,r11,1
    2004:	588000cc 	andi	r2,r11,3
    2008:	31800204 	addi	r6,r6,8
    200c:	103efd1e 	bne	r2,zero,1c04 <__alt_data_end+0xfffe9564>
    2010:	00002406 	br	20a4 <_malloc_r+0x660>
    2014:	14000317 	ldw	r16,12(r2)
    2018:	143f251e 	bne	r2,r16,1cb0 <__alt_data_end+0xfffe9610>
    201c:	21000084 	addi	r4,r4,2
    2020:	003ebc06 	br	1b14 <__alt_data_end+0xfffe9474>
    2024:	8085883a 	add	r2,r16,r2
    2028:	10c00117 	ldw	r3,4(r2)
    202c:	81000317 	ldw	r4,12(r16)
    2030:	81400217 	ldw	r5,8(r16)
    2034:	18c00054 	ori	r3,r3,1
    2038:	10c00115 	stw	r3,4(r2)
    203c:	29000315 	stw	r4,12(r5)
    2040:	21400215 	stw	r5,8(r4)
    2044:	9009883a 	mov	r4,r18
    2048:	0004d340 	call	4d34 <__malloc_unlock>
    204c:	80800204 	addi	r2,r16,8
    2050:	003f2506 	br	1ce8 <__alt_data_end+0xfffe9648>
    2054:	12001704 	addi	r8,r2,92
    2058:	11c016c4 	addi	r7,r2,91
    205c:	4209883a 	add	r4,r8,r8
    2060:	003e9606 	br	1abc <__alt_data_end+0xfffe941c>
    2064:	3804d1ba 	srli	r2,r7,6
    2068:	11400e44 	addi	r5,r2,57
    206c:	10c00e04 	addi	r3,r2,56
    2070:	294b883a 	add	r5,r5,r5
    2074:	003fbc06 	br	1f68 <__alt_data_end+0xfffe98c8>
    2078:	84ff5926 	beq	r16,r19,1de0 <__alt_data_end+0xfffe9740>
    207c:	00800034 	movhi	r2,0
    2080:	1095c804 	addi	r2,r2,22304
    2084:	14000217 	ldw	r16,8(r2)
    2088:	00bfff04 	movi	r2,-4
    208c:	80c00117 	ldw	r3,4(r16)
    2090:	1886703a 	and	r3,r3,r2
    2094:	003f9106 	br	1edc <__alt_data_end+0xfffe983c>
    2098:	60800217 	ldw	r2,8(r12)
    209c:	213fffc4 	addi	r4,r4,-1
    20a0:	1300651e 	bne	r2,r12,2238 <_malloc_r+0x7f4>
    20a4:	208000cc 	andi	r2,r4,3
    20a8:	633ffe04 	addi	r12,r12,-8
    20ac:	103ffa1e 	bne	r2,zero,2098 <__alt_data_end+0xfffe99f8>
    20b0:	98800117 	ldw	r2,4(r19)
    20b4:	0146303a 	nor	r3,zero,r5
    20b8:	1884703a 	and	r2,r3,r2
    20bc:	98800115 	stw	r2,4(r19)
    20c0:	294b883a 	add	r5,r5,r5
    20c4:	117f2836 	bltu	r2,r5,1d68 <__alt_data_end+0xfffe96c8>
    20c8:	283f2726 	beq	r5,zero,1d68 <__alt_data_end+0xfffe96c8>
    20cc:	2886703a 	and	r3,r5,r2
    20d0:	5809883a 	mov	r4,r11
    20d4:	183ec31e 	bne	r3,zero,1be4 <__alt_data_end+0xfffe9544>
    20d8:	294b883a 	add	r5,r5,r5
    20dc:	2886703a 	and	r3,r5,r2
    20e0:	21000104 	addi	r4,r4,4
    20e4:	183ffc26 	beq	r3,zero,20d8 <__alt_data_end+0xfffe9a38>
    20e8:	003ebe06 	br	1be4 <__alt_data_end+0xfffe9544>
    20ec:	00c05504 	movi	r3,340
    20f0:	18801236 	bltu	r3,r2,213c <_malloc_r+0x6f8>
    20f4:	8804d3fa 	srli	r2,r17,15
    20f8:	12001e04 	addi	r8,r2,120
    20fc:	11c01dc4 	addi	r7,r2,119
    2100:	4209883a 	add	r4,r8,r8
    2104:	003e6d06 	br	1abc <__alt_data_end+0xfffe941c>
    2108:	00c40004 	movi	r3,4096
    210c:	003f4606 	br	1e28 <__alt_data_end+0xfffe9788>
    2110:	00800044 	movi	r2,1
    2114:	a0800115 	stw	r2,4(r20)
    2118:	003f7406 	br	1eec <__alt_data_end+0xfffe984c>
    211c:	1805d0ba 	srai	r2,r3,2
    2120:	01c00044 	movi	r7,1
    2124:	30c00117 	ldw	r3,4(r6)
    2128:	388e983a 	sll	r7,r7,r2
    212c:	2805883a 	mov	r2,r5
    2130:	38c6b03a 	or	r3,r7,r3
    2134:	30c00115 	stw	r3,4(r6)
    2138:	003f9b06 	br	1fa8 <__alt_data_end+0xfffe9908>
    213c:	00c15504 	movi	r3,1364
    2140:	18801a36 	bltu	r3,r2,21ac <_malloc_r+0x768>
    2144:	8804d4ba 	srli	r2,r17,18
    2148:	12001f44 	addi	r8,r2,125
    214c:	11c01f04 	addi	r7,r2,124
    2150:	4209883a 	add	r4,r8,r8
    2154:	003e5906 	br	1abc <__alt_data_end+0xfffe941c>
    2158:	ad400404 	addi	r21,r21,16
    215c:	003f1706 	br	1dbc <__alt_data_end+0xfffe971c>
    2160:	00c01504 	movi	r3,84
    2164:	18802336 	bltu	r3,r2,21f4 <_malloc_r+0x7b0>
    2168:	3804d33a 	srli	r2,r7,12
    216c:	11401bc4 	addi	r5,r2,111
    2170:	10c01b84 	addi	r3,r2,110
    2174:	294b883a 	add	r5,r5,r5
    2178:	003f7b06 	br	1f68 <__alt_data_end+0xfffe98c8>
    217c:	9c000217 	ldw	r16,8(r19)
    2180:	00bfff04 	movi	r2,-4
    2184:	80c00117 	ldw	r3,4(r16)
    2188:	1886703a 	and	r3,r3,r2
    218c:	003f5306 	br	1edc <__alt_data_end+0xfffe983c>
    2190:	3083ffcc 	andi	r2,r6,4095
    2194:	103f181e 	bne	r2,zero,1df8 <__alt_data_end+0xfffe9758>
    2198:	99000217 	ldw	r4,8(r19)
    219c:	b545883a 	add	r2,r22,r21
    21a0:	10800054 	ori	r2,r2,1
    21a4:	20800115 	stw	r2,4(r4)
    21a8:	003f3e06 	br	1ea4 <__alt_data_end+0xfffe9804>
    21ac:	01003f84 	movi	r4,254
    21b0:	02001fc4 	movi	r8,127
    21b4:	01c01f84 	movi	r7,126
    21b8:	003e4006 	br	1abc <__alt_data_end+0xfffe941c>
    21bc:	00800034 	movhi	r2,0
    21c0:	1096d204 	addi	r2,r2,23368
    21c4:	15000015 	stw	r20,0(r2)
    21c8:	003f1106 	br	1e10 <__alt_data_end+0xfffe9770>
    21cc:	00800044 	movi	r2,1
    21d0:	002b883a 	mov	r21,zero
    21d4:	003f1f06 	br	1e54 <__alt_data_end+0xfffe97b4>
    21d8:	81400204 	addi	r5,r16,8
    21dc:	9009883a 	mov	r4,r18
    21e0:	0003a3c0 	call	3a3c <_free_r>
    21e4:	00800034 	movhi	r2,0
    21e8:	10996704 	addi	r2,r2,26012
    21ec:	10c00017 	ldw	r3,0(r2)
    21f0:	003f2c06 	br	1ea4 <__alt_data_end+0xfffe9804>
    21f4:	00c05504 	movi	r3,340
    21f8:	18800536 	bltu	r3,r2,2210 <_malloc_r+0x7cc>
    21fc:	3804d3fa 	srli	r2,r7,15
    2200:	11401e04 	addi	r5,r2,120
    2204:	10c01dc4 	addi	r3,r2,119
    2208:	294b883a 	add	r5,r5,r5
    220c:	003f5606 	br	1f68 <__alt_data_end+0xfffe98c8>
    2210:	00c15504 	movi	r3,1364
    2214:	18800536 	bltu	r3,r2,222c <_malloc_r+0x7e8>
    2218:	3804d4ba 	srli	r2,r7,18
    221c:	11401f44 	addi	r5,r2,125
    2220:	10c01f04 	addi	r3,r2,124
    2224:	294b883a 	add	r5,r5,r5
    2228:	003f4f06 	br	1f68 <__alt_data_end+0xfffe98c8>
    222c:	01403f84 	movi	r5,254
    2230:	00c01f84 	movi	r3,126
    2234:	003f4c06 	br	1f68 <__alt_data_end+0xfffe98c8>
    2238:	98800117 	ldw	r2,4(r19)
    223c:	003fa006 	br	20c0 <__alt_data_end+0xfffe9a20>
    2240:	8808d0fa 	srli	r4,r17,3
    2244:	20800044 	addi	r2,r4,1
    2248:	1085883a 	add	r2,r2,r2
    224c:	003e9006 	br	1c90 <__alt_data_end+0xfffe95f0>

00002250 <memchr>:
    2250:	208000cc 	andi	r2,r4,3
    2254:	280f883a 	mov	r7,r5
    2258:	10003426 	beq	r2,zero,232c <memchr+0xdc>
    225c:	30bfffc4 	addi	r2,r6,-1
    2260:	30001a26 	beq	r6,zero,22cc <memchr+0x7c>
    2264:	20c00003 	ldbu	r3,0(r4)
    2268:	29803fcc 	andi	r6,r5,255
    226c:	30c0051e 	bne	r6,r3,2284 <memchr+0x34>
    2270:	00001806 	br	22d4 <memchr+0x84>
    2274:	10001526 	beq	r2,zero,22cc <memchr+0x7c>
    2278:	20c00003 	ldbu	r3,0(r4)
    227c:	10bfffc4 	addi	r2,r2,-1
    2280:	30c01426 	beq	r6,r3,22d4 <memchr+0x84>
    2284:	21000044 	addi	r4,r4,1
    2288:	20c000cc 	andi	r3,r4,3
    228c:	183ff91e 	bne	r3,zero,2274 <__alt_data_end+0xfffe9bd4>
    2290:	020000c4 	movi	r8,3
    2294:	40801136 	bltu	r8,r2,22dc <memchr+0x8c>
    2298:	10000c26 	beq	r2,zero,22cc <memchr+0x7c>
    229c:	20c00003 	ldbu	r3,0(r4)
    22a0:	29403fcc 	andi	r5,r5,255
    22a4:	28c00b26 	beq	r5,r3,22d4 <memchr+0x84>
    22a8:	20c00044 	addi	r3,r4,1
    22ac:	39803fcc 	andi	r6,r7,255
    22b0:	2089883a 	add	r4,r4,r2
    22b4:	00000306 	br	22c4 <memchr+0x74>
    22b8:	18c00044 	addi	r3,r3,1
    22bc:	197fffc3 	ldbu	r5,-1(r3)
    22c0:	31400526 	beq	r6,r5,22d8 <memchr+0x88>
    22c4:	1805883a 	mov	r2,r3
    22c8:	20fffb1e 	bne	r4,r3,22b8 <__alt_data_end+0xfffe9c18>
    22cc:	0005883a 	mov	r2,zero
    22d0:	f800283a 	ret
    22d4:	2005883a 	mov	r2,r4
    22d8:	f800283a 	ret
    22dc:	28c03fcc 	andi	r3,r5,255
    22e0:	1812923a 	slli	r9,r3,8
    22e4:	02ffbff4 	movhi	r11,65279
    22e8:	02a02074 	movhi	r10,32897
    22ec:	48d2b03a 	or	r9,r9,r3
    22f0:	4806943a 	slli	r3,r9,16
    22f4:	5affbfc4 	addi	r11,r11,-257
    22f8:	52a02004 	addi	r10,r10,-32640
    22fc:	48d2b03a 	or	r9,r9,r3
    2300:	20c00017 	ldw	r3,0(r4)
    2304:	48c6f03a 	xor	r3,r9,r3
    2308:	1acd883a 	add	r6,r3,r11
    230c:	00c6303a 	nor	r3,zero,r3
    2310:	30c6703a 	and	r3,r6,r3
    2314:	1a86703a 	and	r3,r3,r10
    2318:	183fe01e 	bne	r3,zero,229c <__alt_data_end+0xfffe9bfc>
    231c:	10bfff04 	addi	r2,r2,-4
    2320:	21000104 	addi	r4,r4,4
    2324:	40bff636 	bltu	r8,r2,2300 <__alt_data_end+0xfffe9c60>
    2328:	003fdb06 	br	2298 <__alt_data_end+0xfffe9bf8>
    232c:	3005883a 	mov	r2,r6
    2330:	003fd706 	br	2290 <__alt_data_end+0xfffe9bf0>

00002334 <memcmp>:
    2334:	01c000c4 	movi	r7,3
    2338:	3980192e 	bgeu	r7,r6,23a0 <memcmp+0x6c>
    233c:	2144b03a 	or	r2,r4,r5
    2340:	11c4703a 	and	r2,r2,r7
    2344:	10000f26 	beq	r2,zero,2384 <memcmp+0x50>
    2348:	20800003 	ldbu	r2,0(r4)
    234c:	28c00003 	ldbu	r3,0(r5)
    2350:	10c0151e 	bne	r2,r3,23a8 <memcmp+0x74>
    2354:	31bfff84 	addi	r6,r6,-2
    2358:	01ffffc4 	movi	r7,-1
    235c:	00000406 	br	2370 <memcmp+0x3c>
    2360:	20800003 	ldbu	r2,0(r4)
    2364:	28c00003 	ldbu	r3,0(r5)
    2368:	31bfffc4 	addi	r6,r6,-1
    236c:	10c00e1e 	bne	r2,r3,23a8 <memcmp+0x74>
    2370:	21000044 	addi	r4,r4,1
    2374:	29400044 	addi	r5,r5,1
    2378:	31fff91e 	bne	r6,r7,2360 <__alt_data_end+0xfffe9cc0>
    237c:	0005883a 	mov	r2,zero
    2380:	f800283a 	ret
    2384:	20c00017 	ldw	r3,0(r4)
    2388:	28800017 	ldw	r2,0(r5)
    238c:	18bfee1e 	bne	r3,r2,2348 <__alt_data_end+0xfffe9ca8>
    2390:	31bfff04 	addi	r6,r6,-4
    2394:	21000104 	addi	r4,r4,4
    2398:	29400104 	addi	r5,r5,4
    239c:	39bff936 	bltu	r7,r6,2384 <__alt_data_end+0xfffe9ce4>
    23a0:	303fe91e 	bne	r6,zero,2348 <__alt_data_end+0xfffe9ca8>
    23a4:	003ff506 	br	237c <__alt_data_end+0xfffe9cdc>
    23a8:	10c5c83a 	sub	r2,r2,r3
    23ac:	f800283a 	ret

000023b0 <memcpy>:
    23b0:	defffd04 	addi	sp,sp,-12
    23b4:	dfc00215 	stw	ra,8(sp)
    23b8:	dc400115 	stw	r17,4(sp)
    23bc:	dc000015 	stw	r16,0(sp)
    23c0:	00c003c4 	movi	r3,15
    23c4:	2005883a 	mov	r2,r4
    23c8:	1980452e 	bgeu	r3,r6,24e0 <memcpy+0x130>
    23cc:	2906b03a 	or	r3,r5,r4
    23d0:	18c000cc 	andi	r3,r3,3
    23d4:	1800441e 	bne	r3,zero,24e8 <memcpy+0x138>
    23d8:	347ffc04 	addi	r17,r6,-16
    23dc:	8822d13a 	srli	r17,r17,4
    23e0:	28c00104 	addi	r3,r5,4
    23e4:	23400104 	addi	r13,r4,4
    23e8:	8820913a 	slli	r16,r17,4
    23ec:	2b000204 	addi	r12,r5,8
    23f0:	22c00204 	addi	r11,r4,8
    23f4:	84000504 	addi	r16,r16,20
    23f8:	2a800304 	addi	r10,r5,12
    23fc:	22400304 	addi	r9,r4,12
    2400:	2c21883a 	add	r16,r5,r16
    2404:	2811883a 	mov	r8,r5
    2408:	200f883a 	mov	r7,r4
    240c:	41000017 	ldw	r4,0(r8)
    2410:	1fc00017 	ldw	ra,0(r3)
    2414:	63c00017 	ldw	r15,0(r12)
    2418:	39000015 	stw	r4,0(r7)
    241c:	53800017 	ldw	r14,0(r10)
    2420:	6fc00015 	stw	ra,0(r13)
    2424:	5bc00015 	stw	r15,0(r11)
    2428:	4b800015 	stw	r14,0(r9)
    242c:	18c00404 	addi	r3,r3,16
    2430:	39c00404 	addi	r7,r7,16
    2434:	42000404 	addi	r8,r8,16
    2438:	6b400404 	addi	r13,r13,16
    243c:	63000404 	addi	r12,r12,16
    2440:	5ac00404 	addi	r11,r11,16
    2444:	52800404 	addi	r10,r10,16
    2448:	4a400404 	addi	r9,r9,16
    244c:	1c3fef1e 	bne	r3,r16,240c <__alt_data_end+0xfffe9d6c>
    2450:	89c00044 	addi	r7,r17,1
    2454:	380e913a 	slli	r7,r7,4
    2458:	310003cc 	andi	r4,r6,15
    245c:	02c000c4 	movi	r11,3
    2460:	11c7883a 	add	r3,r2,r7
    2464:	29cb883a 	add	r5,r5,r7
    2468:	5900212e 	bgeu	r11,r4,24f0 <memcpy+0x140>
    246c:	1813883a 	mov	r9,r3
    2470:	2811883a 	mov	r8,r5
    2474:	200f883a 	mov	r7,r4
    2478:	42800017 	ldw	r10,0(r8)
    247c:	4a400104 	addi	r9,r9,4
    2480:	39ffff04 	addi	r7,r7,-4
    2484:	4abfff15 	stw	r10,-4(r9)
    2488:	42000104 	addi	r8,r8,4
    248c:	59fffa36 	bltu	r11,r7,2478 <__alt_data_end+0xfffe9dd8>
    2490:	213fff04 	addi	r4,r4,-4
    2494:	2008d0ba 	srli	r4,r4,2
    2498:	318000cc 	andi	r6,r6,3
    249c:	21000044 	addi	r4,r4,1
    24a0:	2109883a 	add	r4,r4,r4
    24a4:	2109883a 	add	r4,r4,r4
    24a8:	1907883a 	add	r3,r3,r4
    24ac:	290b883a 	add	r5,r5,r4
    24b0:	30000626 	beq	r6,zero,24cc <memcpy+0x11c>
    24b4:	198d883a 	add	r6,r3,r6
    24b8:	29c00003 	ldbu	r7,0(r5)
    24bc:	18c00044 	addi	r3,r3,1
    24c0:	29400044 	addi	r5,r5,1
    24c4:	19ffffc5 	stb	r7,-1(r3)
    24c8:	19bffb1e 	bne	r3,r6,24b8 <__alt_data_end+0xfffe9e18>
    24cc:	dfc00217 	ldw	ra,8(sp)
    24d0:	dc400117 	ldw	r17,4(sp)
    24d4:	dc000017 	ldw	r16,0(sp)
    24d8:	dec00304 	addi	sp,sp,12
    24dc:	f800283a 	ret
    24e0:	2007883a 	mov	r3,r4
    24e4:	003ff206 	br	24b0 <__alt_data_end+0xfffe9e10>
    24e8:	2007883a 	mov	r3,r4
    24ec:	003ff106 	br	24b4 <__alt_data_end+0xfffe9e14>
    24f0:	200d883a 	mov	r6,r4
    24f4:	003fee06 	br	24b0 <__alt_data_end+0xfffe9e10>

000024f8 <memmove>:
    24f8:	2005883a 	mov	r2,r4
    24fc:	29000b2e 	bgeu	r5,r4,252c <memmove+0x34>
    2500:	298f883a 	add	r7,r5,r6
    2504:	21c0092e 	bgeu	r4,r7,252c <memmove+0x34>
    2508:	2187883a 	add	r3,r4,r6
    250c:	198bc83a 	sub	r5,r3,r6
    2510:	30004826 	beq	r6,zero,2634 <memmove+0x13c>
    2514:	39ffffc4 	addi	r7,r7,-1
    2518:	39000003 	ldbu	r4,0(r7)
    251c:	18ffffc4 	addi	r3,r3,-1
    2520:	19000005 	stb	r4,0(r3)
    2524:	28fffb1e 	bne	r5,r3,2514 <__alt_data_end+0xfffe9e74>
    2528:	f800283a 	ret
    252c:	00c003c4 	movi	r3,15
    2530:	1980412e 	bgeu	r3,r6,2638 <memmove+0x140>
    2534:	2886b03a 	or	r3,r5,r2
    2538:	18c000cc 	andi	r3,r3,3
    253c:	1800401e 	bne	r3,zero,2640 <memmove+0x148>
    2540:	33fffc04 	addi	r15,r6,-16
    2544:	781ed13a 	srli	r15,r15,4
    2548:	28c00104 	addi	r3,r5,4
    254c:	13400104 	addi	r13,r2,4
    2550:	781c913a 	slli	r14,r15,4
    2554:	2b000204 	addi	r12,r5,8
    2558:	12c00204 	addi	r11,r2,8
    255c:	73800504 	addi	r14,r14,20
    2560:	2a800304 	addi	r10,r5,12
    2564:	12400304 	addi	r9,r2,12
    2568:	2b9d883a 	add	r14,r5,r14
    256c:	2811883a 	mov	r8,r5
    2570:	100f883a 	mov	r7,r2
    2574:	41000017 	ldw	r4,0(r8)
    2578:	39c00404 	addi	r7,r7,16
    257c:	18c00404 	addi	r3,r3,16
    2580:	393ffc15 	stw	r4,-16(r7)
    2584:	193ffc17 	ldw	r4,-16(r3)
    2588:	6b400404 	addi	r13,r13,16
    258c:	5ac00404 	addi	r11,r11,16
    2590:	693ffc15 	stw	r4,-16(r13)
    2594:	61000017 	ldw	r4,0(r12)
    2598:	4a400404 	addi	r9,r9,16
    259c:	42000404 	addi	r8,r8,16
    25a0:	593ffc15 	stw	r4,-16(r11)
    25a4:	51000017 	ldw	r4,0(r10)
    25a8:	63000404 	addi	r12,r12,16
    25ac:	52800404 	addi	r10,r10,16
    25b0:	493ffc15 	stw	r4,-16(r9)
    25b4:	1bbfef1e 	bne	r3,r14,2574 <__alt_data_end+0xfffe9ed4>
    25b8:	79000044 	addi	r4,r15,1
    25bc:	2008913a 	slli	r4,r4,4
    25c0:	328003cc 	andi	r10,r6,15
    25c4:	02c000c4 	movi	r11,3
    25c8:	1107883a 	add	r3,r2,r4
    25cc:	290b883a 	add	r5,r5,r4
    25d0:	5a801e2e 	bgeu	r11,r10,264c <memmove+0x154>
    25d4:	1813883a 	mov	r9,r3
    25d8:	2811883a 	mov	r8,r5
    25dc:	500f883a 	mov	r7,r10
    25e0:	41000017 	ldw	r4,0(r8)
    25e4:	4a400104 	addi	r9,r9,4
    25e8:	39ffff04 	addi	r7,r7,-4
    25ec:	493fff15 	stw	r4,-4(r9)
    25f0:	42000104 	addi	r8,r8,4
    25f4:	59fffa36 	bltu	r11,r7,25e0 <__alt_data_end+0xfffe9f40>
    25f8:	513fff04 	addi	r4,r10,-4
    25fc:	2008d0ba 	srli	r4,r4,2
    2600:	318000cc 	andi	r6,r6,3
    2604:	21000044 	addi	r4,r4,1
    2608:	2109883a 	add	r4,r4,r4
    260c:	2109883a 	add	r4,r4,r4
    2610:	1907883a 	add	r3,r3,r4
    2614:	290b883a 	add	r5,r5,r4
    2618:	30000b26 	beq	r6,zero,2648 <memmove+0x150>
    261c:	198d883a 	add	r6,r3,r6
    2620:	29c00003 	ldbu	r7,0(r5)
    2624:	18c00044 	addi	r3,r3,1
    2628:	29400044 	addi	r5,r5,1
    262c:	19ffffc5 	stb	r7,-1(r3)
    2630:	19bffb1e 	bne	r3,r6,2620 <__alt_data_end+0xfffe9f80>
    2634:	f800283a 	ret
    2638:	1007883a 	mov	r3,r2
    263c:	003ff606 	br	2618 <__alt_data_end+0xfffe9f78>
    2640:	1007883a 	mov	r3,r2
    2644:	003ff506 	br	261c <__alt_data_end+0xfffe9f7c>
    2648:	f800283a 	ret
    264c:	500d883a 	mov	r6,r10
    2650:	003ff106 	br	2618 <__alt_data_end+0xfffe9f78>

00002654 <_putc_r>:
    2654:	defffc04 	addi	sp,sp,-16
    2658:	dc000215 	stw	r16,8(sp)
    265c:	dfc00315 	stw	ra,12(sp)
    2660:	2021883a 	mov	r16,r4
    2664:	20000226 	beq	r4,zero,2670 <_putc_r+0x1c>
    2668:	20800e17 	ldw	r2,56(r4)
    266c:	10001b26 	beq	r2,zero,26dc <_putc_r+0x88>
    2670:	30800217 	ldw	r2,8(r6)
    2674:	10bfffc4 	addi	r2,r2,-1
    2678:	30800215 	stw	r2,8(r6)
    267c:	10000a16 	blt	r2,zero,26a8 <_putc_r+0x54>
    2680:	30800017 	ldw	r2,0(r6)
    2684:	11400005 	stb	r5,0(r2)
    2688:	30800017 	ldw	r2,0(r6)
    268c:	10c00044 	addi	r3,r2,1
    2690:	30c00015 	stw	r3,0(r6)
    2694:	10800003 	ldbu	r2,0(r2)
    2698:	dfc00317 	ldw	ra,12(sp)
    269c:	dc000217 	ldw	r16,8(sp)
    26a0:	dec00404 	addi	sp,sp,16
    26a4:	f800283a 	ret
    26a8:	30c00617 	ldw	r3,24(r6)
    26ac:	10c00616 	blt	r2,r3,26c8 <_putc_r+0x74>
    26b0:	30800017 	ldw	r2,0(r6)
    26b4:	00c00284 	movi	r3,10
    26b8:	11400005 	stb	r5,0(r2)
    26bc:	30800017 	ldw	r2,0(r6)
    26c0:	11400003 	ldbu	r5,0(r2)
    26c4:	28fff11e 	bne	r5,r3,268c <__alt_data_end+0xfffe9fec>
    26c8:	8009883a 	mov	r4,r16
    26cc:	dfc00317 	ldw	ra,12(sp)
    26d0:	dc000217 	ldw	r16,8(sp)
    26d4:	dec00404 	addi	sp,sp,16
    26d8:	0002e941 	jmpi	2e94 <__swbuf_r>
    26dc:	d9400015 	stw	r5,0(sp)
    26e0:	d9800115 	stw	r6,4(sp)
    26e4:	00038c80 	call	38c8 <__sinit>
    26e8:	d9800117 	ldw	r6,4(sp)
    26ec:	d9400017 	ldw	r5,0(sp)
    26f0:	003fdf06 	br	2670 <__alt_data_end+0xfffe9fd0>

000026f4 <putc>:
    26f4:	00800034 	movhi	r2,0
    26f8:	defffc04 	addi	sp,sp,-16
    26fc:	1096d104 	addi	r2,r2,23364
    2700:	dc000115 	stw	r16,4(sp)
    2704:	14000017 	ldw	r16,0(r2)
    2708:	dc400215 	stw	r17,8(sp)
    270c:	dfc00315 	stw	ra,12(sp)
    2710:	2023883a 	mov	r17,r4
    2714:	80000226 	beq	r16,zero,2720 <putc+0x2c>
    2718:	80800e17 	ldw	r2,56(r16)
    271c:	10001a26 	beq	r2,zero,2788 <putc+0x94>
    2720:	28800217 	ldw	r2,8(r5)
    2724:	10bfffc4 	addi	r2,r2,-1
    2728:	28800215 	stw	r2,8(r5)
    272c:	10000b16 	blt	r2,zero,275c <putc+0x68>
    2730:	28800017 	ldw	r2,0(r5)
    2734:	14400005 	stb	r17,0(r2)
    2738:	28800017 	ldw	r2,0(r5)
    273c:	10c00044 	addi	r3,r2,1
    2740:	28c00015 	stw	r3,0(r5)
    2744:	10800003 	ldbu	r2,0(r2)
    2748:	dfc00317 	ldw	ra,12(sp)
    274c:	dc400217 	ldw	r17,8(sp)
    2750:	dc000117 	ldw	r16,4(sp)
    2754:	dec00404 	addi	sp,sp,16
    2758:	f800283a 	ret
    275c:	28c00617 	ldw	r3,24(r5)
    2760:	10c00e16 	blt	r2,r3,279c <putc+0xa8>
    2764:	28800017 	ldw	r2,0(r5)
    2768:	01000284 	movi	r4,10
    276c:	14400005 	stb	r17,0(r2)
    2770:	28800017 	ldw	r2,0(r5)
    2774:	10c00003 	ldbu	r3,0(r2)
    2778:	193ff01e 	bne	r3,r4,273c <__alt_data_end+0xfffea09c>
    277c:	280d883a 	mov	r6,r5
    2780:	180b883a 	mov	r5,r3
    2784:	00000706 	br	27a4 <putc+0xb0>
    2788:	8009883a 	mov	r4,r16
    278c:	d9400015 	stw	r5,0(sp)
    2790:	00038c80 	call	38c8 <__sinit>
    2794:	d9400017 	ldw	r5,0(sp)
    2798:	003fe106 	br	2720 <__alt_data_end+0xfffea080>
    279c:	280d883a 	mov	r6,r5
    27a0:	880b883a 	mov	r5,r17
    27a4:	8009883a 	mov	r4,r16
    27a8:	dfc00317 	ldw	ra,12(sp)
    27ac:	dc400217 	ldw	r17,8(sp)
    27b0:	dc000117 	ldw	r16,4(sp)
    27b4:	dec00404 	addi	sp,sp,16
    27b8:	0002e941 	jmpi	2e94 <__swbuf_r>

000027bc <_realloc_r>:
    27bc:	defff604 	addi	sp,sp,-40
    27c0:	dc800215 	stw	r18,8(sp)
    27c4:	dfc00915 	stw	ra,36(sp)
    27c8:	df000815 	stw	fp,32(sp)
    27cc:	ddc00715 	stw	r23,28(sp)
    27d0:	dd800615 	stw	r22,24(sp)
    27d4:	dd400515 	stw	r21,20(sp)
    27d8:	dd000415 	stw	r20,16(sp)
    27dc:	dcc00315 	stw	r19,12(sp)
    27e0:	dc400115 	stw	r17,4(sp)
    27e4:	dc000015 	stw	r16,0(sp)
    27e8:	3025883a 	mov	r18,r6
    27ec:	2800b726 	beq	r5,zero,2acc <_realloc_r+0x310>
    27f0:	282b883a 	mov	r21,r5
    27f4:	2029883a 	mov	r20,r4
    27f8:	0004d100 	call	4d10 <__malloc_lock>
    27fc:	a8bfff17 	ldw	r2,-4(r21)
    2800:	043fff04 	movi	r16,-4
    2804:	90c002c4 	addi	r3,r18,11
    2808:	01000584 	movi	r4,22
    280c:	acfffe04 	addi	r19,r21,-8
    2810:	1420703a 	and	r16,r2,r16
    2814:	20c0332e 	bgeu	r4,r3,28e4 <_realloc_r+0x128>
    2818:	047ffe04 	movi	r17,-8
    281c:	1c62703a 	and	r17,r3,r17
    2820:	8807883a 	mov	r3,r17
    2824:	88005816 	blt	r17,zero,2988 <_realloc_r+0x1cc>
    2828:	8c805736 	bltu	r17,r18,2988 <_realloc_r+0x1cc>
    282c:	80c0300e 	bge	r16,r3,28f0 <_realloc_r+0x134>
    2830:	07000034 	movhi	fp,0
    2834:	e715c804 	addi	fp,fp,22304
    2838:	e1c00217 	ldw	r7,8(fp)
    283c:	9c09883a 	add	r4,r19,r16
    2840:	22000117 	ldw	r8,4(r4)
    2844:	21c06326 	beq	r4,r7,29d4 <_realloc_r+0x218>
    2848:	017fff84 	movi	r5,-2
    284c:	414a703a 	and	r5,r8,r5
    2850:	214b883a 	add	r5,r4,r5
    2854:	29800117 	ldw	r6,4(r5)
    2858:	3180004c 	andi	r6,r6,1
    285c:	30003f26 	beq	r6,zero,295c <_realloc_r+0x1a0>
    2860:	1080004c 	andi	r2,r2,1
    2864:	10008326 	beq	r2,zero,2a74 <_realloc_r+0x2b8>
    2868:	900b883a 	mov	r5,r18
    286c:	a009883a 	mov	r4,r20
    2870:	0001a440 	call	1a44 <_malloc_r>
    2874:	1025883a 	mov	r18,r2
    2878:	10011e26 	beq	r2,zero,2cf4 <_realloc_r+0x538>
    287c:	a93fff17 	ldw	r4,-4(r21)
    2880:	10fffe04 	addi	r3,r2,-8
    2884:	00bfff84 	movi	r2,-2
    2888:	2084703a 	and	r2,r4,r2
    288c:	9885883a 	add	r2,r19,r2
    2890:	1880ee26 	beq	r3,r2,2c4c <_realloc_r+0x490>
    2894:	81bfff04 	addi	r6,r16,-4
    2898:	00800904 	movi	r2,36
    289c:	1180b836 	bltu	r2,r6,2b80 <_realloc_r+0x3c4>
    28a0:	00c004c4 	movi	r3,19
    28a4:	19809636 	bltu	r3,r6,2b00 <_realloc_r+0x344>
    28a8:	9005883a 	mov	r2,r18
    28ac:	a807883a 	mov	r3,r21
    28b0:	19000017 	ldw	r4,0(r3)
    28b4:	11000015 	stw	r4,0(r2)
    28b8:	19000117 	ldw	r4,4(r3)
    28bc:	11000115 	stw	r4,4(r2)
    28c0:	18c00217 	ldw	r3,8(r3)
    28c4:	10c00215 	stw	r3,8(r2)
    28c8:	a80b883a 	mov	r5,r21
    28cc:	a009883a 	mov	r4,r20
    28d0:	0003a3c0 	call	3a3c <_free_r>
    28d4:	a009883a 	mov	r4,r20
    28d8:	0004d340 	call	4d34 <__malloc_unlock>
    28dc:	9005883a 	mov	r2,r18
    28e0:	00001206 	br	292c <_realloc_r+0x170>
    28e4:	00c00404 	movi	r3,16
    28e8:	1823883a 	mov	r17,r3
    28ec:	003fce06 	br	2828 <__alt_data_end+0xfffea188>
    28f0:	a825883a 	mov	r18,r21
    28f4:	8445c83a 	sub	r2,r16,r17
    28f8:	00c003c4 	movi	r3,15
    28fc:	18802636 	bltu	r3,r2,2998 <_realloc_r+0x1dc>
    2900:	99800117 	ldw	r6,4(r19)
    2904:	9c07883a 	add	r3,r19,r16
    2908:	3180004c 	andi	r6,r6,1
    290c:	3420b03a 	or	r16,r6,r16
    2910:	9c000115 	stw	r16,4(r19)
    2914:	18800117 	ldw	r2,4(r3)
    2918:	10800054 	ori	r2,r2,1
    291c:	18800115 	stw	r2,4(r3)
    2920:	a009883a 	mov	r4,r20
    2924:	0004d340 	call	4d34 <__malloc_unlock>
    2928:	9005883a 	mov	r2,r18
    292c:	dfc00917 	ldw	ra,36(sp)
    2930:	df000817 	ldw	fp,32(sp)
    2934:	ddc00717 	ldw	r23,28(sp)
    2938:	dd800617 	ldw	r22,24(sp)
    293c:	dd400517 	ldw	r21,20(sp)
    2940:	dd000417 	ldw	r20,16(sp)
    2944:	dcc00317 	ldw	r19,12(sp)
    2948:	dc800217 	ldw	r18,8(sp)
    294c:	dc400117 	ldw	r17,4(sp)
    2950:	dc000017 	ldw	r16,0(sp)
    2954:	dec00a04 	addi	sp,sp,40
    2958:	f800283a 	ret
    295c:	017fff04 	movi	r5,-4
    2960:	414a703a 	and	r5,r8,r5
    2964:	814d883a 	add	r6,r16,r5
    2968:	30c01f16 	blt	r6,r3,29e8 <_realloc_r+0x22c>
    296c:	20800317 	ldw	r2,12(r4)
    2970:	20c00217 	ldw	r3,8(r4)
    2974:	a825883a 	mov	r18,r21
    2978:	3021883a 	mov	r16,r6
    297c:	18800315 	stw	r2,12(r3)
    2980:	10c00215 	stw	r3,8(r2)
    2984:	003fdb06 	br	28f4 <__alt_data_end+0xfffea254>
    2988:	00800304 	movi	r2,12
    298c:	a0800015 	stw	r2,0(r20)
    2990:	0005883a 	mov	r2,zero
    2994:	003fe506 	br	292c <__alt_data_end+0xfffea28c>
    2998:	98c00117 	ldw	r3,4(r19)
    299c:	9c4b883a 	add	r5,r19,r17
    29a0:	11000054 	ori	r4,r2,1
    29a4:	18c0004c 	andi	r3,r3,1
    29a8:	1c62b03a 	or	r17,r3,r17
    29ac:	9c400115 	stw	r17,4(r19)
    29b0:	29000115 	stw	r4,4(r5)
    29b4:	2885883a 	add	r2,r5,r2
    29b8:	10c00117 	ldw	r3,4(r2)
    29bc:	29400204 	addi	r5,r5,8
    29c0:	a009883a 	mov	r4,r20
    29c4:	18c00054 	ori	r3,r3,1
    29c8:	10c00115 	stw	r3,4(r2)
    29cc:	0003a3c0 	call	3a3c <_free_r>
    29d0:	003fd306 	br	2920 <__alt_data_end+0xfffea280>
    29d4:	017fff04 	movi	r5,-4
    29d8:	414a703a 	and	r5,r8,r5
    29dc:	89800404 	addi	r6,r17,16
    29e0:	8151883a 	add	r8,r16,r5
    29e4:	4180590e 	bge	r8,r6,2b4c <_realloc_r+0x390>
    29e8:	1080004c 	andi	r2,r2,1
    29ec:	103f9e1e 	bne	r2,zero,2868 <__alt_data_end+0xfffea1c8>
    29f0:	adbffe17 	ldw	r22,-8(r21)
    29f4:	00bfff04 	movi	r2,-4
    29f8:	9dadc83a 	sub	r22,r19,r22
    29fc:	b1800117 	ldw	r6,4(r22)
    2a00:	3084703a 	and	r2,r6,r2
    2a04:	20002026 	beq	r4,zero,2a88 <_realloc_r+0x2cc>
    2a08:	80af883a 	add	r23,r16,r2
    2a0c:	b96f883a 	add	r23,r23,r5
    2a10:	21c05f26 	beq	r4,r7,2b90 <_realloc_r+0x3d4>
    2a14:	b8c01c16 	blt	r23,r3,2a88 <_realloc_r+0x2cc>
    2a18:	20800317 	ldw	r2,12(r4)
    2a1c:	20c00217 	ldw	r3,8(r4)
    2a20:	81bfff04 	addi	r6,r16,-4
    2a24:	01000904 	movi	r4,36
    2a28:	18800315 	stw	r2,12(r3)
    2a2c:	10c00215 	stw	r3,8(r2)
    2a30:	b0c00217 	ldw	r3,8(r22)
    2a34:	b0800317 	ldw	r2,12(r22)
    2a38:	b4800204 	addi	r18,r22,8
    2a3c:	18800315 	stw	r2,12(r3)
    2a40:	10c00215 	stw	r3,8(r2)
    2a44:	21801b36 	bltu	r4,r6,2ab4 <_realloc_r+0x2f8>
    2a48:	008004c4 	movi	r2,19
    2a4c:	1180352e 	bgeu	r2,r6,2b24 <_realloc_r+0x368>
    2a50:	a8800017 	ldw	r2,0(r21)
    2a54:	b0800215 	stw	r2,8(r22)
    2a58:	a8800117 	ldw	r2,4(r21)
    2a5c:	b0800315 	stw	r2,12(r22)
    2a60:	008006c4 	movi	r2,27
    2a64:	11807f36 	bltu	r2,r6,2c64 <_realloc_r+0x4a8>
    2a68:	b0800404 	addi	r2,r22,16
    2a6c:	ad400204 	addi	r21,r21,8
    2a70:	00002d06 	br	2b28 <_realloc_r+0x36c>
    2a74:	adbffe17 	ldw	r22,-8(r21)
    2a78:	00bfff04 	movi	r2,-4
    2a7c:	9dadc83a 	sub	r22,r19,r22
    2a80:	b1000117 	ldw	r4,4(r22)
    2a84:	2084703a 	and	r2,r4,r2
    2a88:	b03f7726 	beq	r22,zero,2868 <__alt_data_end+0xfffea1c8>
    2a8c:	80af883a 	add	r23,r16,r2
    2a90:	b8ff7516 	blt	r23,r3,2868 <__alt_data_end+0xfffea1c8>
    2a94:	b0800317 	ldw	r2,12(r22)
    2a98:	b0c00217 	ldw	r3,8(r22)
    2a9c:	81bfff04 	addi	r6,r16,-4
    2aa0:	01000904 	movi	r4,36
    2aa4:	18800315 	stw	r2,12(r3)
    2aa8:	10c00215 	stw	r3,8(r2)
    2aac:	b4800204 	addi	r18,r22,8
    2ab0:	21bfe52e 	bgeu	r4,r6,2a48 <__alt_data_end+0xfffea3a8>
    2ab4:	a80b883a 	mov	r5,r21
    2ab8:	9009883a 	mov	r4,r18
    2abc:	00024f80 	call	24f8 <memmove>
    2ac0:	b821883a 	mov	r16,r23
    2ac4:	b027883a 	mov	r19,r22
    2ac8:	003f8a06 	br	28f4 <__alt_data_end+0xfffea254>
    2acc:	300b883a 	mov	r5,r6
    2ad0:	dfc00917 	ldw	ra,36(sp)
    2ad4:	df000817 	ldw	fp,32(sp)
    2ad8:	ddc00717 	ldw	r23,28(sp)
    2adc:	dd800617 	ldw	r22,24(sp)
    2ae0:	dd400517 	ldw	r21,20(sp)
    2ae4:	dd000417 	ldw	r20,16(sp)
    2ae8:	dcc00317 	ldw	r19,12(sp)
    2aec:	dc800217 	ldw	r18,8(sp)
    2af0:	dc400117 	ldw	r17,4(sp)
    2af4:	dc000017 	ldw	r16,0(sp)
    2af8:	dec00a04 	addi	sp,sp,40
    2afc:	0001a441 	jmpi	1a44 <_malloc_r>
    2b00:	a8c00017 	ldw	r3,0(r21)
    2b04:	90c00015 	stw	r3,0(r18)
    2b08:	a8c00117 	ldw	r3,4(r21)
    2b0c:	90c00115 	stw	r3,4(r18)
    2b10:	00c006c4 	movi	r3,27
    2b14:	19804536 	bltu	r3,r6,2c2c <_realloc_r+0x470>
    2b18:	90800204 	addi	r2,r18,8
    2b1c:	a8c00204 	addi	r3,r21,8
    2b20:	003f6306 	br	28b0 <__alt_data_end+0xfffea210>
    2b24:	9005883a 	mov	r2,r18
    2b28:	a8c00017 	ldw	r3,0(r21)
    2b2c:	b821883a 	mov	r16,r23
    2b30:	b027883a 	mov	r19,r22
    2b34:	10c00015 	stw	r3,0(r2)
    2b38:	a8c00117 	ldw	r3,4(r21)
    2b3c:	10c00115 	stw	r3,4(r2)
    2b40:	a8c00217 	ldw	r3,8(r21)
    2b44:	10c00215 	stw	r3,8(r2)
    2b48:	003f6a06 	br	28f4 <__alt_data_end+0xfffea254>
    2b4c:	9c67883a 	add	r19,r19,r17
    2b50:	4445c83a 	sub	r2,r8,r17
    2b54:	e4c00215 	stw	r19,8(fp)
    2b58:	10800054 	ori	r2,r2,1
    2b5c:	98800115 	stw	r2,4(r19)
    2b60:	a8bfff17 	ldw	r2,-4(r21)
    2b64:	a009883a 	mov	r4,r20
    2b68:	1080004c 	andi	r2,r2,1
    2b6c:	1462b03a 	or	r17,r2,r17
    2b70:	ac7fff15 	stw	r17,-4(r21)
    2b74:	0004d340 	call	4d34 <__malloc_unlock>
    2b78:	a805883a 	mov	r2,r21
    2b7c:	003f6b06 	br	292c <__alt_data_end+0xfffea28c>
    2b80:	a80b883a 	mov	r5,r21
    2b84:	9009883a 	mov	r4,r18
    2b88:	00024f80 	call	24f8 <memmove>
    2b8c:	003f4e06 	br	28c8 <__alt_data_end+0xfffea228>
    2b90:	89000404 	addi	r4,r17,16
    2b94:	b93fbc16 	blt	r23,r4,2a88 <__alt_data_end+0xfffea3e8>
    2b98:	b0800317 	ldw	r2,12(r22)
    2b9c:	b0c00217 	ldw	r3,8(r22)
    2ba0:	81bfff04 	addi	r6,r16,-4
    2ba4:	01000904 	movi	r4,36
    2ba8:	18800315 	stw	r2,12(r3)
    2bac:	10c00215 	stw	r3,8(r2)
    2bb0:	b4800204 	addi	r18,r22,8
    2bb4:	21804336 	bltu	r4,r6,2cc4 <_realloc_r+0x508>
    2bb8:	008004c4 	movi	r2,19
    2bbc:	11803f2e 	bgeu	r2,r6,2cbc <_realloc_r+0x500>
    2bc0:	a8800017 	ldw	r2,0(r21)
    2bc4:	b0800215 	stw	r2,8(r22)
    2bc8:	a8800117 	ldw	r2,4(r21)
    2bcc:	b0800315 	stw	r2,12(r22)
    2bd0:	008006c4 	movi	r2,27
    2bd4:	11803f36 	bltu	r2,r6,2cd4 <_realloc_r+0x518>
    2bd8:	b0800404 	addi	r2,r22,16
    2bdc:	ad400204 	addi	r21,r21,8
    2be0:	a8c00017 	ldw	r3,0(r21)
    2be4:	10c00015 	stw	r3,0(r2)
    2be8:	a8c00117 	ldw	r3,4(r21)
    2bec:	10c00115 	stw	r3,4(r2)
    2bf0:	a8c00217 	ldw	r3,8(r21)
    2bf4:	10c00215 	stw	r3,8(r2)
    2bf8:	b447883a 	add	r3,r22,r17
    2bfc:	bc45c83a 	sub	r2,r23,r17
    2c00:	e0c00215 	stw	r3,8(fp)
    2c04:	10800054 	ori	r2,r2,1
    2c08:	18800115 	stw	r2,4(r3)
    2c0c:	b0800117 	ldw	r2,4(r22)
    2c10:	a009883a 	mov	r4,r20
    2c14:	1080004c 	andi	r2,r2,1
    2c18:	1462b03a 	or	r17,r2,r17
    2c1c:	b4400115 	stw	r17,4(r22)
    2c20:	0004d340 	call	4d34 <__malloc_unlock>
    2c24:	9005883a 	mov	r2,r18
    2c28:	003f4006 	br	292c <__alt_data_end+0xfffea28c>
    2c2c:	a8c00217 	ldw	r3,8(r21)
    2c30:	90c00215 	stw	r3,8(r18)
    2c34:	a8c00317 	ldw	r3,12(r21)
    2c38:	90c00315 	stw	r3,12(r18)
    2c3c:	30801126 	beq	r6,r2,2c84 <_realloc_r+0x4c8>
    2c40:	90800404 	addi	r2,r18,16
    2c44:	a8c00404 	addi	r3,r21,16
    2c48:	003f1906 	br	28b0 <__alt_data_end+0xfffea210>
    2c4c:	90ffff17 	ldw	r3,-4(r18)
    2c50:	00bfff04 	movi	r2,-4
    2c54:	a825883a 	mov	r18,r21
    2c58:	1884703a 	and	r2,r3,r2
    2c5c:	80a1883a 	add	r16,r16,r2
    2c60:	003f2406 	br	28f4 <__alt_data_end+0xfffea254>
    2c64:	a8800217 	ldw	r2,8(r21)
    2c68:	b0800415 	stw	r2,16(r22)
    2c6c:	a8800317 	ldw	r2,12(r21)
    2c70:	b0800515 	stw	r2,20(r22)
    2c74:	31000a26 	beq	r6,r4,2ca0 <_realloc_r+0x4e4>
    2c78:	b0800604 	addi	r2,r22,24
    2c7c:	ad400404 	addi	r21,r21,16
    2c80:	003fa906 	br	2b28 <__alt_data_end+0xfffea488>
    2c84:	a9000417 	ldw	r4,16(r21)
    2c88:	90800604 	addi	r2,r18,24
    2c8c:	a8c00604 	addi	r3,r21,24
    2c90:	91000415 	stw	r4,16(r18)
    2c94:	a9000517 	ldw	r4,20(r21)
    2c98:	91000515 	stw	r4,20(r18)
    2c9c:	003f0406 	br	28b0 <__alt_data_end+0xfffea210>
    2ca0:	a8c00417 	ldw	r3,16(r21)
    2ca4:	ad400604 	addi	r21,r21,24
    2ca8:	b0800804 	addi	r2,r22,32
    2cac:	b0c00615 	stw	r3,24(r22)
    2cb0:	a8ffff17 	ldw	r3,-4(r21)
    2cb4:	b0c00715 	stw	r3,28(r22)
    2cb8:	003f9b06 	br	2b28 <__alt_data_end+0xfffea488>
    2cbc:	9005883a 	mov	r2,r18
    2cc0:	003fc706 	br	2be0 <__alt_data_end+0xfffea540>
    2cc4:	a80b883a 	mov	r5,r21
    2cc8:	9009883a 	mov	r4,r18
    2ccc:	00024f80 	call	24f8 <memmove>
    2cd0:	003fc906 	br	2bf8 <__alt_data_end+0xfffea558>
    2cd4:	a8800217 	ldw	r2,8(r21)
    2cd8:	b0800415 	stw	r2,16(r22)
    2cdc:	a8800317 	ldw	r2,12(r21)
    2ce0:	b0800515 	stw	r2,20(r22)
    2ce4:	31000726 	beq	r6,r4,2d04 <_realloc_r+0x548>
    2ce8:	b0800604 	addi	r2,r22,24
    2cec:	ad400404 	addi	r21,r21,16
    2cf0:	003fbb06 	br	2be0 <__alt_data_end+0xfffea540>
    2cf4:	a009883a 	mov	r4,r20
    2cf8:	0004d340 	call	4d34 <__malloc_unlock>
    2cfc:	0005883a 	mov	r2,zero
    2d00:	003f0a06 	br	292c <__alt_data_end+0xfffea28c>
    2d04:	a8c00417 	ldw	r3,16(r21)
    2d08:	ad400604 	addi	r21,r21,24
    2d0c:	b0800804 	addi	r2,r22,32
    2d10:	b0c00615 	stw	r3,24(r22)
    2d14:	a8ffff17 	ldw	r3,-4(r21)
    2d18:	b0c00715 	stw	r3,28(r22)
    2d1c:	003fb006 	br	2be0 <__alt_data_end+0xfffea540>

00002d20 <__srget_r>:
    2d20:	defffd04 	addi	sp,sp,-12
    2d24:	dc400115 	stw	r17,4(sp)
    2d28:	dc000015 	stw	r16,0(sp)
    2d2c:	dfc00215 	stw	ra,8(sp)
    2d30:	2023883a 	mov	r17,r4
    2d34:	2821883a 	mov	r16,r5
    2d38:	20000226 	beq	r4,zero,2d44 <__srget_r+0x24>
    2d3c:	20800e17 	ldw	r2,56(r4)
    2d40:	10001026 	beq	r2,zero,2d84 <__srget_r+0x64>
    2d44:	800b883a 	mov	r5,r16
    2d48:	8809883a 	mov	r4,r17
    2d4c:	00041d40 	call	41d4 <__srefill_r>
    2d50:	10000e1e 	bne	r2,zero,2d8c <__srget_r+0x6c>
    2d54:	80c00017 	ldw	r3,0(r16)
    2d58:	80800117 	ldw	r2,4(r16)
    2d5c:	19000044 	addi	r4,r3,1
    2d60:	10bfffc4 	addi	r2,r2,-1
    2d64:	80800115 	stw	r2,4(r16)
    2d68:	81000015 	stw	r4,0(r16)
    2d6c:	18800003 	ldbu	r2,0(r3)
    2d70:	dfc00217 	ldw	ra,8(sp)
    2d74:	dc400117 	ldw	r17,4(sp)
    2d78:	dc000017 	ldw	r16,0(sp)
    2d7c:	dec00304 	addi	sp,sp,12
    2d80:	f800283a 	ret
    2d84:	00038c80 	call	38c8 <__sinit>
    2d88:	003fee06 	br	2d44 <__alt_data_end+0xfffea6a4>
    2d8c:	00bfffc4 	movi	r2,-1
    2d90:	003ff706 	br	2d70 <__alt_data_end+0xfffea6d0>

00002d94 <__srget>:
    2d94:	00800034 	movhi	r2,0
    2d98:	1096d104 	addi	r2,r2,23364
    2d9c:	200b883a 	mov	r5,r4
    2da0:	11000017 	ldw	r4,0(r2)
    2da4:	0002d201 	jmpi	2d20 <__srget_r>

00002da8 <_sbrk_r>:
    2da8:	defffd04 	addi	sp,sp,-12
    2dac:	dc000015 	stw	r16,0(sp)
    2db0:	04000034 	movhi	r16,0
    2db4:	dc400115 	stw	r17,4(sp)
    2db8:	84196304 	addi	r16,r16,25996
    2dbc:	2023883a 	mov	r17,r4
    2dc0:	2809883a 	mov	r4,r5
    2dc4:	dfc00215 	stw	ra,8(sp)
    2dc8:	80000015 	stw	zero,0(r16)
    2dcc:	0004e980 	call	4e98 <sbrk>
    2dd0:	00ffffc4 	movi	r3,-1
    2dd4:	10c00526 	beq	r2,r3,2dec <_sbrk_r+0x44>
    2dd8:	dfc00217 	ldw	ra,8(sp)
    2ddc:	dc400117 	ldw	r17,4(sp)
    2de0:	dc000017 	ldw	r16,0(sp)
    2de4:	dec00304 	addi	sp,sp,12
    2de8:	f800283a 	ret
    2dec:	80c00017 	ldw	r3,0(r16)
    2df0:	183ff926 	beq	r3,zero,2dd8 <__alt_data_end+0xfffea738>
    2df4:	88c00015 	stw	r3,0(r17)
    2df8:	003ff706 	br	2dd8 <__alt_data_end+0xfffea738>

00002dfc <strlen>:
    2dfc:	208000cc 	andi	r2,r4,3
    2e00:	10002026 	beq	r2,zero,2e84 <strlen+0x88>
    2e04:	20800007 	ldb	r2,0(r4)
    2e08:	10002026 	beq	r2,zero,2e8c <strlen+0x90>
    2e0c:	2005883a 	mov	r2,r4
    2e10:	00000206 	br	2e1c <strlen+0x20>
    2e14:	10c00007 	ldb	r3,0(r2)
    2e18:	18001826 	beq	r3,zero,2e7c <strlen+0x80>
    2e1c:	10800044 	addi	r2,r2,1
    2e20:	10c000cc 	andi	r3,r2,3
    2e24:	183ffb1e 	bne	r3,zero,2e14 <__alt_data_end+0xfffea774>
    2e28:	10c00017 	ldw	r3,0(r2)
    2e2c:	01ffbff4 	movhi	r7,65279
    2e30:	39ffbfc4 	addi	r7,r7,-257
    2e34:	00ca303a 	nor	r5,zero,r3
    2e38:	01a02074 	movhi	r6,32897
    2e3c:	19c7883a 	add	r3,r3,r7
    2e40:	31a02004 	addi	r6,r6,-32640
    2e44:	1946703a 	and	r3,r3,r5
    2e48:	1986703a 	and	r3,r3,r6
    2e4c:	1800091e 	bne	r3,zero,2e74 <strlen+0x78>
    2e50:	10800104 	addi	r2,r2,4
    2e54:	10c00017 	ldw	r3,0(r2)
    2e58:	19cb883a 	add	r5,r3,r7
    2e5c:	00c6303a 	nor	r3,zero,r3
    2e60:	28c6703a 	and	r3,r5,r3
    2e64:	1986703a 	and	r3,r3,r6
    2e68:	183ff926 	beq	r3,zero,2e50 <__alt_data_end+0xfffea7b0>
    2e6c:	00000106 	br	2e74 <strlen+0x78>
    2e70:	10800044 	addi	r2,r2,1
    2e74:	10c00007 	ldb	r3,0(r2)
    2e78:	183ffd1e 	bne	r3,zero,2e70 <__alt_data_end+0xfffea7d0>
    2e7c:	1105c83a 	sub	r2,r2,r4
    2e80:	f800283a 	ret
    2e84:	2005883a 	mov	r2,r4
    2e88:	003fe706 	br	2e28 <__alt_data_end+0xfffea788>
    2e8c:	0005883a 	mov	r2,zero
    2e90:	f800283a 	ret

00002e94 <__swbuf_r>:
    2e94:	defffb04 	addi	sp,sp,-20
    2e98:	dcc00315 	stw	r19,12(sp)
    2e9c:	dc800215 	stw	r18,8(sp)
    2ea0:	dc000015 	stw	r16,0(sp)
    2ea4:	dfc00415 	stw	ra,16(sp)
    2ea8:	dc400115 	stw	r17,4(sp)
    2eac:	2025883a 	mov	r18,r4
    2eb0:	2827883a 	mov	r19,r5
    2eb4:	3021883a 	mov	r16,r6
    2eb8:	20000226 	beq	r4,zero,2ec4 <__swbuf_r+0x30>
    2ebc:	20800e17 	ldw	r2,56(r4)
    2ec0:	10004226 	beq	r2,zero,2fcc <__swbuf_r+0x138>
    2ec4:	80800617 	ldw	r2,24(r16)
    2ec8:	8100030b 	ldhu	r4,12(r16)
    2ecc:	80800215 	stw	r2,8(r16)
    2ed0:	2080020c 	andi	r2,r4,8
    2ed4:	10003626 	beq	r2,zero,2fb0 <__swbuf_r+0x11c>
    2ed8:	80c00417 	ldw	r3,16(r16)
    2edc:	18003426 	beq	r3,zero,2fb0 <__swbuf_r+0x11c>
    2ee0:	2088000c 	andi	r2,r4,8192
    2ee4:	9c403fcc 	andi	r17,r19,255
    2ee8:	10001a26 	beq	r2,zero,2f54 <__swbuf_r+0xc0>
    2eec:	80800017 	ldw	r2,0(r16)
    2ef0:	81000517 	ldw	r4,20(r16)
    2ef4:	10c7c83a 	sub	r3,r2,r3
    2ef8:	1900200e 	bge	r3,r4,2f7c <__swbuf_r+0xe8>
    2efc:	18c00044 	addi	r3,r3,1
    2f00:	81000217 	ldw	r4,8(r16)
    2f04:	11400044 	addi	r5,r2,1
    2f08:	81400015 	stw	r5,0(r16)
    2f0c:	213fffc4 	addi	r4,r4,-1
    2f10:	81000215 	stw	r4,8(r16)
    2f14:	14c00005 	stb	r19,0(r2)
    2f18:	80800517 	ldw	r2,20(r16)
    2f1c:	10c01e26 	beq	r2,r3,2f98 <__swbuf_r+0x104>
    2f20:	8080030b 	ldhu	r2,12(r16)
    2f24:	1080004c 	andi	r2,r2,1
    2f28:	10000226 	beq	r2,zero,2f34 <__swbuf_r+0xa0>
    2f2c:	00800284 	movi	r2,10
    2f30:	88801926 	beq	r17,r2,2f98 <__swbuf_r+0x104>
    2f34:	8805883a 	mov	r2,r17
    2f38:	dfc00417 	ldw	ra,16(sp)
    2f3c:	dcc00317 	ldw	r19,12(sp)
    2f40:	dc800217 	ldw	r18,8(sp)
    2f44:	dc400117 	ldw	r17,4(sp)
    2f48:	dc000017 	ldw	r16,0(sp)
    2f4c:	dec00504 	addi	sp,sp,20
    2f50:	f800283a 	ret
    2f54:	81401917 	ldw	r5,100(r16)
    2f58:	00b7ffc4 	movi	r2,-8193
    2f5c:	21080014 	ori	r4,r4,8192
    2f60:	2884703a 	and	r2,r5,r2
    2f64:	80801915 	stw	r2,100(r16)
    2f68:	80800017 	ldw	r2,0(r16)
    2f6c:	8100030d 	sth	r4,12(r16)
    2f70:	81000517 	ldw	r4,20(r16)
    2f74:	10c7c83a 	sub	r3,r2,r3
    2f78:	193fe016 	blt	r3,r4,2efc <__alt_data_end+0xfffea85c>
    2f7c:	800b883a 	mov	r5,r16
    2f80:	9009883a 	mov	r4,r18
    2f84:	00034dc0 	call	34dc <_fflush_r>
    2f88:	1000071e 	bne	r2,zero,2fa8 <__swbuf_r+0x114>
    2f8c:	80800017 	ldw	r2,0(r16)
    2f90:	00c00044 	movi	r3,1
    2f94:	003fda06 	br	2f00 <__alt_data_end+0xfffea860>
    2f98:	800b883a 	mov	r5,r16
    2f9c:	9009883a 	mov	r4,r18
    2fa0:	00034dc0 	call	34dc <_fflush_r>
    2fa4:	103fe326 	beq	r2,zero,2f34 <__alt_data_end+0xfffea894>
    2fa8:	00bfffc4 	movi	r2,-1
    2fac:	003fe206 	br	2f38 <__alt_data_end+0xfffea898>
    2fb0:	800b883a 	mov	r5,r16
    2fb4:	9009883a 	mov	r4,r18
    2fb8:	0002fec0 	call	2fec <__swsetup_r>
    2fbc:	103ffa1e 	bne	r2,zero,2fa8 <__alt_data_end+0xfffea908>
    2fc0:	8100030b 	ldhu	r4,12(r16)
    2fc4:	80c00417 	ldw	r3,16(r16)
    2fc8:	003fc506 	br	2ee0 <__alt_data_end+0xfffea840>
    2fcc:	00038c80 	call	38c8 <__sinit>
    2fd0:	003fbc06 	br	2ec4 <__alt_data_end+0xfffea824>

00002fd4 <__swbuf>:
    2fd4:	00800034 	movhi	r2,0
    2fd8:	1096d104 	addi	r2,r2,23364
    2fdc:	280d883a 	mov	r6,r5
    2fe0:	200b883a 	mov	r5,r4
    2fe4:	11000017 	ldw	r4,0(r2)
    2fe8:	0002e941 	jmpi	2e94 <__swbuf_r>

00002fec <__swsetup_r>:
    2fec:	00800034 	movhi	r2,0
    2ff0:	defffd04 	addi	sp,sp,-12
    2ff4:	1096d104 	addi	r2,r2,23364
    2ff8:	dc400115 	stw	r17,4(sp)
    2ffc:	2023883a 	mov	r17,r4
    3000:	11000017 	ldw	r4,0(r2)
    3004:	dc000015 	stw	r16,0(sp)
    3008:	dfc00215 	stw	ra,8(sp)
    300c:	2821883a 	mov	r16,r5
    3010:	20000226 	beq	r4,zero,301c <__swsetup_r+0x30>
    3014:	20800e17 	ldw	r2,56(r4)
    3018:	10003126 	beq	r2,zero,30e0 <__swsetup_r+0xf4>
    301c:	8080030b 	ldhu	r2,12(r16)
    3020:	10c0020c 	andi	r3,r2,8
    3024:	1009883a 	mov	r4,r2
    3028:	18000f26 	beq	r3,zero,3068 <__swsetup_r+0x7c>
    302c:	80c00417 	ldw	r3,16(r16)
    3030:	18001526 	beq	r3,zero,3088 <__swsetup_r+0x9c>
    3034:	1100004c 	andi	r4,r2,1
    3038:	20001c1e 	bne	r4,zero,30ac <__swsetup_r+0xc0>
    303c:	1080008c 	andi	r2,r2,2
    3040:	1000291e 	bne	r2,zero,30e8 <__swsetup_r+0xfc>
    3044:	80800517 	ldw	r2,20(r16)
    3048:	80800215 	stw	r2,8(r16)
    304c:	18001c26 	beq	r3,zero,30c0 <__swsetup_r+0xd4>
    3050:	0005883a 	mov	r2,zero
    3054:	dfc00217 	ldw	ra,8(sp)
    3058:	dc400117 	ldw	r17,4(sp)
    305c:	dc000017 	ldw	r16,0(sp)
    3060:	dec00304 	addi	sp,sp,12
    3064:	f800283a 	ret
    3068:	2080040c 	andi	r2,r4,16
    306c:	10002e26 	beq	r2,zero,3128 <__swsetup_r+0x13c>
    3070:	2080010c 	andi	r2,r4,4
    3074:	10001e1e 	bne	r2,zero,30f0 <__swsetup_r+0x104>
    3078:	80c00417 	ldw	r3,16(r16)
    307c:	20800214 	ori	r2,r4,8
    3080:	8080030d 	sth	r2,12(r16)
    3084:	183feb1e 	bne	r3,zero,3034 <__alt_data_end+0xfffea994>
    3088:	1100a00c 	andi	r4,r2,640
    308c:	01408004 	movi	r5,512
    3090:	217fe826 	beq	r4,r5,3034 <__alt_data_end+0xfffea994>
    3094:	800b883a 	mov	r5,r16
    3098:	8809883a 	mov	r4,r17
    309c:	0003ed40 	call	3ed4 <__smakebuf_r>
    30a0:	8080030b 	ldhu	r2,12(r16)
    30a4:	80c00417 	ldw	r3,16(r16)
    30a8:	003fe206 	br	3034 <__alt_data_end+0xfffea994>
    30ac:	80800517 	ldw	r2,20(r16)
    30b0:	80000215 	stw	zero,8(r16)
    30b4:	0085c83a 	sub	r2,zero,r2
    30b8:	80800615 	stw	r2,24(r16)
    30bc:	183fe41e 	bne	r3,zero,3050 <__alt_data_end+0xfffea9b0>
    30c0:	80c0030b 	ldhu	r3,12(r16)
    30c4:	0005883a 	mov	r2,zero
    30c8:	1900200c 	andi	r4,r3,128
    30cc:	203fe126 	beq	r4,zero,3054 <__alt_data_end+0xfffea9b4>
    30d0:	18c01014 	ori	r3,r3,64
    30d4:	80c0030d 	sth	r3,12(r16)
    30d8:	00bfffc4 	movi	r2,-1
    30dc:	003fdd06 	br	3054 <__alt_data_end+0xfffea9b4>
    30e0:	00038c80 	call	38c8 <__sinit>
    30e4:	003fcd06 	br	301c <__alt_data_end+0xfffea97c>
    30e8:	0005883a 	mov	r2,zero
    30ec:	003fd606 	br	3048 <__alt_data_end+0xfffea9a8>
    30f0:	81400c17 	ldw	r5,48(r16)
    30f4:	28000626 	beq	r5,zero,3110 <__swsetup_r+0x124>
    30f8:	80801004 	addi	r2,r16,64
    30fc:	28800326 	beq	r5,r2,310c <__swsetup_r+0x120>
    3100:	8809883a 	mov	r4,r17
    3104:	0003a3c0 	call	3a3c <_free_r>
    3108:	8100030b 	ldhu	r4,12(r16)
    310c:	80000c15 	stw	zero,48(r16)
    3110:	80c00417 	ldw	r3,16(r16)
    3114:	00bff6c4 	movi	r2,-37
    3118:	1108703a 	and	r4,r2,r4
    311c:	80000115 	stw	zero,4(r16)
    3120:	80c00015 	stw	r3,0(r16)
    3124:	003fd506 	br	307c <__alt_data_end+0xfffea9dc>
    3128:	00800244 	movi	r2,9
    312c:	88800015 	stw	r2,0(r17)
    3130:	20801014 	ori	r2,r4,64
    3134:	8080030d 	sth	r2,12(r16)
    3138:	00bfffc4 	movi	r2,-1
    313c:	003fc506 	br	3054 <__alt_data_end+0xfffea9b4>

00003140 <__call_exitprocs>:
    3140:	defff504 	addi	sp,sp,-44
    3144:	df000915 	stw	fp,36(sp)
    3148:	dd400615 	stw	r21,24(sp)
    314c:	dc800315 	stw	r18,12(sp)
    3150:	dfc00a15 	stw	ra,40(sp)
    3154:	ddc00815 	stw	r23,32(sp)
    3158:	dd800715 	stw	r22,28(sp)
    315c:	dd000515 	stw	r20,20(sp)
    3160:	dcc00415 	stw	r19,16(sp)
    3164:	dc400215 	stw	r17,8(sp)
    3168:	dc000115 	stw	r16,4(sp)
    316c:	d9000015 	stw	r4,0(sp)
    3170:	2839883a 	mov	fp,r5
    3174:	04800044 	movi	r18,1
    3178:	057fffc4 	movi	r21,-1
    317c:	00800034 	movhi	r2,0
    3180:	1096d004 	addi	r2,r2,23360
    3184:	12000017 	ldw	r8,0(r2)
    3188:	45005217 	ldw	r20,328(r8)
    318c:	44c05204 	addi	r19,r8,328
    3190:	a0001c26 	beq	r20,zero,3204 <__call_exitprocs+0xc4>
    3194:	a0800117 	ldw	r2,4(r20)
    3198:	15ffffc4 	addi	r23,r2,-1
    319c:	b8000d16 	blt	r23,zero,31d4 <__call_exitprocs+0x94>
    31a0:	14000044 	addi	r16,r2,1
    31a4:	8421883a 	add	r16,r16,r16
    31a8:	8421883a 	add	r16,r16,r16
    31ac:	84402004 	addi	r17,r16,128
    31b0:	a463883a 	add	r17,r20,r17
    31b4:	a421883a 	add	r16,r20,r16
    31b8:	e0001e26 	beq	fp,zero,3234 <__call_exitprocs+0xf4>
    31bc:	80804017 	ldw	r2,256(r16)
    31c0:	e0801c26 	beq	fp,r2,3234 <__call_exitprocs+0xf4>
    31c4:	bdffffc4 	addi	r23,r23,-1
    31c8:	843fff04 	addi	r16,r16,-4
    31cc:	8c7fff04 	addi	r17,r17,-4
    31d0:	bd7ff91e 	bne	r23,r21,31b8 <__alt_data_end+0xfffeab18>
    31d4:	00800034 	movhi	r2,0
    31d8:	10800004 	addi	r2,r2,0
    31dc:	10000926 	beq	r2,zero,3204 <__call_exitprocs+0xc4>
    31e0:	a0800117 	ldw	r2,4(r20)
    31e4:	1000301e 	bne	r2,zero,32a8 <__call_exitprocs+0x168>
    31e8:	a0800017 	ldw	r2,0(r20)
    31ec:	10003226 	beq	r2,zero,32b8 <__call_exitprocs+0x178>
    31f0:	a009883a 	mov	r4,r20
    31f4:	98800015 	stw	r2,0(r19)
    31f8:	00000000 	call	0 <__reset>
    31fc:	9d000017 	ldw	r20,0(r19)
    3200:	a03fe41e 	bne	r20,zero,3194 <__alt_data_end+0xfffeaaf4>
    3204:	dfc00a17 	ldw	ra,40(sp)
    3208:	df000917 	ldw	fp,36(sp)
    320c:	ddc00817 	ldw	r23,32(sp)
    3210:	dd800717 	ldw	r22,28(sp)
    3214:	dd400617 	ldw	r21,24(sp)
    3218:	dd000517 	ldw	r20,20(sp)
    321c:	dcc00417 	ldw	r19,16(sp)
    3220:	dc800317 	ldw	r18,12(sp)
    3224:	dc400217 	ldw	r17,8(sp)
    3228:	dc000117 	ldw	r16,4(sp)
    322c:	dec00b04 	addi	sp,sp,44
    3230:	f800283a 	ret
    3234:	a0800117 	ldw	r2,4(r20)
    3238:	80c00017 	ldw	r3,0(r16)
    323c:	10bfffc4 	addi	r2,r2,-1
    3240:	15c01426 	beq	r2,r23,3294 <__call_exitprocs+0x154>
    3244:	80000015 	stw	zero,0(r16)
    3248:	183fde26 	beq	r3,zero,31c4 <__alt_data_end+0xfffeab24>
    324c:	95c8983a 	sll	r4,r18,r23
    3250:	a0806217 	ldw	r2,392(r20)
    3254:	a5800117 	ldw	r22,4(r20)
    3258:	2084703a 	and	r2,r4,r2
    325c:	10000b26 	beq	r2,zero,328c <__call_exitprocs+0x14c>
    3260:	a0806317 	ldw	r2,396(r20)
    3264:	2088703a 	and	r4,r4,r2
    3268:	20000c1e 	bne	r4,zero,329c <__call_exitprocs+0x15c>
    326c:	89400017 	ldw	r5,0(r17)
    3270:	d9000017 	ldw	r4,0(sp)
    3274:	183ee83a 	callr	r3
    3278:	a0800117 	ldw	r2,4(r20)
    327c:	15bfbf1e 	bne	r2,r22,317c <__alt_data_end+0xfffeaadc>
    3280:	98800017 	ldw	r2,0(r19)
    3284:	153fcf26 	beq	r2,r20,31c4 <__alt_data_end+0xfffeab24>
    3288:	003fbc06 	br	317c <__alt_data_end+0xfffeaadc>
    328c:	183ee83a 	callr	r3
    3290:	003ff906 	br	3278 <__alt_data_end+0xfffeabd8>
    3294:	a5c00115 	stw	r23,4(r20)
    3298:	003feb06 	br	3248 <__alt_data_end+0xfffeaba8>
    329c:	89000017 	ldw	r4,0(r17)
    32a0:	183ee83a 	callr	r3
    32a4:	003ff406 	br	3278 <__alt_data_end+0xfffeabd8>
    32a8:	a0800017 	ldw	r2,0(r20)
    32ac:	a027883a 	mov	r19,r20
    32b0:	1029883a 	mov	r20,r2
    32b4:	003fb606 	br	3190 <__alt_data_end+0xfffeaaf0>
    32b8:	0005883a 	mov	r2,zero
    32bc:	003ffb06 	br	32ac <__alt_data_end+0xfffeac0c>

000032c0 <__sflush_r>:
    32c0:	2880030b 	ldhu	r2,12(r5)
    32c4:	defffb04 	addi	sp,sp,-20
    32c8:	dcc00315 	stw	r19,12(sp)
    32cc:	dc400115 	stw	r17,4(sp)
    32d0:	dfc00415 	stw	ra,16(sp)
    32d4:	dc800215 	stw	r18,8(sp)
    32d8:	dc000015 	stw	r16,0(sp)
    32dc:	10c0020c 	andi	r3,r2,8
    32e0:	2823883a 	mov	r17,r5
    32e4:	2027883a 	mov	r19,r4
    32e8:	1800311e 	bne	r3,zero,33b0 <__sflush_r+0xf0>
    32ec:	28c00117 	ldw	r3,4(r5)
    32f0:	10820014 	ori	r2,r2,2048
    32f4:	2880030d 	sth	r2,12(r5)
    32f8:	00c04b0e 	bge	zero,r3,3428 <__sflush_r+0x168>
    32fc:	8a000a17 	ldw	r8,40(r17)
    3300:	40002326 	beq	r8,zero,3390 <__sflush_r+0xd0>
    3304:	9c000017 	ldw	r16,0(r19)
    3308:	10c4000c 	andi	r3,r2,4096
    330c:	98000015 	stw	zero,0(r19)
    3310:	18004826 	beq	r3,zero,3434 <__sflush_r+0x174>
    3314:	89801417 	ldw	r6,80(r17)
    3318:	10c0010c 	andi	r3,r2,4
    331c:	18000626 	beq	r3,zero,3338 <__sflush_r+0x78>
    3320:	88c00117 	ldw	r3,4(r17)
    3324:	88800c17 	ldw	r2,48(r17)
    3328:	30cdc83a 	sub	r6,r6,r3
    332c:	10000226 	beq	r2,zero,3338 <__sflush_r+0x78>
    3330:	88800f17 	ldw	r2,60(r17)
    3334:	308dc83a 	sub	r6,r6,r2
    3338:	89400717 	ldw	r5,28(r17)
    333c:	000f883a 	mov	r7,zero
    3340:	9809883a 	mov	r4,r19
    3344:	403ee83a 	callr	r8
    3348:	00ffffc4 	movi	r3,-1
    334c:	10c04426 	beq	r2,r3,3460 <__sflush_r+0x1a0>
    3350:	88c0030b 	ldhu	r3,12(r17)
    3354:	89000417 	ldw	r4,16(r17)
    3358:	88000115 	stw	zero,4(r17)
    335c:	197dffcc 	andi	r5,r3,63487
    3360:	8940030d 	sth	r5,12(r17)
    3364:	89000015 	stw	r4,0(r17)
    3368:	18c4000c 	andi	r3,r3,4096
    336c:	18002c1e 	bne	r3,zero,3420 <__sflush_r+0x160>
    3370:	89400c17 	ldw	r5,48(r17)
    3374:	9c000015 	stw	r16,0(r19)
    3378:	28000526 	beq	r5,zero,3390 <__sflush_r+0xd0>
    337c:	88801004 	addi	r2,r17,64
    3380:	28800226 	beq	r5,r2,338c <__sflush_r+0xcc>
    3384:	9809883a 	mov	r4,r19
    3388:	0003a3c0 	call	3a3c <_free_r>
    338c:	88000c15 	stw	zero,48(r17)
    3390:	0005883a 	mov	r2,zero
    3394:	dfc00417 	ldw	ra,16(sp)
    3398:	dcc00317 	ldw	r19,12(sp)
    339c:	dc800217 	ldw	r18,8(sp)
    33a0:	dc400117 	ldw	r17,4(sp)
    33a4:	dc000017 	ldw	r16,0(sp)
    33a8:	dec00504 	addi	sp,sp,20
    33ac:	f800283a 	ret
    33b0:	2c800417 	ldw	r18,16(r5)
    33b4:	903ff626 	beq	r18,zero,3390 <__alt_data_end+0xfffeacf0>
    33b8:	2c000017 	ldw	r16,0(r5)
    33bc:	108000cc 	andi	r2,r2,3
    33c0:	2c800015 	stw	r18,0(r5)
    33c4:	84a1c83a 	sub	r16,r16,r18
    33c8:	1000131e 	bne	r2,zero,3418 <__sflush_r+0x158>
    33cc:	28800517 	ldw	r2,20(r5)
    33d0:	88800215 	stw	r2,8(r17)
    33d4:	04000316 	blt	zero,r16,33e4 <__sflush_r+0x124>
    33d8:	003fed06 	br	3390 <__alt_data_end+0xfffeacf0>
    33dc:	90a5883a 	add	r18,r18,r2
    33e0:	043feb0e 	bge	zero,r16,3390 <__alt_data_end+0xfffeacf0>
    33e4:	88800917 	ldw	r2,36(r17)
    33e8:	89400717 	ldw	r5,28(r17)
    33ec:	800f883a 	mov	r7,r16
    33f0:	900d883a 	mov	r6,r18
    33f4:	9809883a 	mov	r4,r19
    33f8:	103ee83a 	callr	r2
    33fc:	80a1c83a 	sub	r16,r16,r2
    3400:	00bff616 	blt	zero,r2,33dc <__alt_data_end+0xfffead3c>
    3404:	88c0030b 	ldhu	r3,12(r17)
    3408:	00bfffc4 	movi	r2,-1
    340c:	18c01014 	ori	r3,r3,64
    3410:	88c0030d 	sth	r3,12(r17)
    3414:	003fdf06 	br	3394 <__alt_data_end+0xfffeacf4>
    3418:	0005883a 	mov	r2,zero
    341c:	003fec06 	br	33d0 <__alt_data_end+0xfffead30>
    3420:	88801415 	stw	r2,80(r17)
    3424:	003fd206 	br	3370 <__alt_data_end+0xfffeacd0>
    3428:	28c00f17 	ldw	r3,60(r5)
    342c:	00ffb316 	blt	zero,r3,32fc <__alt_data_end+0xfffeac5c>
    3430:	003fd706 	br	3390 <__alt_data_end+0xfffeacf0>
    3434:	89400717 	ldw	r5,28(r17)
    3438:	000d883a 	mov	r6,zero
    343c:	01c00044 	movi	r7,1
    3440:	9809883a 	mov	r4,r19
    3444:	403ee83a 	callr	r8
    3448:	100d883a 	mov	r6,r2
    344c:	00bfffc4 	movi	r2,-1
    3450:	30801426 	beq	r6,r2,34a4 <__sflush_r+0x1e4>
    3454:	8880030b 	ldhu	r2,12(r17)
    3458:	8a000a17 	ldw	r8,40(r17)
    345c:	003fae06 	br	3318 <__alt_data_end+0xfffeac78>
    3460:	98c00017 	ldw	r3,0(r19)
    3464:	183fba26 	beq	r3,zero,3350 <__alt_data_end+0xfffeacb0>
    3468:	01000744 	movi	r4,29
    346c:	19000626 	beq	r3,r4,3488 <__sflush_r+0x1c8>
    3470:	01000584 	movi	r4,22
    3474:	19000426 	beq	r3,r4,3488 <__sflush_r+0x1c8>
    3478:	88c0030b 	ldhu	r3,12(r17)
    347c:	18c01014 	ori	r3,r3,64
    3480:	88c0030d 	sth	r3,12(r17)
    3484:	003fc306 	br	3394 <__alt_data_end+0xfffeacf4>
    3488:	8880030b 	ldhu	r2,12(r17)
    348c:	88c00417 	ldw	r3,16(r17)
    3490:	88000115 	stw	zero,4(r17)
    3494:	10bdffcc 	andi	r2,r2,63487
    3498:	8880030d 	sth	r2,12(r17)
    349c:	88c00015 	stw	r3,0(r17)
    34a0:	003fb306 	br	3370 <__alt_data_end+0xfffeacd0>
    34a4:	98800017 	ldw	r2,0(r19)
    34a8:	103fea26 	beq	r2,zero,3454 <__alt_data_end+0xfffeadb4>
    34ac:	00c00744 	movi	r3,29
    34b0:	10c00226 	beq	r2,r3,34bc <__sflush_r+0x1fc>
    34b4:	00c00584 	movi	r3,22
    34b8:	10c0031e 	bne	r2,r3,34c8 <__sflush_r+0x208>
    34bc:	9c000015 	stw	r16,0(r19)
    34c0:	0005883a 	mov	r2,zero
    34c4:	003fb306 	br	3394 <__alt_data_end+0xfffeacf4>
    34c8:	88c0030b 	ldhu	r3,12(r17)
    34cc:	3005883a 	mov	r2,r6
    34d0:	18c01014 	ori	r3,r3,64
    34d4:	88c0030d 	sth	r3,12(r17)
    34d8:	003fae06 	br	3394 <__alt_data_end+0xfffeacf4>

000034dc <_fflush_r>:
    34dc:	defffd04 	addi	sp,sp,-12
    34e0:	dc000115 	stw	r16,4(sp)
    34e4:	dfc00215 	stw	ra,8(sp)
    34e8:	2021883a 	mov	r16,r4
    34ec:	20000226 	beq	r4,zero,34f8 <_fflush_r+0x1c>
    34f0:	20800e17 	ldw	r2,56(r4)
    34f4:	10000c26 	beq	r2,zero,3528 <_fflush_r+0x4c>
    34f8:	2880030f 	ldh	r2,12(r5)
    34fc:	1000051e 	bne	r2,zero,3514 <_fflush_r+0x38>
    3500:	0005883a 	mov	r2,zero
    3504:	dfc00217 	ldw	ra,8(sp)
    3508:	dc000117 	ldw	r16,4(sp)
    350c:	dec00304 	addi	sp,sp,12
    3510:	f800283a 	ret
    3514:	8009883a 	mov	r4,r16
    3518:	dfc00217 	ldw	ra,8(sp)
    351c:	dc000117 	ldw	r16,4(sp)
    3520:	dec00304 	addi	sp,sp,12
    3524:	00032c01 	jmpi	32c0 <__sflush_r>
    3528:	d9400015 	stw	r5,0(sp)
    352c:	00038c80 	call	38c8 <__sinit>
    3530:	d9400017 	ldw	r5,0(sp)
    3534:	003ff006 	br	34f8 <__alt_data_end+0xfffeae58>

00003538 <fflush>:
    3538:	20000526 	beq	r4,zero,3550 <fflush+0x18>
    353c:	00800034 	movhi	r2,0
    3540:	1096d104 	addi	r2,r2,23364
    3544:	200b883a 	mov	r5,r4
    3548:	11000017 	ldw	r4,0(r2)
    354c:	00034dc1 	jmpi	34dc <_fflush_r>
    3550:	00800034 	movhi	r2,0
    3554:	1096d004 	addi	r2,r2,23360
    3558:	11000017 	ldw	r4,0(r2)
    355c:	01400034 	movhi	r5,0
    3560:	294d3704 	addi	r5,r5,13532
    3564:	0003e101 	jmpi	3e10 <_fwalk_reent>

00003568 <__fp_unlock>:
    3568:	0005883a 	mov	r2,zero
    356c:	f800283a 	ret

00003570 <_cleanup_r>:
    3570:	01400034 	movhi	r5,0
    3574:	29516604 	addi	r5,r5,17816
    3578:	0003e101 	jmpi	3e10 <_fwalk_reent>

0000357c <__sinit.part.1>:
    357c:	defff704 	addi	sp,sp,-36
    3580:	00c00034 	movhi	r3,0
    3584:	dfc00815 	stw	ra,32(sp)
    3588:	ddc00715 	stw	r23,28(sp)
    358c:	dd800615 	stw	r22,24(sp)
    3590:	dd400515 	stw	r21,20(sp)
    3594:	dd000415 	stw	r20,16(sp)
    3598:	dcc00315 	stw	r19,12(sp)
    359c:	dc800215 	stw	r18,8(sp)
    35a0:	dc400115 	stw	r17,4(sp)
    35a4:	dc000015 	stw	r16,0(sp)
    35a8:	18cd5c04 	addi	r3,r3,13680
    35ac:	24000117 	ldw	r16,4(r4)
    35b0:	20c00f15 	stw	r3,60(r4)
    35b4:	2080bb04 	addi	r2,r4,748
    35b8:	00c000c4 	movi	r3,3
    35bc:	20c0b915 	stw	r3,740(r4)
    35c0:	2080ba15 	stw	r2,744(r4)
    35c4:	2000b815 	stw	zero,736(r4)
    35c8:	05c00204 	movi	r23,8
    35cc:	00800104 	movi	r2,4
    35d0:	2025883a 	mov	r18,r4
    35d4:	b80d883a 	mov	r6,r23
    35d8:	81001704 	addi	r4,r16,92
    35dc:	000b883a 	mov	r5,zero
    35e0:	80000015 	stw	zero,0(r16)
    35e4:	80000115 	stw	zero,4(r16)
    35e8:	80000215 	stw	zero,8(r16)
    35ec:	8080030d 	sth	r2,12(r16)
    35f0:	80001915 	stw	zero,100(r16)
    35f4:	8000038d 	sth	zero,14(r16)
    35f8:	80000415 	stw	zero,16(r16)
    35fc:	80000515 	stw	zero,20(r16)
    3600:	80000615 	stw	zero,24(r16)
    3604:	00040900 	call	4090 <memset>
    3608:	05800034 	movhi	r22,0
    360c:	94400217 	ldw	r17,8(r18)
    3610:	05400034 	movhi	r21,0
    3614:	05000034 	movhi	r20,0
    3618:	04c00034 	movhi	r19,0
    361c:	b590ea04 	addi	r22,r22,17320
    3620:	ad510104 	addi	r21,r21,17412
    3624:	a5112004 	addi	r20,r20,17536
    3628:	9cd13704 	addi	r19,r19,17628
    362c:	85800815 	stw	r22,32(r16)
    3630:	85400915 	stw	r21,36(r16)
    3634:	85000a15 	stw	r20,40(r16)
    3638:	84c00b15 	stw	r19,44(r16)
    363c:	84000715 	stw	r16,28(r16)
    3640:	00800284 	movi	r2,10
    3644:	8880030d 	sth	r2,12(r17)
    3648:	00800044 	movi	r2,1
    364c:	b80d883a 	mov	r6,r23
    3650:	89001704 	addi	r4,r17,92
    3654:	000b883a 	mov	r5,zero
    3658:	88000015 	stw	zero,0(r17)
    365c:	88000115 	stw	zero,4(r17)
    3660:	88000215 	stw	zero,8(r17)
    3664:	88001915 	stw	zero,100(r17)
    3668:	8880038d 	sth	r2,14(r17)
    366c:	88000415 	stw	zero,16(r17)
    3670:	88000515 	stw	zero,20(r17)
    3674:	88000615 	stw	zero,24(r17)
    3678:	00040900 	call	4090 <memset>
    367c:	94000317 	ldw	r16,12(r18)
    3680:	00800484 	movi	r2,18
    3684:	8c400715 	stw	r17,28(r17)
    3688:	8d800815 	stw	r22,32(r17)
    368c:	8d400915 	stw	r21,36(r17)
    3690:	8d000a15 	stw	r20,40(r17)
    3694:	8cc00b15 	stw	r19,44(r17)
    3698:	8080030d 	sth	r2,12(r16)
    369c:	00800084 	movi	r2,2
    36a0:	80000015 	stw	zero,0(r16)
    36a4:	80000115 	stw	zero,4(r16)
    36a8:	80000215 	stw	zero,8(r16)
    36ac:	80001915 	stw	zero,100(r16)
    36b0:	8080038d 	sth	r2,14(r16)
    36b4:	80000415 	stw	zero,16(r16)
    36b8:	80000515 	stw	zero,20(r16)
    36bc:	80000615 	stw	zero,24(r16)
    36c0:	b80d883a 	mov	r6,r23
    36c4:	000b883a 	mov	r5,zero
    36c8:	81001704 	addi	r4,r16,92
    36cc:	00040900 	call	4090 <memset>
    36d0:	00800044 	movi	r2,1
    36d4:	84000715 	stw	r16,28(r16)
    36d8:	85800815 	stw	r22,32(r16)
    36dc:	85400915 	stw	r21,36(r16)
    36e0:	85000a15 	stw	r20,40(r16)
    36e4:	84c00b15 	stw	r19,44(r16)
    36e8:	90800e15 	stw	r2,56(r18)
    36ec:	dfc00817 	ldw	ra,32(sp)
    36f0:	ddc00717 	ldw	r23,28(sp)
    36f4:	dd800617 	ldw	r22,24(sp)
    36f8:	dd400517 	ldw	r21,20(sp)
    36fc:	dd000417 	ldw	r20,16(sp)
    3700:	dcc00317 	ldw	r19,12(sp)
    3704:	dc800217 	ldw	r18,8(sp)
    3708:	dc400117 	ldw	r17,4(sp)
    370c:	dc000017 	ldw	r16,0(sp)
    3710:	dec00904 	addi	sp,sp,36
    3714:	f800283a 	ret

00003718 <__fp_lock>:
    3718:	0005883a 	mov	r2,zero
    371c:	f800283a 	ret

00003720 <__sfmoreglue>:
    3720:	defffc04 	addi	sp,sp,-16
    3724:	dc800215 	stw	r18,8(sp)
    3728:	2825883a 	mov	r18,r5
    372c:	dc000015 	stw	r16,0(sp)
    3730:	01401a04 	movi	r5,104
    3734:	2021883a 	mov	r16,r4
    3738:	913fffc4 	addi	r4,r18,-1
    373c:	dfc00315 	stw	ra,12(sp)
    3740:	dc400115 	stw	r17,4(sp)
    3744:	00049c00 	call	49c0 <__mulsi3>
    3748:	8009883a 	mov	r4,r16
    374c:	11401d04 	addi	r5,r2,116
    3750:	1023883a 	mov	r17,r2
    3754:	0001a440 	call	1a44 <_malloc_r>
    3758:	1021883a 	mov	r16,r2
    375c:	10000726 	beq	r2,zero,377c <__sfmoreglue+0x5c>
    3760:	11000304 	addi	r4,r2,12
    3764:	10000015 	stw	zero,0(r2)
    3768:	14800115 	stw	r18,4(r2)
    376c:	11000215 	stw	r4,8(r2)
    3770:	89801a04 	addi	r6,r17,104
    3774:	000b883a 	mov	r5,zero
    3778:	00040900 	call	4090 <memset>
    377c:	8005883a 	mov	r2,r16
    3780:	dfc00317 	ldw	ra,12(sp)
    3784:	dc800217 	ldw	r18,8(sp)
    3788:	dc400117 	ldw	r17,4(sp)
    378c:	dc000017 	ldw	r16,0(sp)
    3790:	dec00404 	addi	sp,sp,16
    3794:	f800283a 	ret

00003798 <__sfp>:
    3798:	defffb04 	addi	sp,sp,-20
    379c:	dc000015 	stw	r16,0(sp)
    37a0:	04000034 	movhi	r16,0
    37a4:	8416d004 	addi	r16,r16,23360
    37a8:	dcc00315 	stw	r19,12(sp)
    37ac:	2027883a 	mov	r19,r4
    37b0:	81000017 	ldw	r4,0(r16)
    37b4:	dfc00415 	stw	ra,16(sp)
    37b8:	dc800215 	stw	r18,8(sp)
    37bc:	20800e17 	ldw	r2,56(r4)
    37c0:	dc400115 	stw	r17,4(sp)
    37c4:	1000021e 	bne	r2,zero,37d0 <__sfp+0x38>
    37c8:	000357c0 	call	357c <__sinit.part.1>
    37cc:	81000017 	ldw	r4,0(r16)
    37d0:	2480b804 	addi	r18,r4,736
    37d4:	047fffc4 	movi	r17,-1
    37d8:	91000117 	ldw	r4,4(r18)
    37dc:	94000217 	ldw	r16,8(r18)
    37e0:	213fffc4 	addi	r4,r4,-1
    37e4:	20000a16 	blt	r4,zero,3810 <__sfp+0x78>
    37e8:	8080030f 	ldh	r2,12(r16)
    37ec:	10000c26 	beq	r2,zero,3820 <__sfp+0x88>
    37f0:	80c01d04 	addi	r3,r16,116
    37f4:	00000206 	br	3800 <__sfp+0x68>
    37f8:	18bfe60f 	ldh	r2,-104(r3)
    37fc:	10000826 	beq	r2,zero,3820 <__sfp+0x88>
    3800:	213fffc4 	addi	r4,r4,-1
    3804:	1c3ffd04 	addi	r16,r3,-12
    3808:	18c01a04 	addi	r3,r3,104
    380c:	247ffa1e 	bne	r4,r17,37f8 <__alt_data_end+0xfffeb158>
    3810:	90800017 	ldw	r2,0(r18)
    3814:	10001d26 	beq	r2,zero,388c <__sfp+0xf4>
    3818:	1025883a 	mov	r18,r2
    381c:	003fee06 	br	37d8 <__alt_data_end+0xfffeb138>
    3820:	00bfffc4 	movi	r2,-1
    3824:	8080038d 	sth	r2,14(r16)
    3828:	00800044 	movi	r2,1
    382c:	8080030d 	sth	r2,12(r16)
    3830:	80001915 	stw	zero,100(r16)
    3834:	80000015 	stw	zero,0(r16)
    3838:	80000215 	stw	zero,8(r16)
    383c:	80000115 	stw	zero,4(r16)
    3840:	80000415 	stw	zero,16(r16)
    3844:	80000515 	stw	zero,20(r16)
    3848:	80000615 	stw	zero,24(r16)
    384c:	01800204 	movi	r6,8
    3850:	000b883a 	mov	r5,zero
    3854:	81001704 	addi	r4,r16,92
    3858:	00040900 	call	4090 <memset>
    385c:	8005883a 	mov	r2,r16
    3860:	80000c15 	stw	zero,48(r16)
    3864:	80000d15 	stw	zero,52(r16)
    3868:	80001115 	stw	zero,68(r16)
    386c:	80001215 	stw	zero,72(r16)
    3870:	dfc00417 	ldw	ra,16(sp)
    3874:	dcc00317 	ldw	r19,12(sp)
    3878:	dc800217 	ldw	r18,8(sp)
    387c:	dc400117 	ldw	r17,4(sp)
    3880:	dc000017 	ldw	r16,0(sp)
    3884:	dec00504 	addi	sp,sp,20
    3888:	f800283a 	ret
    388c:	01400104 	movi	r5,4
    3890:	9809883a 	mov	r4,r19
    3894:	00037200 	call	3720 <__sfmoreglue>
    3898:	90800015 	stw	r2,0(r18)
    389c:	103fde1e 	bne	r2,zero,3818 <__alt_data_end+0xfffeb178>
    38a0:	00800304 	movi	r2,12
    38a4:	98800015 	stw	r2,0(r19)
    38a8:	0005883a 	mov	r2,zero
    38ac:	003ff006 	br	3870 <__alt_data_end+0xfffeb1d0>

000038b0 <_cleanup>:
    38b0:	00800034 	movhi	r2,0
    38b4:	1096d004 	addi	r2,r2,23360
    38b8:	11000017 	ldw	r4,0(r2)
    38bc:	01400034 	movhi	r5,0
    38c0:	29516604 	addi	r5,r5,17816
    38c4:	0003e101 	jmpi	3e10 <_fwalk_reent>

000038c8 <__sinit>:
    38c8:	20800e17 	ldw	r2,56(r4)
    38cc:	10000126 	beq	r2,zero,38d4 <__sinit+0xc>
    38d0:	f800283a 	ret
    38d4:	000357c1 	jmpi	357c <__sinit.part.1>

000038d8 <__sfp_lock_acquire>:
    38d8:	f800283a 	ret

000038dc <__sfp_lock_release>:
    38dc:	f800283a 	ret

000038e0 <__sinit_lock_acquire>:
    38e0:	f800283a 	ret

000038e4 <__sinit_lock_release>:
    38e4:	f800283a 	ret

000038e8 <__fp_lock_all>:
    38e8:	00800034 	movhi	r2,0
    38ec:	1096d104 	addi	r2,r2,23364
    38f0:	11000017 	ldw	r4,0(r2)
    38f4:	01400034 	movhi	r5,0
    38f8:	294dc604 	addi	r5,r5,14104
    38fc:	0003d4c1 	jmpi	3d4c <_fwalk>

00003900 <__fp_unlock_all>:
    3900:	00800034 	movhi	r2,0
    3904:	1096d104 	addi	r2,r2,23364
    3908:	11000017 	ldw	r4,0(r2)
    390c:	01400034 	movhi	r5,0
    3910:	294d5a04 	addi	r5,r5,13672
    3914:	0003d4c1 	jmpi	3d4c <_fwalk>

00003918 <_malloc_trim_r>:
    3918:	defffb04 	addi	sp,sp,-20
    391c:	dcc00315 	stw	r19,12(sp)
    3920:	04c00034 	movhi	r19,0
    3924:	dc800215 	stw	r18,8(sp)
    3928:	dc400115 	stw	r17,4(sp)
    392c:	dc000015 	stw	r16,0(sp)
    3930:	dfc00415 	stw	ra,16(sp)
    3934:	2821883a 	mov	r16,r5
    3938:	9cd5c804 	addi	r19,r19,22304
    393c:	2025883a 	mov	r18,r4
    3940:	0004d100 	call	4d10 <__malloc_lock>
    3944:	98800217 	ldw	r2,8(r19)
    3948:	14400117 	ldw	r17,4(r2)
    394c:	00bfff04 	movi	r2,-4
    3950:	88a2703a 	and	r17,r17,r2
    3954:	8c21c83a 	sub	r16,r17,r16
    3958:	8403fbc4 	addi	r16,r16,4079
    395c:	8020d33a 	srli	r16,r16,12
    3960:	0083ffc4 	movi	r2,4095
    3964:	843fffc4 	addi	r16,r16,-1
    3968:	8020933a 	slli	r16,r16,12
    396c:	1400060e 	bge	r2,r16,3988 <_malloc_trim_r+0x70>
    3970:	000b883a 	mov	r5,zero
    3974:	9009883a 	mov	r4,r18
    3978:	0002da80 	call	2da8 <_sbrk_r>
    397c:	98c00217 	ldw	r3,8(r19)
    3980:	1c47883a 	add	r3,r3,r17
    3984:	10c00a26 	beq	r2,r3,39b0 <_malloc_trim_r+0x98>
    3988:	9009883a 	mov	r4,r18
    398c:	0004d340 	call	4d34 <__malloc_unlock>
    3990:	0005883a 	mov	r2,zero
    3994:	dfc00417 	ldw	ra,16(sp)
    3998:	dcc00317 	ldw	r19,12(sp)
    399c:	dc800217 	ldw	r18,8(sp)
    39a0:	dc400117 	ldw	r17,4(sp)
    39a4:	dc000017 	ldw	r16,0(sp)
    39a8:	dec00504 	addi	sp,sp,20
    39ac:	f800283a 	ret
    39b0:	040bc83a 	sub	r5,zero,r16
    39b4:	9009883a 	mov	r4,r18
    39b8:	0002da80 	call	2da8 <_sbrk_r>
    39bc:	00ffffc4 	movi	r3,-1
    39c0:	10c00d26 	beq	r2,r3,39f8 <_malloc_trim_r+0xe0>
    39c4:	00c00034 	movhi	r3,0
    39c8:	18d96704 	addi	r3,r3,26012
    39cc:	18800017 	ldw	r2,0(r3)
    39d0:	99000217 	ldw	r4,8(r19)
    39d4:	8c23c83a 	sub	r17,r17,r16
    39d8:	8c400054 	ori	r17,r17,1
    39dc:	1421c83a 	sub	r16,r2,r16
    39e0:	24400115 	stw	r17,4(r4)
    39e4:	9009883a 	mov	r4,r18
    39e8:	1c000015 	stw	r16,0(r3)
    39ec:	0004d340 	call	4d34 <__malloc_unlock>
    39f0:	00800044 	movi	r2,1
    39f4:	003fe706 	br	3994 <__alt_data_end+0xfffeb2f4>
    39f8:	000b883a 	mov	r5,zero
    39fc:	9009883a 	mov	r4,r18
    3a00:	0002da80 	call	2da8 <_sbrk_r>
    3a04:	99000217 	ldw	r4,8(r19)
    3a08:	014003c4 	movi	r5,15
    3a0c:	1107c83a 	sub	r3,r2,r4
    3a10:	28ffdd0e 	bge	r5,r3,3988 <__alt_data_end+0xfffeb2e8>
    3a14:	01400034 	movhi	r5,0
    3a18:	2956d204 	addi	r5,r5,23368
    3a1c:	29400017 	ldw	r5,0(r5)
    3a20:	18c00054 	ori	r3,r3,1
    3a24:	20c00115 	stw	r3,4(r4)
    3a28:	00c00034 	movhi	r3,0
    3a2c:	1145c83a 	sub	r2,r2,r5
    3a30:	18d96704 	addi	r3,r3,26012
    3a34:	18800015 	stw	r2,0(r3)
    3a38:	003fd306 	br	3988 <__alt_data_end+0xfffeb2e8>

00003a3c <_free_r>:
    3a3c:	28004126 	beq	r5,zero,3b44 <_free_r+0x108>
    3a40:	defffd04 	addi	sp,sp,-12
    3a44:	dc400115 	stw	r17,4(sp)
    3a48:	dc000015 	stw	r16,0(sp)
    3a4c:	2023883a 	mov	r17,r4
    3a50:	2821883a 	mov	r16,r5
    3a54:	dfc00215 	stw	ra,8(sp)
    3a58:	0004d100 	call	4d10 <__malloc_lock>
    3a5c:	81ffff17 	ldw	r7,-4(r16)
    3a60:	00bfff84 	movi	r2,-2
    3a64:	01000034 	movhi	r4,0
    3a68:	81bffe04 	addi	r6,r16,-8
    3a6c:	3884703a 	and	r2,r7,r2
    3a70:	2115c804 	addi	r4,r4,22304
    3a74:	308b883a 	add	r5,r6,r2
    3a78:	2a400117 	ldw	r9,4(r5)
    3a7c:	22000217 	ldw	r8,8(r4)
    3a80:	00ffff04 	movi	r3,-4
    3a84:	48c6703a 	and	r3,r9,r3
    3a88:	2a005726 	beq	r5,r8,3be8 <_free_r+0x1ac>
    3a8c:	28c00115 	stw	r3,4(r5)
    3a90:	39c0004c 	andi	r7,r7,1
    3a94:	3800091e 	bne	r7,zero,3abc <_free_r+0x80>
    3a98:	823ffe17 	ldw	r8,-8(r16)
    3a9c:	22400204 	addi	r9,r4,8
    3aa0:	320dc83a 	sub	r6,r6,r8
    3aa4:	31c00217 	ldw	r7,8(r6)
    3aa8:	1205883a 	add	r2,r2,r8
    3aac:	3a406526 	beq	r7,r9,3c44 <_free_r+0x208>
    3ab0:	32000317 	ldw	r8,12(r6)
    3ab4:	3a000315 	stw	r8,12(r7)
    3ab8:	41c00215 	stw	r7,8(r8)
    3abc:	28cf883a 	add	r7,r5,r3
    3ac0:	39c00117 	ldw	r7,4(r7)
    3ac4:	39c0004c 	andi	r7,r7,1
    3ac8:	38003a26 	beq	r7,zero,3bb4 <_free_r+0x178>
    3acc:	10c00054 	ori	r3,r2,1
    3ad0:	30c00115 	stw	r3,4(r6)
    3ad4:	3087883a 	add	r3,r6,r2
    3ad8:	18800015 	stw	r2,0(r3)
    3adc:	00c07fc4 	movi	r3,511
    3ae0:	18801936 	bltu	r3,r2,3b48 <_free_r+0x10c>
    3ae4:	1004d0fa 	srli	r2,r2,3
    3ae8:	01c00044 	movi	r7,1
    3aec:	21400117 	ldw	r5,4(r4)
    3af0:	10c00044 	addi	r3,r2,1
    3af4:	18c7883a 	add	r3,r3,r3
    3af8:	1005d0ba 	srai	r2,r2,2
    3afc:	18c7883a 	add	r3,r3,r3
    3b00:	18c7883a 	add	r3,r3,r3
    3b04:	1907883a 	add	r3,r3,r4
    3b08:	3884983a 	sll	r2,r7,r2
    3b0c:	19c00017 	ldw	r7,0(r3)
    3b10:	1a3ffe04 	addi	r8,r3,-8
    3b14:	1144b03a 	or	r2,r2,r5
    3b18:	32000315 	stw	r8,12(r6)
    3b1c:	31c00215 	stw	r7,8(r6)
    3b20:	20800115 	stw	r2,4(r4)
    3b24:	19800015 	stw	r6,0(r3)
    3b28:	39800315 	stw	r6,12(r7)
    3b2c:	8809883a 	mov	r4,r17
    3b30:	dfc00217 	ldw	ra,8(sp)
    3b34:	dc400117 	ldw	r17,4(sp)
    3b38:	dc000017 	ldw	r16,0(sp)
    3b3c:	dec00304 	addi	sp,sp,12
    3b40:	0004d341 	jmpi	4d34 <__malloc_unlock>
    3b44:	f800283a 	ret
    3b48:	100ad27a 	srli	r5,r2,9
    3b4c:	00c00104 	movi	r3,4
    3b50:	19404a36 	bltu	r3,r5,3c7c <_free_r+0x240>
    3b54:	100ad1ba 	srli	r5,r2,6
    3b58:	28c00e44 	addi	r3,r5,57
    3b5c:	18c7883a 	add	r3,r3,r3
    3b60:	29400e04 	addi	r5,r5,56
    3b64:	18c7883a 	add	r3,r3,r3
    3b68:	18c7883a 	add	r3,r3,r3
    3b6c:	1909883a 	add	r4,r3,r4
    3b70:	20c00017 	ldw	r3,0(r4)
    3b74:	01c00034 	movhi	r7,0
    3b78:	213ffe04 	addi	r4,r4,-8
    3b7c:	39d5c804 	addi	r7,r7,22304
    3b80:	20c04426 	beq	r4,r3,3c94 <_free_r+0x258>
    3b84:	01ffff04 	movi	r7,-4
    3b88:	19400117 	ldw	r5,4(r3)
    3b8c:	29ca703a 	and	r5,r5,r7
    3b90:	1140022e 	bgeu	r2,r5,3b9c <_free_r+0x160>
    3b94:	18c00217 	ldw	r3,8(r3)
    3b98:	20fffb1e 	bne	r4,r3,3b88 <__alt_data_end+0xfffeb4e8>
    3b9c:	19000317 	ldw	r4,12(r3)
    3ba0:	31000315 	stw	r4,12(r6)
    3ba4:	30c00215 	stw	r3,8(r6)
    3ba8:	21800215 	stw	r6,8(r4)
    3bac:	19800315 	stw	r6,12(r3)
    3bb0:	003fde06 	br	3b2c <__alt_data_end+0xfffeb48c>
    3bb4:	29c00217 	ldw	r7,8(r5)
    3bb8:	10c5883a 	add	r2,r2,r3
    3bbc:	00c00034 	movhi	r3,0
    3bc0:	18d5ca04 	addi	r3,r3,22312
    3bc4:	38c03b26 	beq	r7,r3,3cb4 <_free_r+0x278>
    3bc8:	2a000317 	ldw	r8,12(r5)
    3bcc:	11400054 	ori	r5,r2,1
    3bd0:	3087883a 	add	r3,r6,r2
    3bd4:	3a000315 	stw	r8,12(r7)
    3bd8:	41c00215 	stw	r7,8(r8)
    3bdc:	31400115 	stw	r5,4(r6)
    3be0:	18800015 	stw	r2,0(r3)
    3be4:	003fbd06 	br	3adc <__alt_data_end+0xfffeb43c>
    3be8:	39c0004c 	andi	r7,r7,1
    3bec:	10c5883a 	add	r2,r2,r3
    3bf0:	3800071e 	bne	r7,zero,3c10 <_free_r+0x1d4>
    3bf4:	81fffe17 	ldw	r7,-8(r16)
    3bf8:	31cdc83a 	sub	r6,r6,r7
    3bfc:	30c00317 	ldw	r3,12(r6)
    3c00:	31400217 	ldw	r5,8(r6)
    3c04:	11c5883a 	add	r2,r2,r7
    3c08:	28c00315 	stw	r3,12(r5)
    3c0c:	19400215 	stw	r5,8(r3)
    3c10:	10c00054 	ori	r3,r2,1
    3c14:	30c00115 	stw	r3,4(r6)
    3c18:	00c00034 	movhi	r3,0
    3c1c:	18d6d304 	addi	r3,r3,23372
    3c20:	18c00017 	ldw	r3,0(r3)
    3c24:	21800215 	stw	r6,8(r4)
    3c28:	10ffc036 	bltu	r2,r3,3b2c <__alt_data_end+0xfffeb48c>
    3c2c:	00800034 	movhi	r2,0
    3c30:	10996604 	addi	r2,r2,26008
    3c34:	11400017 	ldw	r5,0(r2)
    3c38:	8809883a 	mov	r4,r17
    3c3c:	00039180 	call	3918 <_malloc_trim_r>
    3c40:	003fba06 	br	3b2c <__alt_data_end+0xfffeb48c>
    3c44:	28c9883a 	add	r4,r5,r3
    3c48:	21000117 	ldw	r4,4(r4)
    3c4c:	2100004c 	andi	r4,r4,1
    3c50:	2000391e 	bne	r4,zero,3d38 <_free_r+0x2fc>
    3c54:	29c00217 	ldw	r7,8(r5)
    3c58:	29000317 	ldw	r4,12(r5)
    3c5c:	1885883a 	add	r2,r3,r2
    3c60:	10c00054 	ori	r3,r2,1
    3c64:	39000315 	stw	r4,12(r7)
    3c68:	21c00215 	stw	r7,8(r4)
    3c6c:	30c00115 	stw	r3,4(r6)
    3c70:	308d883a 	add	r6,r6,r2
    3c74:	30800015 	stw	r2,0(r6)
    3c78:	003fac06 	br	3b2c <__alt_data_end+0xfffeb48c>
    3c7c:	00c00504 	movi	r3,20
    3c80:	19401536 	bltu	r3,r5,3cd8 <_free_r+0x29c>
    3c84:	28c01704 	addi	r3,r5,92
    3c88:	18c7883a 	add	r3,r3,r3
    3c8c:	294016c4 	addi	r5,r5,91
    3c90:	003fb406 	br	3b64 <__alt_data_end+0xfffeb4c4>
    3c94:	280bd0ba 	srai	r5,r5,2
    3c98:	00c00044 	movi	r3,1
    3c9c:	38800117 	ldw	r2,4(r7)
    3ca0:	194a983a 	sll	r5,r3,r5
    3ca4:	2007883a 	mov	r3,r4
    3ca8:	2884b03a 	or	r2,r5,r2
    3cac:	38800115 	stw	r2,4(r7)
    3cb0:	003fbb06 	br	3ba0 <__alt_data_end+0xfffeb500>
    3cb4:	21800515 	stw	r6,20(r4)
    3cb8:	21800415 	stw	r6,16(r4)
    3cbc:	10c00054 	ori	r3,r2,1
    3cc0:	31c00315 	stw	r7,12(r6)
    3cc4:	31c00215 	stw	r7,8(r6)
    3cc8:	30c00115 	stw	r3,4(r6)
    3ccc:	308d883a 	add	r6,r6,r2
    3cd0:	30800015 	stw	r2,0(r6)
    3cd4:	003f9506 	br	3b2c <__alt_data_end+0xfffeb48c>
    3cd8:	00c01504 	movi	r3,84
    3cdc:	19400536 	bltu	r3,r5,3cf4 <_free_r+0x2b8>
    3ce0:	100ad33a 	srli	r5,r2,12
    3ce4:	28c01bc4 	addi	r3,r5,111
    3ce8:	18c7883a 	add	r3,r3,r3
    3cec:	29401b84 	addi	r5,r5,110
    3cf0:	003f9c06 	br	3b64 <__alt_data_end+0xfffeb4c4>
    3cf4:	00c05504 	movi	r3,340
    3cf8:	19400536 	bltu	r3,r5,3d10 <_free_r+0x2d4>
    3cfc:	100ad3fa 	srli	r5,r2,15
    3d00:	28c01e04 	addi	r3,r5,120
    3d04:	18c7883a 	add	r3,r3,r3
    3d08:	29401dc4 	addi	r5,r5,119
    3d0c:	003f9506 	br	3b64 <__alt_data_end+0xfffeb4c4>
    3d10:	00c15504 	movi	r3,1364
    3d14:	19400536 	bltu	r3,r5,3d2c <_free_r+0x2f0>
    3d18:	100ad4ba 	srli	r5,r2,18
    3d1c:	28c01f44 	addi	r3,r5,125
    3d20:	18c7883a 	add	r3,r3,r3
    3d24:	29401f04 	addi	r5,r5,124
    3d28:	003f8e06 	br	3b64 <__alt_data_end+0xfffeb4c4>
    3d2c:	00c03f84 	movi	r3,254
    3d30:	01401f84 	movi	r5,126
    3d34:	003f8b06 	br	3b64 <__alt_data_end+0xfffeb4c4>
    3d38:	10c00054 	ori	r3,r2,1
    3d3c:	30c00115 	stw	r3,4(r6)
    3d40:	308d883a 	add	r6,r6,r2
    3d44:	30800015 	stw	r2,0(r6)
    3d48:	003f7806 	br	3b2c <__alt_data_end+0xfffeb48c>

00003d4c <_fwalk>:
    3d4c:	defff704 	addi	sp,sp,-36
    3d50:	dd000415 	stw	r20,16(sp)
    3d54:	dfc00815 	stw	ra,32(sp)
    3d58:	ddc00715 	stw	r23,28(sp)
    3d5c:	dd800615 	stw	r22,24(sp)
    3d60:	dd400515 	stw	r21,20(sp)
    3d64:	dcc00315 	stw	r19,12(sp)
    3d68:	dc800215 	stw	r18,8(sp)
    3d6c:	dc400115 	stw	r17,4(sp)
    3d70:	dc000015 	stw	r16,0(sp)
    3d74:	2500b804 	addi	r20,r4,736
    3d78:	a0002326 	beq	r20,zero,3e08 <_fwalk+0xbc>
    3d7c:	282b883a 	mov	r21,r5
    3d80:	002f883a 	mov	r23,zero
    3d84:	05800044 	movi	r22,1
    3d88:	04ffffc4 	movi	r19,-1
    3d8c:	a4400117 	ldw	r17,4(r20)
    3d90:	a4800217 	ldw	r18,8(r20)
    3d94:	8c7fffc4 	addi	r17,r17,-1
    3d98:	88000d16 	blt	r17,zero,3dd0 <_fwalk+0x84>
    3d9c:	94000304 	addi	r16,r18,12
    3da0:	94800384 	addi	r18,r18,14
    3da4:	8080000b 	ldhu	r2,0(r16)
    3da8:	8c7fffc4 	addi	r17,r17,-1
    3dac:	813ffd04 	addi	r4,r16,-12
    3db0:	b080042e 	bgeu	r22,r2,3dc4 <_fwalk+0x78>
    3db4:	9080000f 	ldh	r2,0(r18)
    3db8:	14c00226 	beq	r2,r19,3dc4 <_fwalk+0x78>
    3dbc:	a83ee83a 	callr	r21
    3dc0:	b8aeb03a 	or	r23,r23,r2
    3dc4:	84001a04 	addi	r16,r16,104
    3dc8:	94801a04 	addi	r18,r18,104
    3dcc:	8cfff51e 	bne	r17,r19,3da4 <__alt_data_end+0xfffeb704>
    3dd0:	a5000017 	ldw	r20,0(r20)
    3dd4:	a03fed1e 	bne	r20,zero,3d8c <__alt_data_end+0xfffeb6ec>
    3dd8:	b805883a 	mov	r2,r23
    3ddc:	dfc00817 	ldw	ra,32(sp)
    3de0:	ddc00717 	ldw	r23,28(sp)
    3de4:	dd800617 	ldw	r22,24(sp)
    3de8:	dd400517 	ldw	r21,20(sp)
    3dec:	dd000417 	ldw	r20,16(sp)
    3df0:	dcc00317 	ldw	r19,12(sp)
    3df4:	dc800217 	ldw	r18,8(sp)
    3df8:	dc400117 	ldw	r17,4(sp)
    3dfc:	dc000017 	ldw	r16,0(sp)
    3e00:	dec00904 	addi	sp,sp,36
    3e04:	f800283a 	ret
    3e08:	002f883a 	mov	r23,zero
    3e0c:	003ff206 	br	3dd8 <__alt_data_end+0xfffeb738>

00003e10 <_fwalk_reent>:
    3e10:	defff704 	addi	sp,sp,-36
    3e14:	dd000415 	stw	r20,16(sp)
    3e18:	dfc00815 	stw	ra,32(sp)
    3e1c:	ddc00715 	stw	r23,28(sp)
    3e20:	dd800615 	stw	r22,24(sp)
    3e24:	dd400515 	stw	r21,20(sp)
    3e28:	dcc00315 	stw	r19,12(sp)
    3e2c:	dc800215 	stw	r18,8(sp)
    3e30:	dc400115 	stw	r17,4(sp)
    3e34:	dc000015 	stw	r16,0(sp)
    3e38:	2500b804 	addi	r20,r4,736
    3e3c:	a0002326 	beq	r20,zero,3ecc <_fwalk_reent+0xbc>
    3e40:	282b883a 	mov	r21,r5
    3e44:	2027883a 	mov	r19,r4
    3e48:	002f883a 	mov	r23,zero
    3e4c:	05800044 	movi	r22,1
    3e50:	04bfffc4 	movi	r18,-1
    3e54:	a4400117 	ldw	r17,4(r20)
    3e58:	a4000217 	ldw	r16,8(r20)
    3e5c:	8c7fffc4 	addi	r17,r17,-1
    3e60:	88000c16 	blt	r17,zero,3e94 <_fwalk_reent+0x84>
    3e64:	84000304 	addi	r16,r16,12
    3e68:	8080000b 	ldhu	r2,0(r16)
    3e6c:	8c7fffc4 	addi	r17,r17,-1
    3e70:	817ffd04 	addi	r5,r16,-12
    3e74:	b080052e 	bgeu	r22,r2,3e8c <_fwalk_reent+0x7c>
    3e78:	8080008f 	ldh	r2,2(r16)
    3e7c:	9809883a 	mov	r4,r19
    3e80:	14800226 	beq	r2,r18,3e8c <_fwalk_reent+0x7c>
    3e84:	a83ee83a 	callr	r21
    3e88:	b8aeb03a 	or	r23,r23,r2
    3e8c:	84001a04 	addi	r16,r16,104
    3e90:	8cbff51e 	bne	r17,r18,3e68 <__alt_data_end+0xfffeb7c8>
    3e94:	a5000017 	ldw	r20,0(r20)
    3e98:	a03fee1e 	bne	r20,zero,3e54 <__alt_data_end+0xfffeb7b4>
    3e9c:	b805883a 	mov	r2,r23
    3ea0:	dfc00817 	ldw	ra,32(sp)
    3ea4:	ddc00717 	ldw	r23,28(sp)
    3ea8:	dd800617 	ldw	r22,24(sp)
    3eac:	dd400517 	ldw	r21,20(sp)
    3eb0:	dd000417 	ldw	r20,16(sp)
    3eb4:	dcc00317 	ldw	r19,12(sp)
    3eb8:	dc800217 	ldw	r18,8(sp)
    3ebc:	dc400117 	ldw	r17,4(sp)
    3ec0:	dc000017 	ldw	r16,0(sp)
    3ec4:	dec00904 	addi	sp,sp,36
    3ec8:	f800283a 	ret
    3ecc:	002f883a 	mov	r23,zero
    3ed0:	003ff206 	br	3e9c <__alt_data_end+0xfffeb7fc>

00003ed4 <__smakebuf_r>:
    3ed4:	2880030b 	ldhu	r2,12(r5)
    3ed8:	10c0008c 	andi	r3,r2,2
    3edc:	1800411e 	bne	r3,zero,3fe4 <__smakebuf_r+0x110>
    3ee0:	deffec04 	addi	sp,sp,-80
    3ee4:	dc000f15 	stw	r16,60(sp)
    3ee8:	2821883a 	mov	r16,r5
    3eec:	2940038f 	ldh	r5,14(r5)
    3ef0:	dc401015 	stw	r17,64(sp)
    3ef4:	dfc01315 	stw	ra,76(sp)
    3ef8:	dcc01215 	stw	r19,72(sp)
    3efc:	dc801115 	stw	r18,68(sp)
    3f00:	2023883a 	mov	r17,r4
    3f04:	28001c16 	blt	r5,zero,3f78 <__smakebuf_r+0xa4>
    3f08:	d80d883a 	mov	r6,sp
    3f0c:	000469c0 	call	469c <_fstat_r>
    3f10:	10001816 	blt	r2,zero,3f74 <__smakebuf_r+0xa0>
    3f14:	d8800117 	ldw	r2,4(sp)
    3f18:	00e00014 	movui	r3,32768
    3f1c:	10bc000c 	andi	r2,r2,61440
    3f20:	14c80020 	cmpeqi	r19,r2,8192
    3f24:	10c03726 	beq	r2,r3,4004 <__smakebuf_r+0x130>
    3f28:	80c0030b 	ldhu	r3,12(r16)
    3f2c:	18c20014 	ori	r3,r3,2048
    3f30:	80c0030d 	sth	r3,12(r16)
    3f34:	00c80004 	movi	r3,8192
    3f38:	10c0521e 	bne	r2,r3,4084 <__smakebuf_r+0x1b0>
    3f3c:	8140038f 	ldh	r5,14(r16)
    3f40:	8809883a 	mov	r4,r17
    3f44:	00046f80 	call	46f8 <_isatty_r>
    3f48:	10004c26 	beq	r2,zero,407c <__smakebuf_r+0x1a8>
    3f4c:	8080030b 	ldhu	r2,12(r16)
    3f50:	80c010c4 	addi	r3,r16,67
    3f54:	80c00015 	stw	r3,0(r16)
    3f58:	10800054 	ori	r2,r2,1
    3f5c:	8080030d 	sth	r2,12(r16)
    3f60:	00800044 	movi	r2,1
    3f64:	80c00415 	stw	r3,16(r16)
    3f68:	80800515 	stw	r2,20(r16)
    3f6c:	04810004 	movi	r18,1024
    3f70:	00000706 	br	3f90 <__smakebuf_r+0xbc>
    3f74:	8080030b 	ldhu	r2,12(r16)
    3f78:	10c0200c 	andi	r3,r2,128
    3f7c:	18001f1e 	bne	r3,zero,3ffc <__smakebuf_r+0x128>
    3f80:	04810004 	movi	r18,1024
    3f84:	10820014 	ori	r2,r2,2048
    3f88:	8080030d 	sth	r2,12(r16)
    3f8c:	0027883a 	mov	r19,zero
    3f90:	900b883a 	mov	r5,r18
    3f94:	8809883a 	mov	r4,r17
    3f98:	0001a440 	call	1a44 <_malloc_r>
    3f9c:	10002c26 	beq	r2,zero,4050 <__smakebuf_r+0x17c>
    3fa0:	80c0030b 	ldhu	r3,12(r16)
    3fa4:	01000034 	movhi	r4,0
    3fa8:	210d5c04 	addi	r4,r4,13680
    3fac:	89000f15 	stw	r4,60(r17)
    3fb0:	18c02014 	ori	r3,r3,128
    3fb4:	80c0030d 	sth	r3,12(r16)
    3fb8:	80800015 	stw	r2,0(r16)
    3fbc:	80800415 	stw	r2,16(r16)
    3fc0:	84800515 	stw	r18,20(r16)
    3fc4:	98001a1e 	bne	r19,zero,4030 <__smakebuf_r+0x15c>
    3fc8:	dfc01317 	ldw	ra,76(sp)
    3fcc:	dcc01217 	ldw	r19,72(sp)
    3fd0:	dc801117 	ldw	r18,68(sp)
    3fd4:	dc401017 	ldw	r17,64(sp)
    3fd8:	dc000f17 	ldw	r16,60(sp)
    3fdc:	dec01404 	addi	sp,sp,80
    3fe0:	f800283a 	ret
    3fe4:	288010c4 	addi	r2,r5,67
    3fe8:	28800015 	stw	r2,0(r5)
    3fec:	28800415 	stw	r2,16(r5)
    3ff0:	00800044 	movi	r2,1
    3ff4:	28800515 	stw	r2,20(r5)
    3ff8:	f800283a 	ret
    3ffc:	04801004 	movi	r18,64
    4000:	003fe006 	br	3f84 <__alt_data_end+0xfffeb8e4>
    4004:	81000a17 	ldw	r4,40(r16)
    4008:	00c00034 	movhi	r3,0
    400c:	18d12004 	addi	r3,r3,17536
    4010:	20ffc51e 	bne	r4,r3,3f28 <__alt_data_end+0xfffeb888>
    4014:	8080030b 	ldhu	r2,12(r16)
    4018:	04810004 	movi	r18,1024
    401c:	84801315 	stw	r18,76(r16)
    4020:	1484b03a 	or	r2,r2,r18
    4024:	8080030d 	sth	r2,12(r16)
    4028:	0027883a 	mov	r19,zero
    402c:	003fd806 	br	3f90 <__alt_data_end+0xfffeb8f0>
    4030:	8140038f 	ldh	r5,14(r16)
    4034:	8809883a 	mov	r4,r17
    4038:	00046f80 	call	46f8 <_isatty_r>
    403c:	103fe226 	beq	r2,zero,3fc8 <__alt_data_end+0xfffeb928>
    4040:	8080030b 	ldhu	r2,12(r16)
    4044:	10800054 	ori	r2,r2,1
    4048:	8080030d 	sth	r2,12(r16)
    404c:	003fde06 	br	3fc8 <__alt_data_end+0xfffeb928>
    4050:	8080030b 	ldhu	r2,12(r16)
    4054:	10c0800c 	andi	r3,r2,512
    4058:	183fdb1e 	bne	r3,zero,3fc8 <__alt_data_end+0xfffeb928>
    405c:	10800094 	ori	r2,r2,2
    4060:	80c010c4 	addi	r3,r16,67
    4064:	8080030d 	sth	r2,12(r16)
    4068:	00800044 	movi	r2,1
    406c:	80c00015 	stw	r3,0(r16)
    4070:	80c00415 	stw	r3,16(r16)
    4074:	80800515 	stw	r2,20(r16)
    4078:	003fd306 	br	3fc8 <__alt_data_end+0xfffeb928>
    407c:	04810004 	movi	r18,1024
    4080:	003fc306 	br	3f90 <__alt_data_end+0xfffeb8f0>
    4084:	0027883a 	mov	r19,zero
    4088:	04810004 	movi	r18,1024
    408c:	003fc006 	br	3f90 <__alt_data_end+0xfffeb8f0>

00004090 <memset>:
    4090:	20c000cc 	andi	r3,r4,3
    4094:	2005883a 	mov	r2,r4
    4098:	18004426 	beq	r3,zero,41ac <memset+0x11c>
    409c:	31ffffc4 	addi	r7,r6,-1
    40a0:	30004026 	beq	r6,zero,41a4 <memset+0x114>
    40a4:	2813883a 	mov	r9,r5
    40a8:	200d883a 	mov	r6,r4
    40ac:	2007883a 	mov	r3,r4
    40b0:	00000406 	br	40c4 <memset+0x34>
    40b4:	3a3fffc4 	addi	r8,r7,-1
    40b8:	31800044 	addi	r6,r6,1
    40bc:	38003926 	beq	r7,zero,41a4 <memset+0x114>
    40c0:	400f883a 	mov	r7,r8
    40c4:	18c00044 	addi	r3,r3,1
    40c8:	32400005 	stb	r9,0(r6)
    40cc:	1a0000cc 	andi	r8,r3,3
    40d0:	403ff81e 	bne	r8,zero,40b4 <__alt_data_end+0xfffeba14>
    40d4:	010000c4 	movi	r4,3
    40d8:	21c02d2e 	bgeu	r4,r7,4190 <memset+0x100>
    40dc:	29003fcc 	andi	r4,r5,255
    40e0:	200c923a 	slli	r6,r4,8
    40e4:	3108b03a 	or	r4,r6,r4
    40e8:	200c943a 	slli	r6,r4,16
    40ec:	218cb03a 	or	r6,r4,r6
    40f0:	010003c4 	movi	r4,15
    40f4:	21c0182e 	bgeu	r4,r7,4158 <memset+0xc8>
    40f8:	3b3ffc04 	addi	r12,r7,-16
    40fc:	6018d13a 	srli	r12,r12,4
    4100:	1a000104 	addi	r8,r3,4
    4104:	1ac00204 	addi	r11,r3,8
    4108:	6008913a 	slli	r4,r12,4
    410c:	1a800304 	addi	r10,r3,12
    4110:	1813883a 	mov	r9,r3
    4114:	21000504 	addi	r4,r4,20
    4118:	1909883a 	add	r4,r3,r4
    411c:	49800015 	stw	r6,0(r9)
    4120:	41800015 	stw	r6,0(r8)
    4124:	59800015 	stw	r6,0(r11)
    4128:	51800015 	stw	r6,0(r10)
    412c:	42000404 	addi	r8,r8,16
    4130:	4a400404 	addi	r9,r9,16
    4134:	5ac00404 	addi	r11,r11,16
    4138:	52800404 	addi	r10,r10,16
    413c:	413ff71e 	bne	r8,r4,411c <__alt_data_end+0xfffeba7c>
    4140:	63000044 	addi	r12,r12,1
    4144:	6018913a 	slli	r12,r12,4
    4148:	39c003cc 	andi	r7,r7,15
    414c:	010000c4 	movi	r4,3
    4150:	1b07883a 	add	r3,r3,r12
    4154:	21c00e2e 	bgeu	r4,r7,4190 <memset+0x100>
    4158:	1813883a 	mov	r9,r3
    415c:	3811883a 	mov	r8,r7
    4160:	010000c4 	movi	r4,3
    4164:	49800015 	stw	r6,0(r9)
    4168:	423fff04 	addi	r8,r8,-4
    416c:	4a400104 	addi	r9,r9,4
    4170:	223ffc36 	bltu	r4,r8,4164 <__alt_data_end+0xfffebac4>
    4174:	393fff04 	addi	r4,r7,-4
    4178:	2008d0ba 	srli	r4,r4,2
    417c:	39c000cc 	andi	r7,r7,3
    4180:	21000044 	addi	r4,r4,1
    4184:	2109883a 	add	r4,r4,r4
    4188:	2109883a 	add	r4,r4,r4
    418c:	1907883a 	add	r3,r3,r4
    4190:	38000526 	beq	r7,zero,41a8 <memset+0x118>
    4194:	19cf883a 	add	r7,r3,r7
    4198:	19400005 	stb	r5,0(r3)
    419c:	18c00044 	addi	r3,r3,1
    41a0:	38fffd1e 	bne	r7,r3,4198 <__alt_data_end+0xfffebaf8>
    41a4:	f800283a 	ret
    41a8:	f800283a 	ret
    41ac:	2007883a 	mov	r3,r4
    41b0:	300f883a 	mov	r7,r6
    41b4:	003fc706 	br	40d4 <__alt_data_end+0xfffeba34>

000041b8 <lflush>:
    41b8:	2080030b 	ldhu	r2,12(r4)
    41bc:	00c00244 	movi	r3,9
    41c0:	1080024c 	andi	r2,r2,9
    41c4:	10c00226 	beq	r2,r3,41d0 <lflush+0x18>
    41c8:	0005883a 	mov	r2,zero
    41cc:	f800283a 	ret
    41d0:	00035381 	jmpi	3538 <fflush>

000041d4 <__srefill_r>:
    41d4:	defffc04 	addi	sp,sp,-16
    41d8:	dc400115 	stw	r17,4(sp)
    41dc:	dc000015 	stw	r16,0(sp)
    41e0:	dfc00315 	stw	ra,12(sp)
    41e4:	dc800215 	stw	r18,8(sp)
    41e8:	2023883a 	mov	r17,r4
    41ec:	2821883a 	mov	r16,r5
    41f0:	20000226 	beq	r4,zero,41fc <__srefill_r+0x28>
    41f4:	20800e17 	ldw	r2,56(r4)
    41f8:	10003c26 	beq	r2,zero,42ec <__srefill_r+0x118>
    41fc:	80c0030b 	ldhu	r3,12(r16)
    4200:	1908000c 	andi	r4,r3,8192
    4204:	1805883a 	mov	r2,r3
    4208:	2000071e 	bne	r4,zero,4228 <__srefill_r+0x54>
    420c:	81001917 	ldw	r4,100(r16)
    4210:	18880014 	ori	r2,r3,8192
    4214:	00f7ffc4 	movi	r3,-8193
    4218:	20c8703a 	and	r4,r4,r3
    421c:	8080030d 	sth	r2,12(r16)
    4220:	1007883a 	mov	r3,r2
    4224:	81001915 	stw	r4,100(r16)
    4228:	80000115 	stw	zero,4(r16)
    422c:	1100080c 	andi	r4,r2,32
    4230:	2000571e 	bne	r4,zero,4390 <__srefill_r+0x1bc>
    4234:	1100010c 	andi	r4,r2,4
    4238:	20001f26 	beq	r4,zero,42b8 <__srefill_r+0xe4>
    423c:	81400c17 	ldw	r5,48(r16)
    4240:	28000826 	beq	r5,zero,4264 <__srefill_r+0x90>
    4244:	80801004 	addi	r2,r16,64
    4248:	28800226 	beq	r5,r2,4254 <__srefill_r+0x80>
    424c:	8809883a 	mov	r4,r17
    4250:	0003a3c0 	call	3a3c <_free_r>
    4254:	80800f17 	ldw	r2,60(r16)
    4258:	80000c15 	stw	zero,48(r16)
    425c:	80800115 	stw	r2,4(r16)
    4260:	1000391e 	bne	r2,zero,4348 <__srefill_r+0x174>
    4264:	80800417 	ldw	r2,16(r16)
    4268:	10004b26 	beq	r2,zero,4398 <__srefill_r+0x1c4>
    426c:	8480030b 	ldhu	r18,12(r16)
    4270:	908000cc 	andi	r2,r18,3
    4274:	10001f1e 	bne	r2,zero,42f4 <__srefill_r+0x120>
    4278:	81800417 	ldw	r6,16(r16)
    427c:	80800817 	ldw	r2,32(r16)
    4280:	81c00517 	ldw	r7,20(r16)
    4284:	81400717 	ldw	r5,28(r16)
    4288:	81800015 	stw	r6,0(r16)
    428c:	8809883a 	mov	r4,r17
    4290:	103ee83a 	callr	r2
    4294:	80800115 	stw	r2,4(r16)
    4298:	00800e0e 	bge	zero,r2,42d4 <__srefill_r+0x100>
    429c:	0005883a 	mov	r2,zero
    42a0:	dfc00317 	ldw	ra,12(sp)
    42a4:	dc800217 	ldw	r18,8(sp)
    42a8:	dc400117 	ldw	r17,4(sp)
    42ac:	dc000017 	ldw	r16,0(sp)
    42b0:	dec00404 	addi	sp,sp,16
    42b4:	f800283a 	ret
    42b8:	1100040c 	andi	r4,r2,16
    42bc:	20003026 	beq	r4,zero,4380 <__srefill_r+0x1ac>
    42c0:	1080020c 	andi	r2,r2,8
    42c4:	1000241e 	bne	r2,zero,4358 <__srefill_r+0x184>
    42c8:	18c00114 	ori	r3,r3,4
    42cc:	80c0030d 	sth	r3,12(r16)
    42d0:	003fe406 	br	4264 <__alt_data_end+0xfffebbc4>
    42d4:	80c0030b 	ldhu	r3,12(r16)
    42d8:	1000161e 	bne	r2,zero,4334 <__srefill_r+0x160>
    42dc:	18c00814 	ori	r3,r3,32
    42e0:	00bfffc4 	movi	r2,-1
    42e4:	80c0030d 	sth	r3,12(r16)
    42e8:	003fed06 	br	42a0 <__alt_data_end+0xfffebc00>
    42ec:	00038c80 	call	38c8 <__sinit>
    42f0:	003fc206 	br	41fc <__alt_data_end+0xfffebb5c>
    42f4:	00800034 	movhi	r2,0
    42f8:	1096d004 	addi	r2,r2,23360
    42fc:	11000017 	ldw	r4,0(r2)
    4300:	01400034 	movhi	r5,0
    4304:	00800044 	movi	r2,1
    4308:	29506e04 	addi	r5,r5,16824
    430c:	8080030d 	sth	r2,12(r16)
    4310:	0003d4c0 	call	3d4c <_fwalk>
    4314:	00800244 	movi	r2,9
    4318:	8480030d 	sth	r18,12(r16)
    431c:	9480024c 	andi	r18,r18,9
    4320:	90bfd51e 	bne	r18,r2,4278 <__alt_data_end+0xfffebbd8>
    4324:	800b883a 	mov	r5,r16
    4328:	8809883a 	mov	r4,r17
    432c:	00032c00 	call	32c0 <__sflush_r>
    4330:	003fd106 	br	4278 <__alt_data_end+0xfffebbd8>
    4334:	18c01014 	ori	r3,r3,64
    4338:	80000115 	stw	zero,4(r16)
    433c:	00bfffc4 	movi	r2,-1
    4340:	80c0030d 	sth	r3,12(r16)
    4344:	003fd606 	br	42a0 <__alt_data_end+0xfffebc00>
    4348:	80c00e17 	ldw	r3,56(r16)
    434c:	0005883a 	mov	r2,zero
    4350:	80c00015 	stw	r3,0(r16)
    4354:	003fd206 	br	42a0 <__alt_data_end+0xfffebc00>
    4358:	800b883a 	mov	r5,r16
    435c:	8809883a 	mov	r4,r17
    4360:	00034dc0 	call	34dc <_fflush_r>
    4364:	10000a1e 	bne	r2,zero,4390 <__srefill_r+0x1bc>
    4368:	8080030b 	ldhu	r2,12(r16)
    436c:	00fffdc4 	movi	r3,-9
    4370:	80000215 	stw	zero,8(r16)
    4374:	1886703a 	and	r3,r3,r2
    4378:	80000615 	stw	zero,24(r16)
    437c:	003fd206 	br	42c8 <__alt_data_end+0xfffebc28>
    4380:	00800244 	movi	r2,9
    4384:	88800015 	stw	r2,0(r17)
    4388:	18c01014 	ori	r3,r3,64
    438c:	80c0030d 	sth	r3,12(r16)
    4390:	00bfffc4 	movi	r2,-1
    4394:	003fc206 	br	42a0 <__alt_data_end+0xfffebc00>
    4398:	800b883a 	mov	r5,r16
    439c:	8809883a 	mov	r4,r17
    43a0:	0003ed40 	call	3ed4 <__smakebuf_r>
    43a4:	003fb106 	br	426c <__alt_data_end+0xfffebbcc>

000043a8 <__sread>:
    43a8:	defffe04 	addi	sp,sp,-8
    43ac:	dc000015 	stw	r16,0(sp)
    43b0:	2821883a 	mov	r16,r5
    43b4:	2940038f 	ldh	r5,14(r5)
    43b8:	dfc00115 	stw	ra,4(sp)
    43bc:	00047ac0 	call	47ac <_read_r>
    43c0:	10000716 	blt	r2,zero,43e0 <__sread+0x38>
    43c4:	80c01417 	ldw	r3,80(r16)
    43c8:	1887883a 	add	r3,r3,r2
    43cc:	80c01415 	stw	r3,80(r16)
    43d0:	dfc00117 	ldw	ra,4(sp)
    43d4:	dc000017 	ldw	r16,0(sp)
    43d8:	dec00204 	addi	sp,sp,8
    43dc:	f800283a 	ret
    43e0:	80c0030b 	ldhu	r3,12(r16)
    43e4:	18fbffcc 	andi	r3,r3,61439
    43e8:	80c0030d 	sth	r3,12(r16)
    43ec:	dfc00117 	ldw	ra,4(sp)
    43f0:	dc000017 	ldw	r16,0(sp)
    43f4:	dec00204 	addi	sp,sp,8
    43f8:	f800283a 	ret

000043fc <__seofread>:
    43fc:	0005883a 	mov	r2,zero
    4400:	f800283a 	ret

00004404 <__swrite>:
    4404:	2880030b 	ldhu	r2,12(r5)
    4408:	defffb04 	addi	sp,sp,-20
    440c:	dcc00315 	stw	r19,12(sp)
    4410:	dc800215 	stw	r18,8(sp)
    4414:	dc400115 	stw	r17,4(sp)
    4418:	dc000015 	stw	r16,0(sp)
    441c:	dfc00415 	stw	ra,16(sp)
    4420:	10c0400c 	andi	r3,r2,256
    4424:	2821883a 	mov	r16,r5
    4428:	2023883a 	mov	r17,r4
    442c:	3025883a 	mov	r18,r6
    4430:	3827883a 	mov	r19,r7
    4434:	18000526 	beq	r3,zero,444c <__swrite+0x48>
    4438:	2940038f 	ldh	r5,14(r5)
    443c:	01c00084 	movi	r7,2
    4440:	000d883a 	mov	r6,zero
    4444:	000474c0 	call	474c <_lseek_r>
    4448:	8080030b 	ldhu	r2,12(r16)
    444c:	8140038f 	ldh	r5,14(r16)
    4450:	10bbffcc 	andi	r2,r2,61439
    4454:	980f883a 	mov	r7,r19
    4458:	900d883a 	mov	r6,r18
    445c:	8809883a 	mov	r4,r17
    4460:	8080030d 	sth	r2,12(r16)
    4464:	dfc00417 	ldw	ra,16(sp)
    4468:	dcc00317 	ldw	r19,12(sp)
    446c:	dc800217 	ldw	r18,8(sp)
    4470:	dc400117 	ldw	r17,4(sp)
    4474:	dc000017 	ldw	r16,0(sp)
    4478:	dec00504 	addi	sp,sp,20
    447c:	00044e41 	jmpi	44e4 <_write_r>

00004480 <__sseek>:
    4480:	defffe04 	addi	sp,sp,-8
    4484:	dc000015 	stw	r16,0(sp)
    4488:	2821883a 	mov	r16,r5
    448c:	2940038f 	ldh	r5,14(r5)
    4490:	dfc00115 	stw	ra,4(sp)
    4494:	000474c0 	call	474c <_lseek_r>
    4498:	00ffffc4 	movi	r3,-1
    449c:	10c00826 	beq	r2,r3,44c0 <__sseek+0x40>
    44a0:	80c0030b 	ldhu	r3,12(r16)
    44a4:	80801415 	stw	r2,80(r16)
    44a8:	18c40014 	ori	r3,r3,4096
    44ac:	80c0030d 	sth	r3,12(r16)
    44b0:	dfc00117 	ldw	ra,4(sp)
    44b4:	dc000017 	ldw	r16,0(sp)
    44b8:	dec00204 	addi	sp,sp,8
    44bc:	f800283a 	ret
    44c0:	80c0030b 	ldhu	r3,12(r16)
    44c4:	18fbffcc 	andi	r3,r3,61439
    44c8:	80c0030d 	sth	r3,12(r16)
    44cc:	dfc00117 	ldw	ra,4(sp)
    44d0:	dc000017 	ldw	r16,0(sp)
    44d4:	dec00204 	addi	sp,sp,8
    44d8:	f800283a 	ret

000044dc <__sclose>:
    44dc:	2940038f 	ldh	r5,14(r5)
    44e0:	00045441 	jmpi	4544 <_close_r>

000044e4 <_write_r>:
    44e4:	defffd04 	addi	sp,sp,-12
    44e8:	2805883a 	mov	r2,r5
    44ec:	dc000015 	stw	r16,0(sp)
    44f0:	04000034 	movhi	r16,0
    44f4:	dc400115 	stw	r17,4(sp)
    44f8:	300b883a 	mov	r5,r6
    44fc:	84196304 	addi	r16,r16,25996
    4500:	2023883a 	mov	r17,r4
    4504:	380d883a 	mov	r6,r7
    4508:	1009883a 	mov	r4,r2
    450c:	dfc00215 	stw	ra,8(sp)
    4510:	80000015 	stw	zero,0(r16)
    4514:	0004f840 	call	4f84 <write>
    4518:	00ffffc4 	movi	r3,-1
    451c:	10c00526 	beq	r2,r3,4534 <_write_r+0x50>
    4520:	dfc00217 	ldw	ra,8(sp)
    4524:	dc400117 	ldw	r17,4(sp)
    4528:	dc000017 	ldw	r16,0(sp)
    452c:	dec00304 	addi	sp,sp,12
    4530:	f800283a 	ret
    4534:	80c00017 	ldw	r3,0(r16)
    4538:	183ff926 	beq	r3,zero,4520 <__alt_data_end+0xfffebe80>
    453c:	88c00015 	stw	r3,0(r17)
    4540:	003ff706 	br	4520 <__alt_data_end+0xfffebe80>

00004544 <_close_r>:
    4544:	defffd04 	addi	sp,sp,-12
    4548:	dc000015 	stw	r16,0(sp)
    454c:	04000034 	movhi	r16,0
    4550:	dc400115 	stw	r17,4(sp)
    4554:	84196304 	addi	r16,r16,25996
    4558:	2023883a 	mov	r17,r4
    455c:	2809883a 	mov	r4,r5
    4560:	dfc00215 	stw	ra,8(sp)
    4564:	80000015 	stw	zero,0(r16)
    4568:	0000a8c0 	call	a8c <close>
    456c:	00ffffc4 	movi	r3,-1
    4570:	10c00526 	beq	r2,r3,4588 <_close_r+0x44>
    4574:	dfc00217 	ldw	ra,8(sp)
    4578:	dc400117 	ldw	r17,4(sp)
    457c:	dc000017 	ldw	r16,0(sp)
    4580:	dec00304 	addi	sp,sp,12
    4584:	f800283a 	ret
    4588:	80c00017 	ldw	r3,0(r16)
    458c:	183ff926 	beq	r3,zero,4574 <__alt_data_end+0xfffebed4>
    4590:	88c00015 	stw	r3,0(r17)
    4594:	003ff706 	br	4574 <__alt_data_end+0xfffebed4>

00004598 <_fclose_r>:
    4598:	28003926 	beq	r5,zero,4680 <_fclose_r+0xe8>
    459c:	defffc04 	addi	sp,sp,-16
    45a0:	dc400115 	stw	r17,4(sp)
    45a4:	dc000015 	stw	r16,0(sp)
    45a8:	dfc00315 	stw	ra,12(sp)
    45ac:	dc800215 	stw	r18,8(sp)
    45b0:	2023883a 	mov	r17,r4
    45b4:	2821883a 	mov	r16,r5
    45b8:	20000226 	beq	r4,zero,45c4 <_fclose_r+0x2c>
    45bc:	20800e17 	ldw	r2,56(r4)
    45c0:	10002726 	beq	r2,zero,4660 <_fclose_r+0xc8>
    45c4:	8080030f 	ldh	r2,12(r16)
    45c8:	1000071e 	bne	r2,zero,45e8 <_fclose_r+0x50>
    45cc:	0005883a 	mov	r2,zero
    45d0:	dfc00317 	ldw	ra,12(sp)
    45d4:	dc800217 	ldw	r18,8(sp)
    45d8:	dc400117 	ldw	r17,4(sp)
    45dc:	dc000017 	ldw	r16,0(sp)
    45e0:	dec00404 	addi	sp,sp,16
    45e4:	f800283a 	ret
    45e8:	800b883a 	mov	r5,r16
    45ec:	8809883a 	mov	r4,r17
    45f0:	00032c00 	call	32c0 <__sflush_r>
    45f4:	1025883a 	mov	r18,r2
    45f8:	80800b17 	ldw	r2,44(r16)
    45fc:	10000426 	beq	r2,zero,4610 <_fclose_r+0x78>
    4600:	81400717 	ldw	r5,28(r16)
    4604:	8809883a 	mov	r4,r17
    4608:	103ee83a 	callr	r2
    460c:	10001616 	blt	r2,zero,4668 <_fclose_r+0xd0>
    4610:	8080030b 	ldhu	r2,12(r16)
    4614:	1080200c 	andi	r2,r2,128
    4618:	1000151e 	bne	r2,zero,4670 <_fclose_r+0xd8>
    461c:	81400c17 	ldw	r5,48(r16)
    4620:	28000526 	beq	r5,zero,4638 <_fclose_r+0xa0>
    4624:	80801004 	addi	r2,r16,64
    4628:	28800226 	beq	r5,r2,4634 <_fclose_r+0x9c>
    462c:	8809883a 	mov	r4,r17
    4630:	0003a3c0 	call	3a3c <_free_r>
    4634:	80000c15 	stw	zero,48(r16)
    4638:	81401117 	ldw	r5,68(r16)
    463c:	28000326 	beq	r5,zero,464c <_fclose_r+0xb4>
    4640:	8809883a 	mov	r4,r17
    4644:	0003a3c0 	call	3a3c <_free_r>
    4648:	80001115 	stw	zero,68(r16)
    464c:	00038d80 	call	38d8 <__sfp_lock_acquire>
    4650:	8000030d 	sth	zero,12(r16)
    4654:	00038dc0 	call	38dc <__sfp_lock_release>
    4658:	9005883a 	mov	r2,r18
    465c:	003fdc06 	br	45d0 <__alt_data_end+0xfffebf30>
    4660:	00038c80 	call	38c8 <__sinit>
    4664:	003fd706 	br	45c4 <__alt_data_end+0xfffebf24>
    4668:	04bfffc4 	movi	r18,-1
    466c:	003fe806 	br	4610 <__alt_data_end+0xfffebf70>
    4670:	81400417 	ldw	r5,16(r16)
    4674:	8809883a 	mov	r4,r17
    4678:	0003a3c0 	call	3a3c <_free_r>
    467c:	003fe706 	br	461c <__alt_data_end+0xfffebf7c>
    4680:	0005883a 	mov	r2,zero
    4684:	f800283a 	ret

00004688 <fclose>:
    4688:	00800034 	movhi	r2,0
    468c:	1096d104 	addi	r2,r2,23364
    4690:	200b883a 	mov	r5,r4
    4694:	11000017 	ldw	r4,0(r2)
    4698:	00045981 	jmpi	4598 <_fclose_r>

0000469c <_fstat_r>:
    469c:	defffd04 	addi	sp,sp,-12
    46a0:	2805883a 	mov	r2,r5
    46a4:	dc000015 	stw	r16,0(sp)
    46a8:	04000034 	movhi	r16,0
    46ac:	dc400115 	stw	r17,4(sp)
    46b0:	84196304 	addi	r16,r16,25996
    46b4:	2023883a 	mov	r17,r4
    46b8:	300b883a 	mov	r5,r6
    46bc:	1009883a 	mov	r4,r2
    46c0:	dfc00215 	stw	ra,8(sp)
    46c4:	80000015 	stw	zero,0(r16)
    46c8:	0004a580 	call	4a58 <fstat>
    46cc:	00ffffc4 	movi	r3,-1
    46d0:	10c00526 	beq	r2,r3,46e8 <_fstat_r+0x4c>
    46d4:	dfc00217 	ldw	ra,8(sp)
    46d8:	dc400117 	ldw	r17,4(sp)
    46dc:	dc000017 	ldw	r16,0(sp)
    46e0:	dec00304 	addi	sp,sp,12
    46e4:	f800283a 	ret
    46e8:	80c00017 	ldw	r3,0(r16)
    46ec:	183ff926 	beq	r3,zero,46d4 <__alt_data_end+0xfffec034>
    46f0:	88c00015 	stw	r3,0(r17)
    46f4:	003ff706 	br	46d4 <__alt_data_end+0xfffec034>

000046f8 <_isatty_r>:
    46f8:	defffd04 	addi	sp,sp,-12
    46fc:	dc000015 	stw	r16,0(sp)
    4700:	04000034 	movhi	r16,0
    4704:	dc400115 	stw	r17,4(sp)
    4708:	84196304 	addi	r16,r16,25996
    470c:	2023883a 	mov	r17,r4
    4710:	2809883a 	mov	r4,r5
    4714:	dfc00215 	stw	ra,8(sp)
    4718:	80000015 	stw	zero,0(r16)
    471c:	0004b4c0 	call	4b4c <isatty>
    4720:	00ffffc4 	movi	r3,-1
    4724:	10c00526 	beq	r2,r3,473c <_isatty_r+0x44>
    4728:	dfc00217 	ldw	ra,8(sp)
    472c:	dc400117 	ldw	r17,4(sp)
    4730:	dc000017 	ldw	r16,0(sp)
    4734:	dec00304 	addi	sp,sp,12
    4738:	f800283a 	ret
    473c:	80c00017 	ldw	r3,0(r16)
    4740:	183ff926 	beq	r3,zero,4728 <__alt_data_end+0xfffec088>
    4744:	88c00015 	stw	r3,0(r17)
    4748:	003ff706 	br	4728 <__alt_data_end+0xfffec088>

0000474c <_lseek_r>:
    474c:	defffd04 	addi	sp,sp,-12
    4750:	2805883a 	mov	r2,r5
    4754:	dc000015 	stw	r16,0(sp)
    4758:	04000034 	movhi	r16,0
    475c:	dc400115 	stw	r17,4(sp)
    4760:	300b883a 	mov	r5,r6
    4764:	84196304 	addi	r16,r16,25996
    4768:	2023883a 	mov	r17,r4
    476c:	380d883a 	mov	r6,r7
    4770:	1009883a 	mov	r4,r2
    4774:	dfc00215 	stw	ra,8(sp)
    4778:	80000015 	stw	zero,0(r16)
    477c:	0004c340 	call	4c34 <lseek>
    4780:	00ffffc4 	movi	r3,-1
    4784:	10c00526 	beq	r2,r3,479c <_lseek_r+0x50>
    4788:	dfc00217 	ldw	ra,8(sp)
    478c:	dc400117 	ldw	r17,4(sp)
    4790:	dc000017 	ldw	r16,0(sp)
    4794:	dec00304 	addi	sp,sp,12
    4798:	f800283a 	ret
    479c:	80c00017 	ldw	r3,0(r16)
    47a0:	183ff926 	beq	r3,zero,4788 <__alt_data_end+0xfffec0e8>
    47a4:	88c00015 	stw	r3,0(r17)
    47a8:	003ff706 	br	4788 <__alt_data_end+0xfffec0e8>

000047ac <_read_r>:
    47ac:	defffd04 	addi	sp,sp,-12
    47b0:	2805883a 	mov	r2,r5
    47b4:	dc000015 	stw	r16,0(sp)
    47b8:	04000034 	movhi	r16,0
    47bc:	dc400115 	stw	r17,4(sp)
    47c0:	300b883a 	mov	r5,r6
    47c4:	84196304 	addi	r16,r16,25996
    47c8:	2023883a 	mov	r17,r4
    47cc:	380d883a 	mov	r6,r7
    47d0:	1009883a 	mov	r4,r2
    47d4:	dfc00215 	stw	ra,8(sp)
    47d8:	80000015 	stw	zero,0(r16)
    47dc:	0004d940 	call	4d94 <read>
    47e0:	00ffffc4 	movi	r3,-1
    47e4:	10c00526 	beq	r2,r3,47fc <_read_r+0x50>
    47e8:	dfc00217 	ldw	ra,8(sp)
    47ec:	dc400117 	ldw	r17,4(sp)
    47f0:	dc000017 	ldw	r16,0(sp)
    47f4:	dec00304 	addi	sp,sp,12
    47f8:	f800283a 	ret
    47fc:	80c00017 	ldw	r3,0(r16)
    4800:	183ff926 	beq	r3,zero,47e8 <__alt_data_end+0xfffec148>
    4804:	88c00015 	stw	r3,0(r17)
    4808:	003ff706 	br	47e8 <__alt_data_end+0xfffec148>

0000480c <__divsi3>:
    480c:	20001b16 	blt	r4,zero,487c <__divsi3+0x70>
    4810:	000f883a 	mov	r7,zero
    4814:	28001616 	blt	r5,zero,4870 <__divsi3+0x64>
    4818:	200d883a 	mov	r6,r4
    481c:	29001a2e 	bgeu	r5,r4,4888 <__divsi3+0x7c>
    4820:	00800804 	movi	r2,32
    4824:	00c00044 	movi	r3,1
    4828:	00000106 	br	4830 <__divsi3+0x24>
    482c:	10000d26 	beq	r2,zero,4864 <__divsi3+0x58>
    4830:	294b883a 	add	r5,r5,r5
    4834:	10bfffc4 	addi	r2,r2,-1
    4838:	18c7883a 	add	r3,r3,r3
    483c:	293ffb36 	bltu	r5,r4,482c <__alt_data_end+0xfffec18c>
    4840:	0005883a 	mov	r2,zero
    4844:	18000726 	beq	r3,zero,4864 <__divsi3+0x58>
    4848:	0005883a 	mov	r2,zero
    484c:	31400236 	bltu	r6,r5,4858 <__divsi3+0x4c>
    4850:	314dc83a 	sub	r6,r6,r5
    4854:	10c4b03a 	or	r2,r2,r3
    4858:	1806d07a 	srli	r3,r3,1
    485c:	280ad07a 	srli	r5,r5,1
    4860:	183ffa1e 	bne	r3,zero,484c <__alt_data_end+0xfffec1ac>
    4864:	38000126 	beq	r7,zero,486c <__divsi3+0x60>
    4868:	0085c83a 	sub	r2,zero,r2
    486c:	f800283a 	ret
    4870:	014bc83a 	sub	r5,zero,r5
    4874:	39c0005c 	xori	r7,r7,1
    4878:	003fe706 	br	4818 <__alt_data_end+0xfffec178>
    487c:	0109c83a 	sub	r4,zero,r4
    4880:	01c00044 	movi	r7,1
    4884:	003fe306 	br	4814 <__alt_data_end+0xfffec174>
    4888:	00c00044 	movi	r3,1
    488c:	003fee06 	br	4848 <__alt_data_end+0xfffec1a8>

00004890 <__modsi3>:
    4890:	20001716 	blt	r4,zero,48f0 <__modsi3+0x60>
    4894:	000f883a 	mov	r7,zero
    4898:	2005883a 	mov	r2,r4
    489c:	28001216 	blt	r5,zero,48e8 <__modsi3+0x58>
    48a0:	2900162e 	bgeu	r5,r4,48fc <__modsi3+0x6c>
    48a4:	01800804 	movi	r6,32
    48a8:	00c00044 	movi	r3,1
    48ac:	00000106 	br	48b4 <__modsi3+0x24>
    48b0:	30000a26 	beq	r6,zero,48dc <__modsi3+0x4c>
    48b4:	294b883a 	add	r5,r5,r5
    48b8:	31bfffc4 	addi	r6,r6,-1
    48bc:	18c7883a 	add	r3,r3,r3
    48c0:	293ffb36 	bltu	r5,r4,48b0 <__alt_data_end+0xfffec210>
    48c4:	18000526 	beq	r3,zero,48dc <__modsi3+0x4c>
    48c8:	1806d07a 	srli	r3,r3,1
    48cc:	11400136 	bltu	r2,r5,48d4 <__modsi3+0x44>
    48d0:	1145c83a 	sub	r2,r2,r5
    48d4:	280ad07a 	srli	r5,r5,1
    48d8:	183ffb1e 	bne	r3,zero,48c8 <__alt_data_end+0xfffec228>
    48dc:	38000126 	beq	r7,zero,48e4 <__modsi3+0x54>
    48e0:	0085c83a 	sub	r2,zero,r2
    48e4:	f800283a 	ret
    48e8:	014bc83a 	sub	r5,zero,r5
    48ec:	003fec06 	br	48a0 <__alt_data_end+0xfffec200>
    48f0:	0109c83a 	sub	r4,zero,r4
    48f4:	01c00044 	movi	r7,1
    48f8:	003fe706 	br	4898 <__alt_data_end+0xfffec1f8>
    48fc:	00c00044 	movi	r3,1
    4900:	003ff106 	br	48c8 <__alt_data_end+0xfffec228>

00004904 <__udivsi3>:
    4904:	200d883a 	mov	r6,r4
    4908:	2900152e 	bgeu	r5,r4,4960 <__udivsi3+0x5c>
    490c:	28001416 	blt	r5,zero,4960 <__udivsi3+0x5c>
    4910:	00800804 	movi	r2,32
    4914:	00c00044 	movi	r3,1
    4918:	00000206 	br	4924 <__udivsi3+0x20>
    491c:	10000e26 	beq	r2,zero,4958 <__udivsi3+0x54>
    4920:	28000516 	blt	r5,zero,4938 <__udivsi3+0x34>
    4924:	294b883a 	add	r5,r5,r5
    4928:	10bfffc4 	addi	r2,r2,-1
    492c:	18c7883a 	add	r3,r3,r3
    4930:	293ffa36 	bltu	r5,r4,491c <__alt_data_end+0xfffec27c>
    4934:	18000826 	beq	r3,zero,4958 <__udivsi3+0x54>
    4938:	0005883a 	mov	r2,zero
    493c:	31400236 	bltu	r6,r5,4948 <__udivsi3+0x44>
    4940:	314dc83a 	sub	r6,r6,r5
    4944:	10c4b03a 	or	r2,r2,r3
    4948:	1806d07a 	srli	r3,r3,1
    494c:	280ad07a 	srli	r5,r5,1
    4950:	183ffa1e 	bne	r3,zero,493c <__alt_data_end+0xfffec29c>
    4954:	f800283a 	ret
    4958:	0005883a 	mov	r2,zero
    495c:	f800283a 	ret
    4960:	00c00044 	movi	r3,1
    4964:	003ff406 	br	4938 <__alt_data_end+0xfffec298>

00004968 <__umodsi3>:
    4968:	2005883a 	mov	r2,r4
    496c:	2900122e 	bgeu	r5,r4,49b8 <__umodsi3+0x50>
    4970:	28001116 	blt	r5,zero,49b8 <__umodsi3+0x50>
    4974:	01800804 	movi	r6,32
    4978:	00c00044 	movi	r3,1
    497c:	00000206 	br	4988 <__umodsi3+0x20>
    4980:	30000c26 	beq	r6,zero,49b4 <__umodsi3+0x4c>
    4984:	28000516 	blt	r5,zero,499c <__umodsi3+0x34>
    4988:	294b883a 	add	r5,r5,r5
    498c:	31bfffc4 	addi	r6,r6,-1
    4990:	18c7883a 	add	r3,r3,r3
    4994:	293ffa36 	bltu	r5,r4,4980 <__alt_data_end+0xfffec2e0>
    4998:	18000626 	beq	r3,zero,49b4 <__umodsi3+0x4c>
    499c:	1806d07a 	srli	r3,r3,1
    49a0:	11400136 	bltu	r2,r5,49a8 <__umodsi3+0x40>
    49a4:	1145c83a 	sub	r2,r2,r5
    49a8:	280ad07a 	srli	r5,r5,1
    49ac:	183ffb1e 	bne	r3,zero,499c <__alt_data_end+0xfffec2fc>
    49b0:	f800283a 	ret
    49b4:	f800283a 	ret
    49b8:	00c00044 	movi	r3,1
    49bc:	003ff706 	br	499c <__alt_data_end+0xfffec2fc>

000049c0 <__mulsi3>:
    49c0:	0005883a 	mov	r2,zero
    49c4:	20000726 	beq	r4,zero,49e4 <__mulsi3+0x24>
    49c8:	20c0004c 	andi	r3,r4,1
    49cc:	2008d07a 	srli	r4,r4,1
    49d0:	18000126 	beq	r3,zero,49d8 <__mulsi3+0x18>
    49d4:	1145883a 	add	r2,r2,r5
    49d8:	294b883a 	add	r5,r5,r5
    49dc:	203ffa1e 	bne	r4,zero,49c8 <__alt_data_end+0xfffec328>
    49e0:	f800283a 	ret
    49e4:	f800283a 	ret

000049e8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    49e8:	defffd04 	addi	sp,sp,-12
    49ec:	df000215 	stw	fp,8(sp)
    49f0:	df000204 	addi	fp,sp,8
    49f4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    49f8:	0001883a 	nop
    49fc:	e0bfff17 	ldw	r2,-4(fp)
    4a00:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    4a04:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    4a08:	10000226 	beq	r2,zero,4a14 <_exit+0x2c>
    ALT_SIM_FAIL();
    4a0c:	002af070 	cmpltui	zero,zero,43969
    4a10:	00000106 	br	4a18 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    4a14:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    4a18:	003fff06 	br	4a18 <__alt_data_end+0xfffec378>

00004a1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4a1c:	defffe04 	addi	sp,sp,-8
    4a20:	dfc00115 	stw	ra,4(sp)
    4a24:	df000015 	stw	fp,0(sp)
    4a28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4a2c:	d0a00517 	ldw	r2,-32748(gp)
    4a30:	10000326 	beq	r2,zero,4a40 <alt_get_errno+0x24>
    4a34:	d0a00517 	ldw	r2,-32748(gp)
    4a38:	103ee83a 	callr	r2
    4a3c:	00000106 	br	4a44 <alt_get_errno+0x28>
    4a40:	d0a29904 	addi	r2,gp,-30108
}
    4a44:	e037883a 	mov	sp,fp
    4a48:	dfc00117 	ldw	ra,4(sp)
    4a4c:	df000017 	ldw	fp,0(sp)
    4a50:	dec00204 	addi	sp,sp,8
    4a54:	f800283a 	ret

00004a58 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    4a58:	defffb04 	addi	sp,sp,-20
    4a5c:	dfc00415 	stw	ra,16(sp)
    4a60:	df000315 	stw	fp,12(sp)
    4a64:	df000304 	addi	fp,sp,12
    4a68:	e13ffe15 	stw	r4,-8(fp)
    4a6c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4a70:	e0bffe17 	ldw	r2,-8(fp)
    4a74:	10000816 	blt	r2,zero,4a98 <fstat+0x40>
    4a78:	01400304 	movi	r5,12
    4a7c:	e13ffe17 	ldw	r4,-8(fp)
    4a80:	00049c00 	call	49c0 <__mulsi3>
    4a84:	1007883a 	mov	r3,r2
    4a88:	00800034 	movhi	r2,0
    4a8c:	10945f04 	addi	r2,r2,20860
    4a90:	1885883a 	add	r2,r3,r2
    4a94:	00000106 	br	4a9c <fstat+0x44>
    4a98:	0005883a 	mov	r2,zero
    4a9c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    4aa0:	e0bffd17 	ldw	r2,-12(fp)
    4aa4:	10001026 	beq	r2,zero,4ae8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    4aa8:	e0bffd17 	ldw	r2,-12(fp)
    4aac:	10800017 	ldw	r2,0(r2)
    4ab0:	10800817 	ldw	r2,32(r2)
    4ab4:	10000726 	beq	r2,zero,4ad4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    4ab8:	e0bffd17 	ldw	r2,-12(fp)
    4abc:	10800017 	ldw	r2,0(r2)
    4ac0:	10800817 	ldw	r2,32(r2)
    4ac4:	e17fff17 	ldw	r5,-4(fp)
    4ac8:	e13ffd17 	ldw	r4,-12(fp)
    4acc:	103ee83a 	callr	r2
    4ad0:	00000a06 	br	4afc <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    4ad4:	e0bfff17 	ldw	r2,-4(fp)
    4ad8:	00c80004 	movi	r3,8192
    4adc:	10c00115 	stw	r3,4(r2)
      return 0;
    4ae0:	0005883a 	mov	r2,zero
    4ae4:	00000506 	br	4afc <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    4ae8:	0004a1c0 	call	4a1c <alt_get_errno>
    4aec:	1007883a 	mov	r3,r2
    4af0:	00801444 	movi	r2,81
    4af4:	18800015 	stw	r2,0(r3)
    return -1;
    4af8:	00bfffc4 	movi	r2,-1
  }
}
    4afc:	e037883a 	mov	sp,fp
    4b00:	dfc00117 	ldw	ra,4(sp)
    4b04:	df000017 	ldw	fp,0(sp)
    4b08:	dec00204 	addi	sp,sp,8
    4b0c:	f800283a 	ret

00004b10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4b10:	defffe04 	addi	sp,sp,-8
    4b14:	dfc00115 	stw	ra,4(sp)
    4b18:	df000015 	stw	fp,0(sp)
    4b1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4b20:	d0a00517 	ldw	r2,-32748(gp)
    4b24:	10000326 	beq	r2,zero,4b34 <alt_get_errno+0x24>
    4b28:	d0a00517 	ldw	r2,-32748(gp)
    4b2c:	103ee83a 	callr	r2
    4b30:	00000106 	br	4b38 <alt_get_errno+0x28>
    4b34:	d0a29904 	addi	r2,gp,-30108
}
    4b38:	e037883a 	mov	sp,fp
    4b3c:	dfc00117 	ldw	ra,4(sp)
    4b40:	df000017 	ldw	fp,0(sp)
    4b44:	dec00204 	addi	sp,sp,8
    4b48:	f800283a 	ret

00004b4c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    4b4c:	deffed04 	addi	sp,sp,-76
    4b50:	dfc01215 	stw	ra,72(sp)
    4b54:	df001115 	stw	fp,68(sp)
    4b58:	df001104 	addi	fp,sp,68
    4b5c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4b60:	e0bfff17 	ldw	r2,-4(fp)
    4b64:	10000816 	blt	r2,zero,4b88 <isatty+0x3c>
    4b68:	01400304 	movi	r5,12
    4b6c:	e13fff17 	ldw	r4,-4(fp)
    4b70:	00049c00 	call	49c0 <__mulsi3>
    4b74:	1007883a 	mov	r3,r2
    4b78:	00800034 	movhi	r2,0
    4b7c:	10945f04 	addi	r2,r2,20860
    4b80:	1885883a 	add	r2,r3,r2
    4b84:	00000106 	br	4b8c <isatty+0x40>
    4b88:	0005883a 	mov	r2,zero
    4b8c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    4b90:	e0bfef17 	ldw	r2,-68(fp)
    4b94:	10000e26 	beq	r2,zero,4bd0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    4b98:	e0bfef17 	ldw	r2,-68(fp)
    4b9c:	10800017 	ldw	r2,0(r2)
    4ba0:	10800817 	ldw	r2,32(r2)
    4ba4:	1000021e 	bne	r2,zero,4bb0 <isatty+0x64>
    {
      return 1;
    4ba8:	00800044 	movi	r2,1
    4bac:	00000d06 	br	4be4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    4bb0:	e0bff004 	addi	r2,fp,-64
    4bb4:	100b883a 	mov	r5,r2
    4bb8:	e13fff17 	ldw	r4,-4(fp)
    4bbc:	0004a580 	call	4a58 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    4bc0:	e0bff117 	ldw	r2,-60(fp)
    4bc4:	10880020 	cmpeqi	r2,r2,8192
    4bc8:	10803fcc 	andi	r2,r2,255
    4bcc:	00000506 	br	4be4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    4bd0:	0004b100 	call	4b10 <alt_get_errno>
    4bd4:	1007883a 	mov	r3,r2
    4bd8:	00801444 	movi	r2,81
    4bdc:	18800015 	stw	r2,0(r3)
    return 0;
    4be0:	0005883a 	mov	r2,zero
  }
}
    4be4:	e037883a 	mov	sp,fp
    4be8:	dfc00117 	ldw	ra,4(sp)
    4bec:	df000017 	ldw	fp,0(sp)
    4bf0:	dec00204 	addi	sp,sp,8
    4bf4:	f800283a 	ret

00004bf8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4bf8:	defffe04 	addi	sp,sp,-8
    4bfc:	dfc00115 	stw	ra,4(sp)
    4c00:	df000015 	stw	fp,0(sp)
    4c04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4c08:	d0a00517 	ldw	r2,-32748(gp)
    4c0c:	10000326 	beq	r2,zero,4c1c <alt_get_errno+0x24>
    4c10:	d0a00517 	ldw	r2,-32748(gp)
    4c14:	103ee83a 	callr	r2
    4c18:	00000106 	br	4c20 <alt_get_errno+0x28>
    4c1c:	d0a29904 	addi	r2,gp,-30108
}
    4c20:	e037883a 	mov	sp,fp
    4c24:	dfc00117 	ldw	ra,4(sp)
    4c28:	df000017 	ldw	fp,0(sp)
    4c2c:	dec00204 	addi	sp,sp,8
    4c30:	f800283a 	ret

00004c34 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    4c34:	defff904 	addi	sp,sp,-28
    4c38:	dfc00615 	stw	ra,24(sp)
    4c3c:	df000515 	stw	fp,20(sp)
    4c40:	df000504 	addi	fp,sp,20
    4c44:	e13ffd15 	stw	r4,-12(fp)
    4c48:	e17ffe15 	stw	r5,-8(fp)
    4c4c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    4c50:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4c54:	e0bffd17 	ldw	r2,-12(fp)
    4c58:	10000816 	blt	r2,zero,4c7c <lseek+0x48>
    4c5c:	01400304 	movi	r5,12
    4c60:	e13ffd17 	ldw	r4,-12(fp)
    4c64:	00049c00 	call	49c0 <__mulsi3>
    4c68:	1007883a 	mov	r3,r2
    4c6c:	00800034 	movhi	r2,0
    4c70:	10945f04 	addi	r2,r2,20860
    4c74:	1885883a 	add	r2,r3,r2
    4c78:	00000106 	br	4c80 <lseek+0x4c>
    4c7c:	0005883a 	mov	r2,zero
    4c80:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    4c84:	e0bffc17 	ldw	r2,-16(fp)
    4c88:	10001026 	beq	r2,zero,4ccc <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    4c8c:	e0bffc17 	ldw	r2,-16(fp)
    4c90:	10800017 	ldw	r2,0(r2)
    4c94:	10800717 	ldw	r2,28(r2)
    4c98:	10000926 	beq	r2,zero,4cc0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    4c9c:	e0bffc17 	ldw	r2,-16(fp)
    4ca0:	10800017 	ldw	r2,0(r2)
    4ca4:	10800717 	ldw	r2,28(r2)
    4ca8:	e1bfff17 	ldw	r6,-4(fp)
    4cac:	e17ffe17 	ldw	r5,-8(fp)
    4cb0:	e13ffc17 	ldw	r4,-16(fp)
    4cb4:	103ee83a 	callr	r2
    4cb8:	e0bffb15 	stw	r2,-20(fp)
    4cbc:	00000506 	br	4cd4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    4cc0:	00bfde84 	movi	r2,-134
    4cc4:	e0bffb15 	stw	r2,-20(fp)
    4cc8:	00000206 	br	4cd4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    4ccc:	00bfebc4 	movi	r2,-81
    4cd0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    4cd4:	e0bffb17 	ldw	r2,-20(fp)
    4cd8:	1000070e 	bge	r2,zero,4cf8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    4cdc:	0004bf80 	call	4bf8 <alt_get_errno>
    4ce0:	1007883a 	mov	r3,r2
    4ce4:	e0bffb17 	ldw	r2,-20(fp)
    4ce8:	0085c83a 	sub	r2,zero,r2
    4cec:	18800015 	stw	r2,0(r3)
    rc = -1;
    4cf0:	00bfffc4 	movi	r2,-1
    4cf4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    4cf8:	e0bffb17 	ldw	r2,-20(fp)
}
    4cfc:	e037883a 	mov	sp,fp
    4d00:	dfc00117 	ldw	ra,4(sp)
    4d04:	df000017 	ldw	fp,0(sp)
    4d08:	dec00204 	addi	sp,sp,8
    4d0c:	f800283a 	ret

00004d10 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    4d10:	defffe04 	addi	sp,sp,-8
    4d14:	df000115 	stw	fp,4(sp)
    4d18:	df000104 	addi	fp,sp,4
    4d1c:	e13fff15 	stw	r4,-4(fp)
}
    4d20:	0001883a 	nop
    4d24:	e037883a 	mov	sp,fp
    4d28:	df000017 	ldw	fp,0(sp)
    4d2c:	dec00104 	addi	sp,sp,4
    4d30:	f800283a 	ret

00004d34 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    4d34:	defffe04 	addi	sp,sp,-8
    4d38:	df000115 	stw	fp,4(sp)
    4d3c:	df000104 	addi	fp,sp,4
    4d40:	e13fff15 	stw	r4,-4(fp)
}
    4d44:	0001883a 	nop
    4d48:	e037883a 	mov	sp,fp
    4d4c:	df000017 	ldw	fp,0(sp)
    4d50:	dec00104 	addi	sp,sp,4
    4d54:	f800283a 	ret

00004d58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4d58:	defffe04 	addi	sp,sp,-8
    4d5c:	dfc00115 	stw	ra,4(sp)
    4d60:	df000015 	stw	fp,0(sp)
    4d64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4d68:	d0a00517 	ldw	r2,-32748(gp)
    4d6c:	10000326 	beq	r2,zero,4d7c <alt_get_errno+0x24>
    4d70:	d0a00517 	ldw	r2,-32748(gp)
    4d74:	103ee83a 	callr	r2
    4d78:	00000106 	br	4d80 <alt_get_errno+0x28>
    4d7c:	d0a29904 	addi	r2,gp,-30108
}
    4d80:	e037883a 	mov	sp,fp
    4d84:	dfc00117 	ldw	ra,4(sp)
    4d88:	df000017 	ldw	fp,0(sp)
    4d8c:	dec00204 	addi	sp,sp,8
    4d90:	f800283a 	ret

00004d94 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    4d94:	defff904 	addi	sp,sp,-28
    4d98:	dfc00615 	stw	ra,24(sp)
    4d9c:	df000515 	stw	fp,20(sp)
    4da0:	df000504 	addi	fp,sp,20
    4da4:	e13ffd15 	stw	r4,-12(fp)
    4da8:	e17ffe15 	stw	r5,-8(fp)
    4dac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4db0:	e0bffd17 	ldw	r2,-12(fp)
    4db4:	10000816 	blt	r2,zero,4dd8 <read+0x44>
    4db8:	01400304 	movi	r5,12
    4dbc:	e13ffd17 	ldw	r4,-12(fp)
    4dc0:	00049c00 	call	49c0 <__mulsi3>
    4dc4:	1007883a 	mov	r3,r2
    4dc8:	00800034 	movhi	r2,0
    4dcc:	10945f04 	addi	r2,r2,20860
    4dd0:	1885883a 	add	r2,r3,r2
    4dd4:	00000106 	br	4ddc <read+0x48>
    4dd8:	0005883a 	mov	r2,zero
    4ddc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    4de0:	e0bffb17 	ldw	r2,-20(fp)
    4de4:	10002226 	beq	r2,zero,4e70 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    4de8:	e0bffb17 	ldw	r2,-20(fp)
    4dec:	10800217 	ldw	r2,8(r2)
    4df0:	108000cc 	andi	r2,r2,3
    4df4:	10800060 	cmpeqi	r2,r2,1
    4df8:	1000181e 	bne	r2,zero,4e5c <read+0xc8>
        (fd->dev->read))
    4dfc:	e0bffb17 	ldw	r2,-20(fp)
    4e00:	10800017 	ldw	r2,0(r2)
    4e04:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    4e08:	10001426 	beq	r2,zero,4e5c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    4e0c:	e0bffb17 	ldw	r2,-20(fp)
    4e10:	10800017 	ldw	r2,0(r2)
    4e14:	10800517 	ldw	r2,20(r2)
    4e18:	e0ffff17 	ldw	r3,-4(fp)
    4e1c:	180d883a 	mov	r6,r3
    4e20:	e17ffe17 	ldw	r5,-8(fp)
    4e24:	e13ffb17 	ldw	r4,-20(fp)
    4e28:	103ee83a 	callr	r2
    4e2c:	e0bffc15 	stw	r2,-16(fp)
    4e30:	e0bffc17 	ldw	r2,-16(fp)
    4e34:	1000070e 	bge	r2,zero,4e54 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    4e38:	0004d580 	call	4d58 <alt_get_errno>
    4e3c:	1007883a 	mov	r3,r2
    4e40:	e0bffc17 	ldw	r2,-16(fp)
    4e44:	0085c83a 	sub	r2,zero,r2
    4e48:	18800015 	stw	r2,0(r3)
          return -1;
    4e4c:	00bfffc4 	movi	r2,-1
    4e50:	00000c06 	br	4e84 <read+0xf0>
        }
        return rval;
    4e54:	e0bffc17 	ldw	r2,-16(fp)
    4e58:	00000a06 	br	4e84 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    4e5c:	0004d580 	call	4d58 <alt_get_errno>
    4e60:	1007883a 	mov	r3,r2
    4e64:	00800344 	movi	r2,13
    4e68:	18800015 	stw	r2,0(r3)
    4e6c:	00000406 	br	4e80 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    4e70:	0004d580 	call	4d58 <alt_get_errno>
    4e74:	1007883a 	mov	r3,r2
    4e78:	00801444 	movi	r2,81
    4e7c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    4e80:	00bfffc4 	movi	r2,-1
}
    4e84:	e037883a 	mov	sp,fp
    4e88:	dfc00117 	ldw	ra,4(sp)
    4e8c:	df000017 	ldw	fp,0(sp)
    4e90:	dec00204 	addi	sp,sp,8
    4e94:	f800283a 	ret

00004e98 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    4e98:	defff904 	addi	sp,sp,-28
    4e9c:	df000615 	stw	fp,24(sp)
    4ea0:	df000604 	addi	fp,sp,24
    4ea4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4ea8:	0005303a 	rdctl	r2,status
    4eac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4eb0:	e0fffe17 	ldw	r3,-8(fp)
    4eb4:	00bfff84 	movi	r2,-2
    4eb8:	1884703a 	and	r2,r3,r2
    4ebc:	1001703a 	wrctl	status,r2
  
  return context;
    4ec0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    4ec4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    4ec8:	d0a00a17 	ldw	r2,-32728(gp)
    4ecc:	10c000c4 	addi	r3,r2,3
    4ed0:	00bfff04 	movi	r2,-4
    4ed4:	1884703a 	and	r2,r3,r2
    4ed8:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    4edc:	d0e00a17 	ldw	r3,-32728(gp)
    4ee0:	e0bfff17 	ldw	r2,-4(fp)
    4ee4:	1887883a 	add	r3,r3,r2
    4ee8:	008000b4 	movhi	r2,2
    4eec:	10a1a804 	addi	r2,r2,-31072
    4ef0:	10c0062e 	bgeu	r2,r3,4f0c <sbrk+0x74>
    4ef4:	e0bffb17 	ldw	r2,-20(fp)
    4ef8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4efc:	e0bffa17 	ldw	r2,-24(fp)
    4f00:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    4f04:	00bfffc4 	movi	r2,-1
    4f08:	00000b06 	br	4f38 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    4f0c:	d0a00a17 	ldw	r2,-32728(gp)
    4f10:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    4f14:	d0e00a17 	ldw	r3,-32728(gp)
    4f18:	e0bfff17 	ldw	r2,-4(fp)
    4f1c:	1885883a 	add	r2,r3,r2
    4f20:	d0a00a15 	stw	r2,-32728(gp)
    4f24:	e0bffb17 	ldw	r2,-20(fp)
    4f28:	e0bffc15 	stw	r2,-16(fp)
    4f2c:	e0bffc17 	ldw	r2,-16(fp)
    4f30:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    4f34:	e0bffd17 	ldw	r2,-12(fp)
} 
    4f38:	e037883a 	mov	sp,fp
    4f3c:	df000017 	ldw	fp,0(sp)
    4f40:	dec00104 	addi	sp,sp,4
    4f44:	f800283a 	ret

00004f48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4f48:	defffe04 	addi	sp,sp,-8
    4f4c:	dfc00115 	stw	ra,4(sp)
    4f50:	df000015 	stw	fp,0(sp)
    4f54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4f58:	d0a00517 	ldw	r2,-32748(gp)
    4f5c:	10000326 	beq	r2,zero,4f6c <alt_get_errno+0x24>
    4f60:	d0a00517 	ldw	r2,-32748(gp)
    4f64:	103ee83a 	callr	r2
    4f68:	00000106 	br	4f70 <alt_get_errno+0x28>
    4f6c:	d0a29904 	addi	r2,gp,-30108
}
    4f70:	e037883a 	mov	sp,fp
    4f74:	dfc00117 	ldw	ra,4(sp)
    4f78:	df000017 	ldw	fp,0(sp)
    4f7c:	dec00204 	addi	sp,sp,8
    4f80:	f800283a 	ret

00004f84 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    4f84:	defff904 	addi	sp,sp,-28
    4f88:	dfc00615 	stw	ra,24(sp)
    4f8c:	df000515 	stw	fp,20(sp)
    4f90:	df000504 	addi	fp,sp,20
    4f94:	e13ffd15 	stw	r4,-12(fp)
    4f98:	e17ffe15 	stw	r5,-8(fp)
    4f9c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4fa0:	e0bffd17 	ldw	r2,-12(fp)
    4fa4:	10000816 	blt	r2,zero,4fc8 <write+0x44>
    4fa8:	01400304 	movi	r5,12
    4fac:	e13ffd17 	ldw	r4,-12(fp)
    4fb0:	00049c00 	call	49c0 <__mulsi3>
    4fb4:	1007883a 	mov	r3,r2
    4fb8:	00800034 	movhi	r2,0
    4fbc:	10945f04 	addi	r2,r2,20860
    4fc0:	1885883a 	add	r2,r3,r2
    4fc4:	00000106 	br	4fcc <write+0x48>
    4fc8:	0005883a 	mov	r2,zero
    4fcc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    4fd0:	e0bffb17 	ldw	r2,-20(fp)
    4fd4:	10002126 	beq	r2,zero,505c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    4fd8:	e0bffb17 	ldw	r2,-20(fp)
    4fdc:	10800217 	ldw	r2,8(r2)
    4fe0:	108000cc 	andi	r2,r2,3
    4fe4:	10001826 	beq	r2,zero,5048 <write+0xc4>
    4fe8:	e0bffb17 	ldw	r2,-20(fp)
    4fec:	10800017 	ldw	r2,0(r2)
    4ff0:	10800617 	ldw	r2,24(r2)
    4ff4:	10001426 	beq	r2,zero,5048 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    4ff8:	e0bffb17 	ldw	r2,-20(fp)
    4ffc:	10800017 	ldw	r2,0(r2)
    5000:	10800617 	ldw	r2,24(r2)
    5004:	e0ffff17 	ldw	r3,-4(fp)
    5008:	180d883a 	mov	r6,r3
    500c:	e17ffe17 	ldw	r5,-8(fp)
    5010:	e13ffb17 	ldw	r4,-20(fp)
    5014:	103ee83a 	callr	r2
    5018:	e0bffc15 	stw	r2,-16(fp)
    501c:	e0bffc17 	ldw	r2,-16(fp)
    5020:	1000070e 	bge	r2,zero,5040 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    5024:	0004f480 	call	4f48 <alt_get_errno>
    5028:	1007883a 	mov	r3,r2
    502c:	e0bffc17 	ldw	r2,-16(fp)
    5030:	0085c83a 	sub	r2,zero,r2
    5034:	18800015 	stw	r2,0(r3)
        return -1;
    5038:	00bfffc4 	movi	r2,-1
    503c:	00000c06 	br	5070 <write+0xec>
      }
      return rval;
    5040:	e0bffc17 	ldw	r2,-16(fp)
    5044:	00000a06 	br	5070 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    5048:	0004f480 	call	4f48 <alt_get_errno>
    504c:	1007883a 	mov	r3,r2
    5050:	00800344 	movi	r2,13
    5054:	18800015 	stw	r2,0(r3)
    5058:	00000406 	br	506c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    505c:	0004f480 	call	4f48 <alt_get_errno>
    5060:	1007883a 	mov	r3,r2
    5064:	00801444 	movi	r2,81
    5068:	18800015 	stw	r2,0(r3)
  }
  return -1;
    506c:	00bfffc4 	movi	r2,-1
}
    5070:	e037883a 	mov	sp,fp
    5074:	dfc00117 	ldw	ra,4(sp)
    5078:	df000017 	ldw	fp,0(sp)
    507c:	dec00204 	addi	sp,sp,8
    5080:	f800283a 	ret
