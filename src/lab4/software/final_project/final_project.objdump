
final_project.elf:     file format elf32-littlenios2
final_project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00005520 memsz 0x00005520 flags r-x
    LOAD off    0x00006540 vaddr 0x00005540 paddr 0x00006fac align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008a18 vaddr 0x00008a18 paddr 0x00008a18 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000052c4  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  000054f4  000054f4  000064f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  00005540  00006fac  00006540  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00008a18  00008a18  00008a18  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00008b6c  00008b6c  00007fac  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00007fac  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ad0  00000000  00000000  00007fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000181d9  00000000  00000000  00008aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006715  00000000  00000000  00020c79  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006c83  00000000  00000000  0002738e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000016ac  00000000  00000000  0002e014  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000027ae  00000000  00000000  0002f6c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003900  00000000  00000000  00031e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00035770  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000005d8  00000000  00000000  000357b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00038362  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00038365  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00038368  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00038369  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0003836a  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00038373  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0003837c  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000005  00000000  00000000  00038385  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001c  00000000  00000000  0003838a  2**0
                  CONTENTS, READONLY
 26 .jdi          00003753  00000000  00000000  000383a6  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0005d1e8  00000000  00000000  0003baf9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
000054f4 l    d  .rodata	00000000 .rodata
00005540 l    d  .rwdata	00000000 .rwdata
00008a18 l    d  .bss	00000000 .bss
00008b6c l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_project_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000374 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000774 l     F .text	00000034 alt_dev_reg
00005540 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00000a4c l     F .text	0000020c altera_avalon_jtag_uart_irq
00000c58 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00001514 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00001648 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00001674 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00001ad4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00001c34 l     F .text	0000003c alt_get_errno
00001c70 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
00006748 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00003178 l     F .text	00000008 __fp_unlock
0000318c l     F .text	0000019c __sinit.part.1
00003328 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 refill.c
000045d4 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00004e8c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00004f80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00005068 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000051c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
00006fa8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000053b8 l     F .text	0000003c alt_get_errno
00008a30 g     O .bss	00000004 alt_instruction_exception_handler
00004b68 g     F .text	00000054 _isatty_r
00000460 g     F .text	0000007c alt_main
00008a6c g     O .bss	00000100 alt_irq
00004bbc g     F .text	00000060 _lseek_r
00006fac g       *ABS*	00000000 __flash_rwdata_start
00008b6c g       *ABS*	00000000 __alt_heap_start
000048f0 g     F .text	0000005c __sseek
000034d8 g     F .text	00000010 __sinit
0000298c g     F .text	00000140 __swbuf_r
00003330 g     F .text	00000078 __sfmoreglue
000051a4 g     F .text	00000024 __malloc_unlock
000034c0 g     F .text	00000018 _cleanup
000020e0 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00004b0c g     F .text	0000005c _fstat_r
00008a34 g     O .bss	00000004 errno
000028e0 g     F .text	00000014 __srget
0000486c g     F .text	00000008 __seofread
00008a1c g     O .bss	00000004 alt_argv
0000ef74 g       *ABS*	00000000 _gp
00000744 g     F .text	00000030 usleep
000065c8 g     O .rwdata	00000180 alt_fd_list
00002448 g     F .text	00000070 _getc_r
000024b8 g     F .text	00000088 getc
00002104 g     F .text	00000090 alt_find_dev
000025bc g     F .text	00000148 memcpy
00003180 g     F .text	0000000c _cleanup_r
00001bb8 g     F .text	0000007c alt_io_redirect
000054f4 g       *ABS*	00000000 __DTOR_END__
00002360 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00000e50 g     F .text	0000021c altera_avalon_jtag_uart_read
00004d74 g     F .text	00000064 .hidden __udivsi3
00004fbc g     F .text	000000ac isatty
00008a40 g     O .bss	00000004 __malloc_top_pad
000047c4 g     F .text	00000054 _sbrk_r
00004c1c g     F .text	00000060 _read_r
00006f84 g     O .rwdata	00000004 alt_max_fd
00004a08 g     F .text	000000f0 _fclose_r
00003148 g     F .text	00000030 fflush
00008a3c g     O .bss	00000004 __malloc_max_sbrked_mem
000050a4 g     F .text	000000dc lseek
00006f98 g     O .rwdata	00000004 _global_impure_ptr
00008b6c g       *ABS*	00000000 __bss_end
000019e4 g     F .text	000000f0 alt_iic_isr_register
00000340 g     F .text	00000034 alt_getchar
00001fd8 g     F .text	00000108 alt_tick
000034f8 g     F .text	00000018 __fp_lock_all
00001998 g     F .text	0000004c alt_ic_irq_enabled
00001f3c g     F .text	0000009c alt_alarm_stop
00008a24 g     O .bss	00000004 alt_irq_active
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
000000fc g     F .exceptions	000000d4 alt_irq_handler
000065a0 g     O .rwdata	00000028 alt_dev_null
00001628 g     F .text	00000020 alt_dcache_flush_all
00006fac g       *ABS*	00000000 __ram_rwdata_end
00006f7c g     O .rwdata	00000008 alt_dev_list
000053f4 g     F .text	00000100 write
00002704 g     F .text	000000a0 _putc_r
00005540 g       *ABS*	00000000 __ram_rodata_end
00004ec8 g     F .text	000000b8 fstat
00004dd8 g     F .text	00000058 .hidden __umodsi3
00008b6c g       *ABS*	00000000 end
0000098c g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
000054f4 g       *ABS*	00000000 __CTOR_LIST__
000186a0 g       *ABS*	00000000 __alt_stack_pointer
0000106c g     F .text	00000224 altera_avalon_jtag_uart_write
000034e8 g     F .text	00000004 __sfp_lock_acquire
0000364c g     F .text	00000310 _free_r
000004dc g     F .text	0000022c alt_printf
0000286c g     F .text	00000074 __srget_r
00002d50 g     F .text	00000180 __call_exitprocs
00006fa0 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00008a28 g     O .bss	00000004 _alt_tick_rate
00008a2c g     O .bss	00000004 _alt_nticks
00005204 g     F .text	00000104 read
000007e0 g     F .text	00000048 alt_sys_init
00002c38 g     F .text	00000118 __register_exitproc
00000cf8 g     F .text	00000068 altera_avalon_jtag_uart_close
00004e30 g     F .text	00000028 .hidden __mulsi3
00005540 g       *ABS*	00000000 __ram_rwdata_start
000054f4 g       *ABS*	00000000 __ram_rodata_start
00008a44 g     O .bss	00000028 __malloc_current_mallinfo
00000828 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000229c g     F .text	000000c4 alt_get_fd
000013bc g     F .text	00000158 alt_busy_sleep
000049b4 g     F .text	00000054 _close_r
00002540 g     F .text	0000007c memcmp
000008e8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00008b6c g       *ABS*	00000000 __alt_stack_base
00000938 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002ae4 g     F .text	00000154 __swsetup_r
000033a8 g     F .text	00000118 __sfp
00006b6c g     O .rwdata	00000408 __malloc_av_
000034f4 g     F .text	00000004 __sinit_lock_release
00004818 g     F .text	00000054 __sread
00002194 g     F .text	00000108 alt_find_file
000016b0 g     F .text	000000a4 alt_dev_llist_insert
00005180 g     F .text	00000024 __malloc_lock
00005308 g     F .text	000000b0 sbrk
000030ec g     F .text	0000005c _fflush_r
00008a18 g       *ABS*	00000000 __bss_start
000044ac g     F .text	00000128 memset
0000026c g     F .text	000000d4 main
00008a20 g     O .bss	00000004 alt_envp
00008a38 g     O .bss	00000004 __malloc_max_total_mem
00000888 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00002acc g     F .text	00000018 __swbuf
0000494c g     F .text	00000008 __sclose
000186a0 g       *ABS*	00000000 __alt_heap_limit
00004af8 g     F .text	00000014 fclose
00003ca0 g     F .text	0000080c _malloc_r
00006f88 g     O .rwdata	00000004 alt_errno
0000395c g     F .text	000000c4 _fwalk
000027a4 g     F .text	000000c8 putc
00004c7c g     F .text	00000084 .hidden __divsi3
00003528 g     F .text	00000124 _malloc_trim_r
000054f4 g       *ABS*	00000000 __CTOR_END__
000054f4 g       *ABS*	00000000 __flash_rodata_start
000054f4 g       *ABS*	00000000 __DTOR_LIST__
000007a8 g     F .text	00000038 alt_irq_init
00001eb8 g     F .text	00000084 alt_release_fd
000023fc g     F .text	00000014 atexit
00004954 g     F .text	00000060 _write_r
00006f9c g     O .rwdata	00000004 _impure_ptr
00008a18 g     O .bss	00000004 alt_argc
00002ed0 g     F .text	0000021c __sflush_r
000017b4 g     F .text	00000060 _do_dtors
000045f0 g     F .text	000001d4 __srefill_r
00000020 g       .exceptions	00000000 alt_irq_entry
00003510 g     F .text	00000018 __fp_unlock_all
00006f74 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00001834 g     F .text	00000050 alt_ic_isr_register
00006fac g       *ABS*	00000000 _edata
00008b6c g       *ABS*	00000000 _end
00000230 g       *ABS*	00000000 __ram_exceptions_end
00000d60 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000190c g     F .text	0000008c alt_ic_irq_disable
00004874 g     F .text	0000007c __swrite
00006fa4 g     O .rwdata	00000004 __malloc_trim_threshold
00002410 g     F .text	00000038 exit
00003a20 g     F .text	000000c4 _fwalk_reent
00004d00 g     F .text	00000074 .hidden __modsi3
000186a0 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000034ec g     F .text	00000004 __sfp_lock_release
00004e58 g     F .text	00000034 _exit
00001290 g     F .text	0000012c alt_alarm_start
00003ae4 g     F .text	000001bc __smakebuf_r
000028f4 g     F .text	00000098 strlen
00001d5c g     F .text	0000015c open
00000708 g     F .text	0000003c alt_putchar
00001814 g     F .text	00000020 alt_icache_flush_all
00006f8c g     O .rwdata	00000004 alt_priority_mask
00001884 g     F .text	00000088 alt_ic_irq_enable
00006f90 g     O .rwdata	00000008 alt_alarm_list
00001754 g     F .text	00000060 _do_ctors
00001550 g     F .text	000000d8 close
000003dc g     F .text	00000084 alt_load
000034f0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10a29b04 	addi	r2,r2,-30100
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10a29b04 	addi	r2,r2,-30100
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffe7a8c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffe7a80>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a6af17 	ldw	r2,-25924(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a6af17 	ldw	r2,-25924(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dee1a814 	ori	sp,sp,34464
    movhi gp, %hi(_gp)
     238:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     23c:	d6bbdd14 	ori	gp,gp,61300
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     244:	10a28614 	ori	r2,r2,35352

    movhi r3, %hi(__bss_end)
     248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     24c:	18e2db14 	ori	r3,r3,35692

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfffe7bb4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	00003dc0 	call	3dc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	00004600 	call	460 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfffe7bc8>

0000026c <main>:
#define charSent (volatile char*) 0x21010
#define charReceived (volatile char*) 0x21000


int main()
{
     26c:	defffc04 	addi	sp,sp,-16
     270:	dfc00315 	stw	ra,12(sp)
     274:	df000215 	stw	fp,8(sp)
     278:	dc000115 	stw	r16,4(sp)
     27c:	df000204 	addi	fp,sp,8
  alt_printf("please write\n");
     280:	01000034 	movhi	r4,0
     284:	21153d04 	addi	r4,r4,21748
     288:	00004dc0 	call	4dc <alt_printf>
  *(busOutput) = alt_getchar();;
     28c:	040000b4 	movhi	r16,2
     290:	84041004 	addi	r16,r16,4160
     294:	00003400 	call	340 <alt_getchar>
     298:	80800005 	stb	r2,0(r16)
  *(transEn) = 1;
     29c:	008000b4 	movhi	r2,2
     2a0:	10840804 	addi	r2,r2,4128
     2a4:	00c00044 	movi	r3,1
     2a8:	10c00005 	stb	r3,0(r2)
  usleep(1000);
     2ac:	0100fa04 	movi	r4,1000
     2b0:	00007440 	call	744 <usleep>
  *(load) = 1;
     2b4:	008000b4 	movhi	r2,2
     2b8:	10840c04 	addi	r2,r2,4144
     2bc:	00c00044 	movi	r3,1
     2c0:	10c00005 	stb	r3,0(r2)
  while(!charReceived){}
     2c4:	0001883a 	nop
  usleep(2000);
     2c8:	0101f404 	movi	r4,2000
     2cc:	00007440 	call	744 <usleep>
  *(load) = 0;
     2d0:	008000b4 	movhi	r2,2
     2d4:	10840c04 	addi	r2,r2,4144
     2d8:	10000005 	stb	zero,0(r2)
  *(transEn) = 0;
     2dc:	008000b4 	movhi	r2,2
     2e0:	10840804 	addi	r2,r2,4128
     2e4:	10000005 	stb	zero,0(r2)
  char output = *(busInput);
     2e8:	008000b4 	movhi	r2,2
     2ec:	10841404 	addi	r2,r2,4176
     2f0:	10800003 	ldbu	r2,0(r2)
     2f4:	e0bffe05 	stb	r2,-8(fp)
  *(LED) = *(busInput);
     2f8:	008000b4 	movhi	r2,2
     2fc:	10841804 	addi	r2,r2,4192
     300:	00c000b4 	movhi	r3,2
     304:	18c41404 	addi	r3,r3,4176
     308:	18c00003 	ldbu	r3,0(r3)
     30c:	10c00005 	stb	r3,0(r2)
  alt_printf("data is %c\n", output);
     310:	e0bffe07 	ldb	r2,-8(fp)
     314:	100b883a 	mov	r5,r2
     318:	01000034 	movhi	r4,0
     31c:	21154104 	addi	r4,r4,21764
     320:	00004dc0 	call	4dc <alt_printf>
  return 0;
     324:	0005883a 	mov	r2,zero
}
     328:	e6ffff04 	addi	sp,fp,-4
     32c:	dfc00217 	ldw	ra,8(sp)
     330:	df000117 	ldw	fp,4(sp)
     334:	dc000017 	ldw	r16,0(sp)
     338:	dec00304 	addi	sp,sp,12
     33c:	f800283a 	ret

00000340 <alt_getchar>:
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
     340:	defffe04 	addi	sp,sp,-8
     344:	dfc00115 	stw	ra,4(sp)
     348:	df000015 	stw	fp,0(sp)
     34c:	d839883a 	mov	fp,sp
    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    }
    return c;
#else
    return getchar();
     350:	d0a00a17 	ldw	r2,-32728(gp)
     354:	10800117 	ldw	r2,4(r2)
     358:	1009883a 	mov	r4,r2
     35c:	00024b80 	call	24b8 <getc>
#endif
#endif
}
     360:	e037883a 	mov	sp,fp
     364:	dfc00117 	ldw	ra,4(sp)
     368:	df000017 	ldw	fp,0(sp)
     36c:	dec00204 	addi	sp,sp,8
     370:	f800283a 	ret

00000374 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     374:	defffc04 	addi	sp,sp,-16
     378:	df000315 	stw	fp,12(sp)
     37c:	df000304 	addi	fp,sp,12
     380:	e13ffd15 	stw	r4,-12(fp)
     384:	e17ffe15 	stw	r5,-8(fp)
     388:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     38c:	e0fffe17 	ldw	r3,-8(fp)
     390:	e0bffd17 	ldw	r2,-12(fp)
     394:	18800c26 	beq	r3,r2,3c8 <alt_load_section+0x54>
  {
    while( to != end )
     398:	00000806 	br	3bc <alt_load_section+0x48>
    {
      *to++ = *from++;
     39c:	e0bffe17 	ldw	r2,-8(fp)
     3a0:	10c00104 	addi	r3,r2,4
     3a4:	e0fffe15 	stw	r3,-8(fp)
     3a8:	e0fffd17 	ldw	r3,-12(fp)
     3ac:	19000104 	addi	r4,r3,4
     3b0:	e13ffd15 	stw	r4,-12(fp)
     3b4:	18c00017 	ldw	r3,0(r3)
     3b8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     3bc:	e0fffe17 	ldw	r3,-8(fp)
     3c0:	e0bfff17 	ldw	r2,-4(fp)
     3c4:	18bff51e 	bne	r3,r2,39c <__alt_data_end+0xfffe7cfc>
    {
      *to++ = *from++;
    }
  }
}
     3c8:	0001883a 	nop
     3cc:	e037883a 	mov	sp,fp
     3d0:	df000017 	ldw	fp,0(sp)
     3d4:	dec00104 	addi	sp,sp,4
     3d8:	f800283a 	ret

000003dc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     3dc:	defffe04 	addi	sp,sp,-8
     3e0:	dfc00115 	stw	ra,4(sp)
     3e4:	df000015 	stw	fp,0(sp)
     3e8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     3ec:	01800034 	movhi	r6,0
     3f0:	319beb04 	addi	r6,r6,28588
     3f4:	01400034 	movhi	r5,0
     3f8:	29555004 	addi	r5,r5,21824
     3fc:	01000034 	movhi	r4,0
     400:	211beb04 	addi	r4,r4,28588
     404:	00003740 	call	374 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     408:	01800034 	movhi	r6,0
     40c:	31808c04 	addi	r6,r6,560
     410:	01400034 	movhi	r5,0
     414:	29400804 	addi	r5,r5,32
     418:	01000034 	movhi	r4,0
     41c:	21000804 	addi	r4,r4,32
     420:	00003740 	call	374 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     424:	01800034 	movhi	r6,0
     428:	31955004 	addi	r6,r6,21824
     42c:	01400034 	movhi	r5,0
     430:	29553d04 	addi	r5,r5,21748
     434:	01000034 	movhi	r4,0
     438:	21153d04 	addi	r4,r4,21748
     43c:	00003740 	call	374 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     440:	00016280 	call	1628 <alt_dcache_flush_all>
  alt_icache_flush_all();
     444:	00018140 	call	1814 <alt_icache_flush_all>
}
     448:	0001883a 	nop
     44c:	e037883a 	mov	sp,fp
     450:	dfc00117 	ldw	ra,4(sp)
     454:	df000017 	ldw	fp,0(sp)
     458:	dec00204 	addi	sp,sp,8
     45c:	f800283a 	ret

00000460 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     460:	defffd04 	addi	sp,sp,-12
     464:	dfc00215 	stw	ra,8(sp)
     468:	df000115 	stw	fp,4(sp)
     46c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     470:	0009883a 	mov	r4,zero
     474:	00007a80 	call	7a8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
     478:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     47c:	00007e00 	call	7e0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     480:	01800034 	movhi	r6,0
     484:	31954404 	addi	r6,r6,21776
     488:	01400034 	movhi	r5,0
     48c:	29554404 	addi	r5,r5,21776
     490:	01000034 	movhi	r4,0
     494:	21154404 	addi	r4,r4,21776
     498:	0001bb80 	call	1bb8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     49c:	00017540 	call	1754 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     4a0:	01000034 	movhi	r4,0
     4a4:	2105ed04 	addi	r4,r4,6068
     4a8:	00023fc0 	call	23fc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     4ac:	d0a6a917 	ldw	r2,-25948(gp)
     4b0:	d0e6aa17 	ldw	r3,-25944(gp)
     4b4:	d126ab17 	ldw	r4,-25940(gp)
     4b8:	200d883a 	mov	r6,r4
     4bc:	180b883a 	mov	r5,r3
     4c0:	1009883a 	mov	r4,r2
     4c4:	000026c0 	call	26c <main>
     4c8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     4cc:	01000044 	movi	r4,1
     4d0:	00015500 	call	1550 <close>
  exit (result);
     4d4:	e13fff17 	ldw	r4,-4(fp)
     4d8:	00024100 	call	2410 <exit>

000004dc <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
     4dc:	defff204 	addi	sp,sp,-56
     4e0:	dfc00a15 	stw	ra,40(sp)
     4e4:	df000915 	stw	fp,36(sp)
     4e8:	df000904 	addi	fp,sp,36
     4ec:	e13fff15 	stw	r4,-4(fp)
     4f0:	e1400215 	stw	r5,8(fp)
     4f4:	e1800315 	stw	r6,12(fp)
     4f8:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
     4fc:	e0800204 	addi	r2,fp,8
     500:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
     504:	e0bfff17 	ldw	r2,-4(fp)
     508:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
     50c:	00006f06 	br	6cc <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
     510:	e0bff807 	ldb	r2,-32(fp)
     514:	10800960 	cmpeqi	r2,r2,37
     518:	1000041e 	bne	r2,zero,52c <alt_printf+0x50>
        {
            alt_putchar(c);
     51c:	e0bff807 	ldb	r2,-32(fp)
     520:	1009883a 	mov	r4,r2
     524:	00007080 	call	708 <alt_putchar>
     528:	00006806 	br	6cc <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
     52c:	e0bff717 	ldw	r2,-36(fp)
     530:	10c00044 	addi	r3,r2,1
     534:	e0fff715 	stw	r3,-36(fp)
     538:	10800003 	ldbu	r2,0(r2)
     53c:	e0bff805 	stb	r2,-32(fp)
     540:	e0bff807 	ldb	r2,-32(fp)
     544:	10006926 	beq	r2,zero,6ec <alt_printf+0x210>
            {
                if (c == '%')
     548:	e0bff807 	ldb	r2,-32(fp)
     54c:	10800958 	cmpnei	r2,r2,37
     550:	1000041e 	bne	r2,zero,564 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
     554:	e0bff807 	ldb	r2,-32(fp)
     558:	1009883a 	mov	r4,r2
     55c:	00007080 	call	708 <alt_putchar>
     560:	00005a06 	br	6cc <alt_printf+0x1f0>
                } 
                else if (c == 'c')
     564:	e0bff807 	ldb	r2,-32(fp)
     568:	108018d8 	cmpnei	r2,r2,99
     56c:	1000081e 	bne	r2,zero,590 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
     570:	e0bffe17 	ldw	r2,-8(fp)
     574:	10c00104 	addi	r3,r2,4
     578:	e0fffe15 	stw	r3,-8(fp)
     57c:	10800017 	ldw	r2,0(r2)
     580:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
     584:	e13ffd17 	ldw	r4,-12(fp)
     588:	00007080 	call	708 <alt_putchar>
     58c:	00004f06 	br	6cc <alt_printf+0x1f0>
                }
                else if (c == 'x')
     590:	e0bff807 	ldb	r2,-32(fp)
     594:	10801e18 	cmpnei	r2,r2,120
     598:	1000341e 	bne	r2,zero,66c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
     59c:	e0bffe17 	ldw	r2,-8(fp)
     5a0:	10c00104 	addi	r3,r2,4
     5a4:	e0fffe15 	stw	r3,-8(fp)
     5a8:	10800017 	ldw	r2,0(r2)
     5ac:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
     5b0:	e0bffb17 	ldw	r2,-20(fp)
     5b4:	1000031e 	bne	r2,zero,5c4 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
     5b8:	01000c04 	movi	r4,48
     5bc:	00007080 	call	708 <alt_putchar>
                        continue;
     5c0:	00004206 	br	6cc <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
     5c4:	00800704 	movi	r2,28
     5c8:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
     5cc:	00000306 	br	5dc <alt_printf+0x100>
                        digit_shift -= 4;
     5d0:	e0bff917 	ldw	r2,-28(fp)
     5d4:	10bfff04 	addi	r2,r2,-4
     5d8:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     5dc:	00c003c4 	movi	r3,15
     5e0:	e0bff917 	ldw	r2,-28(fp)
     5e4:	1884983a 	sll	r2,r3,r2
     5e8:	1007883a 	mov	r3,r2
     5ec:	e0bffb17 	ldw	r2,-20(fp)
     5f0:	1884703a 	and	r2,r3,r2
     5f4:	103ff626 	beq	r2,zero,5d0 <__alt_data_end+0xfffe7f30>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     5f8:	00001906 	br	660 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
     5fc:	00c003c4 	movi	r3,15
     600:	e0bff917 	ldw	r2,-28(fp)
     604:	1884983a 	sll	r2,r3,r2
     608:	1007883a 	mov	r3,r2
     60c:	e0bffb17 	ldw	r2,-20(fp)
     610:	1886703a 	and	r3,r3,r2
     614:	e0bff917 	ldw	r2,-28(fp)
     618:	1884d83a 	srl	r2,r3,r2
     61c:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
     620:	e0bffc17 	ldw	r2,-16(fp)
     624:	108002a8 	cmpgeui	r2,r2,10
     628:	1000041e 	bne	r2,zero,63c <alt_printf+0x160>
                            c = '0' + digit;
     62c:	e0bffc17 	ldw	r2,-16(fp)
     630:	10800c04 	addi	r2,r2,48
     634:	e0bff805 	stb	r2,-32(fp)
     638:	00000306 	br	648 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
     63c:	e0bffc17 	ldw	r2,-16(fp)
     640:	108015c4 	addi	r2,r2,87
     644:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
     648:	e0bff807 	ldb	r2,-32(fp)
     64c:	1009883a 	mov	r4,r2
     650:	00007080 	call	708 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     654:	e0bff917 	ldw	r2,-28(fp)
     658:	10bfff04 	addi	r2,r2,-4
     65c:	e0bff915 	stw	r2,-28(fp)
     660:	e0bff917 	ldw	r2,-28(fp)
     664:	103fe50e 	bge	r2,zero,5fc <__alt_data_end+0xfffe7f5c>
     668:	00001806 	br	6cc <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
     66c:	e0bff807 	ldb	r2,-32(fp)
     670:	10801cd8 	cmpnei	r2,r2,115
     674:	1000151e 	bne	r2,zero,6cc <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
     678:	e0bffe17 	ldw	r2,-8(fp)
     67c:	10c00104 	addi	r3,r2,4
     680:	e0fffe15 	stw	r3,-8(fp)
     684:	10800017 	ldw	r2,0(r2)
     688:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
     68c:	00000906 	br	6b4 <alt_printf+0x1d8>
                      alt_putchar(*s++);
     690:	e0bffa17 	ldw	r2,-24(fp)
     694:	10c00044 	addi	r3,r2,1
     698:	e0fffa15 	stw	r3,-24(fp)
     69c:	10800003 	ldbu	r2,0(r2)
     6a0:	10803fcc 	andi	r2,r2,255
     6a4:	1080201c 	xori	r2,r2,128
     6a8:	10bfe004 	addi	r2,r2,-128
     6ac:	1009883a 	mov	r4,r2
     6b0:	00007080 	call	708 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
     6b4:	e0bffa17 	ldw	r2,-24(fp)
     6b8:	10800003 	ldbu	r2,0(r2)
     6bc:	10803fcc 	andi	r2,r2,255
     6c0:	1080201c 	xori	r2,r2,128
     6c4:	10bfe004 	addi	r2,r2,-128
     6c8:	103ff11e 	bne	r2,zero,690 <__alt_data_end+0xfffe7ff0>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     6cc:	e0bff717 	ldw	r2,-36(fp)
     6d0:	10c00044 	addi	r3,r2,1
     6d4:	e0fff715 	stw	r3,-36(fp)
     6d8:	10800003 	ldbu	r2,0(r2)
     6dc:	e0bff805 	stb	r2,-32(fp)
     6e0:	e0bff807 	ldb	r2,-32(fp)
     6e4:	103f8a1e 	bne	r2,zero,510 <__alt_data_end+0xfffe7e70>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
     6e8:	00000106 	br	6f0 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
     6ec:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
     6f0:	0001883a 	nop
     6f4:	e037883a 	mov	sp,fp
     6f8:	dfc00117 	ldw	ra,4(sp)
     6fc:	df000017 	ldw	fp,0(sp)
     700:	dec00504 	addi	sp,sp,20
     704:	f800283a 	ret

00000708 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
     708:	defffd04 	addi	sp,sp,-12
     70c:	dfc00215 	stw	ra,8(sp)
     710:	df000115 	stw	fp,4(sp)
     714:	df000104 	addi	fp,sp,4
     718:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
     71c:	d0a00a17 	ldw	r2,-32728(gp)
     720:	10800217 	ldw	r2,8(r2)
     724:	100b883a 	mov	r5,r2
     728:	e13fff17 	ldw	r4,-4(fp)
     72c:	00027a40 	call	27a4 <putc>
#endif
#endif
}
     730:	e037883a 	mov	sp,fp
     734:	dfc00117 	ldw	ra,4(sp)
     738:	df000017 	ldw	fp,0(sp)
     73c:	dec00204 	addi	sp,sp,8
     740:	f800283a 	ret

00000744 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
     744:	defffd04 	addi	sp,sp,-12
     748:	dfc00215 	stw	ra,8(sp)
     74c:	df000115 	stw	fp,4(sp)
     750:	df000104 	addi	fp,sp,4
     754:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
     758:	e13fff17 	ldw	r4,-4(fp)
     75c:	00013bc0 	call	13bc <alt_busy_sleep>
}
     760:	e037883a 	mov	sp,fp
     764:	dfc00117 	ldw	ra,4(sp)
     768:	df000017 	ldw	fp,0(sp)
     76c:	dec00204 	addi	sp,sp,8
     770:	f800283a 	ret

00000774 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
     774:	defffd04 	addi	sp,sp,-12
     778:	dfc00215 	stw	ra,8(sp)
     77c:	df000115 	stw	fp,4(sp)
     780:	df000104 	addi	fp,sp,4
     784:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     788:	d1600204 	addi	r5,gp,-32760
     78c:	e13fff17 	ldw	r4,-4(fp)
     790:	00016b00 	call	16b0 <alt_dev_llist_insert>
}
     794:	e037883a 	mov	sp,fp
     798:	dfc00117 	ldw	ra,4(sp)
     79c:	df000017 	ldw	fp,0(sp)
     7a0:	dec00204 	addi	sp,sp,8
     7a4:	f800283a 	ret

000007a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     7a8:	defffd04 	addi	sp,sp,-12
     7ac:	dfc00215 	stw	ra,8(sp)
     7b0:	df000115 	stw	fp,4(sp)
     7b4:	df000104 	addi	fp,sp,4
     7b8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
     7bc:	00020e00 	call	20e0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     7c0:	00800044 	movi	r2,1
     7c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     7c8:	0001883a 	nop
     7cc:	e037883a 	mov	sp,fp
     7d0:	dfc00117 	ldw	ra,4(sp)
     7d4:	df000017 	ldw	fp,0(sp)
     7d8:	dec00204 	addi	sp,sp,8
     7dc:	f800283a 	ret

000007e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     7e0:	defffe04 	addi	sp,sp,-8
     7e4:	dfc00115 	stw	ra,4(sp)
     7e8:	df000015 	stw	fp,0(sp)
     7ec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
     7f0:	01800144 	movi	r6,5
     7f4:	000b883a 	mov	r5,zero
     7f8:	01000034 	movhi	r4,0
     7fc:	21155a04 	addi	r4,r4,21864
     800:	000098c0 	call	98c <altera_avalon_jtag_uart_init>
     804:	01000034 	movhi	r4,0
     808:	21155004 	addi	r4,r4,21824
     80c:	00007740 	call	774 <alt_dev_reg>
}
     810:	0001883a 	nop
     814:	e037883a 	mov	sp,fp
     818:	dfc00117 	ldw	ra,4(sp)
     81c:	df000017 	ldw	fp,0(sp)
     820:	dec00204 	addi	sp,sp,8
     824:	f800283a 	ret

00000828 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     828:	defffa04 	addi	sp,sp,-24
     82c:	dfc00515 	stw	ra,20(sp)
     830:	df000415 	stw	fp,16(sp)
     834:	df000404 	addi	fp,sp,16
     838:	e13ffd15 	stw	r4,-12(fp)
     83c:	e17ffe15 	stw	r5,-8(fp)
     840:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     844:	e0bffd17 	ldw	r2,-12(fp)
     848:	10800017 	ldw	r2,0(r2)
     84c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     850:	e0bffc17 	ldw	r2,-16(fp)
     854:	10c00a04 	addi	r3,r2,40
     858:	e0bffd17 	ldw	r2,-12(fp)
     85c:	10800217 	ldw	r2,8(r2)
     860:	100f883a 	mov	r7,r2
     864:	e1bfff17 	ldw	r6,-4(fp)
     868:	e17ffe17 	ldw	r5,-8(fp)
     86c:	1809883a 	mov	r4,r3
     870:	0000e500 	call	e50 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     874:	e037883a 	mov	sp,fp
     878:	dfc00117 	ldw	ra,4(sp)
     87c:	df000017 	ldw	fp,0(sp)
     880:	dec00204 	addi	sp,sp,8
     884:	f800283a 	ret

00000888 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     888:	defffa04 	addi	sp,sp,-24
     88c:	dfc00515 	stw	ra,20(sp)
     890:	df000415 	stw	fp,16(sp)
     894:	df000404 	addi	fp,sp,16
     898:	e13ffd15 	stw	r4,-12(fp)
     89c:	e17ffe15 	stw	r5,-8(fp)
     8a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     8a4:	e0bffd17 	ldw	r2,-12(fp)
     8a8:	10800017 	ldw	r2,0(r2)
     8ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     8b0:	e0bffc17 	ldw	r2,-16(fp)
     8b4:	10c00a04 	addi	r3,r2,40
     8b8:	e0bffd17 	ldw	r2,-12(fp)
     8bc:	10800217 	ldw	r2,8(r2)
     8c0:	100f883a 	mov	r7,r2
     8c4:	e1bfff17 	ldw	r6,-4(fp)
     8c8:	e17ffe17 	ldw	r5,-8(fp)
     8cc:	1809883a 	mov	r4,r3
     8d0:	000106c0 	call	106c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     8d4:	e037883a 	mov	sp,fp
     8d8:	dfc00117 	ldw	ra,4(sp)
     8dc:	df000017 	ldw	fp,0(sp)
     8e0:	dec00204 	addi	sp,sp,8
     8e4:	f800283a 	ret

000008e8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     8e8:	defffc04 	addi	sp,sp,-16
     8ec:	dfc00315 	stw	ra,12(sp)
     8f0:	df000215 	stw	fp,8(sp)
     8f4:	df000204 	addi	fp,sp,8
     8f8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     8fc:	e0bfff17 	ldw	r2,-4(fp)
     900:	10800017 	ldw	r2,0(r2)
     904:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     908:	e0bffe17 	ldw	r2,-8(fp)
     90c:	10c00a04 	addi	r3,r2,40
     910:	e0bfff17 	ldw	r2,-4(fp)
     914:	10800217 	ldw	r2,8(r2)
     918:	100b883a 	mov	r5,r2
     91c:	1809883a 	mov	r4,r3
     920:	0000cf80 	call	cf8 <altera_avalon_jtag_uart_close>
}
     924:	e037883a 	mov	sp,fp
     928:	dfc00117 	ldw	ra,4(sp)
     92c:	df000017 	ldw	fp,0(sp)
     930:	dec00204 	addi	sp,sp,8
     934:	f800283a 	ret

00000938 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     938:	defffa04 	addi	sp,sp,-24
     93c:	dfc00515 	stw	ra,20(sp)
     940:	df000415 	stw	fp,16(sp)
     944:	df000404 	addi	fp,sp,16
     948:	e13ffd15 	stw	r4,-12(fp)
     94c:	e17ffe15 	stw	r5,-8(fp)
     950:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
     954:	e0bffd17 	ldw	r2,-12(fp)
     958:	10800017 	ldw	r2,0(r2)
     95c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     960:	e0bffc17 	ldw	r2,-16(fp)
     964:	10800a04 	addi	r2,r2,40
     968:	e1bfff17 	ldw	r6,-4(fp)
     96c:	e17ffe17 	ldw	r5,-8(fp)
     970:	1009883a 	mov	r4,r2
     974:	0000d600 	call	d60 <altera_avalon_jtag_uart_ioctl>
}
     978:	e037883a 	mov	sp,fp
     97c:	dfc00117 	ldw	ra,4(sp)
     980:	df000017 	ldw	fp,0(sp)
     984:	dec00204 	addi	sp,sp,8
     988:	f800283a 	ret

0000098c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     98c:	defffa04 	addi	sp,sp,-24
     990:	dfc00515 	stw	ra,20(sp)
     994:	df000415 	stw	fp,16(sp)
     998:	df000404 	addi	fp,sp,16
     99c:	e13ffd15 	stw	r4,-12(fp)
     9a0:	e17ffe15 	stw	r5,-8(fp)
     9a4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     9a8:	e0bffd17 	ldw	r2,-12(fp)
     9ac:	00c00044 	movi	r3,1
     9b0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     9b4:	e0bffd17 	ldw	r2,-12(fp)
     9b8:	10800017 	ldw	r2,0(r2)
     9bc:	10800104 	addi	r2,r2,4
     9c0:	1007883a 	mov	r3,r2
     9c4:	e0bffd17 	ldw	r2,-12(fp)
     9c8:	10800817 	ldw	r2,32(r2)
     9cc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
     9d0:	e0bffe17 	ldw	r2,-8(fp)
     9d4:	e0ffff17 	ldw	r3,-4(fp)
     9d8:	d8000015 	stw	zero,0(sp)
     9dc:	e1fffd17 	ldw	r7,-12(fp)
     9e0:	01800034 	movhi	r6,0
     9e4:	31829304 	addi	r6,r6,2636
     9e8:	180b883a 	mov	r5,r3
     9ec:	1009883a 	mov	r4,r2
     9f0:	00018340 	call	1834 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     9f4:	e0bffd17 	ldw	r2,-12(fp)
     9f8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     9fc:	e0bffd17 	ldw	r2,-12(fp)
     a00:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     a04:	d0e6ad17 	ldw	r3,-25932(gp)
     a08:	e1fffd17 	ldw	r7,-12(fp)
     a0c:	01800034 	movhi	r6,0
     a10:	31831604 	addi	r6,r6,3160
     a14:	180b883a 	mov	r5,r3
     a18:	1009883a 	mov	r4,r2
     a1c:	00012900 	call	1290 <alt_alarm_start>
     a20:	1000040e 	bge	r2,zero,a34 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     a24:	e0fffd17 	ldw	r3,-12(fp)
     a28:	00a00034 	movhi	r2,32768
     a2c:	10bfffc4 	addi	r2,r2,-1
     a30:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     a34:	0001883a 	nop
     a38:	e037883a 	mov	sp,fp
     a3c:	dfc00117 	ldw	ra,4(sp)
     a40:	df000017 	ldw	fp,0(sp)
     a44:	dec00204 	addi	sp,sp,8
     a48:	f800283a 	ret

00000a4c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
     a4c:	defff804 	addi	sp,sp,-32
     a50:	df000715 	stw	fp,28(sp)
     a54:	df000704 	addi	fp,sp,28
     a58:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
     a5c:	e0bfff17 	ldw	r2,-4(fp)
     a60:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
     a64:	e0bffb17 	ldw	r2,-20(fp)
     a68:	10800017 	ldw	r2,0(r2)
     a6c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     a70:	e0bffc17 	ldw	r2,-16(fp)
     a74:	10800104 	addi	r2,r2,4
     a78:	10800037 	ldwio	r2,0(r2)
     a7c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     a80:	e0bffd17 	ldw	r2,-12(fp)
     a84:	1080c00c 	andi	r2,r2,768
     a88:	10006d26 	beq	r2,zero,c40 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     a8c:	e0bffd17 	ldw	r2,-12(fp)
     a90:	1080400c 	andi	r2,r2,256
     a94:	10003526 	beq	r2,zero,b6c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
     a98:	00800074 	movhi	r2,1
     a9c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     aa0:	e0bffb17 	ldw	r2,-20(fp)
     aa4:	10800a17 	ldw	r2,40(r2)
     aa8:	10800044 	addi	r2,r2,1
     aac:	1081ffcc 	andi	r2,r2,2047
     ab0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
     ab4:	e0bffb17 	ldw	r2,-20(fp)
     ab8:	10c00b17 	ldw	r3,44(r2)
     abc:	e0bffe17 	ldw	r2,-8(fp)
     ac0:	18801526 	beq	r3,r2,b18 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     ac4:	e0bffc17 	ldw	r2,-16(fp)
     ac8:	10800037 	ldwio	r2,0(r2)
     acc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     ad0:	e0bff917 	ldw	r2,-28(fp)
     ad4:	10a0000c 	andi	r2,r2,32768
     ad8:	10001126 	beq	r2,zero,b20 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     adc:	e0bffb17 	ldw	r2,-20(fp)
     ae0:	10800a17 	ldw	r2,40(r2)
     ae4:	e0fff917 	ldw	r3,-28(fp)
     ae8:	1809883a 	mov	r4,r3
     aec:	e0fffb17 	ldw	r3,-20(fp)
     af0:	1885883a 	add	r2,r3,r2
     af4:	10800e04 	addi	r2,r2,56
     af8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     afc:	e0bffb17 	ldw	r2,-20(fp)
     b00:	10800a17 	ldw	r2,40(r2)
     b04:	10800044 	addi	r2,r2,1
     b08:	10c1ffcc 	andi	r3,r2,2047
     b0c:	e0bffb17 	ldw	r2,-20(fp)
     b10:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
     b14:	003fe206 	br	aa0 <__alt_data_end+0xfffe8400>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
     b18:	0001883a 	nop
     b1c:	00000106 	br	b24 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
     b20:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     b24:	e0bff917 	ldw	r2,-28(fp)
     b28:	10bfffec 	andhi	r2,r2,65535
     b2c:	10000f26 	beq	r2,zero,b6c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     b30:	e0bffb17 	ldw	r2,-20(fp)
     b34:	10c00817 	ldw	r3,32(r2)
     b38:	00bfff84 	movi	r2,-2
     b3c:	1886703a 	and	r3,r3,r2
     b40:	e0bffb17 	ldw	r2,-20(fp)
     b44:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     b48:	e0bffc17 	ldw	r2,-16(fp)
     b4c:	10800104 	addi	r2,r2,4
     b50:	1007883a 	mov	r3,r2
     b54:	e0bffb17 	ldw	r2,-20(fp)
     b58:	10800817 	ldw	r2,32(r2)
     b5c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     b60:	e0bffc17 	ldw	r2,-16(fp)
     b64:	10800104 	addi	r2,r2,4
     b68:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
     b6c:	e0bffd17 	ldw	r2,-12(fp)
     b70:	1080800c 	andi	r2,r2,512
     b74:	103fbe26 	beq	r2,zero,a70 <__alt_data_end+0xfffe83d0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     b78:	e0bffd17 	ldw	r2,-12(fp)
     b7c:	1004d43a 	srli	r2,r2,16
     b80:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
     b84:	00001406 	br	bd8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
     b88:	e0bffc17 	ldw	r2,-16(fp)
     b8c:	e0fffb17 	ldw	r3,-20(fp)
     b90:	18c00d17 	ldw	r3,52(r3)
     b94:	e13ffb17 	ldw	r4,-20(fp)
     b98:	20c7883a 	add	r3,r4,r3
     b9c:	18c20e04 	addi	r3,r3,2104
     ba0:	18c00003 	ldbu	r3,0(r3)
     ba4:	18c03fcc 	andi	r3,r3,255
     ba8:	18c0201c 	xori	r3,r3,128
     bac:	18ffe004 	addi	r3,r3,-128
     bb0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     bb4:	e0bffb17 	ldw	r2,-20(fp)
     bb8:	10800d17 	ldw	r2,52(r2)
     bbc:	10800044 	addi	r2,r2,1
     bc0:	10c1ffcc 	andi	r3,r2,2047
     bc4:	e0bffb17 	ldw	r2,-20(fp)
     bc8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
     bcc:	e0bffa17 	ldw	r2,-24(fp)
     bd0:	10bfffc4 	addi	r2,r2,-1
     bd4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
     bd8:	e0bffa17 	ldw	r2,-24(fp)
     bdc:	10000526 	beq	r2,zero,bf4 <altera_avalon_jtag_uart_irq+0x1a8>
     be0:	e0bffb17 	ldw	r2,-20(fp)
     be4:	10c00d17 	ldw	r3,52(r2)
     be8:	e0bffb17 	ldw	r2,-20(fp)
     bec:	10800c17 	ldw	r2,48(r2)
     bf0:	18bfe51e 	bne	r3,r2,b88 <__alt_data_end+0xfffe84e8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
     bf4:	e0bffa17 	ldw	r2,-24(fp)
     bf8:	103f9d26 	beq	r2,zero,a70 <__alt_data_end+0xfffe83d0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     bfc:	e0bffb17 	ldw	r2,-20(fp)
     c00:	10c00817 	ldw	r3,32(r2)
     c04:	00bfff44 	movi	r2,-3
     c08:	1886703a 	and	r3,r3,r2
     c0c:	e0bffb17 	ldw	r2,-20(fp)
     c10:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     c14:	e0bffb17 	ldw	r2,-20(fp)
     c18:	10800017 	ldw	r2,0(r2)
     c1c:	10800104 	addi	r2,r2,4
     c20:	1007883a 	mov	r3,r2
     c24:	e0bffb17 	ldw	r2,-20(fp)
     c28:	10800817 	ldw	r2,32(r2)
     c2c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     c30:	e0bffc17 	ldw	r2,-16(fp)
     c34:	10800104 	addi	r2,r2,4
     c38:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
     c3c:	003f8c06 	br	a70 <__alt_data_end+0xfffe83d0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
     c40:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
     c44:	0001883a 	nop
     c48:	e037883a 	mov	sp,fp
     c4c:	df000017 	ldw	fp,0(sp)
     c50:	dec00104 	addi	sp,sp,4
     c54:	f800283a 	ret

00000c58 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
     c58:	defff804 	addi	sp,sp,-32
     c5c:	df000715 	stw	fp,28(sp)
     c60:	df000704 	addi	fp,sp,28
     c64:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
     c68:	e0bffb17 	ldw	r2,-20(fp)
     c6c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     c70:	e0bff917 	ldw	r2,-28(fp)
     c74:	10800017 	ldw	r2,0(r2)
     c78:	10800104 	addi	r2,r2,4
     c7c:	10800037 	ldwio	r2,0(r2)
     c80:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     c84:	e0bffa17 	ldw	r2,-24(fp)
     c88:	1081000c 	andi	r2,r2,1024
     c8c:	10000b26 	beq	r2,zero,cbc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     c90:	e0bff917 	ldw	r2,-28(fp)
     c94:	10800017 	ldw	r2,0(r2)
     c98:	10800104 	addi	r2,r2,4
     c9c:	1007883a 	mov	r3,r2
     ca0:	e0bff917 	ldw	r2,-28(fp)
     ca4:	10800817 	ldw	r2,32(r2)
     ca8:	10810014 	ori	r2,r2,1024
     cac:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
     cb0:	e0bff917 	ldw	r2,-28(fp)
     cb4:	10000915 	stw	zero,36(r2)
     cb8:	00000a06 	br	ce4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
     cbc:	e0bff917 	ldw	r2,-28(fp)
     cc0:	10c00917 	ldw	r3,36(r2)
     cc4:	00a00034 	movhi	r2,32768
     cc8:	10bfff04 	addi	r2,r2,-4
     ccc:	10c00536 	bltu	r2,r3,ce4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
     cd0:	e0bff917 	ldw	r2,-28(fp)
     cd4:	10800917 	ldw	r2,36(r2)
     cd8:	10c00044 	addi	r3,r2,1
     cdc:	e0bff917 	ldw	r2,-28(fp)
     ce0:	10c00915 	stw	r3,36(r2)
     ce4:	d0a6ad17 	ldw	r2,-25932(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
     ce8:	e037883a 	mov	sp,fp
     cec:	df000017 	ldw	fp,0(sp)
     cf0:	dec00104 	addi	sp,sp,4
     cf4:	f800283a 	ret

00000cf8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
     cf8:	defffd04 	addi	sp,sp,-12
     cfc:	df000215 	stw	fp,8(sp)
     d00:	df000204 	addi	fp,sp,8
     d04:	e13ffe15 	stw	r4,-8(fp)
     d08:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     d0c:	00000506 	br	d24 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
     d10:	e0bfff17 	ldw	r2,-4(fp)
     d14:	1090000c 	andi	r2,r2,16384
     d18:	10000226 	beq	r2,zero,d24 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
     d1c:	00bffd44 	movi	r2,-11
     d20:	00000b06 	br	d50 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     d24:	e0bffe17 	ldw	r2,-8(fp)
     d28:	10c00d17 	ldw	r3,52(r2)
     d2c:	e0bffe17 	ldw	r2,-8(fp)
     d30:	10800c17 	ldw	r2,48(r2)
     d34:	18800526 	beq	r3,r2,d4c <altera_avalon_jtag_uart_close+0x54>
     d38:	e0bffe17 	ldw	r2,-8(fp)
     d3c:	10c00917 	ldw	r3,36(r2)
     d40:	e0bffe17 	ldw	r2,-8(fp)
     d44:	10800117 	ldw	r2,4(r2)
     d48:	18bff136 	bltu	r3,r2,d10 <__alt_data_end+0xfffe8670>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
     d4c:	0005883a 	mov	r2,zero
}
     d50:	e037883a 	mov	sp,fp
     d54:	df000017 	ldw	fp,0(sp)
     d58:	dec00104 	addi	sp,sp,4
     d5c:	f800283a 	ret

00000d60 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
     d60:	defffa04 	addi	sp,sp,-24
     d64:	df000515 	stw	fp,20(sp)
     d68:	df000504 	addi	fp,sp,20
     d6c:	e13ffd15 	stw	r4,-12(fp)
     d70:	e17ffe15 	stw	r5,-8(fp)
     d74:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
     d78:	00bff9c4 	movi	r2,-25
     d7c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
     d80:	e0bffe17 	ldw	r2,-8(fp)
     d84:	10da8060 	cmpeqi	r3,r2,27137
     d88:	1800031e 	bne	r3,zero,d98 <altera_avalon_jtag_uart_ioctl+0x38>
     d8c:	109a80a0 	cmpeqi	r2,r2,27138
     d90:	1000181e 	bne	r2,zero,df4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
     d94:	00002906 	br	e3c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
     d98:	e0bffd17 	ldw	r2,-12(fp)
     d9c:	10c00117 	ldw	r3,4(r2)
     da0:	00a00034 	movhi	r2,32768
     da4:	10bfffc4 	addi	r2,r2,-1
     da8:	18802126 	beq	r3,r2,e30 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
     dac:	e0bfff17 	ldw	r2,-4(fp)
     db0:	10800017 	ldw	r2,0(r2)
     db4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
     db8:	e0bffc17 	ldw	r2,-16(fp)
     dbc:	10800090 	cmplti	r2,r2,2
     dc0:	1000061e 	bne	r2,zero,ddc <altera_avalon_jtag_uart_ioctl+0x7c>
     dc4:	e0fffc17 	ldw	r3,-16(fp)
     dc8:	00a00034 	movhi	r2,32768
     dcc:	10bfffc4 	addi	r2,r2,-1
     dd0:	18800226 	beq	r3,r2,ddc <altera_avalon_jtag_uart_ioctl+0x7c>
     dd4:	e0bffc17 	ldw	r2,-16(fp)
     dd8:	00000206 	br	de4 <altera_avalon_jtag_uart_ioctl+0x84>
     ddc:	00a00034 	movhi	r2,32768
     de0:	10bfff84 	addi	r2,r2,-2
     de4:	e0fffd17 	ldw	r3,-12(fp)
     de8:	18800115 	stw	r2,4(r3)
      rc = 0;
     dec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
     df0:	00000f06 	br	e30 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
     df4:	e0bffd17 	ldw	r2,-12(fp)
     df8:	10c00117 	ldw	r3,4(r2)
     dfc:	00a00034 	movhi	r2,32768
     e00:	10bfffc4 	addi	r2,r2,-1
     e04:	18800c26 	beq	r3,r2,e38 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
     e08:	e0bffd17 	ldw	r2,-12(fp)
     e0c:	10c00917 	ldw	r3,36(r2)
     e10:	e0bffd17 	ldw	r2,-12(fp)
     e14:	10800117 	ldw	r2,4(r2)
     e18:	1885803a 	cmpltu	r2,r3,r2
     e1c:	10c03fcc 	andi	r3,r2,255
     e20:	e0bfff17 	ldw	r2,-4(fp)
     e24:	10c00015 	stw	r3,0(r2)
      rc = 0;
     e28:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
     e2c:	00000206 	br	e38 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
     e30:	0001883a 	nop
     e34:	00000106 	br	e3c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
     e38:	0001883a 	nop

  default:
    break;
  }

  return rc;
     e3c:	e0bffb17 	ldw	r2,-20(fp)
}
     e40:	e037883a 	mov	sp,fp
     e44:	df000017 	ldw	fp,0(sp)
     e48:	dec00104 	addi	sp,sp,4
     e4c:	f800283a 	ret

00000e50 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
     e50:	defff304 	addi	sp,sp,-52
     e54:	dfc00c15 	stw	ra,48(sp)
     e58:	df000b15 	stw	fp,44(sp)
     e5c:	df000b04 	addi	fp,sp,44
     e60:	e13ffc15 	stw	r4,-16(fp)
     e64:	e17ffd15 	stw	r5,-12(fp)
     e68:	e1bffe15 	stw	r6,-8(fp)
     e6c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
     e70:	e0bffd17 	ldw	r2,-12(fp)
     e74:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     e78:	00004706 	br	f98 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
     e7c:	e0bffc17 	ldw	r2,-16(fp)
     e80:	10800a17 	ldw	r2,40(r2)
     e84:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
     e88:	e0bffc17 	ldw	r2,-16(fp)
     e8c:	10800b17 	ldw	r2,44(r2)
     e90:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
     e94:	e0fff717 	ldw	r3,-36(fp)
     e98:	e0bff817 	ldw	r2,-32(fp)
     e9c:	18800536 	bltu	r3,r2,eb4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
     ea0:	e0fff717 	ldw	r3,-36(fp)
     ea4:	e0bff817 	ldw	r2,-32(fp)
     ea8:	1885c83a 	sub	r2,r3,r2
     eac:	e0bff615 	stw	r2,-40(fp)
     eb0:	00000406 	br	ec4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
     eb4:	00c20004 	movi	r3,2048
     eb8:	e0bff817 	ldw	r2,-32(fp)
     ebc:	1885c83a 	sub	r2,r3,r2
     ec0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
     ec4:	e0bff617 	ldw	r2,-40(fp)
     ec8:	10001e26 	beq	r2,zero,f44 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
     ecc:	e0fffe17 	ldw	r3,-8(fp)
     ed0:	e0bff617 	ldw	r2,-40(fp)
     ed4:	1880022e 	bgeu	r3,r2,ee0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
     ed8:	e0bffe17 	ldw	r2,-8(fp)
     edc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
     ee0:	e0bffc17 	ldw	r2,-16(fp)
     ee4:	10c00e04 	addi	r3,r2,56
     ee8:	e0bff817 	ldw	r2,-32(fp)
     eec:	1885883a 	add	r2,r3,r2
     ef0:	e1bff617 	ldw	r6,-40(fp)
     ef4:	100b883a 	mov	r5,r2
     ef8:	e13ff517 	ldw	r4,-44(fp)
     efc:	00025bc0 	call	25bc <memcpy>
      ptr   += n;
     f00:	e0fff517 	ldw	r3,-44(fp)
     f04:	e0bff617 	ldw	r2,-40(fp)
     f08:	1885883a 	add	r2,r3,r2
     f0c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
     f10:	e0fffe17 	ldw	r3,-8(fp)
     f14:	e0bff617 	ldw	r2,-40(fp)
     f18:	1885c83a 	sub	r2,r3,r2
     f1c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     f20:	e0fff817 	ldw	r3,-32(fp)
     f24:	e0bff617 	ldw	r2,-40(fp)
     f28:	1885883a 	add	r2,r3,r2
     f2c:	10c1ffcc 	andi	r3,r2,2047
     f30:	e0bffc17 	ldw	r2,-16(fp)
     f34:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
     f38:	e0bffe17 	ldw	r2,-8(fp)
     f3c:	00bfcf16 	blt	zero,r2,e7c <__alt_data_end+0xfffe87dc>
     f40:	00000106 	br	f48 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
     f44:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
     f48:	e0fff517 	ldw	r3,-44(fp)
     f4c:	e0bffd17 	ldw	r2,-12(fp)
     f50:	1880141e 	bne	r3,r2,fa4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
     f54:	e0bfff17 	ldw	r2,-4(fp)
     f58:	1090000c 	andi	r2,r2,16384
     f5c:	1000131e 	bne	r2,zero,fac <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
     f60:	0001883a 	nop
     f64:	e0bffc17 	ldw	r2,-16(fp)
     f68:	10c00a17 	ldw	r3,40(r2)
     f6c:	e0bff717 	ldw	r2,-36(fp)
     f70:	1880051e 	bne	r3,r2,f88 <altera_avalon_jtag_uart_read+0x138>
     f74:	e0bffc17 	ldw	r2,-16(fp)
     f78:	10c00917 	ldw	r3,36(r2)
     f7c:	e0bffc17 	ldw	r2,-16(fp)
     f80:	10800117 	ldw	r2,4(r2)
     f84:	18bff736 	bltu	r3,r2,f64 <__alt_data_end+0xfffe88c4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
     f88:	e0bffc17 	ldw	r2,-16(fp)
     f8c:	10c00a17 	ldw	r3,40(r2)
     f90:	e0bff717 	ldw	r2,-36(fp)
     f94:	18800726 	beq	r3,r2,fb4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     f98:	e0bffe17 	ldw	r2,-8(fp)
     f9c:	00bfb716 	blt	zero,r2,e7c <__alt_data_end+0xfffe87dc>
     fa0:	00000506 	br	fb8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
     fa4:	0001883a 	nop
     fa8:	00000306 	br	fb8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
     fac:	0001883a 	nop
     fb0:	00000106 	br	fb8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
     fb4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
     fb8:	e0fff517 	ldw	r3,-44(fp)
     fbc:	e0bffd17 	ldw	r2,-12(fp)
     fc0:	18801826 	beq	r3,r2,1024 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     fc4:	0005303a 	rdctl	r2,status
     fc8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     fcc:	e0fffb17 	ldw	r3,-20(fp)
     fd0:	00bfff84 	movi	r2,-2
     fd4:	1884703a 	and	r2,r3,r2
     fd8:	1001703a 	wrctl	status,r2
  
  return context;
     fdc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
     fe0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     fe4:	e0bffc17 	ldw	r2,-16(fp)
     fe8:	10800817 	ldw	r2,32(r2)
     fec:	10c00054 	ori	r3,r2,1
     ff0:	e0bffc17 	ldw	r2,-16(fp)
     ff4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     ff8:	e0bffc17 	ldw	r2,-16(fp)
     ffc:	10800017 	ldw	r2,0(r2)
    1000:	10800104 	addi	r2,r2,4
    1004:	1007883a 	mov	r3,r2
    1008:	e0bffc17 	ldw	r2,-16(fp)
    100c:	10800817 	ldw	r2,32(r2)
    1010:	18800035 	stwio	r2,0(r3)
    1014:	e0bffa17 	ldw	r2,-24(fp)
    1018:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    101c:	e0bff917 	ldw	r2,-28(fp)
    1020:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    1024:	e0fff517 	ldw	r3,-44(fp)
    1028:	e0bffd17 	ldw	r2,-12(fp)
    102c:	18800426 	beq	r3,r2,1040 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    1030:	e0fff517 	ldw	r3,-44(fp)
    1034:	e0bffd17 	ldw	r2,-12(fp)
    1038:	1885c83a 	sub	r2,r3,r2
    103c:	00000606 	br	1058 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    1040:	e0bfff17 	ldw	r2,-4(fp)
    1044:	1090000c 	andi	r2,r2,16384
    1048:	10000226 	beq	r2,zero,1054 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    104c:	00bffd44 	movi	r2,-11
    1050:	00000106 	br	1058 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    1054:	00bffec4 	movi	r2,-5
}
    1058:	e037883a 	mov	sp,fp
    105c:	dfc00117 	ldw	ra,4(sp)
    1060:	df000017 	ldw	fp,0(sp)
    1064:	dec00204 	addi	sp,sp,8
    1068:	f800283a 	ret

0000106c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    106c:	defff304 	addi	sp,sp,-52
    1070:	dfc00c15 	stw	ra,48(sp)
    1074:	df000b15 	stw	fp,44(sp)
    1078:	df000b04 	addi	fp,sp,44
    107c:	e13ffc15 	stw	r4,-16(fp)
    1080:	e17ffd15 	stw	r5,-12(fp)
    1084:	e1bffe15 	stw	r6,-8(fp)
    1088:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    108c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    1090:	e0bffd17 	ldw	r2,-12(fp)
    1094:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1098:	00003706 	br	1178 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    109c:	e0bffc17 	ldw	r2,-16(fp)
    10a0:	10800c17 	ldw	r2,48(r2)
    10a4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    10a8:	e0bffc17 	ldw	r2,-16(fp)
    10ac:	10800d17 	ldw	r2,52(r2)
    10b0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    10b4:	e0fff917 	ldw	r3,-28(fp)
    10b8:	e0bff517 	ldw	r2,-44(fp)
    10bc:	1880062e 	bgeu	r3,r2,10d8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    10c0:	e0fff517 	ldw	r3,-44(fp)
    10c4:	e0bff917 	ldw	r2,-28(fp)
    10c8:	1885c83a 	sub	r2,r3,r2
    10cc:	10bfffc4 	addi	r2,r2,-1
    10d0:	e0bff615 	stw	r2,-40(fp)
    10d4:	00000b06 	br	1104 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    10d8:	e0bff517 	ldw	r2,-44(fp)
    10dc:	10000526 	beq	r2,zero,10f4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    10e0:	00c20004 	movi	r3,2048
    10e4:	e0bff917 	ldw	r2,-28(fp)
    10e8:	1885c83a 	sub	r2,r3,r2
    10ec:	e0bff615 	stw	r2,-40(fp)
    10f0:	00000406 	br	1104 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    10f4:	00c1ffc4 	movi	r3,2047
    10f8:	e0bff917 	ldw	r2,-28(fp)
    10fc:	1885c83a 	sub	r2,r3,r2
    1100:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    1104:	e0bff617 	ldw	r2,-40(fp)
    1108:	10001e26 	beq	r2,zero,1184 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    110c:	e0fffe17 	ldw	r3,-8(fp)
    1110:	e0bff617 	ldw	r2,-40(fp)
    1114:	1880022e 	bgeu	r3,r2,1120 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    1118:	e0bffe17 	ldw	r2,-8(fp)
    111c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    1120:	e0bffc17 	ldw	r2,-16(fp)
    1124:	10c20e04 	addi	r3,r2,2104
    1128:	e0bff917 	ldw	r2,-28(fp)
    112c:	1885883a 	add	r2,r3,r2
    1130:	e1bff617 	ldw	r6,-40(fp)
    1134:	e17ffd17 	ldw	r5,-12(fp)
    1138:	1009883a 	mov	r4,r2
    113c:	00025bc0 	call	25bc <memcpy>
      ptr   += n;
    1140:	e0fffd17 	ldw	r3,-12(fp)
    1144:	e0bff617 	ldw	r2,-40(fp)
    1148:	1885883a 	add	r2,r3,r2
    114c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    1150:	e0fffe17 	ldw	r3,-8(fp)
    1154:	e0bff617 	ldw	r2,-40(fp)
    1158:	1885c83a 	sub	r2,r3,r2
    115c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1160:	e0fff917 	ldw	r3,-28(fp)
    1164:	e0bff617 	ldw	r2,-40(fp)
    1168:	1885883a 	add	r2,r3,r2
    116c:	10c1ffcc 	andi	r3,r2,2047
    1170:	e0bffc17 	ldw	r2,-16(fp)
    1174:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1178:	e0bffe17 	ldw	r2,-8(fp)
    117c:	00bfc716 	blt	zero,r2,109c <__alt_data_end+0xfffe89fc>
    1180:	00000106 	br	1188 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    1184:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1188:	0005303a 	rdctl	r2,status
    118c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1190:	e0fffb17 	ldw	r3,-20(fp)
    1194:	00bfff84 	movi	r2,-2
    1198:	1884703a 	and	r2,r3,r2
    119c:	1001703a 	wrctl	status,r2
  
  return context;
    11a0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    11a4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    11a8:	e0bffc17 	ldw	r2,-16(fp)
    11ac:	10800817 	ldw	r2,32(r2)
    11b0:	10c00094 	ori	r3,r2,2
    11b4:	e0bffc17 	ldw	r2,-16(fp)
    11b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    11bc:	e0bffc17 	ldw	r2,-16(fp)
    11c0:	10800017 	ldw	r2,0(r2)
    11c4:	10800104 	addi	r2,r2,4
    11c8:	1007883a 	mov	r3,r2
    11cc:	e0bffc17 	ldw	r2,-16(fp)
    11d0:	10800817 	ldw	r2,32(r2)
    11d4:	18800035 	stwio	r2,0(r3)
    11d8:	e0bffa17 	ldw	r2,-24(fp)
    11dc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    11e0:	e0bff817 	ldw	r2,-32(fp)
    11e4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    11e8:	e0bffe17 	ldw	r2,-8(fp)
    11ec:	0080100e 	bge	zero,r2,1230 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    11f0:	e0bfff17 	ldw	r2,-4(fp)
    11f4:	1090000c 	andi	r2,r2,16384
    11f8:	1000101e 	bne	r2,zero,123c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    11fc:	0001883a 	nop
    1200:	e0bffc17 	ldw	r2,-16(fp)
    1204:	10c00d17 	ldw	r3,52(r2)
    1208:	e0bff517 	ldw	r2,-44(fp)
    120c:	1880051e 	bne	r3,r2,1224 <altera_avalon_jtag_uart_write+0x1b8>
    1210:	e0bffc17 	ldw	r2,-16(fp)
    1214:	10c00917 	ldw	r3,36(r2)
    1218:	e0bffc17 	ldw	r2,-16(fp)
    121c:	10800117 	ldw	r2,4(r2)
    1220:	18bff736 	bltu	r3,r2,1200 <__alt_data_end+0xfffe8b60>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    1224:	e0bffc17 	ldw	r2,-16(fp)
    1228:	10800917 	ldw	r2,36(r2)
    122c:	1000051e 	bne	r2,zero,1244 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    1230:	e0bffe17 	ldw	r2,-8(fp)
    1234:	00bfd016 	blt	zero,r2,1178 <__alt_data_end+0xfffe8ad8>
    1238:	00000306 	br	1248 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    123c:	0001883a 	nop
    1240:	00000106 	br	1248 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    1244:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    1248:	e0fffd17 	ldw	r3,-12(fp)
    124c:	e0bff717 	ldw	r2,-36(fp)
    1250:	18800426 	beq	r3,r2,1264 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    1254:	e0fffd17 	ldw	r3,-12(fp)
    1258:	e0bff717 	ldw	r2,-36(fp)
    125c:	1885c83a 	sub	r2,r3,r2
    1260:	00000606 	br	127c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    1264:	e0bfff17 	ldw	r2,-4(fp)
    1268:	1090000c 	andi	r2,r2,16384
    126c:	10000226 	beq	r2,zero,1278 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    1270:	00bffd44 	movi	r2,-11
    1274:	00000106 	br	127c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    1278:	00bffec4 	movi	r2,-5
}
    127c:	e037883a 	mov	sp,fp
    1280:	dfc00117 	ldw	ra,4(sp)
    1284:	df000017 	ldw	fp,0(sp)
    1288:	dec00204 	addi	sp,sp,8
    128c:	f800283a 	ret

00001290 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    1290:	defff504 	addi	sp,sp,-44
    1294:	df000a15 	stw	fp,40(sp)
    1298:	df000a04 	addi	fp,sp,40
    129c:	e13ffc15 	stw	r4,-16(fp)
    12a0:	e17ffd15 	stw	r5,-12(fp)
    12a4:	e1bffe15 	stw	r6,-8(fp)
    12a8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    12ac:	e03ff615 	stw	zero,-40(fp)
    12b0:	d0a6ad17 	ldw	r2,-25932(gp)
  
  if (alt_ticks_per_second ())
    12b4:	10003c26 	beq	r2,zero,13a8 <alt_alarm_start+0x118>
  {
    if (alarm)
    12b8:	e0bffc17 	ldw	r2,-16(fp)
    12bc:	10003826 	beq	r2,zero,13a0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    12c0:	e0bffc17 	ldw	r2,-16(fp)
    12c4:	e0fffe17 	ldw	r3,-8(fp)
    12c8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    12cc:	e0bffc17 	ldw	r2,-16(fp)
    12d0:	e0ffff17 	ldw	r3,-4(fp)
    12d4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    12d8:	0005303a 	rdctl	r2,status
    12dc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    12e0:	e0fff917 	ldw	r3,-28(fp)
    12e4:	00bfff84 	movi	r2,-2
    12e8:	1884703a 	and	r2,r3,r2
    12ec:	1001703a 	wrctl	status,r2
  
  return context;
    12f0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    12f4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    12f8:	d0a6ae17 	ldw	r2,-25928(gp)
      
      current_nticks = alt_nticks();
    12fc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    1300:	e0fffd17 	ldw	r3,-12(fp)
    1304:	e0bff617 	ldw	r2,-40(fp)
    1308:	1885883a 	add	r2,r3,r2
    130c:	10c00044 	addi	r3,r2,1
    1310:	e0bffc17 	ldw	r2,-16(fp)
    1314:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    1318:	e0bffc17 	ldw	r2,-16(fp)
    131c:	10c00217 	ldw	r3,8(r2)
    1320:	e0bff617 	ldw	r2,-40(fp)
    1324:	1880042e 	bgeu	r3,r2,1338 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    1328:	e0bffc17 	ldw	r2,-16(fp)
    132c:	00c00044 	movi	r3,1
    1330:	10c00405 	stb	r3,16(r2)
    1334:	00000206 	br	1340 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    1338:	e0bffc17 	ldw	r2,-16(fp)
    133c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    1340:	e0bffc17 	ldw	r2,-16(fp)
    1344:	d0e00704 	addi	r3,gp,-32740
    1348:	e0fffa15 	stw	r3,-24(fp)
    134c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1350:	e0bffb17 	ldw	r2,-20(fp)
    1354:	e0fffa17 	ldw	r3,-24(fp)
    1358:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    135c:	e0bffa17 	ldw	r2,-24(fp)
    1360:	10c00017 	ldw	r3,0(r2)
    1364:	e0bffb17 	ldw	r2,-20(fp)
    1368:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    136c:	e0bffa17 	ldw	r2,-24(fp)
    1370:	10800017 	ldw	r2,0(r2)
    1374:	e0fffb17 	ldw	r3,-20(fp)
    1378:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    137c:	e0bffa17 	ldw	r2,-24(fp)
    1380:	e0fffb17 	ldw	r3,-20(fp)
    1384:	10c00015 	stw	r3,0(r2)
    1388:	e0bff817 	ldw	r2,-32(fp)
    138c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1390:	e0bff717 	ldw	r2,-36(fp)
    1394:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    1398:	0005883a 	mov	r2,zero
    139c:	00000306 	br	13ac <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    13a0:	00bffa84 	movi	r2,-22
    13a4:	00000106 	br	13ac <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    13a8:	00bfde84 	movi	r2,-134
  }
}
    13ac:	e037883a 	mov	sp,fp
    13b0:	df000017 	ldw	fp,0(sp)
    13b4:	dec00104 	addi	sp,sp,4
    13b8:	f800283a 	ret

000013bc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    13bc:	defffa04 	addi	sp,sp,-24
    13c0:	dfc00515 	stw	ra,20(sp)
    13c4:	df000415 	stw	fp,16(sp)
    13c8:	df000404 	addi	fp,sp,16
    13cc:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    13d0:	00800244 	movi	r2,9
    13d4:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    13d8:	014003f4 	movhi	r5,15
    13dc:	29509004 	addi	r5,r5,16960
    13e0:	e13ffd17 	ldw	r4,-12(fp)
    13e4:	0004e300 	call	4e30 <__mulsi3>
    13e8:	100b883a 	mov	r5,r2
    13ec:	0100bef4 	movhi	r4,763
    13f0:	213c2004 	addi	r4,r4,-3968
    13f4:	0004d740 	call	4d74 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    13f8:	100b883a 	mov	r5,r2
    13fc:	01200034 	movhi	r4,32768
    1400:	213fffc4 	addi	r4,r4,-1
    1404:	0004d740 	call	4d74 <__udivsi3>
    1408:	100b883a 	mov	r5,r2
    140c:	e13fff17 	ldw	r4,-4(fp)
    1410:	0004d740 	call	4d74 <__udivsi3>
    1414:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    1418:	e0bffe17 	ldw	r2,-8(fp)
    141c:	10002a26 	beq	r2,zero,14c8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    1420:	e03ffc15 	stw	zero,-16(fp)
    1424:	00001706 	br	1484 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1428:	00a00034 	movhi	r2,32768
    142c:	10bfffc4 	addi	r2,r2,-1
    1430:	10bfffc4 	addi	r2,r2,-1
    1434:	103ffe1e 	bne	r2,zero,1430 <__alt_data_end+0xfffe8d90>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    1438:	014003f4 	movhi	r5,15
    143c:	29509004 	addi	r5,r5,16960
    1440:	e13ffd17 	ldw	r4,-12(fp)
    1444:	0004e300 	call	4e30 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1448:	100b883a 	mov	r5,r2
    144c:	0100bef4 	movhi	r4,763
    1450:	213c2004 	addi	r4,r4,-3968
    1454:	0004d740 	call	4d74 <__udivsi3>
    1458:	100b883a 	mov	r5,r2
    145c:	01200034 	movhi	r4,32768
    1460:	213fffc4 	addi	r4,r4,-1
    1464:	0004d740 	call	4d74 <__udivsi3>
    1468:	1007883a 	mov	r3,r2
    146c:	e0bfff17 	ldw	r2,-4(fp)
    1470:	10c5c83a 	sub	r2,r2,r3
    1474:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    1478:	e0bffc17 	ldw	r2,-16(fp)
    147c:	10800044 	addi	r2,r2,1
    1480:	e0bffc15 	stw	r2,-16(fp)
    1484:	e0fffc17 	ldw	r3,-16(fp)
    1488:	e0bffe17 	ldw	r2,-8(fp)
    148c:	18bfe616 	blt	r3,r2,1428 <__alt_data_end+0xfffe8d88>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    1490:	014003f4 	movhi	r5,15
    1494:	29509004 	addi	r5,r5,16960
    1498:	e13ffd17 	ldw	r4,-12(fp)
    149c:	0004e300 	call	4e30 <__mulsi3>
    14a0:	100b883a 	mov	r5,r2
    14a4:	0100bef4 	movhi	r4,763
    14a8:	213c2004 	addi	r4,r4,-3968
    14ac:	0004d740 	call	4d74 <__udivsi3>
    14b0:	e17fff17 	ldw	r5,-4(fp)
    14b4:	1009883a 	mov	r4,r2
    14b8:	0004e300 	call	4e30 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    14bc:	10bfffc4 	addi	r2,r2,-1
    14c0:	103ffe1e 	bne	r2,zero,14bc <__alt_data_end+0xfffe8e1c>
    14c4:	00000d06 	br	14fc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    14c8:	014003f4 	movhi	r5,15
    14cc:	29509004 	addi	r5,r5,16960
    14d0:	e13ffd17 	ldw	r4,-12(fp)
    14d4:	0004e300 	call	4e30 <__mulsi3>
    14d8:	100b883a 	mov	r5,r2
    14dc:	0100bef4 	movhi	r4,763
    14e0:	213c2004 	addi	r4,r4,-3968
    14e4:	0004d740 	call	4d74 <__udivsi3>
    14e8:	e17fff17 	ldw	r5,-4(fp)
    14ec:	1009883a 	mov	r4,r2
    14f0:	0004e300 	call	4e30 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    14f4:	10bfffc4 	addi	r2,r2,-1
    14f8:	00bffe16 	blt	zero,r2,14f4 <__alt_data_end+0xfffe8e54>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    14fc:	0005883a 	mov	r2,zero
}
    1500:	e037883a 	mov	sp,fp
    1504:	dfc00117 	ldw	ra,4(sp)
    1508:	df000017 	ldw	fp,0(sp)
    150c:	dec00204 	addi	sp,sp,8
    1510:	f800283a 	ret

00001514 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1514:	defffe04 	addi	sp,sp,-8
    1518:	dfc00115 	stw	ra,4(sp)
    151c:	df000015 	stw	fp,0(sp)
    1520:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    1524:	d0a00517 	ldw	r2,-32748(gp)
    1528:	10000326 	beq	r2,zero,1538 <alt_get_errno+0x24>
    152c:	d0a00517 	ldw	r2,-32748(gp)
    1530:	103ee83a 	callr	r2
    1534:	00000106 	br	153c <alt_get_errno+0x28>
    1538:	d0a6b004 	addi	r2,gp,-25920
}
    153c:	e037883a 	mov	sp,fp
    1540:	dfc00117 	ldw	ra,4(sp)
    1544:	df000017 	ldw	fp,0(sp)
    1548:	dec00204 	addi	sp,sp,8
    154c:	f800283a 	ret

00001550 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    1550:	defffb04 	addi	sp,sp,-20
    1554:	dfc00415 	stw	ra,16(sp)
    1558:	df000315 	stw	fp,12(sp)
    155c:	df000304 	addi	fp,sp,12
    1560:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    1564:	e0bfff17 	ldw	r2,-4(fp)
    1568:	10000816 	blt	r2,zero,158c <close+0x3c>
    156c:	01400304 	movi	r5,12
    1570:	e13fff17 	ldw	r4,-4(fp)
    1574:	0004e300 	call	4e30 <__mulsi3>
    1578:	1007883a 	mov	r3,r2
    157c:	00800034 	movhi	r2,0
    1580:	10997204 	addi	r2,r2,26056
    1584:	1885883a 	add	r2,r3,r2
    1588:	00000106 	br	1590 <close+0x40>
    158c:	0005883a 	mov	r2,zero
    1590:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    1594:	e0bffd17 	ldw	r2,-12(fp)
    1598:	10001926 	beq	r2,zero,1600 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    159c:	e0bffd17 	ldw	r2,-12(fp)
    15a0:	10800017 	ldw	r2,0(r2)
    15a4:	10800417 	ldw	r2,16(r2)
    15a8:	10000626 	beq	r2,zero,15c4 <close+0x74>
    15ac:	e0bffd17 	ldw	r2,-12(fp)
    15b0:	10800017 	ldw	r2,0(r2)
    15b4:	10800417 	ldw	r2,16(r2)
    15b8:	e13ffd17 	ldw	r4,-12(fp)
    15bc:	103ee83a 	callr	r2
    15c0:	00000106 	br	15c8 <close+0x78>
    15c4:	0005883a 	mov	r2,zero
    15c8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    15cc:	e13fff17 	ldw	r4,-4(fp)
    15d0:	0001eb80 	call	1eb8 <alt_release_fd>
    if (rval < 0)
    15d4:	e0bffe17 	ldw	r2,-8(fp)
    15d8:	1000070e 	bge	r2,zero,15f8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    15dc:	00015140 	call	1514 <alt_get_errno>
    15e0:	1007883a 	mov	r3,r2
    15e4:	e0bffe17 	ldw	r2,-8(fp)
    15e8:	0085c83a 	sub	r2,zero,r2
    15ec:	18800015 	stw	r2,0(r3)
      return -1;
    15f0:	00bfffc4 	movi	r2,-1
    15f4:	00000706 	br	1614 <close+0xc4>
    }
    return 0;
    15f8:	0005883a 	mov	r2,zero
    15fc:	00000506 	br	1614 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    1600:	00015140 	call	1514 <alt_get_errno>
    1604:	1007883a 	mov	r3,r2
    1608:	00801444 	movi	r2,81
    160c:	18800015 	stw	r2,0(r3)
    return -1;
    1610:	00bfffc4 	movi	r2,-1
  }
}
    1614:	e037883a 	mov	sp,fp
    1618:	dfc00117 	ldw	ra,4(sp)
    161c:	df000017 	ldw	fp,0(sp)
    1620:	dec00204 	addi	sp,sp,8
    1624:	f800283a 	ret

00001628 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1628:	deffff04 	addi	sp,sp,-4
    162c:	df000015 	stw	fp,0(sp)
    1630:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    1634:	0001883a 	nop
    1638:	e037883a 	mov	sp,fp
    163c:	df000017 	ldw	fp,0(sp)
    1640:	dec00104 	addi	sp,sp,4
    1644:	f800283a 	ret

00001648 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    1648:	defffc04 	addi	sp,sp,-16
    164c:	df000315 	stw	fp,12(sp)
    1650:	df000304 	addi	fp,sp,12
    1654:	e13ffd15 	stw	r4,-12(fp)
    1658:	e17ffe15 	stw	r5,-8(fp)
    165c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    1660:	e0bfff17 	ldw	r2,-4(fp)
}
    1664:	e037883a 	mov	sp,fp
    1668:	df000017 	ldw	fp,0(sp)
    166c:	dec00104 	addi	sp,sp,4
    1670:	f800283a 	ret

00001674 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1674:	defffe04 	addi	sp,sp,-8
    1678:	dfc00115 	stw	ra,4(sp)
    167c:	df000015 	stw	fp,0(sp)
    1680:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    1684:	d0a00517 	ldw	r2,-32748(gp)
    1688:	10000326 	beq	r2,zero,1698 <alt_get_errno+0x24>
    168c:	d0a00517 	ldw	r2,-32748(gp)
    1690:	103ee83a 	callr	r2
    1694:	00000106 	br	169c <alt_get_errno+0x28>
    1698:	d0a6b004 	addi	r2,gp,-25920
}
    169c:	e037883a 	mov	sp,fp
    16a0:	dfc00117 	ldw	ra,4(sp)
    16a4:	df000017 	ldw	fp,0(sp)
    16a8:	dec00204 	addi	sp,sp,8
    16ac:	f800283a 	ret

000016b0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    16b0:	defffa04 	addi	sp,sp,-24
    16b4:	dfc00515 	stw	ra,20(sp)
    16b8:	df000415 	stw	fp,16(sp)
    16bc:	df000404 	addi	fp,sp,16
    16c0:	e13ffe15 	stw	r4,-8(fp)
    16c4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    16c8:	e0bffe17 	ldw	r2,-8(fp)
    16cc:	10000326 	beq	r2,zero,16dc <alt_dev_llist_insert+0x2c>
    16d0:	e0bffe17 	ldw	r2,-8(fp)
    16d4:	10800217 	ldw	r2,8(r2)
    16d8:	1000061e 	bne	r2,zero,16f4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    16dc:	00016740 	call	1674 <alt_get_errno>
    16e0:	1007883a 	mov	r3,r2
    16e4:	00800584 	movi	r2,22
    16e8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    16ec:	00bffa84 	movi	r2,-22
    16f0:	00001306 	br	1740 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    16f4:	e0bffe17 	ldw	r2,-8(fp)
    16f8:	e0ffff17 	ldw	r3,-4(fp)
    16fc:	e0fffc15 	stw	r3,-16(fp)
    1700:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1704:	e0bffd17 	ldw	r2,-12(fp)
    1708:	e0fffc17 	ldw	r3,-16(fp)
    170c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    1710:	e0bffc17 	ldw	r2,-16(fp)
    1714:	10c00017 	ldw	r3,0(r2)
    1718:	e0bffd17 	ldw	r2,-12(fp)
    171c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    1720:	e0bffc17 	ldw	r2,-16(fp)
    1724:	10800017 	ldw	r2,0(r2)
    1728:	e0fffd17 	ldw	r3,-12(fp)
    172c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    1730:	e0bffc17 	ldw	r2,-16(fp)
    1734:	e0fffd17 	ldw	r3,-12(fp)
    1738:	10c00015 	stw	r3,0(r2)

  return 0;  
    173c:	0005883a 	mov	r2,zero
}
    1740:	e037883a 	mov	sp,fp
    1744:	dfc00117 	ldw	ra,4(sp)
    1748:	df000017 	ldw	fp,0(sp)
    174c:	dec00204 	addi	sp,sp,8
    1750:	f800283a 	ret

00001754 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    1754:	defffd04 	addi	sp,sp,-12
    1758:	dfc00215 	stw	ra,8(sp)
    175c:	df000115 	stw	fp,4(sp)
    1760:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    1764:	00800034 	movhi	r2,0
    1768:	10953c04 	addi	r2,r2,21744
    176c:	e0bfff15 	stw	r2,-4(fp)
    1770:	00000606 	br	178c <_do_ctors+0x38>
        (*ctor) (); 
    1774:	e0bfff17 	ldw	r2,-4(fp)
    1778:	10800017 	ldw	r2,0(r2)
    177c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    1780:	e0bfff17 	ldw	r2,-4(fp)
    1784:	10bfff04 	addi	r2,r2,-4
    1788:	e0bfff15 	stw	r2,-4(fp)
    178c:	e0ffff17 	ldw	r3,-4(fp)
    1790:	00800034 	movhi	r2,0
    1794:	10953d04 	addi	r2,r2,21748
    1798:	18bff62e 	bgeu	r3,r2,1774 <__alt_data_end+0xfffe90d4>
        (*ctor) (); 
}
    179c:	0001883a 	nop
    17a0:	e037883a 	mov	sp,fp
    17a4:	dfc00117 	ldw	ra,4(sp)
    17a8:	df000017 	ldw	fp,0(sp)
    17ac:	dec00204 	addi	sp,sp,8
    17b0:	f800283a 	ret

000017b4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    17b4:	defffd04 	addi	sp,sp,-12
    17b8:	dfc00215 	stw	ra,8(sp)
    17bc:	df000115 	stw	fp,4(sp)
    17c0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    17c4:	00800034 	movhi	r2,0
    17c8:	10953c04 	addi	r2,r2,21744
    17cc:	e0bfff15 	stw	r2,-4(fp)
    17d0:	00000606 	br	17ec <_do_dtors+0x38>
        (*dtor) (); 
    17d4:	e0bfff17 	ldw	r2,-4(fp)
    17d8:	10800017 	ldw	r2,0(r2)
    17dc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    17e0:	e0bfff17 	ldw	r2,-4(fp)
    17e4:	10bfff04 	addi	r2,r2,-4
    17e8:	e0bfff15 	stw	r2,-4(fp)
    17ec:	e0ffff17 	ldw	r3,-4(fp)
    17f0:	00800034 	movhi	r2,0
    17f4:	10953d04 	addi	r2,r2,21748
    17f8:	18bff62e 	bgeu	r3,r2,17d4 <__alt_data_end+0xfffe9134>
        (*dtor) (); 
}
    17fc:	0001883a 	nop
    1800:	e037883a 	mov	sp,fp
    1804:	dfc00117 	ldw	ra,4(sp)
    1808:	df000017 	ldw	fp,0(sp)
    180c:	dec00204 	addi	sp,sp,8
    1810:	f800283a 	ret

00001814 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1814:	deffff04 	addi	sp,sp,-4
    1818:	df000015 	stw	fp,0(sp)
    181c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    1820:	0001883a 	nop
    1824:	e037883a 	mov	sp,fp
    1828:	df000017 	ldw	fp,0(sp)
    182c:	dec00104 	addi	sp,sp,4
    1830:	f800283a 	ret

00001834 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    1834:	defff904 	addi	sp,sp,-28
    1838:	dfc00615 	stw	ra,24(sp)
    183c:	df000515 	stw	fp,20(sp)
    1840:	df000504 	addi	fp,sp,20
    1844:	e13ffc15 	stw	r4,-16(fp)
    1848:	e17ffd15 	stw	r5,-12(fp)
    184c:	e1bffe15 	stw	r6,-8(fp)
    1850:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    1854:	e0800217 	ldw	r2,8(fp)
    1858:	d8800015 	stw	r2,0(sp)
    185c:	e1ffff17 	ldw	r7,-4(fp)
    1860:	e1bffe17 	ldw	r6,-8(fp)
    1864:	e17ffd17 	ldw	r5,-12(fp)
    1868:	e13ffc17 	ldw	r4,-16(fp)
    186c:	00019e40 	call	19e4 <alt_iic_isr_register>
}  
    1870:	e037883a 	mov	sp,fp
    1874:	dfc00117 	ldw	ra,4(sp)
    1878:	df000017 	ldw	fp,0(sp)
    187c:	dec00204 	addi	sp,sp,8
    1880:	f800283a 	ret

00001884 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    1884:	defff904 	addi	sp,sp,-28
    1888:	df000615 	stw	fp,24(sp)
    188c:	df000604 	addi	fp,sp,24
    1890:	e13ffe15 	stw	r4,-8(fp)
    1894:	e17fff15 	stw	r5,-4(fp)
    1898:	e0bfff17 	ldw	r2,-4(fp)
    189c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    18a0:	0005303a 	rdctl	r2,status
    18a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    18a8:	e0fffb17 	ldw	r3,-20(fp)
    18ac:	00bfff84 	movi	r2,-2
    18b0:	1884703a 	and	r2,r3,r2
    18b4:	1001703a 	wrctl	status,r2
  
  return context;
    18b8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    18bc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    18c0:	00c00044 	movi	r3,1
    18c4:	e0bffa17 	ldw	r2,-24(fp)
    18c8:	1884983a 	sll	r2,r3,r2
    18cc:	1007883a 	mov	r3,r2
    18d0:	d0a6ac17 	ldw	r2,-25936(gp)
    18d4:	1884b03a 	or	r2,r3,r2
    18d8:	d0a6ac15 	stw	r2,-25936(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    18dc:	d0a6ac17 	ldw	r2,-25936(gp)
    18e0:	100170fa 	wrctl	ienable,r2
    18e4:	e0bffc17 	ldw	r2,-16(fp)
    18e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    18ec:	e0bffd17 	ldw	r2,-12(fp)
    18f0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    18f4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    18f8:	0001883a 	nop
}
    18fc:	e037883a 	mov	sp,fp
    1900:	df000017 	ldw	fp,0(sp)
    1904:	dec00104 	addi	sp,sp,4
    1908:	f800283a 	ret

0000190c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    190c:	defff904 	addi	sp,sp,-28
    1910:	df000615 	stw	fp,24(sp)
    1914:	df000604 	addi	fp,sp,24
    1918:	e13ffe15 	stw	r4,-8(fp)
    191c:	e17fff15 	stw	r5,-4(fp)
    1920:	e0bfff17 	ldw	r2,-4(fp)
    1924:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1928:	0005303a 	rdctl	r2,status
    192c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1930:	e0fffb17 	ldw	r3,-20(fp)
    1934:	00bfff84 	movi	r2,-2
    1938:	1884703a 	and	r2,r3,r2
    193c:	1001703a 	wrctl	status,r2
  
  return context;
    1940:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    1944:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    1948:	00c00044 	movi	r3,1
    194c:	e0bffa17 	ldw	r2,-24(fp)
    1950:	1884983a 	sll	r2,r3,r2
    1954:	0084303a 	nor	r2,zero,r2
    1958:	1007883a 	mov	r3,r2
    195c:	d0a6ac17 	ldw	r2,-25936(gp)
    1960:	1884703a 	and	r2,r3,r2
    1964:	d0a6ac15 	stw	r2,-25936(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1968:	d0a6ac17 	ldw	r2,-25936(gp)
    196c:	100170fa 	wrctl	ienable,r2
    1970:	e0bffc17 	ldw	r2,-16(fp)
    1974:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1978:	e0bffd17 	ldw	r2,-12(fp)
    197c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1980:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    1984:	0001883a 	nop
}
    1988:	e037883a 	mov	sp,fp
    198c:	df000017 	ldw	fp,0(sp)
    1990:	dec00104 	addi	sp,sp,4
    1994:	f800283a 	ret

00001998 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    1998:	defffc04 	addi	sp,sp,-16
    199c:	df000315 	stw	fp,12(sp)
    19a0:	df000304 	addi	fp,sp,12
    19a4:	e13ffe15 	stw	r4,-8(fp)
    19a8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    19ac:	000530fa 	rdctl	r2,ienable
    19b0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    19b4:	00c00044 	movi	r3,1
    19b8:	e0bfff17 	ldw	r2,-4(fp)
    19bc:	1884983a 	sll	r2,r3,r2
    19c0:	1007883a 	mov	r3,r2
    19c4:	e0bffd17 	ldw	r2,-12(fp)
    19c8:	1884703a 	and	r2,r3,r2
    19cc:	1004c03a 	cmpne	r2,r2,zero
    19d0:	10803fcc 	andi	r2,r2,255
}
    19d4:	e037883a 	mov	sp,fp
    19d8:	df000017 	ldw	fp,0(sp)
    19dc:	dec00104 	addi	sp,sp,4
    19e0:	f800283a 	ret

000019e4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    19e4:	defff504 	addi	sp,sp,-44
    19e8:	dfc00a15 	stw	ra,40(sp)
    19ec:	df000915 	stw	fp,36(sp)
    19f0:	df000904 	addi	fp,sp,36
    19f4:	e13ffc15 	stw	r4,-16(fp)
    19f8:	e17ffd15 	stw	r5,-12(fp)
    19fc:	e1bffe15 	stw	r6,-8(fp)
    1a00:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    1a04:	00bffa84 	movi	r2,-22
    1a08:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    1a0c:	e0bffd17 	ldw	r2,-12(fp)
    1a10:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    1a14:	e0bff817 	ldw	r2,-32(fp)
    1a18:	10800808 	cmpgei	r2,r2,32
    1a1c:	1000271e 	bne	r2,zero,1abc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1a20:	0005303a 	rdctl	r2,status
    1a24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1a28:	e0fffb17 	ldw	r3,-20(fp)
    1a2c:	00bfff84 	movi	r2,-2
    1a30:	1884703a 	and	r2,r3,r2
    1a34:	1001703a 	wrctl	status,r2
  
  return context;
    1a38:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    1a3c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    1a40:	00800074 	movhi	r2,1
    1a44:	10a29b04 	addi	r2,r2,-30100
    1a48:	e0fff817 	ldw	r3,-32(fp)
    1a4c:	180690fa 	slli	r3,r3,3
    1a50:	10c5883a 	add	r2,r2,r3
    1a54:	e0fffe17 	ldw	r3,-8(fp)
    1a58:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    1a5c:	00800074 	movhi	r2,1
    1a60:	10a29b04 	addi	r2,r2,-30100
    1a64:	e0fff817 	ldw	r3,-32(fp)
    1a68:	180690fa 	slli	r3,r3,3
    1a6c:	10c5883a 	add	r2,r2,r3
    1a70:	10800104 	addi	r2,r2,4
    1a74:	e0ffff17 	ldw	r3,-4(fp)
    1a78:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    1a7c:	e0bffe17 	ldw	r2,-8(fp)
    1a80:	10000526 	beq	r2,zero,1a98 <alt_iic_isr_register+0xb4>
    1a84:	e0bff817 	ldw	r2,-32(fp)
    1a88:	100b883a 	mov	r5,r2
    1a8c:	e13ffc17 	ldw	r4,-16(fp)
    1a90:	00018840 	call	1884 <alt_ic_irq_enable>
    1a94:	00000406 	br	1aa8 <alt_iic_isr_register+0xc4>
    1a98:	e0bff817 	ldw	r2,-32(fp)
    1a9c:	100b883a 	mov	r5,r2
    1aa0:	e13ffc17 	ldw	r4,-16(fp)
    1aa4:	000190c0 	call	190c <alt_ic_irq_disable>
    1aa8:	e0bff715 	stw	r2,-36(fp)
    1aac:	e0bffa17 	ldw	r2,-24(fp)
    1ab0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1ab4:	e0bff917 	ldw	r2,-28(fp)
    1ab8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    1abc:	e0bff717 	ldw	r2,-36(fp)
}
    1ac0:	e037883a 	mov	sp,fp
    1ac4:	dfc00117 	ldw	ra,4(sp)
    1ac8:	df000017 	ldw	fp,0(sp)
    1acc:	dec00204 	addi	sp,sp,8
    1ad0:	f800283a 	ret

00001ad4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    1ad4:	defff804 	addi	sp,sp,-32
    1ad8:	dfc00715 	stw	ra,28(sp)
    1adc:	df000615 	stw	fp,24(sp)
    1ae0:	dc000515 	stw	r16,20(sp)
    1ae4:	df000604 	addi	fp,sp,24
    1ae8:	e13ffb15 	stw	r4,-20(fp)
    1aec:	e17ffc15 	stw	r5,-16(fp)
    1af0:	e1bffd15 	stw	r6,-12(fp)
    1af4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    1af8:	e1bffe17 	ldw	r6,-8(fp)
    1afc:	e17ffd17 	ldw	r5,-12(fp)
    1b00:	e13ffc17 	ldw	r4,-16(fp)
    1b04:	0001d5c0 	call	1d5c <open>
    1b08:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    1b0c:	e0bffa17 	ldw	r2,-24(fp)
    1b10:	10002216 	blt	r2,zero,1b9c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    1b14:	04000034 	movhi	r16,0
    1b18:	84197204 	addi	r16,r16,26056
    1b1c:	e0bffa17 	ldw	r2,-24(fp)
    1b20:	01400304 	movi	r5,12
    1b24:	1009883a 	mov	r4,r2
    1b28:	0004e300 	call	4e30 <__mulsi3>
    1b2c:	8085883a 	add	r2,r16,r2
    1b30:	10c00017 	ldw	r3,0(r2)
    1b34:	e0bffb17 	ldw	r2,-20(fp)
    1b38:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    1b3c:	04000034 	movhi	r16,0
    1b40:	84197204 	addi	r16,r16,26056
    1b44:	e0bffa17 	ldw	r2,-24(fp)
    1b48:	01400304 	movi	r5,12
    1b4c:	1009883a 	mov	r4,r2
    1b50:	0004e300 	call	4e30 <__mulsi3>
    1b54:	8085883a 	add	r2,r16,r2
    1b58:	10800104 	addi	r2,r2,4
    1b5c:	10c00017 	ldw	r3,0(r2)
    1b60:	e0bffb17 	ldw	r2,-20(fp)
    1b64:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    1b68:	04000034 	movhi	r16,0
    1b6c:	84197204 	addi	r16,r16,26056
    1b70:	e0bffa17 	ldw	r2,-24(fp)
    1b74:	01400304 	movi	r5,12
    1b78:	1009883a 	mov	r4,r2
    1b7c:	0004e300 	call	4e30 <__mulsi3>
    1b80:	8085883a 	add	r2,r16,r2
    1b84:	10800204 	addi	r2,r2,8
    1b88:	10c00017 	ldw	r3,0(r2)
    1b8c:	e0bffb17 	ldw	r2,-20(fp)
    1b90:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    1b94:	e13ffa17 	ldw	r4,-24(fp)
    1b98:	0001eb80 	call	1eb8 <alt_release_fd>
  }
} 
    1b9c:	0001883a 	nop
    1ba0:	e6ffff04 	addi	sp,fp,-4
    1ba4:	dfc00217 	ldw	ra,8(sp)
    1ba8:	df000117 	ldw	fp,4(sp)
    1bac:	dc000017 	ldw	r16,0(sp)
    1bb0:	dec00304 	addi	sp,sp,12
    1bb4:	f800283a 	ret

00001bb8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    1bb8:	defffb04 	addi	sp,sp,-20
    1bbc:	dfc00415 	stw	ra,16(sp)
    1bc0:	df000315 	stw	fp,12(sp)
    1bc4:	df000304 	addi	fp,sp,12
    1bc8:	e13ffd15 	stw	r4,-12(fp)
    1bcc:	e17ffe15 	stw	r5,-8(fp)
    1bd0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    1bd4:	01c07fc4 	movi	r7,511
    1bd8:	01800044 	movi	r6,1
    1bdc:	e17ffd17 	ldw	r5,-12(fp)
    1be0:	01000034 	movhi	r4,0
    1be4:	21197504 	addi	r4,r4,26068
    1be8:	0001ad40 	call	1ad4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    1bec:	01c07fc4 	movi	r7,511
    1bf0:	000d883a 	mov	r6,zero
    1bf4:	e17ffe17 	ldw	r5,-8(fp)
    1bf8:	01000034 	movhi	r4,0
    1bfc:	21197204 	addi	r4,r4,26056
    1c00:	0001ad40 	call	1ad4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    1c04:	01c07fc4 	movi	r7,511
    1c08:	01800044 	movi	r6,1
    1c0c:	e17fff17 	ldw	r5,-4(fp)
    1c10:	01000034 	movhi	r4,0
    1c14:	21197804 	addi	r4,r4,26080
    1c18:	0001ad40 	call	1ad4 <alt_open_fd>
}  
    1c1c:	0001883a 	nop
    1c20:	e037883a 	mov	sp,fp
    1c24:	dfc00117 	ldw	ra,4(sp)
    1c28:	df000017 	ldw	fp,0(sp)
    1c2c:	dec00204 	addi	sp,sp,8
    1c30:	f800283a 	ret

00001c34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1c34:	defffe04 	addi	sp,sp,-8
    1c38:	dfc00115 	stw	ra,4(sp)
    1c3c:	df000015 	stw	fp,0(sp)
    1c40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    1c44:	d0a00517 	ldw	r2,-32748(gp)
    1c48:	10000326 	beq	r2,zero,1c58 <alt_get_errno+0x24>
    1c4c:	d0a00517 	ldw	r2,-32748(gp)
    1c50:	103ee83a 	callr	r2
    1c54:	00000106 	br	1c5c <alt_get_errno+0x28>
    1c58:	d0a6b004 	addi	r2,gp,-25920
}
    1c5c:	e037883a 	mov	sp,fp
    1c60:	dfc00117 	ldw	ra,4(sp)
    1c64:	df000017 	ldw	fp,0(sp)
    1c68:	dec00204 	addi	sp,sp,8
    1c6c:	f800283a 	ret

00001c70 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    1c70:	defffb04 	addi	sp,sp,-20
    1c74:	dfc00415 	stw	ra,16(sp)
    1c78:	df000315 	stw	fp,12(sp)
    1c7c:	dc000215 	stw	r16,8(sp)
    1c80:	df000304 	addi	fp,sp,12
    1c84:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    1c88:	e0bffe17 	ldw	r2,-8(fp)
    1c8c:	10800217 	ldw	r2,8(r2)
    1c90:	10d00034 	orhi	r3,r2,16384
    1c94:	e0bffe17 	ldw	r2,-8(fp)
    1c98:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    1c9c:	e03ffd15 	stw	zero,-12(fp)
    1ca0:	00002306 	br	1d30 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    1ca4:	04000034 	movhi	r16,0
    1ca8:	84197204 	addi	r16,r16,26056
    1cac:	e0bffd17 	ldw	r2,-12(fp)
    1cb0:	01400304 	movi	r5,12
    1cb4:	1009883a 	mov	r4,r2
    1cb8:	0004e300 	call	4e30 <__mulsi3>
    1cbc:	8085883a 	add	r2,r16,r2
    1cc0:	10c00017 	ldw	r3,0(r2)
    1cc4:	e0bffe17 	ldw	r2,-8(fp)
    1cc8:	10800017 	ldw	r2,0(r2)
    1ccc:	1880151e 	bne	r3,r2,1d24 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    1cd0:	04000034 	movhi	r16,0
    1cd4:	84197204 	addi	r16,r16,26056
    1cd8:	e0bffd17 	ldw	r2,-12(fp)
    1cdc:	01400304 	movi	r5,12
    1ce0:	1009883a 	mov	r4,r2
    1ce4:	0004e300 	call	4e30 <__mulsi3>
    1ce8:	8085883a 	add	r2,r16,r2
    1cec:	10800204 	addi	r2,r2,8
    1cf0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    1cf4:	10000b0e 	bge	r2,zero,1d24 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    1cf8:	01400304 	movi	r5,12
    1cfc:	e13ffd17 	ldw	r4,-12(fp)
    1d00:	0004e300 	call	4e30 <__mulsi3>
    1d04:	1007883a 	mov	r3,r2
    1d08:	00800034 	movhi	r2,0
    1d0c:	10997204 	addi	r2,r2,26056
    1d10:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    1d14:	e0bffe17 	ldw	r2,-8(fp)
    1d18:	18800226 	beq	r3,r2,1d24 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    1d1c:	00bffcc4 	movi	r2,-13
    1d20:	00000806 	br	1d44 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    1d24:	e0bffd17 	ldw	r2,-12(fp)
    1d28:	10800044 	addi	r2,r2,1
    1d2c:	e0bffd15 	stw	r2,-12(fp)
    1d30:	d0a00417 	ldw	r2,-32752(gp)
    1d34:	1007883a 	mov	r3,r2
    1d38:	e0bffd17 	ldw	r2,-12(fp)
    1d3c:	18bfd92e 	bgeu	r3,r2,1ca4 <__alt_data_end+0xfffe9604>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    1d40:	0005883a 	mov	r2,zero
}
    1d44:	e6ffff04 	addi	sp,fp,-4
    1d48:	dfc00217 	ldw	ra,8(sp)
    1d4c:	df000117 	ldw	fp,4(sp)
    1d50:	dc000017 	ldw	r16,0(sp)
    1d54:	dec00304 	addi	sp,sp,12
    1d58:	f800283a 	ret

00001d5c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    1d5c:	defff604 	addi	sp,sp,-40
    1d60:	dfc00915 	stw	ra,36(sp)
    1d64:	df000815 	stw	fp,32(sp)
    1d68:	df000804 	addi	fp,sp,32
    1d6c:	e13ffd15 	stw	r4,-12(fp)
    1d70:	e17ffe15 	stw	r5,-8(fp)
    1d74:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    1d78:	00bfffc4 	movi	r2,-1
    1d7c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    1d80:	00bffb44 	movi	r2,-19
    1d84:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    1d88:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    1d8c:	d1600204 	addi	r5,gp,-32760
    1d90:	e13ffd17 	ldw	r4,-12(fp)
    1d94:	00021040 	call	2104 <alt_find_dev>
    1d98:	e0bff815 	stw	r2,-32(fp)
    1d9c:	e0bff817 	ldw	r2,-32(fp)
    1da0:	1000051e 	bne	r2,zero,1db8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    1da4:	e13ffd17 	ldw	r4,-12(fp)
    1da8:	00021940 	call	2194 <alt_find_file>
    1dac:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    1db0:	00800044 	movi	r2,1
    1db4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    1db8:	e0bff817 	ldw	r2,-32(fp)
    1dbc:	10002b26 	beq	r2,zero,1e6c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    1dc0:	e13ff817 	ldw	r4,-32(fp)
    1dc4:	000229c0 	call	229c <alt_get_fd>
    1dc8:	e0bff915 	stw	r2,-28(fp)
    1dcc:	e0bff917 	ldw	r2,-28(fp)
    1dd0:	1000030e 	bge	r2,zero,1de0 <open+0x84>
    {
      status = index;
    1dd4:	e0bff917 	ldw	r2,-28(fp)
    1dd8:	e0bffa15 	stw	r2,-24(fp)
    1ddc:	00002506 	br	1e74 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    1de0:	01400304 	movi	r5,12
    1de4:	e13ff917 	ldw	r4,-28(fp)
    1de8:	0004e300 	call	4e30 <__mulsi3>
    1dec:	1007883a 	mov	r3,r2
    1df0:	00800034 	movhi	r2,0
    1df4:	10997204 	addi	r2,r2,26056
    1df8:	1885883a 	add	r2,r3,r2
    1dfc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    1e00:	e0fffe17 	ldw	r3,-8(fp)
    1e04:	00900034 	movhi	r2,16384
    1e08:	10bfffc4 	addi	r2,r2,-1
    1e0c:	1886703a 	and	r3,r3,r2
    1e10:	e0bffc17 	ldw	r2,-16(fp)
    1e14:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    1e18:	e0bffb17 	ldw	r2,-20(fp)
    1e1c:	1000051e 	bne	r2,zero,1e34 <open+0xd8>
    1e20:	e13ffc17 	ldw	r4,-16(fp)
    1e24:	0001c700 	call	1c70 <alt_file_locked>
    1e28:	e0bffa15 	stw	r2,-24(fp)
    1e2c:	e0bffa17 	ldw	r2,-24(fp)
    1e30:	10001016 	blt	r2,zero,1e74 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    1e34:	e0bff817 	ldw	r2,-32(fp)
    1e38:	10800317 	ldw	r2,12(r2)
    1e3c:	10000826 	beq	r2,zero,1e60 <open+0x104>
    1e40:	e0bff817 	ldw	r2,-32(fp)
    1e44:	10800317 	ldw	r2,12(r2)
    1e48:	e1ffff17 	ldw	r7,-4(fp)
    1e4c:	e1bffe17 	ldw	r6,-8(fp)
    1e50:	e17ffd17 	ldw	r5,-12(fp)
    1e54:	e13ffc17 	ldw	r4,-16(fp)
    1e58:	103ee83a 	callr	r2
    1e5c:	00000106 	br	1e64 <open+0x108>
    1e60:	0005883a 	mov	r2,zero
    1e64:	e0bffa15 	stw	r2,-24(fp)
    1e68:	00000206 	br	1e74 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    1e6c:	00bffb44 	movi	r2,-19
    1e70:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    1e74:	e0bffa17 	ldw	r2,-24(fp)
    1e78:	1000090e 	bge	r2,zero,1ea0 <open+0x144>
  {
    alt_release_fd (index);  
    1e7c:	e13ff917 	ldw	r4,-28(fp)
    1e80:	0001eb80 	call	1eb8 <alt_release_fd>
    ALT_ERRNO = -status;
    1e84:	0001c340 	call	1c34 <alt_get_errno>
    1e88:	1007883a 	mov	r3,r2
    1e8c:	e0bffa17 	ldw	r2,-24(fp)
    1e90:	0085c83a 	sub	r2,zero,r2
    1e94:	18800015 	stw	r2,0(r3)
    return -1;
    1e98:	00bfffc4 	movi	r2,-1
    1e9c:	00000106 	br	1ea4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    1ea0:	e0bff917 	ldw	r2,-28(fp)
}
    1ea4:	e037883a 	mov	sp,fp
    1ea8:	dfc00117 	ldw	ra,4(sp)
    1eac:	df000017 	ldw	fp,0(sp)
    1eb0:	dec00204 	addi	sp,sp,8
    1eb4:	f800283a 	ret

00001eb8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    1eb8:	defffc04 	addi	sp,sp,-16
    1ebc:	dfc00315 	stw	ra,12(sp)
    1ec0:	df000215 	stw	fp,8(sp)
    1ec4:	dc000115 	stw	r16,4(sp)
    1ec8:	df000204 	addi	fp,sp,8
    1ecc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    1ed0:	e0bffe17 	ldw	r2,-8(fp)
    1ed4:	108000d0 	cmplti	r2,r2,3
    1ed8:	1000111e 	bne	r2,zero,1f20 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    1edc:	04000034 	movhi	r16,0
    1ee0:	84197204 	addi	r16,r16,26056
    1ee4:	e0bffe17 	ldw	r2,-8(fp)
    1ee8:	01400304 	movi	r5,12
    1eec:	1009883a 	mov	r4,r2
    1ef0:	0004e300 	call	4e30 <__mulsi3>
    1ef4:	8085883a 	add	r2,r16,r2
    1ef8:	10800204 	addi	r2,r2,8
    1efc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    1f00:	04000034 	movhi	r16,0
    1f04:	84197204 	addi	r16,r16,26056
    1f08:	e0bffe17 	ldw	r2,-8(fp)
    1f0c:	01400304 	movi	r5,12
    1f10:	1009883a 	mov	r4,r2
    1f14:	0004e300 	call	4e30 <__mulsi3>
    1f18:	8085883a 	add	r2,r16,r2
    1f1c:	10000015 	stw	zero,0(r2)
  }
}
    1f20:	0001883a 	nop
    1f24:	e6ffff04 	addi	sp,fp,-4
    1f28:	dfc00217 	ldw	ra,8(sp)
    1f2c:	df000117 	ldw	fp,4(sp)
    1f30:	dc000017 	ldw	r16,0(sp)
    1f34:	dec00304 	addi	sp,sp,12
    1f38:	f800283a 	ret

00001f3c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    1f3c:	defffa04 	addi	sp,sp,-24
    1f40:	df000515 	stw	fp,20(sp)
    1f44:	df000504 	addi	fp,sp,20
    1f48:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1f4c:	0005303a 	rdctl	r2,status
    1f50:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1f54:	e0fffc17 	ldw	r3,-16(fp)
    1f58:	00bfff84 	movi	r2,-2
    1f5c:	1884703a 	and	r2,r3,r2
    1f60:	1001703a 	wrctl	status,r2
  
  return context;
    1f64:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    1f68:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    1f6c:	e0bfff17 	ldw	r2,-4(fp)
    1f70:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    1f74:	e0bffd17 	ldw	r2,-12(fp)
    1f78:	10800017 	ldw	r2,0(r2)
    1f7c:	e0fffd17 	ldw	r3,-12(fp)
    1f80:	18c00117 	ldw	r3,4(r3)
    1f84:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    1f88:	e0bffd17 	ldw	r2,-12(fp)
    1f8c:	10800117 	ldw	r2,4(r2)
    1f90:	e0fffd17 	ldw	r3,-12(fp)
    1f94:	18c00017 	ldw	r3,0(r3)
    1f98:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    1f9c:	e0bffd17 	ldw	r2,-12(fp)
    1fa0:	e0fffd17 	ldw	r3,-12(fp)
    1fa4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    1fa8:	e0bffd17 	ldw	r2,-12(fp)
    1fac:	e0fffd17 	ldw	r3,-12(fp)
    1fb0:	10c00015 	stw	r3,0(r2)
    1fb4:	e0bffb17 	ldw	r2,-20(fp)
    1fb8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1fbc:	e0bffe17 	ldw	r2,-8(fp)
    1fc0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    1fc4:	0001883a 	nop
    1fc8:	e037883a 	mov	sp,fp
    1fcc:	df000017 	ldw	fp,0(sp)
    1fd0:	dec00104 	addi	sp,sp,4
    1fd4:	f800283a 	ret

00001fd8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    1fd8:	defffb04 	addi	sp,sp,-20
    1fdc:	dfc00415 	stw	ra,16(sp)
    1fe0:	df000315 	stw	fp,12(sp)
    1fe4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    1fe8:	d0a00717 	ldw	r2,-32740(gp)
    1fec:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    1ff0:	d0a6ae17 	ldw	r2,-25928(gp)
    1ff4:	10800044 	addi	r2,r2,1
    1ff8:	d0a6ae15 	stw	r2,-25928(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    1ffc:	00002e06 	br	20b8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    2000:	e0bffd17 	ldw	r2,-12(fp)
    2004:	10800017 	ldw	r2,0(r2)
    2008:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    200c:	e0bffd17 	ldw	r2,-12(fp)
    2010:	10800403 	ldbu	r2,16(r2)
    2014:	10803fcc 	andi	r2,r2,255
    2018:	10000426 	beq	r2,zero,202c <alt_tick+0x54>
    201c:	d0a6ae17 	ldw	r2,-25928(gp)
    2020:	1000021e 	bne	r2,zero,202c <alt_tick+0x54>
    {
      alarm->rollover = 0;
    2024:	e0bffd17 	ldw	r2,-12(fp)
    2028:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    202c:	e0bffd17 	ldw	r2,-12(fp)
    2030:	10800217 	ldw	r2,8(r2)
    2034:	d0e6ae17 	ldw	r3,-25928(gp)
    2038:	18801d36 	bltu	r3,r2,20b0 <alt_tick+0xd8>
    203c:	e0bffd17 	ldw	r2,-12(fp)
    2040:	10800403 	ldbu	r2,16(r2)
    2044:	10803fcc 	andi	r2,r2,255
    2048:	1000191e 	bne	r2,zero,20b0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    204c:	e0bffd17 	ldw	r2,-12(fp)
    2050:	10800317 	ldw	r2,12(r2)
    2054:	e0fffd17 	ldw	r3,-12(fp)
    2058:	18c00517 	ldw	r3,20(r3)
    205c:	1809883a 	mov	r4,r3
    2060:	103ee83a 	callr	r2
    2064:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    2068:	e0bfff17 	ldw	r2,-4(fp)
    206c:	1000031e 	bne	r2,zero,207c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    2070:	e13ffd17 	ldw	r4,-12(fp)
    2074:	0001f3c0 	call	1f3c <alt_alarm_stop>
    2078:	00000d06 	br	20b0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    207c:	e0bffd17 	ldw	r2,-12(fp)
    2080:	10c00217 	ldw	r3,8(r2)
    2084:	e0bfff17 	ldw	r2,-4(fp)
    2088:	1887883a 	add	r3,r3,r2
    208c:	e0bffd17 	ldw	r2,-12(fp)
    2090:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    2094:	e0bffd17 	ldw	r2,-12(fp)
    2098:	10c00217 	ldw	r3,8(r2)
    209c:	d0a6ae17 	ldw	r2,-25928(gp)
    20a0:	1880032e 	bgeu	r3,r2,20b0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    20a4:	e0bffd17 	ldw	r2,-12(fp)
    20a8:	00c00044 	movi	r3,1
    20ac:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    20b0:	e0bffe17 	ldw	r2,-8(fp)
    20b4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    20b8:	e0fffd17 	ldw	r3,-12(fp)
    20bc:	d0a00704 	addi	r2,gp,-32740
    20c0:	18bfcf1e 	bne	r3,r2,2000 <__alt_data_end+0xfffe9960>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    20c4:	0001883a 	nop
}
    20c8:	0001883a 	nop
    20cc:	e037883a 	mov	sp,fp
    20d0:	dfc00117 	ldw	ra,4(sp)
    20d4:	df000017 	ldw	fp,0(sp)
    20d8:	dec00204 	addi	sp,sp,8
    20dc:	f800283a 	ret

000020e0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    20e0:	deffff04 	addi	sp,sp,-4
    20e4:	df000015 	stw	fp,0(sp)
    20e8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    20ec:	000170fa 	wrctl	ienable,zero
}
    20f0:	0001883a 	nop
    20f4:	e037883a 	mov	sp,fp
    20f8:	df000017 	ldw	fp,0(sp)
    20fc:	dec00104 	addi	sp,sp,4
    2100:	f800283a 	ret

00002104 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    2104:	defffa04 	addi	sp,sp,-24
    2108:	dfc00515 	stw	ra,20(sp)
    210c:	df000415 	stw	fp,16(sp)
    2110:	df000404 	addi	fp,sp,16
    2114:	e13ffe15 	stw	r4,-8(fp)
    2118:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    211c:	e0bfff17 	ldw	r2,-4(fp)
    2120:	10800017 	ldw	r2,0(r2)
    2124:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    2128:	e13ffe17 	ldw	r4,-8(fp)
    212c:	00028f40 	call	28f4 <strlen>
    2130:	10800044 	addi	r2,r2,1
    2134:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2138:	00000d06 	br	2170 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    213c:	e0bffc17 	ldw	r2,-16(fp)
    2140:	10800217 	ldw	r2,8(r2)
    2144:	e0fffd17 	ldw	r3,-12(fp)
    2148:	180d883a 	mov	r6,r3
    214c:	e17ffe17 	ldw	r5,-8(fp)
    2150:	1009883a 	mov	r4,r2
    2154:	00025400 	call	2540 <memcmp>
    2158:	1000021e 	bne	r2,zero,2164 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    215c:	e0bffc17 	ldw	r2,-16(fp)
    2160:	00000706 	br	2180 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    2164:	e0bffc17 	ldw	r2,-16(fp)
    2168:	10800017 	ldw	r2,0(r2)
    216c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2170:	e0fffc17 	ldw	r3,-16(fp)
    2174:	e0bfff17 	ldw	r2,-4(fp)
    2178:	18bff01e 	bne	r3,r2,213c <__alt_data_end+0xfffe9a9c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    217c:	0005883a 	mov	r2,zero
}
    2180:	e037883a 	mov	sp,fp
    2184:	dfc00117 	ldw	ra,4(sp)
    2188:	df000017 	ldw	fp,0(sp)
    218c:	dec00204 	addi	sp,sp,8
    2190:	f800283a 	ret

00002194 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    2194:	defffb04 	addi	sp,sp,-20
    2198:	dfc00415 	stw	ra,16(sp)
    219c:	df000315 	stw	fp,12(sp)
    21a0:	df000304 	addi	fp,sp,12
    21a4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    21a8:	d0a00017 	ldw	r2,-32768(gp)
    21ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    21b0:	00003106 	br	2278 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    21b4:	e0bffd17 	ldw	r2,-12(fp)
    21b8:	10800217 	ldw	r2,8(r2)
    21bc:	1009883a 	mov	r4,r2
    21c0:	00028f40 	call	28f4 <strlen>
    21c4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    21c8:	e0bffd17 	ldw	r2,-12(fp)
    21cc:	10c00217 	ldw	r3,8(r2)
    21d0:	e0bffe17 	ldw	r2,-8(fp)
    21d4:	10bfffc4 	addi	r2,r2,-1
    21d8:	1885883a 	add	r2,r3,r2
    21dc:	10800003 	ldbu	r2,0(r2)
    21e0:	10803fcc 	andi	r2,r2,255
    21e4:	1080201c 	xori	r2,r2,128
    21e8:	10bfe004 	addi	r2,r2,-128
    21ec:	10800bd8 	cmpnei	r2,r2,47
    21f0:	1000031e 	bne	r2,zero,2200 <alt_find_file+0x6c>
    {
      len -= 1;
    21f4:	e0bffe17 	ldw	r2,-8(fp)
    21f8:	10bfffc4 	addi	r2,r2,-1
    21fc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    2200:	e0bffe17 	ldw	r2,-8(fp)
    2204:	e0ffff17 	ldw	r3,-4(fp)
    2208:	1885883a 	add	r2,r3,r2
    220c:	10800003 	ldbu	r2,0(r2)
    2210:	10803fcc 	andi	r2,r2,255
    2214:	1080201c 	xori	r2,r2,128
    2218:	10bfe004 	addi	r2,r2,-128
    221c:	10800be0 	cmpeqi	r2,r2,47
    2220:	1000081e 	bne	r2,zero,2244 <alt_find_file+0xb0>
    2224:	e0bffe17 	ldw	r2,-8(fp)
    2228:	e0ffff17 	ldw	r3,-4(fp)
    222c:	1885883a 	add	r2,r3,r2
    2230:	10800003 	ldbu	r2,0(r2)
    2234:	10803fcc 	andi	r2,r2,255
    2238:	1080201c 	xori	r2,r2,128
    223c:	10bfe004 	addi	r2,r2,-128
    2240:	10000a1e 	bne	r2,zero,226c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    2244:	e0bffd17 	ldw	r2,-12(fp)
    2248:	10800217 	ldw	r2,8(r2)
    224c:	e0fffe17 	ldw	r3,-8(fp)
    2250:	180d883a 	mov	r6,r3
    2254:	e17fff17 	ldw	r5,-4(fp)
    2258:	1009883a 	mov	r4,r2
    225c:	00025400 	call	2540 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    2260:	1000021e 	bne	r2,zero,226c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    2264:	e0bffd17 	ldw	r2,-12(fp)
    2268:	00000706 	br	2288 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    226c:	e0bffd17 	ldw	r2,-12(fp)
    2270:	10800017 	ldw	r2,0(r2)
    2274:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2278:	e0fffd17 	ldw	r3,-12(fp)
    227c:	d0a00004 	addi	r2,gp,-32768
    2280:	18bfcc1e 	bne	r3,r2,21b4 <__alt_data_end+0xfffe9b14>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    2284:	0005883a 	mov	r2,zero
}
    2288:	e037883a 	mov	sp,fp
    228c:	dfc00117 	ldw	ra,4(sp)
    2290:	df000017 	ldw	fp,0(sp)
    2294:	dec00204 	addi	sp,sp,8
    2298:	f800283a 	ret

0000229c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    229c:	defffa04 	addi	sp,sp,-24
    22a0:	dfc00515 	stw	ra,20(sp)
    22a4:	df000415 	stw	fp,16(sp)
    22a8:	dc000315 	stw	r16,12(sp)
    22ac:	df000404 	addi	fp,sp,16
    22b0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    22b4:	00bffa04 	movi	r2,-24
    22b8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    22bc:	e03ffc15 	stw	zero,-16(fp)
    22c0:	00001d06 	br	2338 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    22c4:	04000034 	movhi	r16,0
    22c8:	84197204 	addi	r16,r16,26056
    22cc:	e0bffc17 	ldw	r2,-16(fp)
    22d0:	01400304 	movi	r5,12
    22d4:	1009883a 	mov	r4,r2
    22d8:	0004e300 	call	4e30 <__mulsi3>
    22dc:	8085883a 	add	r2,r16,r2
    22e0:	10800017 	ldw	r2,0(r2)
    22e4:	1000111e 	bne	r2,zero,232c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    22e8:	04000034 	movhi	r16,0
    22ec:	84197204 	addi	r16,r16,26056
    22f0:	e0bffc17 	ldw	r2,-16(fp)
    22f4:	01400304 	movi	r5,12
    22f8:	1009883a 	mov	r4,r2
    22fc:	0004e300 	call	4e30 <__mulsi3>
    2300:	8085883a 	add	r2,r16,r2
    2304:	e0fffe17 	ldw	r3,-8(fp)
    2308:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    230c:	d0e00417 	ldw	r3,-32752(gp)
    2310:	e0bffc17 	ldw	r2,-16(fp)
    2314:	1880020e 	bge	r3,r2,2320 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    2318:	e0bffc17 	ldw	r2,-16(fp)
    231c:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
    2320:	e0bffc17 	ldw	r2,-16(fp)
    2324:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    2328:	00000606 	br	2344 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    232c:	e0bffc17 	ldw	r2,-16(fp)
    2330:	10800044 	addi	r2,r2,1
    2334:	e0bffc15 	stw	r2,-16(fp)
    2338:	e0bffc17 	ldw	r2,-16(fp)
    233c:	10800810 	cmplti	r2,r2,32
    2340:	103fe01e 	bne	r2,zero,22c4 <__alt_data_end+0xfffe9c24>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    2344:	e0bffd17 	ldw	r2,-12(fp)
}
    2348:	e6ffff04 	addi	sp,fp,-4
    234c:	dfc00217 	ldw	ra,8(sp)
    2350:	df000117 	ldw	fp,4(sp)
    2354:	dc000017 	ldw	r16,0(sp)
    2358:	dec00304 	addi	sp,sp,12
    235c:	f800283a 	ret

00002360 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    2360:	defffe04 	addi	sp,sp,-8
    2364:	df000115 	stw	fp,4(sp)
    2368:	df000104 	addi	fp,sp,4
    236c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    2370:	e0bfff17 	ldw	r2,-4(fp)
    2374:	10bffe84 	addi	r2,r2,-6
    2378:	10c00428 	cmpgeui	r3,r2,16
    237c:	18001a1e 	bne	r3,zero,23e8 <alt_exception_cause_generated_bad_addr+0x88>
    2380:	100690ba 	slli	r3,r2,2
    2384:	00800034 	movhi	r2,0
    2388:	1088e604 	addi	r2,r2,9112
    238c:	1885883a 	add	r2,r3,r2
    2390:	10800017 	ldw	r2,0(r2)
    2394:	1000683a 	jmp	r2
    2398:	000023d8 	cmpnei	zero,zero,143
    239c:	000023d8 	cmpnei	zero,zero,143
    23a0:	000023e8 	cmpgeui	zero,zero,143
    23a4:	000023e8 	cmpgeui	zero,zero,143
    23a8:	000023e8 	cmpgeui	zero,zero,143
    23ac:	000023d8 	cmpnei	zero,zero,143
    23b0:	000023e0 	cmpeqi	zero,zero,143
    23b4:	000023e8 	cmpgeui	zero,zero,143
    23b8:	000023d8 	cmpnei	zero,zero,143
    23bc:	000023d8 	cmpnei	zero,zero,143
    23c0:	000023e8 	cmpgeui	zero,zero,143
    23c4:	000023d8 	cmpnei	zero,zero,143
    23c8:	000023e0 	cmpeqi	zero,zero,143
    23cc:	000023e8 	cmpgeui	zero,zero,143
    23d0:	000023e8 	cmpgeui	zero,zero,143
    23d4:	000023d8 	cmpnei	zero,zero,143
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    23d8:	00800044 	movi	r2,1
    23dc:	00000306 	br	23ec <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    23e0:	0005883a 	mov	r2,zero
    23e4:	00000106 	br	23ec <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    23e8:	0005883a 	mov	r2,zero
  }
}
    23ec:	e037883a 	mov	sp,fp
    23f0:	df000017 	ldw	fp,0(sp)
    23f4:	dec00104 	addi	sp,sp,4
    23f8:	f800283a 	ret

000023fc <atexit>:
    23fc:	200b883a 	mov	r5,r4
    2400:	000f883a 	mov	r7,zero
    2404:	000d883a 	mov	r6,zero
    2408:	0009883a 	mov	r4,zero
    240c:	0002c381 	jmpi	2c38 <__register_exitproc>

00002410 <exit>:
    2410:	defffe04 	addi	sp,sp,-8
    2414:	000b883a 	mov	r5,zero
    2418:	dc000015 	stw	r16,0(sp)
    241c:	dfc00115 	stw	ra,4(sp)
    2420:	2021883a 	mov	r16,r4
    2424:	0002d500 	call	2d50 <__call_exitprocs>
    2428:	00800034 	movhi	r2,0
    242c:	109be604 	addi	r2,r2,28568
    2430:	11000017 	ldw	r4,0(r2)
    2434:	20800f17 	ldw	r2,60(r4)
    2438:	10000126 	beq	r2,zero,2440 <exit+0x30>
    243c:	103ee83a 	callr	r2
    2440:	8009883a 	mov	r4,r16
    2444:	0004e580 	call	4e58 <_exit>

00002448 <_getc_r>:
    2448:	defffd04 	addi	sp,sp,-12
    244c:	dc000115 	stw	r16,4(sp)
    2450:	dfc00215 	stw	ra,8(sp)
    2454:	2021883a 	mov	r16,r4
    2458:	20000226 	beq	r4,zero,2464 <_getc_r+0x1c>
    245c:	20800e17 	ldw	r2,56(r4)
    2460:	10000c26 	beq	r2,zero,2494 <_getc_r+0x4c>
    2464:	28800117 	ldw	r2,4(r5)
    2468:	10bfffc4 	addi	r2,r2,-1
    246c:	28800115 	stw	r2,4(r5)
    2470:	10000c16 	blt	r2,zero,24a4 <_getc_r+0x5c>
    2474:	28800017 	ldw	r2,0(r5)
    2478:	10c00044 	addi	r3,r2,1
    247c:	28c00015 	stw	r3,0(r5)
    2480:	10800003 	ldbu	r2,0(r2)
    2484:	dfc00217 	ldw	ra,8(sp)
    2488:	dc000117 	ldw	r16,4(sp)
    248c:	dec00304 	addi	sp,sp,12
    2490:	f800283a 	ret
    2494:	d9400015 	stw	r5,0(sp)
    2498:	00034d80 	call	34d8 <__sinit>
    249c:	d9400017 	ldw	r5,0(sp)
    24a0:	003ff006 	br	2464 <__alt_data_end+0xfffe9dc4>
    24a4:	8009883a 	mov	r4,r16
    24a8:	dfc00217 	ldw	ra,8(sp)
    24ac:	dc000117 	ldw	r16,4(sp)
    24b0:	dec00304 	addi	sp,sp,12
    24b4:	000286c1 	jmpi	286c <__srget_r>

000024b8 <getc>:
    24b8:	00800034 	movhi	r2,0
    24bc:	defffd04 	addi	sp,sp,-12
    24c0:	109be704 	addi	r2,r2,28572
    24c4:	dc400115 	stw	r17,4(sp)
    24c8:	14400017 	ldw	r17,0(r2)
    24cc:	dc000015 	stw	r16,0(sp)
    24d0:	dfc00215 	stw	ra,8(sp)
    24d4:	2021883a 	mov	r16,r4
    24d8:	88000226 	beq	r17,zero,24e4 <getc+0x2c>
    24dc:	88800e17 	ldw	r2,56(r17)
    24e0:	10000d26 	beq	r2,zero,2518 <getc+0x60>
    24e4:	80800117 	ldw	r2,4(r16)
    24e8:	10bfffc4 	addi	r2,r2,-1
    24ec:	80800115 	stw	r2,4(r16)
    24f0:	10000c16 	blt	r2,zero,2524 <getc+0x6c>
    24f4:	80800017 	ldw	r2,0(r16)
    24f8:	10c00044 	addi	r3,r2,1
    24fc:	80c00015 	stw	r3,0(r16)
    2500:	10800003 	ldbu	r2,0(r2)
    2504:	dfc00217 	ldw	ra,8(sp)
    2508:	dc400117 	ldw	r17,4(sp)
    250c:	dc000017 	ldw	r16,0(sp)
    2510:	dec00304 	addi	sp,sp,12
    2514:	f800283a 	ret
    2518:	8809883a 	mov	r4,r17
    251c:	00034d80 	call	34d8 <__sinit>
    2520:	003ff006 	br	24e4 <__alt_data_end+0xfffe9e44>
    2524:	800b883a 	mov	r5,r16
    2528:	8809883a 	mov	r4,r17
    252c:	dfc00217 	ldw	ra,8(sp)
    2530:	dc400117 	ldw	r17,4(sp)
    2534:	dc000017 	ldw	r16,0(sp)
    2538:	dec00304 	addi	sp,sp,12
    253c:	000286c1 	jmpi	286c <__srget_r>

00002540 <memcmp>:
    2540:	01c000c4 	movi	r7,3
    2544:	3980192e 	bgeu	r7,r6,25ac <memcmp+0x6c>
    2548:	2144b03a 	or	r2,r4,r5
    254c:	11c4703a 	and	r2,r2,r7
    2550:	10000f26 	beq	r2,zero,2590 <memcmp+0x50>
    2554:	20800003 	ldbu	r2,0(r4)
    2558:	28c00003 	ldbu	r3,0(r5)
    255c:	10c0151e 	bne	r2,r3,25b4 <memcmp+0x74>
    2560:	31bfff84 	addi	r6,r6,-2
    2564:	01ffffc4 	movi	r7,-1
    2568:	00000406 	br	257c <memcmp+0x3c>
    256c:	20800003 	ldbu	r2,0(r4)
    2570:	28c00003 	ldbu	r3,0(r5)
    2574:	31bfffc4 	addi	r6,r6,-1
    2578:	10c00e1e 	bne	r2,r3,25b4 <memcmp+0x74>
    257c:	21000044 	addi	r4,r4,1
    2580:	29400044 	addi	r5,r5,1
    2584:	31fff91e 	bne	r6,r7,256c <__alt_data_end+0xfffe9ecc>
    2588:	0005883a 	mov	r2,zero
    258c:	f800283a 	ret
    2590:	20c00017 	ldw	r3,0(r4)
    2594:	28800017 	ldw	r2,0(r5)
    2598:	18bfee1e 	bne	r3,r2,2554 <__alt_data_end+0xfffe9eb4>
    259c:	31bfff04 	addi	r6,r6,-4
    25a0:	21000104 	addi	r4,r4,4
    25a4:	29400104 	addi	r5,r5,4
    25a8:	39bff936 	bltu	r7,r6,2590 <__alt_data_end+0xfffe9ef0>
    25ac:	303fe91e 	bne	r6,zero,2554 <__alt_data_end+0xfffe9eb4>
    25b0:	003ff506 	br	2588 <__alt_data_end+0xfffe9ee8>
    25b4:	10c5c83a 	sub	r2,r2,r3
    25b8:	f800283a 	ret

000025bc <memcpy>:
    25bc:	defffd04 	addi	sp,sp,-12
    25c0:	dfc00215 	stw	ra,8(sp)
    25c4:	dc400115 	stw	r17,4(sp)
    25c8:	dc000015 	stw	r16,0(sp)
    25cc:	00c003c4 	movi	r3,15
    25d0:	2005883a 	mov	r2,r4
    25d4:	1980452e 	bgeu	r3,r6,26ec <memcpy+0x130>
    25d8:	2906b03a 	or	r3,r5,r4
    25dc:	18c000cc 	andi	r3,r3,3
    25e0:	1800441e 	bne	r3,zero,26f4 <memcpy+0x138>
    25e4:	347ffc04 	addi	r17,r6,-16
    25e8:	8822d13a 	srli	r17,r17,4
    25ec:	28c00104 	addi	r3,r5,4
    25f0:	23400104 	addi	r13,r4,4
    25f4:	8820913a 	slli	r16,r17,4
    25f8:	2b000204 	addi	r12,r5,8
    25fc:	22c00204 	addi	r11,r4,8
    2600:	84000504 	addi	r16,r16,20
    2604:	2a800304 	addi	r10,r5,12
    2608:	22400304 	addi	r9,r4,12
    260c:	2c21883a 	add	r16,r5,r16
    2610:	2811883a 	mov	r8,r5
    2614:	200f883a 	mov	r7,r4
    2618:	41000017 	ldw	r4,0(r8)
    261c:	1fc00017 	ldw	ra,0(r3)
    2620:	63c00017 	ldw	r15,0(r12)
    2624:	39000015 	stw	r4,0(r7)
    2628:	53800017 	ldw	r14,0(r10)
    262c:	6fc00015 	stw	ra,0(r13)
    2630:	5bc00015 	stw	r15,0(r11)
    2634:	4b800015 	stw	r14,0(r9)
    2638:	18c00404 	addi	r3,r3,16
    263c:	39c00404 	addi	r7,r7,16
    2640:	42000404 	addi	r8,r8,16
    2644:	6b400404 	addi	r13,r13,16
    2648:	63000404 	addi	r12,r12,16
    264c:	5ac00404 	addi	r11,r11,16
    2650:	52800404 	addi	r10,r10,16
    2654:	4a400404 	addi	r9,r9,16
    2658:	1c3fef1e 	bne	r3,r16,2618 <__alt_data_end+0xfffe9f78>
    265c:	89c00044 	addi	r7,r17,1
    2660:	380e913a 	slli	r7,r7,4
    2664:	310003cc 	andi	r4,r6,15
    2668:	02c000c4 	movi	r11,3
    266c:	11c7883a 	add	r3,r2,r7
    2670:	29cb883a 	add	r5,r5,r7
    2674:	5900212e 	bgeu	r11,r4,26fc <memcpy+0x140>
    2678:	1813883a 	mov	r9,r3
    267c:	2811883a 	mov	r8,r5
    2680:	200f883a 	mov	r7,r4
    2684:	42800017 	ldw	r10,0(r8)
    2688:	4a400104 	addi	r9,r9,4
    268c:	39ffff04 	addi	r7,r7,-4
    2690:	4abfff15 	stw	r10,-4(r9)
    2694:	42000104 	addi	r8,r8,4
    2698:	59fffa36 	bltu	r11,r7,2684 <__alt_data_end+0xfffe9fe4>
    269c:	213fff04 	addi	r4,r4,-4
    26a0:	2008d0ba 	srli	r4,r4,2
    26a4:	318000cc 	andi	r6,r6,3
    26a8:	21000044 	addi	r4,r4,1
    26ac:	2109883a 	add	r4,r4,r4
    26b0:	2109883a 	add	r4,r4,r4
    26b4:	1907883a 	add	r3,r3,r4
    26b8:	290b883a 	add	r5,r5,r4
    26bc:	30000626 	beq	r6,zero,26d8 <memcpy+0x11c>
    26c0:	198d883a 	add	r6,r3,r6
    26c4:	29c00003 	ldbu	r7,0(r5)
    26c8:	18c00044 	addi	r3,r3,1
    26cc:	29400044 	addi	r5,r5,1
    26d0:	19ffffc5 	stb	r7,-1(r3)
    26d4:	19bffb1e 	bne	r3,r6,26c4 <__alt_data_end+0xfffea024>
    26d8:	dfc00217 	ldw	ra,8(sp)
    26dc:	dc400117 	ldw	r17,4(sp)
    26e0:	dc000017 	ldw	r16,0(sp)
    26e4:	dec00304 	addi	sp,sp,12
    26e8:	f800283a 	ret
    26ec:	2007883a 	mov	r3,r4
    26f0:	003ff206 	br	26bc <__alt_data_end+0xfffea01c>
    26f4:	2007883a 	mov	r3,r4
    26f8:	003ff106 	br	26c0 <__alt_data_end+0xfffea020>
    26fc:	200d883a 	mov	r6,r4
    2700:	003fee06 	br	26bc <__alt_data_end+0xfffea01c>

00002704 <_putc_r>:
    2704:	defffc04 	addi	sp,sp,-16
    2708:	dc000215 	stw	r16,8(sp)
    270c:	dfc00315 	stw	ra,12(sp)
    2710:	2021883a 	mov	r16,r4
    2714:	20000226 	beq	r4,zero,2720 <_putc_r+0x1c>
    2718:	20800e17 	ldw	r2,56(r4)
    271c:	10001b26 	beq	r2,zero,278c <_putc_r+0x88>
    2720:	30800217 	ldw	r2,8(r6)
    2724:	10bfffc4 	addi	r2,r2,-1
    2728:	30800215 	stw	r2,8(r6)
    272c:	10000a16 	blt	r2,zero,2758 <_putc_r+0x54>
    2730:	30800017 	ldw	r2,0(r6)
    2734:	11400005 	stb	r5,0(r2)
    2738:	30800017 	ldw	r2,0(r6)
    273c:	10c00044 	addi	r3,r2,1
    2740:	30c00015 	stw	r3,0(r6)
    2744:	10800003 	ldbu	r2,0(r2)
    2748:	dfc00317 	ldw	ra,12(sp)
    274c:	dc000217 	ldw	r16,8(sp)
    2750:	dec00404 	addi	sp,sp,16
    2754:	f800283a 	ret
    2758:	30c00617 	ldw	r3,24(r6)
    275c:	10c00616 	blt	r2,r3,2778 <_putc_r+0x74>
    2760:	30800017 	ldw	r2,0(r6)
    2764:	00c00284 	movi	r3,10
    2768:	11400005 	stb	r5,0(r2)
    276c:	30800017 	ldw	r2,0(r6)
    2770:	11400003 	ldbu	r5,0(r2)
    2774:	28fff11e 	bne	r5,r3,273c <__alt_data_end+0xfffea09c>
    2778:	8009883a 	mov	r4,r16
    277c:	dfc00317 	ldw	ra,12(sp)
    2780:	dc000217 	ldw	r16,8(sp)
    2784:	dec00404 	addi	sp,sp,16
    2788:	000298c1 	jmpi	298c <__swbuf_r>
    278c:	d9400015 	stw	r5,0(sp)
    2790:	d9800115 	stw	r6,4(sp)
    2794:	00034d80 	call	34d8 <__sinit>
    2798:	d9800117 	ldw	r6,4(sp)
    279c:	d9400017 	ldw	r5,0(sp)
    27a0:	003fdf06 	br	2720 <__alt_data_end+0xfffea080>

000027a4 <putc>:
    27a4:	00800034 	movhi	r2,0
    27a8:	defffc04 	addi	sp,sp,-16
    27ac:	109be704 	addi	r2,r2,28572
    27b0:	dc000115 	stw	r16,4(sp)
    27b4:	14000017 	ldw	r16,0(r2)
    27b8:	dc400215 	stw	r17,8(sp)
    27bc:	dfc00315 	stw	ra,12(sp)
    27c0:	2023883a 	mov	r17,r4
    27c4:	80000226 	beq	r16,zero,27d0 <putc+0x2c>
    27c8:	80800e17 	ldw	r2,56(r16)
    27cc:	10001a26 	beq	r2,zero,2838 <putc+0x94>
    27d0:	28800217 	ldw	r2,8(r5)
    27d4:	10bfffc4 	addi	r2,r2,-1
    27d8:	28800215 	stw	r2,8(r5)
    27dc:	10000b16 	blt	r2,zero,280c <putc+0x68>
    27e0:	28800017 	ldw	r2,0(r5)
    27e4:	14400005 	stb	r17,0(r2)
    27e8:	28800017 	ldw	r2,0(r5)
    27ec:	10c00044 	addi	r3,r2,1
    27f0:	28c00015 	stw	r3,0(r5)
    27f4:	10800003 	ldbu	r2,0(r2)
    27f8:	dfc00317 	ldw	ra,12(sp)
    27fc:	dc400217 	ldw	r17,8(sp)
    2800:	dc000117 	ldw	r16,4(sp)
    2804:	dec00404 	addi	sp,sp,16
    2808:	f800283a 	ret
    280c:	28c00617 	ldw	r3,24(r5)
    2810:	10c00e16 	blt	r2,r3,284c <putc+0xa8>
    2814:	28800017 	ldw	r2,0(r5)
    2818:	01000284 	movi	r4,10
    281c:	14400005 	stb	r17,0(r2)
    2820:	28800017 	ldw	r2,0(r5)
    2824:	10c00003 	ldbu	r3,0(r2)
    2828:	193ff01e 	bne	r3,r4,27ec <__alt_data_end+0xfffea14c>
    282c:	280d883a 	mov	r6,r5
    2830:	180b883a 	mov	r5,r3
    2834:	00000706 	br	2854 <putc+0xb0>
    2838:	8009883a 	mov	r4,r16
    283c:	d9400015 	stw	r5,0(sp)
    2840:	00034d80 	call	34d8 <__sinit>
    2844:	d9400017 	ldw	r5,0(sp)
    2848:	003fe106 	br	27d0 <__alt_data_end+0xfffea130>
    284c:	280d883a 	mov	r6,r5
    2850:	880b883a 	mov	r5,r17
    2854:	8009883a 	mov	r4,r16
    2858:	dfc00317 	ldw	ra,12(sp)
    285c:	dc400217 	ldw	r17,8(sp)
    2860:	dc000117 	ldw	r16,4(sp)
    2864:	dec00404 	addi	sp,sp,16
    2868:	000298c1 	jmpi	298c <__swbuf_r>

0000286c <__srget_r>:
    286c:	defffd04 	addi	sp,sp,-12
    2870:	dc400115 	stw	r17,4(sp)
    2874:	dc000015 	stw	r16,0(sp)
    2878:	dfc00215 	stw	ra,8(sp)
    287c:	2023883a 	mov	r17,r4
    2880:	2821883a 	mov	r16,r5
    2884:	20000226 	beq	r4,zero,2890 <__srget_r+0x24>
    2888:	20800e17 	ldw	r2,56(r4)
    288c:	10001026 	beq	r2,zero,28d0 <__srget_r+0x64>
    2890:	800b883a 	mov	r5,r16
    2894:	8809883a 	mov	r4,r17
    2898:	00045f00 	call	45f0 <__srefill_r>
    289c:	10000e1e 	bne	r2,zero,28d8 <__srget_r+0x6c>
    28a0:	80c00017 	ldw	r3,0(r16)
    28a4:	80800117 	ldw	r2,4(r16)
    28a8:	19000044 	addi	r4,r3,1
    28ac:	10bfffc4 	addi	r2,r2,-1
    28b0:	80800115 	stw	r2,4(r16)
    28b4:	81000015 	stw	r4,0(r16)
    28b8:	18800003 	ldbu	r2,0(r3)
    28bc:	dfc00217 	ldw	ra,8(sp)
    28c0:	dc400117 	ldw	r17,4(sp)
    28c4:	dc000017 	ldw	r16,0(sp)
    28c8:	dec00304 	addi	sp,sp,12
    28cc:	f800283a 	ret
    28d0:	00034d80 	call	34d8 <__sinit>
    28d4:	003fee06 	br	2890 <__alt_data_end+0xfffea1f0>
    28d8:	00bfffc4 	movi	r2,-1
    28dc:	003ff706 	br	28bc <__alt_data_end+0xfffea21c>

000028e0 <__srget>:
    28e0:	00800034 	movhi	r2,0
    28e4:	109be704 	addi	r2,r2,28572
    28e8:	200b883a 	mov	r5,r4
    28ec:	11000017 	ldw	r4,0(r2)
    28f0:	000286c1 	jmpi	286c <__srget_r>

000028f4 <strlen>:
    28f4:	208000cc 	andi	r2,r4,3
    28f8:	10002026 	beq	r2,zero,297c <strlen+0x88>
    28fc:	20800007 	ldb	r2,0(r4)
    2900:	10002026 	beq	r2,zero,2984 <strlen+0x90>
    2904:	2005883a 	mov	r2,r4
    2908:	00000206 	br	2914 <strlen+0x20>
    290c:	10c00007 	ldb	r3,0(r2)
    2910:	18001826 	beq	r3,zero,2974 <strlen+0x80>
    2914:	10800044 	addi	r2,r2,1
    2918:	10c000cc 	andi	r3,r2,3
    291c:	183ffb1e 	bne	r3,zero,290c <__alt_data_end+0xfffea26c>
    2920:	10c00017 	ldw	r3,0(r2)
    2924:	01ffbff4 	movhi	r7,65279
    2928:	39ffbfc4 	addi	r7,r7,-257
    292c:	00ca303a 	nor	r5,zero,r3
    2930:	01a02074 	movhi	r6,32897
    2934:	19c7883a 	add	r3,r3,r7
    2938:	31a02004 	addi	r6,r6,-32640
    293c:	1946703a 	and	r3,r3,r5
    2940:	1986703a 	and	r3,r3,r6
    2944:	1800091e 	bne	r3,zero,296c <strlen+0x78>
    2948:	10800104 	addi	r2,r2,4
    294c:	10c00017 	ldw	r3,0(r2)
    2950:	19cb883a 	add	r5,r3,r7
    2954:	00c6303a 	nor	r3,zero,r3
    2958:	28c6703a 	and	r3,r5,r3
    295c:	1986703a 	and	r3,r3,r6
    2960:	183ff926 	beq	r3,zero,2948 <__alt_data_end+0xfffea2a8>
    2964:	00000106 	br	296c <strlen+0x78>
    2968:	10800044 	addi	r2,r2,1
    296c:	10c00007 	ldb	r3,0(r2)
    2970:	183ffd1e 	bne	r3,zero,2968 <__alt_data_end+0xfffea2c8>
    2974:	1105c83a 	sub	r2,r2,r4
    2978:	f800283a 	ret
    297c:	2005883a 	mov	r2,r4
    2980:	003fe706 	br	2920 <__alt_data_end+0xfffea280>
    2984:	0005883a 	mov	r2,zero
    2988:	f800283a 	ret

0000298c <__swbuf_r>:
    298c:	defffb04 	addi	sp,sp,-20
    2990:	dcc00315 	stw	r19,12(sp)
    2994:	dc800215 	stw	r18,8(sp)
    2998:	dc000015 	stw	r16,0(sp)
    299c:	dfc00415 	stw	ra,16(sp)
    29a0:	dc400115 	stw	r17,4(sp)
    29a4:	2025883a 	mov	r18,r4
    29a8:	2827883a 	mov	r19,r5
    29ac:	3021883a 	mov	r16,r6
    29b0:	20000226 	beq	r4,zero,29bc <__swbuf_r+0x30>
    29b4:	20800e17 	ldw	r2,56(r4)
    29b8:	10004226 	beq	r2,zero,2ac4 <__swbuf_r+0x138>
    29bc:	80800617 	ldw	r2,24(r16)
    29c0:	8100030b 	ldhu	r4,12(r16)
    29c4:	80800215 	stw	r2,8(r16)
    29c8:	2080020c 	andi	r2,r4,8
    29cc:	10003626 	beq	r2,zero,2aa8 <__swbuf_r+0x11c>
    29d0:	80c00417 	ldw	r3,16(r16)
    29d4:	18003426 	beq	r3,zero,2aa8 <__swbuf_r+0x11c>
    29d8:	2088000c 	andi	r2,r4,8192
    29dc:	9c403fcc 	andi	r17,r19,255
    29e0:	10001a26 	beq	r2,zero,2a4c <__swbuf_r+0xc0>
    29e4:	80800017 	ldw	r2,0(r16)
    29e8:	81000517 	ldw	r4,20(r16)
    29ec:	10c7c83a 	sub	r3,r2,r3
    29f0:	1900200e 	bge	r3,r4,2a74 <__swbuf_r+0xe8>
    29f4:	18c00044 	addi	r3,r3,1
    29f8:	81000217 	ldw	r4,8(r16)
    29fc:	11400044 	addi	r5,r2,1
    2a00:	81400015 	stw	r5,0(r16)
    2a04:	213fffc4 	addi	r4,r4,-1
    2a08:	81000215 	stw	r4,8(r16)
    2a0c:	14c00005 	stb	r19,0(r2)
    2a10:	80800517 	ldw	r2,20(r16)
    2a14:	10c01e26 	beq	r2,r3,2a90 <__swbuf_r+0x104>
    2a18:	8080030b 	ldhu	r2,12(r16)
    2a1c:	1080004c 	andi	r2,r2,1
    2a20:	10000226 	beq	r2,zero,2a2c <__swbuf_r+0xa0>
    2a24:	00800284 	movi	r2,10
    2a28:	88801926 	beq	r17,r2,2a90 <__swbuf_r+0x104>
    2a2c:	8805883a 	mov	r2,r17
    2a30:	dfc00417 	ldw	ra,16(sp)
    2a34:	dcc00317 	ldw	r19,12(sp)
    2a38:	dc800217 	ldw	r18,8(sp)
    2a3c:	dc400117 	ldw	r17,4(sp)
    2a40:	dc000017 	ldw	r16,0(sp)
    2a44:	dec00504 	addi	sp,sp,20
    2a48:	f800283a 	ret
    2a4c:	81401917 	ldw	r5,100(r16)
    2a50:	00b7ffc4 	movi	r2,-8193
    2a54:	21080014 	ori	r4,r4,8192
    2a58:	2884703a 	and	r2,r5,r2
    2a5c:	80801915 	stw	r2,100(r16)
    2a60:	80800017 	ldw	r2,0(r16)
    2a64:	8100030d 	sth	r4,12(r16)
    2a68:	81000517 	ldw	r4,20(r16)
    2a6c:	10c7c83a 	sub	r3,r2,r3
    2a70:	193fe016 	blt	r3,r4,29f4 <__alt_data_end+0xfffea354>
    2a74:	800b883a 	mov	r5,r16
    2a78:	9009883a 	mov	r4,r18
    2a7c:	00030ec0 	call	30ec <_fflush_r>
    2a80:	1000071e 	bne	r2,zero,2aa0 <__swbuf_r+0x114>
    2a84:	80800017 	ldw	r2,0(r16)
    2a88:	00c00044 	movi	r3,1
    2a8c:	003fda06 	br	29f8 <__alt_data_end+0xfffea358>
    2a90:	800b883a 	mov	r5,r16
    2a94:	9009883a 	mov	r4,r18
    2a98:	00030ec0 	call	30ec <_fflush_r>
    2a9c:	103fe326 	beq	r2,zero,2a2c <__alt_data_end+0xfffea38c>
    2aa0:	00bfffc4 	movi	r2,-1
    2aa4:	003fe206 	br	2a30 <__alt_data_end+0xfffea390>
    2aa8:	800b883a 	mov	r5,r16
    2aac:	9009883a 	mov	r4,r18
    2ab0:	0002ae40 	call	2ae4 <__swsetup_r>
    2ab4:	103ffa1e 	bne	r2,zero,2aa0 <__alt_data_end+0xfffea400>
    2ab8:	8100030b 	ldhu	r4,12(r16)
    2abc:	80c00417 	ldw	r3,16(r16)
    2ac0:	003fc506 	br	29d8 <__alt_data_end+0xfffea338>
    2ac4:	00034d80 	call	34d8 <__sinit>
    2ac8:	003fbc06 	br	29bc <__alt_data_end+0xfffea31c>

00002acc <__swbuf>:
    2acc:	00800034 	movhi	r2,0
    2ad0:	109be704 	addi	r2,r2,28572
    2ad4:	280d883a 	mov	r6,r5
    2ad8:	200b883a 	mov	r5,r4
    2adc:	11000017 	ldw	r4,0(r2)
    2ae0:	000298c1 	jmpi	298c <__swbuf_r>

00002ae4 <__swsetup_r>:
    2ae4:	00800034 	movhi	r2,0
    2ae8:	defffd04 	addi	sp,sp,-12
    2aec:	109be704 	addi	r2,r2,28572
    2af0:	dc400115 	stw	r17,4(sp)
    2af4:	2023883a 	mov	r17,r4
    2af8:	11000017 	ldw	r4,0(r2)
    2afc:	dc000015 	stw	r16,0(sp)
    2b00:	dfc00215 	stw	ra,8(sp)
    2b04:	2821883a 	mov	r16,r5
    2b08:	20000226 	beq	r4,zero,2b14 <__swsetup_r+0x30>
    2b0c:	20800e17 	ldw	r2,56(r4)
    2b10:	10003126 	beq	r2,zero,2bd8 <__swsetup_r+0xf4>
    2b14:	8080030b 	ldhu	r2,12(r16)
    2b18:	10c0020c 	andi	r3,r2,8
    2b1c:	1009883a 	mov	r4,r2
    2b20:	18000f26 	beq	r3,zero,2b60 <__swsetup_r+0x7c>
    2b24:	80c00417 	ldw	r3,16(r16)
    2b28:	18001526 	beq	r3,zero,2b80 <__swsetup_r+0x9c>
    2b2c:	1100004c 	andi	r4,r2,1
    2b30:	20001c1e 	bne	r4,zero,2ba4 <__swsetup_r+0xc0>
    2b34:	1080008c 	andi	r2,r2,2
    2b38:	1000291e 	bne	r2,zero,2be0 <__swsetup_r+0xfc>
    2b3c:	80800517 	ldw	r2,20(r16)
    2b40:	80800215 	stw	r2,8(r16)
    2b44:	18001c26 	beq	r3,zero,2bb8 <__swsetup_r+0xd4>
    2b48:	0005883a 	mov	r2,zero
    2b4c:	dfc00217 	ldw	ra,8(sp)
    2b50:	dc400117 	ldw	r17,4(sp)
    2b54:	dc000017 	ldw	r16,0(sp)
    2b58:	dec00304 	addi	sp,sp,12
    2b5c:	f800283a 	ret
    2b60:	2080040c 	andi	r2,r4,16
    2b64:	10002e26 	beq	r2,zero,2c20 <__swsetup_r+0x13c>
    2b68:	2080010c 	andi	r2,r4,4
    2b6c:	10001e1e 	bne	r2,zero,2be8 <__swsetup_r+0x104>
    2b70:	80c00417 	ldw	r3,16(r16)
    2b74:	20800214 	ori	r2,r4,8
    2b78:	8080030d 	sth	r2,12(r16)
    2b7c:	183feb1e 	bne	r3,zero,2b2c <__alt_data_end+0xfffea48c>
    2b80:	1100a00c 	andi	r4,r2,640
    2b84:	01408004 	movi	r5,512
    2b88:	217fe826 	beq	r4,r5,2b2c <__alt_data_end+0xfffea48c>
    2b8c:	800b883a 	mov	r5,r16
    2b90:	8809883a 	mov	r4,r17
    2b94:	0003ae40 	call	3ae4 <__smakebuf_r>
    2b98:	8080030b 	ldhu	r2,12(r16)
    2b9c:	80c00417 	ldw	r3,16(r16)
    2ba0:	003fe206 	br	2b2c <__alt_data_end+0xfffea48c>
    2ba4:	80800517 	ldw	r2,20(r16)
    2ba8:	80000215 	stw	zero,8(r16)
    2bac:	0085c83a 	sub	r2,zero,r2
    2bb0:	80800615 	stw	r2,24(r16)
    2bb4:	183fe41e 	bne	r3,zero,2b48 <__alt_data_end+0xfffea4a8>
    2bb8:	80c0030b 	ldhu	r3,12(r16)
    2bbc:	0005883a 	mov	r2,zero
    2bc0:	1900200c 	andi	r4,r3,128
    2bc4:	203fe126 	beq	r4,zero,2b4c <__alt_data_end+0xfffea4ac>
    2bc8:	18c01014 	ori	r3,r3,64
    2bcc:	80c0030d 	sth	r3,12(r16)
    2bd0:	00bfffc4 	movi	r2,-1
    2bd4:	003fdd06 	br	2b4c <__alt_data_end+0xfffea4ac>
    2bd8:	00034d80 	call	34d8 <__sinit>
    2bdc:	003fcd06 	br	2b14 <__alt_data_end+0xfffea474>
    2be0:	0005883a 	mov	r2,zero
    2be4:	003fd606 	br	2b40 <__alt_data_end+0xfffea4a0>
    2be8:	81400c17 	ldw	r5,48(r16)
    2bec:	28000626 	beq	r5,zero,2c08 <__swsetup_r+0x124>
    2bf0:	80801004 	addi	r2,r16,64
    2bf4:	28800326 	beq	r5,r2,2c04 <__swsetup_r+0x120>
    2bf8:	8809883a 	mov	r4,r17
    2bfc:	000364c0 	call	364c <_free_r>
    2c00:	8100030b 	ldhu	r4,12(r16)
    2c04:	80000c15 	stw	zero,48(r16)
    2c08:	80c00417 	ldw	r3,16(r16)
    2c0c:	00bff6c4 	movi	r2,-37
    2c10:	1108703a 	and	r4,r2,r4
    2c14:	80000115 	stw	zero,4(r16)
    2c18:	80c00015 	stw	r3,0(r16)
    2c1c:	003fd506 	br	2b74 <__alt_data_end+0xfffea4d4>
    2c20:	00800244 	movi	r2,9
    2c24:	88800015 	stw	r2,0(r17)
    2c28:	20801014 	ori	r2,r4,64
    2c2c:	8080030d 	sth	r2,12(r16)
    2c30:	00bfffc4 	movi	r2,-1
    2c34:	003fc506 	br	2b4c <__alt_data_end+0xfffea4ac>

00002c38 <__register_exitproc>:
    2c38:	defffa04 	addi	sp,sp,-24
    2c3c:	dc000315 	stw	r16,12(sp)
    2c40:	04000034 	movhi	r16,0
    2c44:	841be604 	addi	r16,r16,28568
    2c48:	80c00017 	ldw	r3,0(r16)
    2c4c:	dc400415 	stw	r17,16(sp)
    2c50:	dfc00515 	stw	ra,20(sp)
    2c54:	18805217 	ldw	r2,328(r3)
    2c58:	2023883a 	mov	r17,r4
    2c5c:	10003726 	beq	r2,zero,2d3c <__register_exitproc+0x104>
    2c60:	10c00117 	ldw	r3,4(r2)
    2c64:	010007c4 	movi	r4,31
    2c68:	20c00e16 	blt	r4,r3,2ca4 <__register_exitproc+0x6c>
    2c6c:	1a000044 	addi	r8,r3,1
    2c70:	8800221e 	bne	r17,zero,2cfc <__register_exitproc+0xc4>
    2c74:	18c00084 	addi	r3,r3,2
    2c78:	18c7883a 	add	r3,r3,r3
    2c7c:	18c7883a 	add	r3,r3,r3
    2c80:	12000115 	stw	r8,4(r2)
    2c84:	10c7883a 	add	r3,r2,r3
    2c88:	19400015 	stw	r5,0(r3)
    2c8c:	0005883a 	mov	r2,zero
    2c90:	dfc00517 	ldw	ra,20(sp)
    2c94:	dc400417 	ldw	r17,16(sp)
    2c98:	dc000317 	ldw	r16,12(sp)
    2c9c:	dec00604 	addi	sp,sp,24
    2ca0:	f800283a 	ret
    2ca4:	00800034 	movhi	r2,0
    2ca8:	10800004 	addi	r2,r2,0
    2cac:	10002626 	beq	r2,zero,2d48 <__register_exitproc+0x110>
    2cb0:	01006404 	movi	r4,400
    2cb4:	d9400015 	stw	r5,0(sp)
    2cb8:	d9800115 	stw	r6,4(sp)
    2cbc:	d9c00215 	stw	r7,8(sp)
    2cc0:	00000000 	call	0 <__reset>
    2cc4:	d9400017 	ldw	r5,0(sp)
    2cc8:	d9800117 	ldw	r6,4(sp)
    2ccc:	d9c00217 	ldw	r7,8(sp)
    2cd0:	10001d26 	beq	r2,zero,2d48 <__register_exitproc+0x110>
    2cd4:	81000017 	ldw	r4,0(r16)
    2cd8:	10000115 	stw	zero,4(r2)
    2cdc:	02000044 	movi	r8,1
    2ce0:	22405217 	ldw	r9,328(r4)
    2ce4:	0007883a 	mov	r3,zero
    2ce8:	12400015 	stw	r9,0(r2)
    2cec:	20805215 	stw	r2,328(r4)
    2cf0:	10006215 	stw	zero,392(r2)
    2cf4:	10006315 	stw	zero,396(r2)
    2cf8:	883fde26 	beq	r17,zero,2c74 <__alt_data_end+0xfffea5d4>
    2cfc:	18c9883a 	add	r4,r3,r3
    2d00:	2109883a 	add	r4,r4,r4
    2d04:	1109883a 	add	r4,r2,r4
    2d08:	21802215 	stw	r6,136(r4)
    2d0c:	01800044 	movi	r6,1
    2d10:	12406217 	ldw	r9,392(r2)
    2d14:	30cc983a 	sll	r6,r6,r3
    2d18:	4992b03a 	or	r9,r9,r6
    2d1c:	12406215 	stw	r9,392(r2)
    2d20:	21c04215 	stw	r7,264(r4)
    2d24:	01000084 	movi	r4,2
    2d28:	893fd21e 	bne	r17,r4,2c74 <__alt_data_end+0xfffea5d4>
    2d2c:	11006317 	ldw	r4,396(r2)
    2d30:	218cb03a 	or	r6,r4,r6
    2d34:	11806315 	stw	r6,396(r2)
    2d38:	003fce06 	br	2c74 <__alt_data_end+0xfffea5d4>
    2d3c:	18805304 	addi	r2,r3,332
    2d40:	18805215 	stw	r2,328(r3)
    2d44:	003fc606 	br	2c60 <__alt_data_end+0xfffea5c0>
    2d48:	00bfffc4 	movi	r2,-1
    2d4c:	003fd006 	br	2c90 <__alt_data_end+0xfffea5f0>

00002d50 <__call_exitprocs>:
    2d50:	defff504 	addi	sp,sp,-44
    2d54:	df000915 	stw	fp,36(sp)
    2d58:	dd400615 	stw	r21,24(sp)
    2d5c:	dc800315 	stw	r18,12(sp)
    2d60:	dfc00a15 	stw	ra,40(sp)
    2d64:	ddc00815 	stw	r23,32(sp)
    2d68:	dd800715 	stw	r22,28(sp)
    2d6c:	dd000515 	stw	r20,20(sp)
    2d70:	dcc00415 	stw	r19,16(sp)
    2d74:	dc400215 	stw	r17,8(sp)
    2d78:	dc000115 	stw	r16,4(sp)
    2d7c:	d9000015 	stw	r4,0(sp)
    2d80:	2839883a 	mov	fp,r5
    2d84:	04800044 	movi	r18,1
    2d88:	057fffc4 	movi	r21,-1
    2d8c:	00800034 	movhi	r2,0
    2d90:	109be604 	addi	r2,r2,28568
    2d94:	12000017 	ldw	r8,0(r2)
    2d98:	45005217 	ldw	r20,328(r8)
    2d9c:	44c05204 	addi	r19,r8,328
    2da0:	a0001c26 	beq	r20,zero,2e14 <__call_exitprocs+0xc4>
    2da4:	a0800117 	ldw	r2,4(r20)
    2da8:	15ffffc4 	addi	r23,r2,-1
    2dac:	b8000d16 	blt	r23,zero,2de4 <__call_exitprocs+0x94>
    2db0:	14000044 	addi	r16,r2,1
    2db4:	8421883a 	add	r16,r16,r16
    2db8:	8421883a 	add	r16,r16,r16
    2dbc:	84402004 	addi	r17,r16,128
    2dc0:	a463883a 	add	r17,r20,r17
    2dc4:	a421883a 	add	r16,r20,r16
    2dc8:	e0001e26 	beq	fp,zero,2e44 <__call_exitprocs+0xf4>
    2dcc:	80804017 	ldw	r2,256(r16)
    2dd0:	e0801c26 	beq	fp,r2,2e44 <__call_exitprocs+0xf4>
    2dd4:	bdffffc4 	addi	r23,r23,-1
    2dd8:	843fff04 	addi	r16,r16,-4
    2ddc:	8c7fff04 	addi	r17,r17,-4
    2de0:	bd7ff91e 	bne	r23,r21,2dc8 <__alt_data_end+0xfffea728>
    2de4:	00800034 	movhi	r2,0
    2de8:	10800004 	addi	r2,r2,0
    2dec:	10000926 	beq	r2,zero,2e14 <__call_exitprocs+0xc4>
    2df0:	a0800117 	ldw	r2,4(r20)
    2df4:	1000301e 	bne	r2,zero,2eb8 <__call_exitprocs+0x168>
    2df8:	a0800017 	ldw	r2,0(r20)
    2dfc:	10003226 	beq	r2,zero,2ec8 <__call_exitprocs+0x178>
    2e00:	a009883a 	mov	r4,r20
    2e04:	98800015 	stw	r2,0(r19)
    2e08:	00000000 	call	0 <__reset>
    2e0c:	9d000017 	ldw	r20,0(r19)
    2e10:	a03fe41e 	bne	r20,zero,2da4 <__alt_data_end+0xfffea704>
    2e14:	dfc00a17 	ldw	ra,40(sp)
    2e18:	df000917 	ldw	fp,36(sp)
    2e1c:	ddc00817 	ldw	r23,32(sp)
    2e20:	dd800717 	ldw	r22,28(sp)
    2e24:	dd400617 	ldw	r21,24(sp)
    2e28:	dd000517 	ldw	r20,20(sp)
    2e2c:	dcc00417 	ldw	r19,16(sp)
    2e30:	dc800317 	ldw	r18,12(sp)
    2e34:	dc400217 	ldw	r17,8(sp)
    2e38:	dc000117 	ldw	r16,4(sp)
    2e3c:	dec00b04 	addi	sp,sp,44
    2e40:	f800283a 	ret
    2e44:	a0800117 	ldw	r2,4(r20)
    2e48:	80c00017 	ldw	r3,0(r16)
    2e4c:	10bfffc4 	addi	r2,r2,-1
    2e50:	15c01426 	beq	r2,r23,2ea4 <__call_exitprocs+0x154>
    2e54:	80000015 	stw	zero,0(r16)
    2e58:	183fde26 	beq	r3,zero,2dd4 <__alt_data_end+0xfffea734>
    2e5c:	95c8983a 	sll	r4,r18,r23
    2e60:	a0806217 	ldw	r2,392(r20)
    2e64:	a5800117 	ldw	r22,4(r20)
    2e68:	2084703a 	and	r2,r4,r2
    2e6c:	10000b26 	beq	r2,zero,2e9c <__call_exitprocs+0x14c>
    2e70:	a0806317 	ldw	r2,396(r20)
    2e74:	2088703a 	and	r4,r4,r2
    2e78:	20000c1e 	bne	r4,zero,2eac <__call_exitprocs+0x15c>
    2e7c:	89400017 	ldw	r5,0(r17)
    2e80:	d9000017 	ldw	r4,0(sp)
    2e84:	183ee83a 	callr	r3
    2e88:	a0800117 	ldw	r2,4(r20)
    2e8c:	15bfbf1e 	bne	r2,r22,2d8c <__alt_data_end+0xfffea6ec>
    2e90:	98800017 	ldw	r2,0(r19)
    2e94:	153fcf26 	beq	r2,r20,2dd4 <__alt_data_end+0xfffea734>
    2e98:	003fbc06 	br	2d8c <__alt_data_end+0xfffea6ec>
    2e9c:	183ee83a 	callr	r3
    2ea0:	003ff906 	br	2e88 <__alt_data_end+0xfffea7e8>
    2ea4:	a5c00115 	stw	r23,4(r20)
    2ea8:	003feb06 	br	2e58 <__alt_data_end+0xfffea7b8>
    2eac:	89000017 	ldw	r4,0(r17)
    2eb0:	183ee83a 	callr	r3
    2eb4:	003ff406 	br	2e88 <__alt_data_end+0xfffea7e8>
    2eb8:	a0800017 	ldw	r2,0(r20)
    2ebc:	a027883a 	mov	r19,r20
    2ec0:	1029883a 	mov	r20,r2
    2ec4:	003fb606 	br	2da0 <__alt_data_end+0xfffea700>
    2ec8:	0005883a 	mov	r2,zero
    2ecc:	003ffb06 	br	2ebc <__alt_data_end+0xfffea81c>

00002ed0 <__sflush_r>:
    2ed0:	2880030b 	ldhu	r2,12(r5)
    2ed4:	defffb04 	addi	sp,sp,-20
    2ed8:	dcc00315 	stw	r19,12(sp)
    2edc:	dc400115 	stw	r17,4(sp)
    2ee0:	dfc00415 	stw	ra,16(sp)
    2ee4:	dc800215 	stw	r18,8(sp)
    2ee8:	dc000015 	stw	r16,0(sp)
    2eec:	10c0020c 	andi	r3,r2,8
    2ef0:	2823883a 	mov	r17,r5
    2ef4:	2027883a 	mov	r19,r4
    2ef8:	1800311e 	bne	r3,zero,2fc0 <__sflush_r+0xf0>
    2efc:	28c00117 	ldw	r3,4(r5)
    2f00:	10820014 	ori	r2,r2,2048
    2f04:	2880030d 	sth	r2,12(r5)
    2f08:	00c04b0e 	bge	zero,r3,3038 <__sflush_r+0x168>
    2f0c:	8a000a17 	ldw	r8,40(r17)
    2f10:	40002326 	beq	r8,zero,2fa0 <__sflush_r+0xd0>
    2f14:	9c000017 	ldw	r16,0(r19)
    2f18:	10c4000c 	andi	r3,r2,4096
    2f1c:	98000015 	stw	zero,0(r19)
    2f20:	18004826 	beq	r3,zero,3044 <__sflush_r+0x174>
    2f24:	89801417 	ldw	r6,80(r17)
    2f28:	10c0010c 	andi	r3,r2,4
    2f2c:	18000626 	beq	r3,zero,2f48 <__sflush_r+0x78>
    2f30:	88c00117 	ldw	r3,4(r17)
    2f34:	88800c17 	ldw	r2,48(r17)
    2f38:	30cdc83a 	sub	r6,r6,r3
    2f3c:	10000226 	beq	r2,zero,2f48 <__sflush_r+0x78>
    2f40:	88800f17 	ldw	r2,60(r17)
    2f44:	308dc83a 	sub	r6,r6,r2
    2f48:	89400717 	ldw	r5,28(r17)
    2f4c:	000f883a 	mov	r7,zero
    2f50:	9809883a 	mov	r4,r19
    2f54:	403ee83a 	callr	r8
    2f58:	00ffffc4 	movi	r3,-1
    2f5c:	10c04426 	beq	r2,r3,3070 <__sflush_r+0x1a0>
    2f60:	88c0030b 	ldhu	r3,12(r17)
    2f64:	89000417 	ldw	r4,16(r17)
    2f68:	88000115 	stw	zero,4(r17)
    2f6c:	197dffcc 	andi	r5,r3,63487
    2f70:	8940030d 	sth	r5,12(r17)
    2f74:	89000015 	stw	r4,0(r17)
    2f78:	18c4000c 	andi	r3,r3,4096
    2f7c:	18002c1e 	bne	r3,zero,3030 <__sflush_r+0x160>
    2f80:	89400c17 	ldw	r5,48(r17)
    2f84:	9c000015 	stw	r16,0(r19)
    2f88:	28000526 	beq	r5,zero,2fa0 <__sflush_r+0xd0>
    2f8c:	88801004 	addi	r2,r17,64
    2f90:	28800226 	beq	r5,r2,2f9c <__sflush_r+0xcc>
    2f94:	9809883a 	mov	r4,r19
    2f98:	000364c0 	call	364c <_free_r>
    2f9c:	88000c15 	stw	zero,48(r17)
    2fa0:	0005883a 	mov	r2,zero
    2fa4:	dfc00417 	ldw	ra,16(sp)
    2fa8:	dcc00317 	ldw	r19,12(sp)
    2fac:	dc800217 	ldw	r18,8(sp)
    2fb0:	dc400117 	ldw	r17,4(sp)
    2fb4:	dc000017 	ldw	r16,0(sp)
    2fb8:	dec00504 	addi	sp,sp,20
    2fbc:	f800283a 	ret
    2fc0:	2c800417 	ldw	r18,16(r5)
    2fc4:	903ff626 	beq	r18,zero,2fa0 <__alt_data_end+0xfffea900>
    2fc8:	2c000017 	ldw	r16,0(r5)
    2fcc:	108000cc 	andi	r2,r2,3
    2fd0:	2c800015 	stw	r18,0(r5)
    2fd4:	84a1c83a 	sub	r16,r16,r18
    2fd8:	1000131e 	bne	r2,zero,3028 <__sflush_r+0x158>
    2fdc:	28800517 	ldw	r2,20(r5)
    2fe0:	88800215 	stw	r2,8(r17)
    2fe4:	04000316 	blt	zero,r16,2ff4 <__sflush_r+0x124>
    2fe8:	003fed06 	br	2fa0 <__alt_data_end+0xfffea900>
    2fec:	90a5883a 	add	r18,r18,r2
    2ff0:	043feb0e 	bge	zero,r16,2fa0 <__alt_data_end+0xfffea900>
    2ff4:	88800917 	ldw	r2,36(r17)
    2ff8:	89400717 	ldw	r5,28(r17)
    2ffc:	800f883a 	mov	r7,r16
    3000:	900d883a 	mov	r6,r18
    3004:	9809883a 	mov	r4,r19
    3008:	103ee83a 	callr	r2
    300c:	80a1c83a 	sub	r16,r16,r2
    3010:	00bff616 	blt	zero,r2,2fec <__alt_data_end+0xfffea94c>
    3014:	88c0030b 	ldhu	r3,12(r17)
    3018:	00bfffc4 	movi	r2,-1
    301c:	18c01014 	ori	r3,r3,64
    3020:	88c0030d 	sth	r3,12(r17)
    3024:	003fdf06 	br	2fa4 <__alt_data_end+0xfffea904>
    3028:	0005883a 	mov	r2,zero
    302c:	003fec06 	br	2fe0 <__alt_data_end+0xfffea940>
    3030:	88801415 	stw	r2,80(r17)
    3034:	003fd206 	br	2f80 <__alt_data_end+0xfffea8e0>
    3038:	28c00f17 	ldw	r3,60(r5)
    303c:	00ffb316 	blt	zero,r3,2f0c <__alt_data_end+0xfffea86c>
    3040:	003fd706 	br	2fa0 <__alt_data_end+0xfffea900>
    3044:	89400717 	ldw	r5,28(r17)
    3048:	000d883a 	mov	r6,zero
    304c:	01c00044 	movi	r7,1
    3050:	9809883a 	mov	r4,r19
    3054:	403ee83a 	callr	r8
    3058:	100d883a 	mov	r6,r2
    305c:	00bfffc4 	movi	r2,-1
    3060:	30801426 	beq	r6,r2,30b4 <__sflush_r+0x1e4>
    3064:	8880030b 	ldhu	r2,12(r17)
    3068:	8a000a17 	ldw	r8,40(r17)
    306c:	003fae06 	br	2f28 <__alt_data_end+0xfffea888>
    3070:	98c00017 	ldw	r3,0(r19)
    3074:	183fba26 	beq	r3,zero,2f60 <__alt_data_end+0xfffea8c0>
    3078:	01000744 	movi	r4,29
    307c:	19000626 	beq	r3,r4,3098 <__sflush_r+0x1c8>
    3080:	01000584 	movi	r4,22
    3084:	19000426 	beq	r3,r4,3098 <__sflush_r+0x1c8>
    3088:	88c0030b 	ldhu	r3,12(r17)
    308c:	18c01014 	ori	r3,r3,64
    3090:	88c0030d 	sth	r3,12(r17)
    3094:	003fc306 	br	2fa4 <__alt_data_end+0xfffea904>
    3098:	8880030b 	ldhu	r2,12(r17)
    309c:	88c00417 	ldw	r3,16(r17)
    30a0:	88000115 	stw	zero,4(r17)
    30a4:	10bdffcc 	andi	r2,r2,63487
    30a8:	8880030d 	sth	r2,12(r17)
    30ac:	88c00015 	stw	r3,0(r17)
    30b0:	003fb306 	br	2f80 <__alt_data_end+0xfffea8e0>
    30b4:	98800017 	ldw	r2,0(r19)
    30b8:	103fea26 	beq	r2,zero,3064 <__alt_data_end+0xfffea9c4>
    30bc:	00c00744 	movi	r3,29
    30c0:	10c00226 	beq	r2,r3,30cc <__sflush_r+0x1fc>
    30c4:	00c00584 	movi	r3,22
    30c8:	10c0031e 	bne	r2,r3,30d8 <__sflush_r+0x208>
    30cc:	9c000015 	stw	r16,0(r19)
    30d0:	0005883a 	mov	r2,zero
    30d4:	003fb306 	br	2fa4 <__alt_data_end+0xfffea904>
    30d8:	88c0030b 	ldhu	r3,12(r17)
    30dc:	3005883a 	mov	r2,r6
    30e0:	18c01014 	ori	r3,r3,64
    30e4:	88c0030d 	sth	r3,12(r17)
    30e8:	003fae06 	br	2fa4 <__alt_data_end+0xfffea904>

000030ec <_fflush_r>:
    30ec:	defffd04 	addi	sp,sp,-12
    30f0:	dc000115 	stw	r16,4(sp)
    30f4:	dfc00215 	stw	ra,8(sp)
    30f8:	2021883a 	mov	r16,r4
    30fc:	20000226 	beq	r4,zero,3108 <_fflush_r+0x1c>
    3100:	20800e17 	ldw	r2,56(r4)
    3104:	10000c26 	beq	r2,zero,3138 <_fflush_r+0x4c>
    3108:	2880030f 	ldh	r2,12(r5)
    310c:	1000051e 	bne	r2,zero,3124 <_fflush_r+0x38>
    3110:	0005883a 	mov	r2,zero
    3114:	dfc00217 	ldw	ra,8(sp)
    3118:	dc000117 	ldw	r16,4(sp)
    311c:	dec00304 	addi	sp,sp,12
    3120:	f800283a 	ret
    3124:	8009883a 	mov	r4,r16
    3128:	dfc00217 	ldw	ra,8(sp)
    312c:	dc000117 	ldw	r16,4(sp)
    3130:	dec00304 	addi	sp,sp,12
    3134:	0002ed01 	jmpi	2ed0 <__sflush_r>
    3138:	d9400015 	stw	r5,0(sp)
    313c:	00034d80 	call	34d8 <__sinit>
    3140:	d9400017 	ldw	r5,0(sp)
    3144:	003ff006 	br	3108 <__alt_data_end+0xfffeaa68>

00003148 <fflush>:
    3148:	20000526 	beq	r4,zero,3160 <fflush+0x18>
    314c:	00800034 	movhi	r2,0
    3150:	109be704 	addi	r2,r2,28572
    3154:	200b883a 	mov	r5,r4
    3158:	11000017 	ldw	r4,0(r2)
    315c:	00030ec1 	jmpi	30ec <_fflush_r>
    3160:	00800034 	movhi	r2,0
    3164:	109be604 	addi	r2,r2,28568
    3168:	11000017 	ldw	r4,0(r2)
    316c:	01400034 	movhi	r5,0
    3170:	294c3b04 	addi	r5,r5,12524
    3174:	0003a201 	jmpi	3a20 <_fwalk_reent>

00003178 <__fp_unlock>:
    3178:	0005883a 	mov	r2,zero
    317c:	f800283a 	ret

00003180 <_cleanup_r>:
    3180:	01400034 	movhi	r5,0
    3184:	29528204 	addi	r5,r5,18952
    3188:	0003a201 	jmpi	3a20 <_fwalk_reent>

0000318c <__sinit.part.1>:
    318c:	defff704 	addi	sp,sp,-36
    3190:	00c00034 	movhi	r3,0
    3194:	dfc00815 	stw	ra,32(sp)
    3198:	ddc00715 	stw	r23,28(sp)
    319c:	dd800615 	stw	r22,24(sp)
    31a0:	dd400515 	stw	r21,20(sp)
    31a4:	dd000415 	stw	r20,16(sp)
    31a8:	dcc00315 	stw	r19,12(sp)
    31ac:	dc800215 	stw	r18,8(sp)
    31b0:	dc400115 	stw	r17,4(sp)
    31b4:	dc000015 	stw	r16,0(sp)
    31b8:	18cc6004 	addi	r3,r3,12672
    31bc:	24000117 	ldw	r16,4(r4)
    31c0:	20c00f15 	stw	r3,60(r4)
    31c4:	2080bb04 	addi	r2,r4,748
    31c8:	00c000c4 	movi	r3,3
    31cc:	20c0b915 	stw	r3,740(r4)
    31d0:	2080ba15 	stw	r2,744(r4)
    31d4:	2000b815 	stw	zero,736(r4)
    31d8:	05c00204 	movi	r23,8
    31dc:	00800104 	movi	r2,4
    31e0:	2025883a 	mov	r18,r4
    31e4:	b80d883a 	mov	r6,r23
    31e8:	81001704 	addi	r4,r16,92
    31ec:	000b883a 	mov	r5,zero
    31f0:	80000015 	stw	zero,0(r16)
    31f4:	80000115 	stw	zero,4(r16)
    31f8:	80000215 	stw	zero,8(r16)
    31fc:	8080030d 	sth	r2,12(r16)
    3200:	80001915 	stw	zero,100(r16)
    3204:	8000038d 	sth	zero,14(r16)
    3208:	80000415 	stw	zero,16(r16)
    320c:	80000515 	stw	zero,20(r16)
    3210:	80000615 	stw	zero,24(r16)
    3214:	00044ac0 	call	44ac <memset>
    3218:	05800034 	movhi	r22,0
    321c:	94400217 	ldw	r17,8(r18)
    3220:	05400034 	movhi	r21,0
    3224:	05000034 	movhi	r20,0
    3228:	04c00034 	movhi	r19,0
    322c:	b5920604 	addi	r22,r22,18456
    3230:	ad521d04 	addi	r21,r21,18548
    3234:	a5123c04 	addi	r20,r20,18672
    3238:	9cd25304 	addi	r19,r19,18764
    323c:	85800815 	stw	r22,32(r16)
    3240:	85400915 	stw	r21,36(r16)
    3244:	85000a15 	stw	r20,40(r16)
    3248:	84c00b15 	stw	r19,44(r16)
    324c:	84000715 	stw	r16,28(r16)
    3250:	00800284 	movi	r2,10
    3254:	8880030d 	sth	r2,12(r17)
    3258:	00800044 	movi	r2,1
    325c:	b80d883a 	mov	r6,r23
    3260:	89001704 	addi	r4,r17,92
    3264:	000b883a 	mov	r5,zero
    3268:	88000015 	stw	zero,0(r17)
    326c:	88000115 	stw	zero,4(r17)
    3270:	88000215 	stw	zero,8(r17)
    3274:	88001915 	stw	zero,100(r17)
    3278:	8880038d 	sth	r2,14(r17)
    327c:	88000415 	stw	zero,16(r17)
    3280:	88000515 	stw	zero,20(r17)
    3284:	88000615 	stw	zero,24(r17)
    3288:	00044ac0 	call	44ac <memset>
    328c:	94000317 	ldw	r16,12(r18)
    3290:	00800484 	movi	r2,18
    3294:	8c400715 	stw	r17,28(r17)
    3298:	8d800815 	stw	r22,32(r17)
    329c:	8d400915 	stw	r21,36(r17)
    32a0:	8d000a15 	stw	r20,40(r17)
    32a4:	8cc00b15 	stw	r19,44(r17)
    32a8:	8080030d 	sth	r2,12(r16)
    32ac:	00800084 	movi	r2,2
    32b0:	80000015 	stw	zero,0(r16)
    32b4:	80000115 	stw	zero,4(r16)
    32b8:	80000215 	stw	zero,8(r16)
    32bc:	80001915 	stw	zero,100(r16)
    32c0:	8080038d 	sth	r2,14(r16)
    32c4:	80000415 	stw	zero,16(r16)
    32c8:	80000515 	stw	zero,20(r16)
    32cc:	80000615 	stw	zero,24(r16)
    32d0:	b80d883a 	mov	r6,r23
    32d4:	000b883a 	mov	r5,zero
    32d8:	81001704 	addi	r4,r16,92
    32dc:	00044ac0 	call	44ac <memset>
    32e0:	00800044 	movi	r2,1
    32e4:	84000715 	stw	r16,28(r16)
    32e8:	85800815 	stw	r22,32(r16)
    32ec:	85400915 	stw	r21,36(r16)
    32f0:	85000a15 	stw	r20,40(r16)
    32f4:	84c00b15 	stw	r19,44(r16)
    32f8:	90800e15 	stw	r2,56(r18)
    32fc:	dfc00817 	ldw	ra,32(sp)
    3300:	ddc00717 	ldw	r23,28(sp)
    3304:	dd800617 	ldw	r22,24(sp)
    3308:	dd400517 	ldw	r21,20(sp)
    330c:	dd000417 	ldw	r20,16(sp)
    3310:	dcc00317 	ldw	r19,12(sp)
    3314:	dc800217 	ldw	r18,8(sp)
    3318:	dc400117 	ldw	r17,4(sp)
    331c:	dc000017 	ldw	r16,0(sp)
    3320:	dec00904 	addi	sp,sp,36
    3324:	f800283a 	ret

00003328 <__fp_lock>:
    3328:	0005883a 	mov	r2,zero
    332c:	f800283a 	ret

00003330 <__sfmoreglue>:
    3330:	defffc04 	addi	sp,sp,-16
    3334:	dc800215 	stw	r18,8(sp)
    3338:	2825883a 	mov	r18,r5
    333c:	dc000015 	stw	r16,0(sp)
    3340:	01401a04 	movi	r5,104
    3344:	2021883a 	mov	r16,r4
    3348:	913fffc4 	addi	r4,r18,-1
    334c:	dfc00315 	stw	ra,12(sp)
    3350:	dc400115 	stw	r17,4(sp)
    3354:	0004e300 	call	4e30 <__mulsi3>
    3358:	8009883a 	mov	r4,r16
    335c:	11401d04 	addi	r5,r2,116
    3360:	1023883a 	mov	r17,r2
    3364:	0003ca00 	call	3ca0 <_malloc_r>
    3368:	1021883a 	mov	r16,r2
    336c:	10000726 	beq	r2,zero,338c <__sfmoreglue+0x5c>
    3370:	11000304 	addi	r4,r2,12
    3374:	10000015 	stw	zero,0(r2)
    3378:	14800115 	stw	r18,4(r2)
    337c:	11000215 	stw	r4,8(r2)
    3380:	89801a04 	addi	r6,r17,104
    3384:	000b883a 	mov	r5,zero
    3388:	00044ac0 	call	44ac <memset>
    338c:	8005883a 	mov	r2,r16
    3390:	dfc00317 	ldw	ra,12(sp)
    3394:	dc800217 	ldw	r18,8(sp)
    3398:	dc400117 	ldw	r17,4(sp)
    339c:	dc000017 	ldw	r16,0(sp)
    33a0:	dec00404 	addi	sp,sp,16
    33a4:	f800283a 	ret

000033a8 <__sfp>:
    33a8:	defffb04 	addi	sp,sp,-20
    33ac:	dc000015 	stw	r16,0(sp)
    33b0:	04000034 	movhi	r16,0
    33b4:	841be604 	addi	r16,r16,28568
    33b8:	dcc00315 	stw	r19,12(sp)
    33bc:	2027883a 	mov	r19,r4
    33c0:	81000017 	ldw	r4,0(r16)
    33c4:	dfc00415 	stw	ra,16(sp)
    33c8:	dc800215 	stw	r18,8(sp)
    33cc:	20800e17 	ldw	r2,56(r4)
    33d0:	dc400115 	stw	r17,4(sp)
    33d4:	1000021e 	bne	r2,zero,33e0 <__sfp+0x38>
    33d8:	000318c0 	call	318c <__sinit.part.1>
    33dc:	81000017 	ldw	r4,0(r16)
    33e0:	2480b804 	addi	r18,r4,736
    33e4:	047fffc4 	movi	r17,-1
    33e8:	91000117 	ldw	r4,4(r18)
    33ec:	94000217 	ldw	r16,8(r18)
    33f0:	213fffc4 	addi	r4,r4,-1
    33f4:	20000a16 	blt	r4,zero,3420 <__sfp+0x78>
    33f8:	8080030f 	ldh	r2,12(r16)
    33fc:	10000c26 	beq	r2,zero,3430 <__sfp+0x88>
    3400:	80c01d04 	addi	r3,r16,116
    3404:	00000206 	br	3410 <__sfp+0x68>
    3408:	18bfe60f 	ldh	r2,-104(r3)
    340c:	10000826 	beq	r2,zero,3430 <__sfp+0x88>
    3410:	213fffc4 	addi	r4,r4,-1
    3414:	1c3ffd04 	addi	r16,r3,-12
    3418:	18c01a04 	addi	r3,r3,104
    341c:	247ffa1e 	bne	r4,r17,3408 <__alt_data_end+0xfffead68>
    3420:	90800017 	ldw	r2,0(r18)
    3424:	10001d26 	beq	r2,zero,349c <__sfp+0xf4>
    3428:	1025883a 	mov	r18,r2
    342c:	003fee06 	br	33e8 <__alt_data_end+0xfffead48>
    3430:	00bfffc4 	movi	r2,-1
    3434:	8080038d 	sth	r2,14(r16)
    3438:	00800044 	movi	r2,1
    343c:	8080030d 	sth	r2,12(r16)
    3440:	80001915 	stw	zero,100(r16)
    3444:	80000015 	stw	zero,0(r16)
    3448:	80000215 	stw	zero,8(r16)
    344c:	80000115 	stw	zero,4(r16)
    3450:	80000415 	stw	zero,16(r16)
    3454:	80000515 	stw	zero,20(r16)
    3458:	80000615 	stw	zero,24(r16)
    345c:	01800204 	movi	r6,8
    3460:	000b883a 	mov	r5,zero
    3464:	81001704 	addi	r4,r16,92
    3468:	00044ac0 	call	44ac <memset>
    346c:	8005883a 	mov	r2,r16
    3470:	80000c15 	stw	zero,48(r16)
    3474:	80000d15 	stw	zero,52(r16)
    3478:	80001115 	stw	zero,68(r16)
    347c:	80001215 	stw	zero,72(r16)
    3480:	dfc00417 	ldw	ra,16(sp)
    3484:	dcc00317 	ldw	r19,12(sp)
    3488:	dc800217 	ldw	r18,8(sp)
    348c:	dc400117 	ldw	r17,4(sp)
    3490:	dc000017 	ldw	r16,0(sp)
    3494:	dec00504 	addi	sp,sp,20
    3498:	f800283a 	ret
    349c:	01400104 	movi	r5,4
    34a0:	9809883a 	mov	r4,r19
    34a4:	00033300 	call	3330 <__sfmoreglue>
    34a8:	90800015 	stw	r2,0(r18)
    34ac:	103fde1e 	bne	r2,zero,3428 <__alt_data_end+0xfffead88>
    34b0:	00800304 	movi	r2,12
    34b4:	98800015 	stw	r2,0(r19)
    34b8:	0005883a 	mov	r2,zero
    34bc:	003ff006 	br	3480 <__alt_data_end+0xfffeade0>

000034c0 <_cleanup>:
    34c0:	00800034 	movhi	r2,0
    34c4:	109be604 	addi	r2,r2,28568
    34c8:	11000017 	ldw	r4,0(r2)
    34cc:	01400034 	movhi	r5,0
    34d0:	29528204 	addi	r5,r5,18952
    34d4:	0003a201 	jmpi	3a20 <_fwalk_reent>

000034d8 <__sinit>:
    34d8:	20800e17 	ldw	r2,56(r4)
    34dc:	10000126 	beq	r2,zero,34e4 <__sinit+0xc>
    34e0:	f800283a 	ret
    34e4:	000318c1 	jmpi	318c <__sinit.part.1>

000034e8 <__sfp_lock_acquire>:
    34e8:	f800283a 	ret

000034ec <__sfp_lock_release>:
    34ec:	f800283a 	ret

000034f0 <__sinit_lock_acquire>:
    34f0:	f800283a 	ret

000034f4 <__sinit_lock_release>:
    34f4:	f800283a 	ret

000034f8 <__fp_lock_all>:
    34f8:	00800034 	movhi	r2,0
    34fc:	109be704 	addi	r2,r2,28572
    3500:	11000017 	ldw	r4,0(r2)
    3504:	01400034 	movhi	r5,0
    3508:	294cca04 	addi	r5,r5,13096
    350c:	000395c1 	jmpi	395c <_fwalk>

00003510 <__fp_unlock_all>:
    3510:	00800034 	movhi	r2,0
    3514:	109be704 	addi	r2,r2,28572
    3518:	11000017 	ldw	r4,0(r2)
    351c:	01400034 	movhi	r5,0
    3520:	294c5e04 	addi	r5,r5,12664
    3524:	000395c1 	jmpi	395c <_fwalk>

00003528 <_malloc_trim_r>:
    3528:	defffb04 	addi	sp,sp,-20
    352c:	dcc00315 	stw	r19,12(sp)
    3530:	04c00034 	movhi	r19,0
    3534:	dc800215 	stw	r18,8(sp)
    3538:	dc400115 	stw	r17,4(sp)
    353c:	dc000015 	stw	r16,0(sp)
    3540:	dfc00415 	stw	ra,16(sp)
    3544:	2821883a 	mov	r16,r5
    3548:	9cdadb04 	addi	r19,r19,27500
    354c:	2025883a 	mov	r18,r4
    3550:	00051800 	call	5180 <__malloc_lock>
    3554:	98800217 	ldw	r2,8(r19)
    3558:	14400117 	ldw	r17,4(r2)
    355c:	00bfff04 	movi	r2,-4
    3560:	88a2703a 	and	r17,r17,r2
    3564:	8c21c83a 	sub	r16,r17,r16
    3568:	8403fbc4 	addi	r16,r16,4079
    356c:	8020d33a 	srli	r16,r16,12
    3570:	0083ffc4 	movi	r2,4095
    3574:	843fffc4 	addi	r16,r16,-1
    3578:	8020933a 	slli	r16,r16,12
    357c:	1400060e 	bge	r2,r16,3598 <_malloc_trim_r+0x70>
    3580:	000b883a 	mov	r5,zero
    3584:	9009883a 	mov	r4,r18
    3588:	00047c40 	call	47c4 <_sbrk_r>
    358c:	98c00217 	ldw	r3,8(r19)
    3590:	1c47883a 	add	r3,r3,r17
    3594:	10c00a26 	beq	r2,r3,35c0 <_malloc_trim_r+0x98>
    3598:	9009883a 	mov	r4,r18
    359c:	00051a40 	call	51a4 <__malloc_unlock>
    35a0:	0005883a 	mov	r2,zero
    35a4:	dfc00417 	ldw	ra,16(sp)
    35a8:	dcc00317 	ldw	r19,12(sp)
    35ac:	dc800217 	ldw	r18,8(sp)
    35b0:	dc400117 	ldw	r17,4(sp)
    35b4:	dc000017 	ldw	r16,0(sp)
    35b8:	dec00504 	addi	sp,sp,20
    35bc:	f800283a 	ret
    35c0:	040bc83a 	sub	r5,zero,r16
    35c4:	9009883a 	mov	r4,r18
    35c8:	00047c40 	call	47c4 <_sbrk_r>
    35cc:	00ffffc4 	movi	r3,-1
    35d0:	10c00d26 	beq	r2,r3,3608 <_malloc_trim_r+0xe0>
    35d4:	00c00074 	movhi	r3,1
    35d8:	18e29104 	addi	r3,r3,-30140
    35dc:	18800017 	ldw	r2,0(r3)
    35e0:	99000217 	ldw	r4,8(r19)
    35e4:	8c23c83a 	sub	r17,r17,r16
    35e8:	8c400054 	ori	r17,r17,1
    35ec:	1421c83a 	sub	r16,r2,r16
    35f0:	24400115 	stw	r17,4(r4)
    35f4:	9009883a 	mov	r4,r18
    35f8:	1c000015 	stw	r16,0(r3)
    35fc:	00051a40 	call	51a4 <__malloc_unlock>
    3600:	00800044 	movi	r2,1
    3604:	003fe706 	br	35a4 <__alt_data_end+0xfffeaf04>
    3608:	000b883a 	mov	r5,zero
    360c:	9009883a 	mov	r4,r18
    3610:	00047c40 	call	47c4 <_sbrk_r>
    3614:	99000217 	ldw	r4,8(r19)
    3618:	014003c4 	movi	r5,15
    361c:	1107c83a 	sub	r3,r2,r4
    3620:	28ffdd0e 	bge	r5,r3,3598 <__alt_data_end+0xfffeaef8>
    3624:	01400034 	movhi	r5,0
    3628:	295be804 	addi	r5,r5,28576
    362c:	29400017 	ldw	r5,0(r5)
    3630:	18c00054 	ori	r3,r3,1
    3634:	20c00115 	stw	r3,4(r4)
    3638:	00c00074 	movhi	r3,1
    363c:	1145c83a 	sub	r2,r2,r5
    3640:	18e29104 	addi	r3,r3,-30140
    3644:	18800015 	stw	r2,0(r3)
    3648:	003fd306 	br	3598 <__alt_data_end+0xfffeaef8>

0000364c <_free_r>:
    364c:	28004126 	beq	r5,zero,3754 <_free_r+0x108>
    3650:	defffd04 	addi	sp,sp,-12
    3654:	dc400115 	stw	r17,4(sp)
    3658:	dc000015 	stw	r16,0(sp)
    365c:	2023883a 	mov	r17,r4
    3660:	2821883a 	mov	r16,r5
    3664:	dfc00215 	stw	ra,8(sp)
    3668:	00051800 	call	5180 <__malloc_lock>
    366c:	81ffff17 	ldw	r7,-4(r16)
    3670:	00bfff84 	movi	r2,-2
    3674:	01000034 	movhi	r4,0
    3678:	81bffe04 	addi	r6,r16,-8
    367c:	3884703a 	and	r2,r7,r2
    3680:	211adb04 	addi	r4,r4,27500
    3684:	308b883a 	add	r5,r6,r2
    3688:	2a400117 	ldw	r9,4(r5)
    368c:	22000217 	ldw	r8,8(r4)
    3690:	00ffff04 	movi	r3,-4
    3694:	48c6703a 	and	r3,r9,r3
    3698:	2a005726 	beq	r5,r8,37f8 <_free_r+0x1ac>
    369c:	28c00115 	stw	r3,4(r5)
    36a0:	39c0004c 	andi	r7,r7,1
    36a4:	3800091e 	bne	r7,zero,36cc <_free_r+0x80>
    36a8:	823ffe17 	ldw	r8,-8(r16)
    36ac:	22400204 	addi	r9,r4,8
    36b0:	320dc83a 	sub	r6,r6,r8
    36b4:	31c00217 	ldw	r7,8(r6)
    36b8:	1205883a 	add	r2,r2,r8
    36bc:	3a406526 	beq	r7,r9,3854 <_free_r+0x208>
    36c0:	32000317 	ldw	r8,12(r6)
    36c4:	3a000315 	stw	r8,12(r7)
    36c8:	41c00215 	stw	r7,8(r8)
    36cc:	28cf883a 	add	r7,r5,r3
    36d0:	39c00117 	ldw	r7,4(r7)
    36d4:	39c0004c 	andi	r7,r7,1
    36d8:	38003a26 	beq	r7,zero,37c4 <_free_r+0x178>
    36dc:	10c00054 	ori	r3,r2,1
    36e0:	30c00115 	stw	r3,4(r6)
    36e4:	3087883a 	add	r3,r6,r2
    36e8:	18800015 	stw	r2,0(r3)
    36ec:	00c07fc4 	movi	r3,511
    36f0:	18801936 	bltu	r3,r2,3758 <_free_r+0x10c>
    36f4:	1004d0fa 	srli	r2,r2,3
    36f8:	01c00044 	movi	r7,1
    36fc:	21400117 	ldw	r5,4(r4)
    3700:	10c00044 	addi	r3,r2,1
    3704:	18c7883a 	add	r3,r3,r3
    3708:	1005d0ba 	srai	r2,r2,2
    370c:	18c7883a 	add	r3,r3,r3
    3710:	18c7883a 	add	r3,r3,r3
    3714:	1907883a 	add	r3,r3,r4
    3718:	3884983a 	sll	r2,r7,r2
    371c:	19c00017 	ldw	r7,0(r3)
    3720:	1a3ffe04 	addi	r8,r3,-8
    3724:	1144b03a 	or	r2,r2,r5
    3728:	32000315 	stw	r8,12(r6)
    372c:	31c00215 	stw	r7,8(r6)
    3730:	20800115 	stw	r2,4(r4)
    3734:	19800015 	stw	r6,0(r3)
    3738:	39800315 	stw	r6,12(r7)
    373c:	8809883a 	mov	r4,r17
    3740:	dfc00217 	ldw	ra,8(sp)
    3744:	dc400117 	ldw	r17,4(sp)
    3748:	dc000017 	ldw	r16,0(sp)
    374c:	dec00304 	addi	sp,sp,12
    3750:	00051a41 	jmpi	51a4 <__malloc_unlock>
    3754:	f800283a 	ret
    3758:	100ad27a 	srli	r5,r2,9
    375c:	00c00104 	movi	r3,4
    3760:	19404a36 	bltu	r3,r5,388c <_free_r+0x240>
    3764:	100ad1ba 	srli	r5,r2,6
    3768:	28c00e44 	addi	r3,r5,57
    376c:	18c7883a 	add	r3,r3,r3
    3770:	29400e04 	addi	r5,r5,56
    3774:	18c7883a 	add	r3,r3,r3
    3778:	18c7883a 	add	r3,r3,r3
    377c:	1909883a 	add	r4,r3,r4
    3780:	20c00017 	ldw	r3,0(r4)
    3784:	01c00034 	movhi	r7,0
    3788:	213ffe04 	addi	r4,r4,-8
    378c:	39dadb04 	addi	r7,r7,27500
    3790:	20c04426 	beq	r4,r3,38a4 <_free_r+0x258>
    3794:	01ffff04 	movi	r7,-4
    3798:	19400117 	ldw	r5,4(r3)
    379c:	29ca703a 	and	r5,r5,r7
    37a0:	1140022e 	bgeu	r2,r5,37ac <_free_r+0x160>
    37a4:	18c00217 	ldw	r3,8(r3)
    37a8:	20fffb1e 	bne	r4,r3,3798 <__alt_data_end+0xfffeb0f8>
    37ac:	19000317 	ldw	r4,12(r3)
    37b0:	31000315 	stw	r4,12(r6)
    37b4:	30c00215 	stw	r3,8(r6)
    37b8:	21800215 	stw	r6,8(r4)
    37bc:	19800315 	stw	r6,12(r3)
    37c0:	003fde06 	br	373c <__alt_data_end+0xfffeb09c>
    37c4:	29c00217 	ldw	r7,8(r5)
    37c8:	10c5883a 	add	r2,r2,r3
    37cc:	00c00034 	movhi	r3,0
    37d0:	18dadd04 	addi	r3,r3,27508
    37d4:	38c03b26 	beq	r7,r3,38c4 <_free_r+0x278>
    37d8:	2a000317 	ldw	r8,12(r5)
    37dc:	11400054 	ori	r5,r2,1
    37e0:	3087883a 	add	r3,r6,r2
    37e4:	3a000315 	stw	r8,12(r7)
    37e8:	41c00215 	stw	r7,8(r8)
    37ec:	31400115 	stw	r5,4(r6)
    37f0:	18800015 	stw	r2,0(r3)
    37f4:	003fbd06 	br	36ec <__alt_data_end+0xfffeb04c>
    37f8:	39c0004c 	andi	r7,r7,1
    37fc:	10c5883a 	add	r2,r2,r3
    3800:	3800071e 	bne	r7,zero,3820 <_free_r+0x1d4>
    3804:	81fffe17 	ldw	r7,-8(r16)
    3808:	31cdc83a 	sub	r6,r6,r7
    380c:	30c00317 	ldw	r3,12(r6)
    3810:	31400217 	ldw	r5,8(r6)
    3814:	11c5883a 	add	r2,r2,r7
    3818:	28c00315 	stw	r3,12(r5)
    381c:	19400215 	stw	r5,8(r3)
    3820:	10c00054 	ori	r3,r2,1
    3824:	30c00115 	stw	r3,4(r6)
    3828:	00c00034 	movhi	r3,0
    382c:	18dbe904 	addi	r3,r3,28580
    3830:	18c00017 	ldw	r3,0(r3)
    3834:	21800215 	stw	r6,8(r4)
    3838:	10ffc036 	bltu	r2,r3,373c <__alt_data_end+0xfffeb09c>
    383c:	00800074 	movhi	r2,1
    3840:	10a29004 	addi	r2,r2,-30144
    3844:	11400017 	ldw	r5,0(r2)
    3848:	8809883a 	mov	r4,r17
    384c:	00035280 	call	3528 <_malloc_trim_r>
    3850:	003fba06 	br	373c <__alt_data_end+0xfffeb09c>
    3854:	28c9883a 	add	r4,r5,r3
    3858:	21000117 	ldw	r4,4(r4)
    385c:	2100004c 	andi	r4,r4,1
    3860:	2000391e 	bne	r4,zero,3948 <_free_r+0x2fc>
    3864:	29c00217 	ldw	r7,8(r5)
    3868:	29000317 	ldw	r4,12(r5)
    386c:	1885883a 	add	r2,r3,r2
    3870:	10c00054 	ori	r3,r2,1
    3874:	39000315 	stw	r4,12(r7)
    3878:	21c00215 	stw	r7,8(r4)
    387c:	30c00115 	stw	r3,4(r6)
    3880:	308d883a 	add	r6,r6,r2
    3884:	30800015 	stw	r2,0(r6)
    3888:	003fac06 	br	373c <__alt_data_end+0xfffeb09c>
    388c:	00c00504 	movi	r3,20
    3890:	19401536 	bltu	r3,r5,38e8 <_free_r+0x29c>
    3894:	28c01704 	addi	r3,r5,92
    3898:	18c7883a 	add	r3,r3,r3
    389c:	294016c4 	addi	r5,r5,91
    38a0:	003fb406 	br	3774 <__alt_data_end+0xfffeb0d4>
    38a4:	280bd0ba 	srai	r5,r5,2
    38a8:	00c00044 	movi	r3,1
    38ac:	38800117 	ldw	r2,4(r7)
    38b0:	194a983a 	sll	r5,r3,r5
    38b4:	2007883a 	mov	r3,r4
    38b8:	2884b03a 	or	r2,r5,r2
    38bc:	38800115 	stw	r2,4(r7)
    38c0:	003fbb06 	br	37b0 <__alt_data_end+0xfffeb110>
    38c4:	21800515 	stw	r6,20(r4)
    38c8:	21800415 	stw	r6,16(r4)
    38cc:	10c00054 	ori	r3,r2,1
    38d0:	31c00315 	stw	r7,12(r6)
    38d4:	31c00215 	stw	r7,8(r6)
    38d8:	30c00115 	stw	r3,4(r6)
    38dc:	308d883a 	add	r6,r6,r2
    38e0:	30800015 	stw	r2,0(r6)
    38e4:	003f9506 	br	373c <__alt_data_end+0xfffeb09c>
    38e8:	00c01504 	movi	r3,84
    38ec:	19400536 	bltu	r3,r5,3904 <_free_r+0x2b8>
    38f0:	100ad33a 	srli	r5,r2,12
    38f4:	28c01bc4 	addi	r3,r5,111
    38f8:	18c7883a 	add	r3,r3,r3
    38fc:	29401b84 	addi	r5,r5,110
    3900:	003f9c06 	br	3774 <__alt_data_end+0xfffeb0d4>
    3904:	00c05504 	movi	r3,340
    3908:	19400536 	bltu	r3,r5,3920 <_free_r+0x2d4>
    390c:	100ad3fa 	srli	r5,r2,15
    3910:	28c01e04 	addi	r3,r5,120
    3914:	18c7883a 	add	r3,r3,r3
    3918:	29401dc4 	addi	r5,r5,119
    391c:	003f9506 	br	3774 <__alt_data_end+0xfffeb0d4>
    3920:	00c15504 	movi	r3,1364
    3924:	19400536 	bltu	r3,r5,393c <_free_r+0x2f0>
    3928:	100ad4ba 	srli	r5,r2,18
    392c:	28c01f44 	addi	r3,r5,125
    3930:	18c7883a 	add	r3,r3,r3
    3934:	29401f04 	addi	r5,r5,124
    3938:	003f8e06 	br	3774 <__alt_data_end+0xfffeb0d4>
    393c:	00c03f84 	movi	r3,254
    3940:	01401f84 	movi	r5,126
    3944:	003f8b06 	br	3774 <__alt_data_end+0xfffeb0d4>
    3948:	10c00054 	ori	r3,r2,1
    394c:	30c00115 	stw	r3,4(r6)
    3950:	308d883a 	add	r6,r6,r2
    3954:	30800015 	stw	r2,0(r6)
    3958:	003f7806 	br	373c <__alt_data_end+0xfffeb09c>

0000395c <_fwalk>:
    395c:	defff704 	addi	sp,sp,-36
    3960:	dd000415 	stw	r20,16(sp)
    3964:	dfc00815 	stw	ra,32(sp)
    3968:	ddc00715 	stw	r23,28(sp)
    396c:	dd800615 	stw	r22,24(sp)
    3970:	dd400515 	stw	r21,20(sp)
    3974:	dcc00315 	stw	r19,12(sp)
    3978:	dc800215 	stw	r18,8(sp)
    397c:	dc400115 	stw	r17,4(sp)
    3980:	dc000015 	stw	r16,0(sp)
    3984:	2500b804 	addi	r20,r4,736
    3988:	a0002326 	beq	r20,zero,3a18 <_fwalk+0xbc>
    398c:	282b883a 	mov	r21,r5
    3990:	002f883a 	mov	r23,zero
    3994:	05800044 	movi	r22,1
    3998:	04ffffc4 	movi	r19,-1
    399c:	a4400117 	ldw	r17,4(r20)
    39a0:	a4800217 	ldw	r18,8(r20)
    39a4:	8c7fffc4 	addi	r17,r17,-1
    39a8:	88000d16 	blt	r17,zero,39e0 <_fwalk+0x84>
    39ac:	94000304 	addi	r16,r18,12
    39b0:	94800384 	addi	r18,r18,14
    39b4:	8080000b 	ldhu	r2,0(r16)
    39b8:	8c7fffc4 	addi	r17,r17,-1
    39bc:	813ffd04 	addi	r4,r16,-12
    39c0:	b080042e 	bgeu	r22,r2,39d4 <_fwalk+0x78>
    39c4:	9080000f 	ldh	r2,0(r18)
    39c8:	14c00226 	beq	r2,r19,39d4 <_fwalk+0x78>
    39cc:	a83ee83a 	callr	r21
    39d0:	b8aeb03a 	or	r23,r23,r2
    39d4:	84001a04 	addi	r16,r16,104
    39d8:	94801a04 	addi	r18,r18,104
    39dc:	8cfff51e 	bne	r17,r19,39b4 <__alt_data_end+0xfffeb314>
    39e0:	a5000017 	ldw	r20,0(r20)
    39e4:	a03fed1e 	bne	r20,zero,399c <__alt_data_end+0xfffeb2fc>
    39e8:	b805883a 	mov	r2,r23
    39ec:	dfc00817 	ldw	ra,32(sp)
    39f0:	ddc00717 	ldw	r23,28(sp)
    39f4:	dd800617 	ldw	r22,24(sp)
    39f8:	dd400517 	ldw	r21,20(sp)
    39fc:	dd000417 	ldw	r20,16(sp)
    3a00:	dcc00317 	ldw	r19,12(sp)
    3a04:	dc800217 	ldw	r18,8(sp)
    3a08:	dc400117 	ldw	r17,4(sp)
    3a0c:	dc000017 	ldw	r16,0(sp)
    3a10:	dec00904 	addi	sp,sp,36
    3a14:	f800283a 	ret
    3a18:	002f883a 	mov	r23,zero
    3a1c:	003ff206 	br	39e8 <__alt_data_end+0xfffeb348>

00003a20 <_fwalk_reent>:
    3a20:	defff704 	addi	sp,sp,-36
    3a24:	dd000415 	stw	r20,16(sp)
    3a28:	dfc00815 	stw	ra,32(sp)
    3a2c:	ddc00715 	stw	r23,28(sp)
    3a30:	dd800615 	stw	r22,24(sp)
    3a34:	dd400515 	stw	r21,20(sp)
    3a38:	dcc00315 	stw	r19,12(sp)
    3a3c:	dc800215 	stw	r18,8(sp)
    3a40:	dc400115 	stw	r17,4(sp)
    3a44:	dc000015 	stw	r16,0(sp)
    3a48:	2500b804 	addi	r20,r4,736
    3a4c:	a0002326 	beq	r20,zero,3adc <_fwalk_reent+0xbc>
    3a50:	282b883a 	mov	r21,r5
    3a54:	2027883a 	mov	r19,r4
    3a58:	002f883a 	mov	r23,zero
    3a5c:	05800044 	movi	r22,1
    3a60:	04bfffc4 	movi	r18,-1
    3a64:	a4400117 	ldw	r17,4(r20)
    3a68:	a4000217 	ldw	r16,8(r20)
    3a6c:	8c7fffc4 	addi	r17,r17,-1
    3a70:	88000c16 	blt	r17,zero,3aa4 <_fwalk_reent+0x84>
    3a74:	84000304 	addi	r16,r16,12
    3a78:	8080000b 	ldhu	r2,0(r16)
    3a7c:	8c7fffc4 	addi	r17,r17,-1
    3a80:	817ffd04 	addi	r5,r16,-12
    3a84:	b080052e 	bgeu	r22,r2,3a9c <_fwalk_reent+0x7c>
    3a88:	8080008f 	ldh	r2,2(r16)
    3a8c:	9809883a 	mov	r4,r19
    3a90:	14800226 	beq	r2,r18,3a9c <_fwalk_reent+0x7c>
    3a94:	a83ee83a 	callr	r21
    3a98:	b8aeb03a 	or	r23,r23,r2
    3a9c:	84001a04 	addi	r16,r16,104
    3aa0:	8cbff51e 	bne	r17,r18,3a78 <__alt_data_end+0xfffeb3d8>
    3aa4:	a5000017 	ldw	r20,0(r20)
    3aa8:	a03fee1e 	bne	r20,zero,3a64 <__alt_data_end+0xfffeb3c4>
    3aac:	b805883a 	mov	r2,r23
    3ab0:	dfc00817 	ldw	ra,32(sp)
    3ab4:	ddc00717 	ldw	r23,28(sp)
    3ab8:	dd800617 	ldw	r22,24(sp)
    3abc:	dd400517 	ldw	r21,20(sp)
    3ac0:	dd000417 	ldw	r20,16(sp)
    3ac4:	dcc00317 	ldw	r19,12(sp)
    3ac8:	dc800217 	ldw	r18,8(sp)
    3acc:	dc400117 	ldw	r17,4(sp)
    3ad0:	dc000017 	ldw	r16,0(sp)
    3ad4:	dec00904 	addi	sp,sp,36
    3ad8:	f800283a 	ret
    3adc:	002f883a 	mov	r23,zero
    3ae0:	003ff206 	br	3aac <__alt_data_end+0xfffeb40c>

00003ae4 <__smakebuf_r>:
    3ae4:	2880030b 	ldhu	r2,12(r5)
    3ae8:	10c0008c 	andi	r3,r2,2
    3aec:	1800411e 	bne	r3,zero,3bf4 <__smakebuf_r+0x110>
    3af0:	deffec04 	addi	sp,sp,-80
    3af4:	dc000f15 	stw	r16,60(sp)
    3af8:	2821883a 	mov	r16,r5
    3afc:	2940038f 	ldh	r5,14(r5)
    3b00:	dc401015 	stw	r17,64(sp)
    3b04:	dfc01315 	stw	ra,76(sp)
    3b08:	dcc01215 	stw	r19,72(sp)
    3b0c:	dc801115 	stw	r18,68(sp)
    3b10:	2023883a 	mov	r17,r4
    3b14:	28001c16 	blt	r5,zero,3b88 <__smakebuf_r+0xa4>
    3b18:	d80d883a 	mov	r6,sp
    3b1c:	0004b0c0 	call	4b0c <_fstat_r>
    3b20:	10001816 	blt	r2,zero,3b84 <__smakebuf_r+0xa0>
    3b24:	d8800117 	ldw	r2,4(sp)
    3b28:	00e00014 	movui	r3,32768
    3b2c:	10bc000c 	andi	r2,r2,61440
    3b30:	14c80020 	cmpeqi	r19,r2,8192
    3b34:	10c03726 	beq	r2,r3,3c14 <__smakebuf_r+0x130>
    3b38:	80c0030b 	ldhu	r3,12(r16)
    3b3c:	18c20014 	ori	r3,r3,2048
    3b40:	80c0030d 	sth	r3,12(r16)
    3b44:	00c80004 	movi	r3,8192
    3b48:	10c0521e 	bne	r2,r3,3c94 <__smakebuf_r+0x1b0>
    3b4c:	8140038f 	ldh	r5,14(r16)
    3b50:	8809883a 	mov	r4,r17
    3b54:	0004b680 	call	4b68 <_isatty_r>
    3b58:	10004c26 	beq	r2,zero,3c8c <__smakebuf_r+0x1a8>
    3b5c:	8080030b 	ldhu	r2,12(r16)
    3b60:	80c010c4 	addi	r3,r16,67
    3b64:	80c00015 	stw	r3,0(r16)
    3b68:	10800054 	ori	r2,r2,1
    3b6c:	8080030d 	sth	r2,12(r16)
    3b70:	00800044 	movi	r2,1
    3b74:	80c00415 	stw	r3,16(r16)
    3b78:	80800515 	stw	r2,20(r16)
    3b7c:	04810004 	movi	r18,1024
    3b80:	00000706 	br	3ba0 <__smakebuf_r+0xbc>
    3b84:	8080030b 	ldhu	r2,12(r16)
    3b88:	10c0200c 	andi	r3,r2,128
    3b8c:	18001f1e 	bne	r3,zero,3c0c <__smakebuf_r+0x128>
    3b90:	04810004 	movi	r18,1024
    3b94:	10820014 	ori	r2,r2,2048
    3b98:	8080030d 	sth	r2,12(r16)
    3b9c:	0027883a 	mov	r19,zero
    3ba0:	900b883a 	mov	r5,r18
    3ba4:	8809883a 	mov	r4,r17
    3ba8:	0003ca00 	call	3ca0 <_malloc_r>
    3bac:	10002c26 	beq	r2,zero,3c60 <__smakebuf_r+0x17c>
    3bb0:	80c0030b 	ldhu	r3,12(r16)
    3bb4:	01000034 	movhi	r4,0
    3bb8:	210c6004 	addi	r4,r4,12672
    3bbc:	89000f15 	stw	r4,60(r17)
    3bc0:	18c02014 	ori	r3,r3,128
    3bc4:	80c0030d 	sth	r3,12(r16)
    3bc8:	80800015 	stw	r2,0(r16)
    3bcc:	80800415 	stw	r2,16(r16)
    3bd0:	84800515 	stw	r18,20(r16)
    3bd4:	98001a1e 	bne	r19,zero,3c40 <__smakebuf_r+0x15c>
    3bd8:	dfc01317 	ldw	ra,76(sp)
    3bdc:	dcc01217 	ldw	r19,72(sp)
    3be0:	dc801117 	ldw	r18,68(sp)
    3be4:	dc401017 	ldw	r17,64(sp)
    3be8:	dc000f17 	ldw	r16,60(sp)
    3bec:	dec01404 	addi	sp,sp,80
    3bf0:	f800283a 	ret
    3bf4:	288010c4 	addi	r2,r5,67
    3bf8:	28800015 	stw	r2,0(r5)
    3bfc:	28800415 	stw	r2,16(r5)
    3c00:	00800044 	movi	r2,1
    3c04:	28800515 	stw	r2,20(r5)
    3c08:	f800283a 	ret
    3c0c:	04801004 	movi	r18,64
    3c10:	003fe006 	br	3b94 <__alt_data_end+0xfffeb4f4>
    3c14:	81000a17 	ldw	r4,40(r16)
    3c18:	00c00034 	movhi	r3,0
    3c1c:	18d23c04 	addi	r3,r3,18672
    3c20:	20ffc51e 	bne	r4,r3,3b38 <__alt_data_end+0xfffeb498>
    3c24:	8080030b 	ldhu	r2,12(r16)
    3c28:	04810004 	movi	r18,1024
    3c2c:	84801315 	stw	r18,76(r16)
    3c30:	1484b03a 	or	r2,r2,r18
    3c34:	8080030d 	sth	r2,12(r16)
    3c38:	0027883a 	mov	r19,zero
    3c3c:	003fd806 	br	3ba0 <__alt_data_end+0xfffeb500>
    3c40:	8140038f 	ldh	r5,14(r16)
    3c44:	8809883a 	mov	r4,r17
    3c48:	0004b680 	call	4b68 <_isatty_r>
    3c4c:	103fe226 	beq	r2,zero,3bd8 <__alt_data_end+0xfffeb538>
    3c50:	8080030b 	ldhu	r2,12(r16)
    3c54:	10800054 	ori	r2,r2,1
    3c58:	8080030d 	sth	r2,12(r16)
    3c5c:	003fde06 	br	3bd8 <__alt_data_end+0xfffeb538>
    3c60:	8080030b 	ldhu	r2,12(r16)
    3c64:	10c0800c 	andi	r3,r2,512
    3c68:	183fdb1e 	bne	r3,zero,3bd8 <__alt_data_end+0xfffeb538>
    3c6c:	10800094 	ori	r2,r2,2
    3c70:	80c010c4 	addi	r3,r16,67
    3c74:	8080030d 	sth	r2,12(r16)
    3c78:	00800044 	movi	r2,1
    3c7c:	80c00015 	stw	r3,0(r16)
    3c80:	80c00415 	stw	r3,16(r16)
    3c84:	80800515 	stw	r2,20(r16)
    3c88:	003fd306 	br	3bd8 <__alt_data_end+0xfffeb538>
    3c8c:	04810004 	movi	r18,1024
    3c90:	003fc306 	br	3ba0 <__alt_data_end+0xfffeb500>
    3c94:	0027883a 	mov	r19,zero
    3c98:	04810004 	movi	r18,1024
    3c9c:	003fc006 	br	3ba0 <__alt_data_end+0xfffeb500>

00003ca0 <_malloc_r>:
    3ca0:	defff504 	addi	sp,sp,-44
    3ca4:	dc800315 	stw	r18,12(sp)
    3ca8:	dfc00a15 	stw	ra,40(sp)
    3cac:	df000915 	stw	fp,36(sp)
    3cb0:	ddc00815 	stw	r23,32(sp)
    3cb4:	dd800715 	stw	r22,28(sp)
    3cb8:	dd400615 	stw	r21,24(sp)
    3cbc:	dd000515 	stw	r20,20(sp)
    3cc0:	dcc00415 	stw	r19,16(sp)
    3cc4:	dc400215 	stw	r17,8(sp)
    3cc8:	dc000115 	stw	r16,4(sp)
    3ccc:	288002c4 	addi	r2,r5,11
    3cd0:	00c00584 	movi	r3,22
    3cd4:	2025883a 	mov	r18,r4
    3cd8:	18807f2e 	bgeu	r3,r2,3ed8 <_malloc_r+0x238>
    3cdc:	047ffe04 	movi	r17,-8
    3ce0:	1462703a 	and	r17,r2,r17
    3ce4:	8800a316 	blt	r17,zero,3f74 <_malloc_r+0x2d4>
    3ce8:	8940a236 	bltu	r17,r5,3f74 <_malloc_r+0x2d4>
    3cec:	00051800 	call	5180 <__malloc_lock>
    3cf0:	00807dc4 	movi	r2,503
    3cf4:	1441e92e 	bgeu	r2,r17,449c <_malloc_r+0x7fc>
    3cf8:	8804d27a 	srli	r2,r17,9
    3cfc:	1000a126 	beq	r2,zero,3f84 <_malloc_r+0x2e4>
    3d00:	00c00104 	movi	r3,4
    3d04:	18811e36 	bltu	r3,r2,4180 <_malloc_r+0x4e0>
    3d08:	8804d1ba 	srli	r2,r17,6
    3d0c:	12000e44 	addi	r8,r2,57
    3d10:	11c00e04 	addi	r7,r2,56
    3d14:	4209883a 	add	r4,r8,r8
    3d18:	04c00034 	movhi	r19,0
    3d1c:	2109883a 	add	r4,r4,r4
    3d20:	9cdadb04 	addi	r19,r19,27500
    3d24:	2109883a 	add	r4,r4,r4
    3d28:	9909883a 	add	r4,r19,r4
    3d2c:	24000117 	ldw	r16,4(r4)
    3d30:	213ffe04 	addi	r4,r4,-8
    3d34:	24009726 	beq	r4,r16,3f94 <_malloc_r+0x2f4>
    3d38:	80800117 	ldw	r2,4(r16)
    3d3c:	01bfff04 	movi	r6,-4
    3d40:	014003c4 	movi	r5,15
    3d44:	1184703a 	and	r2,r2,r6
    3d48:	1447c83a 	sub	r3,r2,r17
    3d4c:	28c00716 	blt	r5,r3,3d6c <_malloc_r+0xcc>
    3d50:	1800920e 	bge	r3,zero,3f9c <_malloc_r+0x2fc>
    3d54:	84000317 	ldw	r16,12(r16)
    3d58:	24008e26 	beq	r4,r16,3f94 <_malloc_r+0x2f4>
    3d5c:	80800117 	ldw	r2,4(r16)
    3d60:	1184703a 	and	r2,r2,r6
    3d64:	1447c83a 	sub	r3,r2,r17
    3d68:	28fff90e 	bge	r5,r3,3d50 <__alt_data_end+0xfffeb6b0>
    3d6c:	3809883a 	mov	r4,r7
    3d70:	01800034 	movhi	r6,0
    3d74:	9c000417 	ldw	r16,16(r19)
    3d78:	319adb04 	addi	r6,r6,27500
    3d7c:	32000204 	addi	r8,r6,8
    3d80:	82013426 	beq	r16,r8,4254 <_malloc_r+0x5b4>
    3d84:	80c00117 	ldw	r3,4(r16)
    3d88:	00bfff04 	movi	r2,-4
    3d8c:	188e703a 	and	r7,r3,r2
    3d90:	3c45c83a 	sub	r2,r7,r17
    3d94:	00c003c4 	movi	r3,15
    3d98:	18811f16 	blt	r3,r2,4218 <_malloc_r+0x578>
    3d9c:	32000515 	stw	r8,20(r6)
    3da0:	32000415 	stw	r8,16(r6)
    3da4:	10007f0e 	bge	r2,zero,3fa4 <_malloc_r+0x304>
    3da8:	00807fc4 	movi	r2,511
    3dac:	11c0fd36 	bltu	r2,r7,41a4 <_malloc_r+0x504>
    3db0:	3806d0fa 	srli	r3,r7,3
    3db4:	01c00044 	movi	r7,1
    3db8:	30800117 	ldw	r2,4(r6)
    3dbc:	19400044 	addi	r5,r3,1
    3dc0:	294b883a 	add	r5,r5,r5
    3dc4:	1807d0ba 	srai	r3,r3,2
    3dc8:	294b883a 	add	r5,r5,r5
    3dcc:	294b883a 	add	r5,r5,r5
    3dd0:	298b883a 	add	r5,r5,r6
    3dd4:	38c6983a 	sll	r3,r7,r3
    3dd8:	29c00017 	ldw	r7,0(r5)
    3ddc:	2a7ffe04 	addi	r9,r5,-8
    3de0:	1886b03a 	or	r3,r3,r2
    3de4:	82400315 	stw	r9,12(r16)
    3de8:	81c00215 	stw	r7,8(r16)
    3dec:	30c00115 	stw	r3,4(r6)
    3df0:	2c000015 	stw	r16,0(r5)
    3df4:	3c000315 	stw	r16,12(r7)
    3df8:	2005d0ba 	srai	r2,r4,2
    3dfc:	01400044 	movi	r5,1
    3e00:	288a983a 	sll	r5,r5,r2
    3e04:	19406f36 	bltu	r3,r5,3fc4 <_malloc_r+0x324>
    3e08:	28c4703a 	and	r2,r5,r3
    3e0c:	10000a1e 	bne	r2,zero,3e38 <_malloc_r+0x198>
    3e10:	00bfff04 	movi	r2,-4
    3e14:	294b883a 	add	r5,r5,r5
    3e18:	2088703a 	and	r4,r4,r2
    3e1c:	28c4703a 	and	r2,r5,r3
    3e20:	21000104 	addi	r4,r4,4
    3e24:	1000041e 	bne	r2,zero,3e38 <_malloc_r+0x198>
    3e28:	294b883a 	add	r5,r5,r5
    3e2c:	28c4703a 	and	r2,r5,r3
    3e30:	21000104 	addi	r4,r4,4
    3e34:	103ffc26 	beq	r2,zero,3e28 <__alt_data_end+0xfffeb788>
    3e38:	02bfff04 	movi	r10,-4
    3e3c:	024003c4 	movi	r9,15
    3e40:	21800044 	addi	r6,r4,1
    3e44:	318d883a 	add	r6,r6,r6
    3e48:	318d883a 	add	r6,r6,r6
    3e4c:	318d883a 	add	r6,r6,r6
    3e50:	998d883a 	add	r6,r19,r6
    3e54:	333ffe04 	addi	r12,r6,-8
    3e58:	2017883a 	mov	r11,r4
    3e5c:	31800104 	addi	r6,r6,4
    3e60:	34000017 	ldw	r16,0(r6)
    3e64:	31fffd04 	addi	r7,r6,-12
    3e68:	81c0041e 	bne	r16,r7,3e7c <_malloc_r+0x1dc>
    3e6c:	0000fb06 	br	425c <_malloc_r+0x5bc>
    3e70:	1801030e 	bge	r3,zero,4280 <_malloc_r+0x5e0>
    3e74:	84000317 	ldw	r16,12(r16)
    3e78:	81c0f826 	beq	r16,r7,425c <_malloc_r+0x5bc>
    3e7c:	80800117 	ldw	r2,4(r16)
    3e80:	1284703a 	and	r2,r2,r10
    3e84:	1447c83a 	sub	r3,r2,r17
    3e88:	48fff90e 	bge	r9,r3,3e70 <__alt_data_end+0xfffeb7d0>
    3e8c:	80800317 	ldw	r2,12(r16)
    3e90:	81000217 	ldw	r4,8(r16)
    3e94:	89400054 	ori	r5,r17,1
    3e98:	81400115 	stw	r5,4(r16)
    3e9c:	20800315 	stw	r2,12(r4)
    3ea0:	11000215 	stw	r4,8(r2)
    3ea4:	8463883a 	add	r17,r16,r17
    3ea8:	9c400515 	stw	r17,20(r19)
    3eac:	9c400415 	stw	r17,16(r19)
    3eb0:	18800054 	ori	r2,r3,1
    3eb4:	88800115 	stw	r2,4(r17)
    3eb8:	8a000315 	stw	r8,12(r17)
    3ebc:	8a000215 	stw	r8,8(r17)
    3ec0:	88e3883a 	add	r17,r17,r3
    3ec4:	88c00015 	stw	r3,0(r17)
    3ec8:	9009883a 	mov	r4,r18
    3ecc:	00051a40 	call	51a4 <__malloc_unlock>
    3ed0:	80800204 	addi	r2,r16,8
    3ed4:	00001b06 	br	3f44 <_malloc_r+0x2a4>
    3ed8:	04400404 	movi	r17,16
    3edc:	89402536 	bltu	r17,r5,3f74 <_malloc_r+0x2d4>
    3ee0:	00051800 	call	5180 <__malloc_lock>
    3ee4:	00800184 	movi	r2,6
    3ee8:	01000084 	movi	r4,2
    3eec:	04c00034 	movhi	r19,0
    3ef0:	1085883a 	add	r2,r2,r2
    3ef4:	9cdadb04 	addi	r19,r19,27500
    3ef8:	1085883a 	add	r2,r2,r2
    3efc:	9885883a 	add	r2,r19,r2
    3f00:	14000117 	ldw	r16,4(r2)
    3f04:	10fffe04 	addi	r3,r2,-8
    3f08:	80c0d926 	beq	r16,r3,4270 <_malloc_r+0x5d0>
    3f0c:	80c00117 	ldw	r3,4(r16)
    3f10:	81000317 	ldw	r4,12(r16)
    3f14:	00bfff04 	movi	r2,-4
    3f18:	1884703a 	and	r2,r3,r2
    3f1c:	81400217 	ldw	r5,8(r16)
    3f20:	8085883a 	add	r2,r16,r2
    3f24:	10c00117 	ldw	r3,4(r2)
    3f28:	29000315 	stw	r4,12(r5)
    3f2c:	21400215 	stw	r5,8(r4)
    3f30:	18c00054 	ori	r3,r3,1
    3f34:	10c00115 	stw	r3,4(r2)
    3f38:	9009883a 	mov	r4,r18
    3f3c:	00051a40 	call	51a4 <__malloc_unlock>
    3f40:	80800204 	addi	r2,r16,8
    3f44:	dfc00a17 	ldw	ra,40(sp)
    3f48:	df000917 	ldw	fp,36(sp)
    3f4c:	ddc00817 	ldw	r23,32(sp)
    3f50:	dd800717 	ldw	r22,28(sp)
    3f54:	dd400617 	ldw	r21,24(sp)
    3f58:	dd000517 	ldw	r20,20(sp)
    3f5c:	dcc00417 	ldw	r19,16(sp)
    3f60:	dc800317 	ldw	r18,12(sp)
    3f64:	dc400217 	ldw	r17,8(sp)
    3f68:	dc000117 	ldw	r16,4(sp)
    3f6c:	dec00b04 	addi	sp,sp,44
    3f70:	f800283a 	ret
    3f74:	00800304 	movi	r2,12
    3f78:	90800015 	stw	r2,0(r18)
    3f7c:	0005883a 	mov	r2,zero
    3f80:	003ff006 	br	3f44 <__alt_data_end+0xfffeb8a4>
    3f84:	01002004 	movi	r4,128
    3f88:	02001004 	movi	r8,64
    3f8c:	01c00fc4 	movi	r7,63
    3f90:	003f6106 	br	3d18 <__alt_data_end+0xfffeb678>
    3f94:	4009883a 	mov	r4,r8
    3f98:	003f7506 	br	3d70 <__alt_data_end+0xfffeb6d0>
    3f9c:	81000317 	ldw	r4,12(r16)
    3fa0:	003fde06 	br	3f1c <__alt_data_end+0xfffeb87c>
    3fa4:	81c5883a 	add	r2,r16,r7
    3fa8:	11400117 	ldw	r5,4(r2)
    3fac:	9009883a 	mov	r4,r18
    3fb0:	29400054 	ori	r5,r5,1
    3fb4:	11400115 	stw	r5,4(r2)
    3fb8:	00051a40 	call	51a4 <__malloc_unlock>
    3fbc:	80800204 	addi	r2,r16,8
    3fc0:	003fe006 	br	3f44 <__alt_data_end+0xfffeb8a4>
    3fc4:	9c000217 	ldw	r16,8(r19)
    3fc8:	00bfff04 	movi	r2,-4
    3fcc:	85800117 	ldw	r22,4(r16)
    3fd0:	b0ac703a 	and	r22,r22,r2
    3fd4:	b4400336 	bltu	r22,r17,3fe4 <_malloc_r+0x344>
    3fd8:	b445c83a 	sub	r2,r22,r17
    3fdc:	00c003c4 	movi	r3,15
    3fe0:	18805d16 	blt	r3,r2,4158 <_malloc_r+0x4b8>
    3fe4:	05c00034 	movhi	r23,0
    3fe8:	00800074 	movhi	r2,1
    3fec:	10a29004 	addi	r2,r2,-30144
    3ff0:	bddbe804 	addi	r23,r23,28576
    3ff4:	15400017 	ldw	r21,0(r2)
    3ff8:	b8c00017 	ldw	r3,0(r23)
    3ffc:	00bfffc4 	movi	r2,-1
    4000:	858d883a 	add	r6,r16,r22
    4004:	8d6b883a 	add	r21,r17,r21
    4008:	1880ea26 	beq	r3,r2,43b4 <_malloc_r+0x714>
    400c:	ad4403c4 	addi	r21,r21,4111
    4010:	00bc0004 	movi	r2,-4096
    4014:	a8aa703a 	and	r21,r21,r2
    4018:	a80b883a 	mov	r5,r21
    401c:	9009883a 	mov	r4,r18
    4020:	d9800015 	stw	r6,0(sp)
    4024:	00047c40 	call	47c4 <_sbrk_r>
    4028:	1029883a 	mov	r20,r2
    402c:	00bfffc4 	movi	r2,-1
    4030:	d9800017 	ldw	r6,0(sp)
    4034:	a080e826 	beq	r20,r2,43d8 <_malloc_r+0x738>
    4038:	a180a636 	bltu	r20,r6,42d4 <_malloc_r+0x634>
    403c:	07000074 	movhi	fp,1
    4040:	e7229104 	addi	fp,fp,-30140
    4044:	e0800017 	ldw	r2,0(fp)
    4048:	a887883a 	add	r3,r21,r2
    404c:	e0c00015 	stw	r3,0(fp)
    4050:	3500e626 	beq	r6,r20,43ec <_malloc_r+0x74c>
    4054:	b9000017 	ldw	r4,0(r23)
    4058:	00bfffc4 	movi	r2,-1
    405c:	2080ee26 	beq	r4,r2,4418 <_malloc_r+0x778>
    4060:	a185c83a 	sub	r2,r20,r6
    4064:	10c5883a 	add	r2,r2,r3
    4068:	e0800015 	stw	r2,0(fp)
    406c:	a0c001cc 	andi	r3,r20,7
    4070:	1800bc26 	beq	r3,zero,4364 <_malloc_r+0x6c4>
    4074:	a0e9c83a 	sub	r20,r20,r3
    4078:	00840204 	movi	r2,4104
    407c:	a5000204 	addi	r20,r20,8
    4080:	10c7c83a 	sub	r3,r2,r3
    4084:	a545883a 	add	r2,r20,r21
    4088:	1083ffcc 	andi	r2,r2,4095
    408c:	18abc83a 	sub	r21,r3,r2
    4090:	a80b883a 	mov	r5,r21
    4094:	9009883a 	mov	r4,r18
    4098:	00047c40 	call	47c4 <_sbrk_r>
    409c:	00ffffc4 	movi	r3,-1
    40a0:	10c0e126 	beq	r2,r3,4428 <_malloc_r+0x788>
    40a4:	1505c83a 	sub	r2,r2,r20
    40a8:	1545883a 	add	r2,r2,r21
    40ac:	10800054 	ori	r2,r2,1
    40b0:	e0c00017 	ldw	r3,0(fp)
    40b4:	9d000215 	stw	r20,8(r19)
    40b8:	a0800115 	stw	r2,4(r20)
    40bc:	a8c7883a 	add	r3,r21,r3
    40c0:	e0c00015 	stw	r3,0(fp)
    40c4:	84c00e26 	beq	r16,r19,4100 <_malloc_r+0x460>
    40c8:	018003c4 	movi	r6,15
    40cc:	3580a72e 	bgeu	r6,r22,436c <_malloc_r+0x6cc>
    40d0:	81400117 	ldw	r5,4(r16)
    40d4:	013ffe04 	movi	r4,-8
    40d8:	b0bffd04 	addi	r2,r22,-12
    40dc:	1104703a 	and	r2,r2,r4
    40e0:	2900004c 	andi	r4,r5,1
    40e4:	2088b03a 	or	r4,r4,r2
    40e8:	81000115 	stw	r4,4(r16)
    40ec:	01400144 	movi	r5,5
    40f0:	8089883a 	add	r4,r16,r2
    40f4:	21400115 	stw	r5,4(r4)
    40f8:	21400215 	stw	r5,8(r4)
    40fc:	3080cd36 	bltu	r6,r2,4434 <_malloc_r+0x794>
    4100:	00800074 	movhi	r2,1
    4104:	10a28f04 	addi	r2,r2,-30148
    4108:	11000017 	ldw	r4,0(r2)
    410c:	20c0012e 	bgeu	r4,r3,4114 <_malloc_r+0x474>
    4110:	10c00015 	stw	r3,0(r2)
    4114:	00800074 	movhi	r2,1
    4118:	10a28e04 	addi	r2,r2,-30152
    411c:	11000017 	ldw	r4,0(r2)
    4120:	9c000217 	ldw	r16,8(r19)
    4124:	20c0012e 	bgeu	r4,r3,412c <_malloc_r+0x48c>
    4128:	10c00015 	stw	r3,0(r2)
    412c:	80c00117 	ldw	r3,4(r16)
    4130:	00bfff04 	movi	r2,-4
    4134:	1886703a 	and	r3,r3,r2
    4138:	1c45c83a 	sub	r2,r3,r17
    413c:	1c400236 	bltu	r3,r17,4148 <_malloc_r+0x4a8>
    4140:	00c003c4 	movi	r3,15
    4144:	18800416 	blt	r3,r2,4158 <_malloc_r+0x4b8>
    4148:	9009883a 	mov	r4,r18
    414c:	00051a40 	call	51a4 <__malloc_unlock>
    4150:	0005883a 	mov	r2,zero
    4154:	003f7b06 	br	3f44 <__alt_data_end+0xfffeb8a4>
    4158:	88c00054 	ori	r3,r17,1
    415c:	80c00115 	stw	r3,4(r16)
    4160:	8463883a 	add	r17,r16,r17
    4164:	10800054 	ori	r2,r2,1
    4168:	9c400215 	stw	r17,8(r19)
    416c:	88800115 	stw	r2,4(r17)
    4170:	9009883a 	mov	r4,r18
    4174:	00051a40 	call	51a4 <__malloc_unlock>
    4178:	80800204 	addi	r2,r16,8
    417c:	003f7106 	br	3f44 <__alt_data_end+0xfffeb8a4>
    4180:	00c00504 	movi	r3,20
    4184:	18804a2e 	bgeu	r3,r2,42b0 <_malloc_r+0x610>
    4188:	00c01504 	movi	r3,84
    418c:	18806e36 	bltu	r3,r2,4348 <_malloc_r+0x6a8>
    4190:	8804d33a 	srli	r2,r17,12
    4194:	12001bc4 	addi	r8,r2,111
    4198:	11c01b84 	addi	r7,r2,110
    419c:	4209883a 	add	r4,r8,r8
    41a0:	003edd06 	br	3d18 <__alt_data_end+0xfffeb678>
    41a4:	3804d27a 	srli	r2,r7,9
    41a8:	00c00104 	movi	r3,4
    41ac:	1880442e 	bgeu	r3,r2,42c0 <_malloc_r+0x620>
    41b0:	00c00504 	movi	r3,20
    41b4:	18808136 	bltu	r3,r2,43bc <_malloc_r+0x71c>
    41b8:	11401704 	addi	r5,r2,92
    41bc:	10c016c4 	addi	r3,r2,91
    41c0:	294b883a 	add	r5,r5,r5
    41c4:	294b883a 	add	r5,r5,r5
    41c8:	294b883a 	add	r5,r5,r5
    41cc:	994b883a 	add	r5,r19,r5
    41d0:	28800017 	ldw	r2,0(r5)
    41d4:	01800034 	movhi	r6,0
    41d8:	297ffe04 	addi	r5,r5,-8
    41dc:	319adb04 	addi	r6,r6,27500
    41e0:	28806526 	beq	r5,r2,4378 <_malloc_r+0x6d8>
    41e4:	01bfff04 	movi	r6,-4
    41e8:	10c00117 	ldw	r3,4(r2)
    41ec:	1986703a 	and	r3,r3,r6
    41f0:	38c0022e 	bgeu	r7,r3,41fc <_malloc_r+0x55c>
    41f4:	10800217 	ldw	r2,8(r2)
    41f8:	28bffb1e 	bne	r5,r2,41e8 <__alt_data_end+0xfffebb48>
    41fc:	11400317 	ldw	r5,12(r2)
    4200:	98c00117 	ldw	r3,4(r19)
    4204:	81400315 	stw	r5,12(r16)
    4208:	80800215 	stw	r2,8(r16)
    420c:	2c000215 	stw	r16,8(r5)
    4210:	14000315 	stw	r16,12(r2)
    4214:	003ef806 	br	3df8 <__alt_data_end+0xfffeb758>
    4218:	88c00054 	ori	r3,r17,1
    421c:	80c00115 	stw	r3,4(r16)
    4220:	8463883a 	add	r17,r16,r17
    4224:	34400515 	stw	r17,20(r6)
    4228:	34400415 	stw	r17,16(r6)
    422c:	10c00054 	ori	r3,r2,1
    4230:	8a000315 	stw	r8,12(r17)
    4234:	8a000215 	stw	r8,8(r17)
    4238:	88c00115 	stw	r3,4(r17)
    423c:	88a3883a 	add	r17,r17,r2
    4240:	88800015 	stw	r2,0(r17)
    4244:	9009883a 	mov	r4,r18
    4248:	00051a40 	call	51a4 <__malloc_unlock>
    424c:	80800204 	addi	r2,r16,8
    4250:	003f3c06 	br	3f44 <__alt_data_end+0xfffeb8a4>
    4254:	30c00117 	ldw	r3,4(r6)
    4258:	003ee706 	br	3df8 <__alt_data_end+0xfffeb758>
    425c:	5ac00044 	addi	r11,r11,1
    4260:	588000cc 	andi	r2,r11,3
    4264:	31800204 	addi	r6,r6,8
    4268:	103efd1e 	bne	r2,zero,3e60 <__alt_data_end+0xfffeb7c0>
    426c:	00002406 	br	4300 <_malloc_r+0x660>
    4270:	14000317 	ldw	r16,12(r2)
    4274:	143f251e 	bne	r2,r16,3f0c <__alt_data_end+0xfffeb86c>
    4278:	21000084 	addi	r4,r4,2
    427c:	003ebc06 	br	3d70 <__alt_data_end+0xfffeb6d0>
    4280:	8085883a 	add	r2,r16,r2
    4284:	10c00117 	ldw	r3,4(r2)
    4288:	81000317 	ldw	r4,12(r16)
    428c:	81400217 	ldw	r5,8(r16)
    4290:	18c00054 	ori	r3,r3,1
    4294:	10c00115 	stw	r3,4(r2)
    4298:	29000315 	stw	r4,12(r5)
    429c:	21400215 	stw	r5,8(r4)
    42a0:	9009883a 	mov	r4,r18
    42a4:	00051a40 	call	51a4 <__malloc_unlock>
    42a8:	80800204 	addi	r2,r16,8
    42ac:	003f2506 	br	3f44 <__alt_data_end+0xfffeb8a4>
    42b0:	12001704 	addi	r8,r2,92
    42b4:	11c016c4 	addi	r7,r2,91
    42b8:	4209883a 	add	r4,r8,r8
    42bc:	003e9606 	br	3d18 <__alt_data_end+0xfffeb678>
    42c0:	3804d1ba 	srli	r2,r7,6
    42c4:	11400e44 	addi	r5,r2,57
    42c8:	10c00e04 	addi	r3,r2,56
    42cc:	294b883a 	add	r5,r5,r5
    42d0:	003fbc06 	br	41c4 <__alt_data_end+0xfffebb24>
    42d4:	84ff5926 	beq	r16,r19,403c <__alt_data_end+0xfffeb99c>
    42d8:	00800034 	movhi	r2,0
    42dc:	109adb04 	addi	r2,r2,27500
    42e0:	14000217 	ldw	r16,8(r2)
    42e4:	00bfff04 	movi	r2,-4
    42e8:	80c00117 	ldw	r3,4(r16)
    42ec:	1886703a 	and	r3,r3,r2
    42f0:	003f9106 	br	4138 <__alt_data_end+0xfffeba98>
    42f4:	60800217 	ldw	r2,8(r12)
    42f8:	213fffc4 	addi	r4,r4,-1
    42fc:	1300651e 	bne	r2,r12,4494 <_malloc_r+0x7f4>
    4300:	208000cc 	andi	r2,r4,3
    4304:	633ffe04 	addi	r12,r12,-8
    4308:	103ffa1e 	bne	r2,zero,42f4 <__alt_data_end+0xfffebc54>
    430c:	98800117 	ldw	r2,4(r19)
    4310:	0146303a 	nor	r3,zero,r5
    4314:	1884703a 	and	r2,r3,r2
    4318:	98800115 	stw	r2,4(r19)
    431c:	294b883a 	add	r5,r5,r5
    4320:	117f2836 	bltu	r2,r5,3fc4 <__alt_data_end+0xfffeb924>
    4324:	283f2726 	beq	r5,zero,3fc4 <__alt_data_end+0xfffeb924>
    4328:	2886703a 	and	r3,r5,r2
    432c:	5809883a 	mov	r4,r11
    4330:	183ec31e 	bne	r3,zero,3e40 <__alt_data_end+0xfffeb7a0>
    4334:	294b883a 	add	r5,r5,r5
    4338:	2886703a 	and	r3,r5,r2
    433c:	21000104 	addi	r4,r4,4
    4340:	183ffc26 	beq	r3,zero,4334 <__alt_data_end+0xfffebc94>
    4344:	003ebe06 	br	3e40 <__alt_data_end+0xfffeb7a0>
    4348:	00c05504 	movi	r3,340
    434c:	18801236 	bltu	r3,r2,4398 <_malloc_r+0x6f8>
    4350:	8804d3fa 	srli	r2,r17,15
    4354:	12001e04 	addi	r8,r2,120
    4358:	11c01dc4 	addi	r7,r2,119
    435c:	4209883a 	add	r4,r8,r8
    4360:	003e6d06 	br	3d18 <__alt_data_end+0xfffeb678>
    4364:	00c40004 	movi	r3,4096
    4368:	003f4606 	br	4084 <__alt_data_end+0xfffeb9e4>
    436c:	00800044 	movi	r2,1
    4370:	a0800115 	stw	r2,4(r20)
    4374:	003f7406 	br	4148 <__alt_data_end+0xfffebaa8>
    4378:	1805d0ba 	srai	r2,r3,2
    437c:	01c00044 	movi	r7,1
    4380:	30c00117 	ldw	r3,4(r6)
    4384:	388e983a 	sll	r7,r7,r2
    4388:	2805883a 	mov	r2,r5
    438c:	38c6b03a 	or	r3,r7,r3
    4390:	30c00115 	stw	r3,4(r6)
    4394:	003f9b06 	br	4204 <__alt_data_end+0xfffebb64>
    4398:	00c15504 	movi	r3,1364
    439c:	18801a36 	bltu	r3,r2,4408 <_malloc_r+0x768>
    43a0:	8804d4ba 	srli	r2,r17,18
    43a4:	12001f44 	addi	r8,r2,125
    43a8:	11c01f04 	addi	r7,r2,124
    43ac:	4209883a 	add	r4,r8,r8
    43b0:	003e5906 	br	3d18 <__alt_data_end+0xfffeb678>
    43b4:	ad400404 	addi	r21,r21,16
    43b8:	003f1706 	br	4018 <__alt_data_end+0xfffeb978>
    43bc:	00c01504 	movi	r3,84
    43c0:	18802336 	bltu	r3,r2,4450 <_malloc_r+0x7b0>
    43c4:	3804d33a 	srli	r2,r7,12
    43c8:	11401bc4 	addi	r5,r2,111
    43cc:	10c01b84 	addi	r3,r2,110
    43d0:	294b883a 	add	r5,r5,r5
    43d4:	003f7b06 	br	41c4 <__alt_data_end+0xfffebb24>
    43d8:	9c000217 	ldw	r16,8(r19)
    43dc:	00bfff04 	movi	r2,-4
    43e0:	80c00117 	ldw	r3,4(r16)
    43e4:	1886703a 	and	r3,r3,r2
    43e8:	003f5306 	br	4138 <__alt_data_end+0xfffeba98>
    43ec:	3083ffcc 	andi	r2,r6,4095
    43f0:	103f181e 	bne	r2,zero,4054 <__alt_data_end+0xfffeb9b4>
    43f4:	99000217 	ldw	r4,8(r19)
    43f8:	b545883a 	add	r2,r22,r21
    43fc:	10800054 	ori	r2,r2,1
    4400:	20800115 	stw	r2,4(r4)
    4404:	003f3e06 	br	4100 <__alt_data_end+0xfffeba60>
    4408:	01003f84 	movi	r4,254
    440c:	02001fc4 	movi	r8,127
    4410:	01c01f84 	movi	r7,126
    4414:	003e4006 	br	3d18 <__alt_data_end+0xfffeb678>
    4418:	00800034 	movhi	r2,0
    441c:	109be804 	addi	r2,r2,28576
    4420:	15000015 	stw	r20,0(r2)
    4424:	003f1106 	br	406c <__alt_data_end+0xfffeb9cc>
    4428:	00800044 	movi	r2,1
    442c:	002b883a 	mov	r21,zero
    4430:	003f1f06 	br	40b0 <__alt_data_end+0xfffeba10>
    4434:	81400204 	addi	r5,r16,8
    4438:	9009883a 	mov	r4,r18
    443c:	000364c0 	call	364c <_free_r>
    4440:	00800074 	movhi	r2,1
    4444:	10a29104 	addi	r2,r2,-30140
    4448:	10c00017 	ldw	r3,0(r2)
    444c:	003f2c06 	br	4100 <__alt_data_end+0xfffeba60>
    4450:	00c05504 	movi	r3,340
    4454:	18800536 	bltu	r3,r2,446c <_malloc_r+0x7cc>
    4458:	3804d3fa 	srli	r2,r7,15
    445c:	11401e04 	addi	r5,r2,120
    4460:	10c01dc4 	addi	r3,r2,119
    4464:	294b883a 	add	r5,r5,r5
    4468:	003f5606 	br	41c4 <__alt_data_end+0xfffebb24>
    446c:	00c15504 	movi	r3,1364
    4470:	18800536 	bltu	r3,r2,4488 <_malloc_r+0x7e8>
    4474:	3804d4ba 	srli	r2,r7,18
    4478:	11401f44 	addi	r5,r2,125
    447c:	10c01f04 	addi	r3,r2,124
    4480:	294b883a 	add	r5,r5,r5
    4484:	003f4f06 	br	41c4 <__alt_data_end+0xfffebb24>
    4488:	01403f84 	movi	r5,254
    448c:	00c01f84 	movi	r3,126
    4490:	003f4c06 	br	41c4 <__alt_data_end+0xfffebb24>
    4494:	98800117 	ldw	r2,4(r19)
    4498:	003fa006 	br	431c <__alt_data_end+0xfffebc7c>
    449c:	8808d0fa 	srli	r4,r17,3
    44a0:	20800044 	addi	r2,r4,1
    44a4:	1085883a 	add	r2,r2,r2
    44a8:	003e9006 	br	3eec <__alt_data_end+0xfffeb84c>

000044ac <memset>:
    44ac:	20c000cc 	andi	r3,r4,3
    44b0:	2005883a 	mov	r2,r4
    44b4:	18004426 	beq	r3,zero,45c8 <memset+0x11c>
    44b8:	31ffffc4 	addi	r7,r6,-1
    44bc:	30004026 	beq	r6,zero,45c0 <memset+0x114>
    44c0:	2813883a 	mov	r9,r5
    44c4:	200d883a 	mov	r6,r4
    44c8:	2007883a 	mov	r3,r4
    44cc:	00000406 	br	44e0 <memset+0x34>
    44d0:	3a3fffc4 	addi	r8,r7,-1
    44d4:	31800044 	addi	r6,r6,1
    44d8:	38003926 	beq	r7,zero,45c0 <memset+0x114>
    44dc:	400f883a 	mov	r7,r8
    44e0:	18c00044 	addi	r3,r3,1
    44e4:	32400005 	stb	r9,0(r6)
    44e8:	1a0000cc 	andi	r8,r3,3
    44ec:	403ff81e 	bne	r8,zero,44d0 <__alt_data_end+0xfffebe30>
    44f0:	010000c4 	movi	r4,3
    44f4:	21c02d2e 	bgeu	r4,r7,45ac <memset+0x100>
    44f8:	29003fcc 	andi	r4,r5,255
    44fc:	200c923a 	slli	r6,r4,8
    4500:	3108b03a 	or	r4,r6,r4
    4504:	200c943a 	slli	r6,r4,16
    4508:	218cb03a 	or	r6,r4,r6
    450c:	010003c4 	movi	r4,15
    4510:	21c0182e 	bgeu	r4,r7,4574 <memset+0xc8>
    4514:	3b3ffc04 	addi	r12,r7,-16
    4518:	6018d13a 	srli	r12,r12,4
    451c:	1a000104 	addi	r8,r3,4
    4520:	1ac00204 	addi	r11,r3,8
    4524:	6008913a 	slli	r4,r12,4
    4528:	1a800304 	addi	r10,r3,12
    452c:	1813883a 	mov	r9,r3
    4530:	21000504 	addi	r4,r4,20
    4534:	1909883a 	add	r4,r3,r4
    4538:	49800015 	stw	r6,0(r9)
    453c:	41800015 	stw	r6,0(r8)
    4540:	59800015 	stw	r6,0(r11)
    4544:	51800015 	stw	r6,0(r10)
    4548:	42000404 	addi	r8,r8,16
    454c:	4a400404 	addi	r9,r9,16
    4550:	5ac00404 	addi	r11,r11,16
    4554:	52800404 	addi	r10,r10,16
    4558:	413ff71e 	bne	r8,r4,4538 <__alt_data_end+0xfffebe98>
    455c:	63000044 	addi	r12,r12,1
    4560:	6018913a 	slli	r12,r12,4
    4564:	39c003cc 	andi	r7,r7,15
    4568:	010000c4 	movi	r4,3
    456c:	1b07883a 	add	r3,r3,r12
    4570:	21c00e2e 	bgeu	r4,r7,45ac <memset+0x100>
    4574:	1813883a 	mov	r9,r3
    4578:	3811883a 	mov	r8,r7
    457c:	010000c4 	movi	r4,3
    4580:	49800015 	stw	r6,0(r9)
    4584:	423fff04 	addi	r8,r8,-4
    4588:	4a400104 	addi	r9,r9,4
    458c:	223ffc36 	bltu	r4,r8,4580 <__alt_data_end+0xfffebee0>
    4590:	393fff04 	addi	r4,r7,-4
    4594:	2008d0ba 	srli	r4,r4,2
    4598:	39c000cc 	andi	r7,r7,3
    459c:	21000044 	addi	r4,r4,1
    45a0:	2109883a 	add	r4,r4,r4
    45a4:	2109883a 	add	r4,r4,r4
    45a8:	1907883a 	add	r3,r3,r4
    45ac:	38000526 	beq	r7,zero,45c4 <memset+0x118>
    45b0:	19cf883a 	add	r7,r3,r7
    45b4:	19400005 	stb	r5,0(r3)
    45b8:	18c00044 	addi	r3,r3,1
    45bc:	38fffd1e 	bne	r7,r3,45b4 <__alt_data_end+0xfffebf14>
    45c0:	f800283a 	ret
    45c4:	f800283a 	ret
    45c8:	2007883a 	mov	r3,r4
    45cc:	300f883a 	mov	r7,r6
    45d0:	003fc706 	br	44f0 <__alt_data_end+0xfffebe50>

000045d4 <lflush>:
    45d4:	2080030b 	ldhu	r2,12(r4)
    45d8:	00c00244 	movi	r3,9
    45dc:	1080024c 	andi	r2,r2,9
    45e0:	10c00226 	beq	r2,r3,45ec <lflush+0x18>
    45e4:	0005883a 	mov	r2,zero
    45e8:	f800283a 	ret
    45ec:	00031481 	jmpi	3148 <fflush>

000045f0 <__srefill_r>:
    45f0:	defffc04 	addi	sp,sp,-16
    45f4:	dc400115 	stw	r17,4(sp)
    45f8:	dc000015 	stw	r16,0(sp)
    45fc:	dfc00315 	stw	ra,12(sp)
    4600:	dc800215 	stw	r18,8(sp)
    4604:	2023883a 	mov	r17,r4
    4608:	2821883a 	mov	r16,r5
    460c:	20000226 	beq	r4,zero,4618 <__srefill_r+0x28>
    4610:	20800e17 	ldw	r2,56(r4)
    4614:	10003c26 	beq	r2,zero,4708 <__srefill_r+0x118>
    4618:	80c0030b 	ldhu	r3,12(r16)
    461c:	1908000c 	andi	r4,r3,8192
    4620:	1805883a 	mov	r2,r3
    4624:	2000071e 	bne	r4,zero,4644 <__srefill_r+0x54>
    4628:	81001917 	ldw	r4,100(r16)
    462c:	18880014 	ori	r2,r3,8192
    4630:	00f7ffc4 	movi	r3,-8193
    4634:	20c8703a 	and	r4,r4,r3
    4638:	8080030d 	sth	r2,12(r16)
    463c:	1007883a 	mov	r3,r2
    4640:	81001915 	stw	r4,100(r16)
    4644:	80000115 	stw	zero,4(r16)
    4648:	1100080c 	andi	r4,r2,32
    464c:	2000571e 	bne	r4,zero,47ac <__srefill_r+0x1bc>
    4650:	1100010c 	andi	r4,r2,4
    4654:	20001f26 	beq	r4,zero,46d4 <__srefill_r+0xe4>
    4658:	81400c17 	ldw	r5,48(r16)
    465c:	28000826 	beq	r5,zero,4680 <__srefill_r+0x90>
    4660:	80801004 	addi	r2,r16,64
    4664:	28800226 	beq	r5,r2,4670 <__srefill_r+0x80>
    4668:	8809883a 	mov	r4,r17
    466c:	000364c0 	call	364c <_free_r>
    4670:	80800f17 	ldw	r2,60(r16)
    4674:	80000c15 	stw	zero,48(r16)
    4678:	80800115 	stw	r2,4(r16)
    467c:	1000391e 	bne	r2,zero,4764 <__srefill_r+0x174>
    4680:	80800417 	ldw	r2,16(r16)
    4684:	10004b26 	beq	r2,zero,47b4 <__srefill_r+0x1c4>
    4688:	8480030b 	ldhu	r18,12(r16)
    468c:	908000cc 	andi	r2,r18,3
    4690:	10001f1e 	bne	r2,zero,4710 <__srefill_r+0x120>
    4694:	81800417 	ldw	r6,16(r16)
    4698:	80800817 	ldw	r2,32(r16)
    469c:	81c00517 	ldw	r7,20(r16)
    46a0:	81400717 	ldw	r5,28(r16)
    46a4:	81800015 	stw	r6,0(r16)
    46a8:	8809883a 	mov	r4,r17
    46ac:	103ee83a 	callr	r2
    46b0:	80800115 	stw	r2,4(r16)
    46b4:	00800e0e 	bge	zero,r2,46f0 <__srefill_r+0x100>
    46b8:	0005883a 	mov	r2,zero
    46bc:	dfc00317 	ldw	ra,12(sp)
    46c0:	dc800217 	ldw	r18,8(sp)
    46c4:	dc400117 	ldw	r17,4(sp)
    46c8:	dc000017 	ldw	r16,0(sp)
    46cc:	dec00404 	addi	sp,sp,16
    46d0:	f800283a 	ret
    46d4:	1100040c 	andi	r4,r2,16
    46d8:	20003026 	beq	r4,zero,479c <__srefill_r+0x1ac>
    46dc:	1080020c 	andi	r2,r2,8
    46e0:	1000241e 	bne	r2,zero,4774 <__srefill_r+0x184>
    46e4:	18c00114 	ori	r3,r3,4
    46e8:	80c0030d 	sth	r3,12(r16)
    46ec:	003fe406 	br	4680 <__alt_data_end+0xfffebfe0>
    46f0:	80c0030b 	ldhu	r3,12(r16)
    46f4:	1000161e 	bne	r2,zero,4750 <__srefill_r+0x160>
    46f8:	18c00814 	ori	r3,r3,32
    46fc:	00bfffc4 	movi	r2,-1
    4700:	80c0030d 	sth	r3,12(r16)
    4704:	003fed06 	br	46bc <__alt_data_end+0xfffec01c>
    4708:	00034d80 	call	34d8 <__sinit>
    470c:	003fc206 	br	4618 <__alt_data_end+0xfffebf78>
    4710:	00800034 	movhi	r2,0
    4714:	109be604 	addi	r2,r2,28568
    4718:	11000017 	ldw	r4,0(r2)
    471c:	01400034 	movhi	r5,0
    4720:	00800044 	movi	r2,1
    4724:	29517504 	addi	r5,r5,17876
    4728:	8080030d 	sth	r2,12(r16)
    472c:	000395c0 	call	395c <_fwalk>
    4730:	00800244 	movi	r2,9
    4734:	8480030d 	sth	r18,12(r16)
    4738:	9480024c 	andi	r18,r18,9
    473c:	90bfd51e 	bne	r18,r2,4694 <__alt_data_end+0xfffebff4>
    4740:	800b883a 	mov	r5,r16
    4744:	8809883a 	mov	r4,r17
    4748:	0002ed00 	call	2ed0 <__sflush_r>
    474c:	003fd106 	br	4694 <__alt_data_end+0xfffebff4>
    4750:	18c01014 	ori	r3,r3,64
    4754:	80000115 	stw	zero,4(r16)
    4758:	00bfffc4 	movi	r2,-1
    475c:	80c0030d 	sth	r3,12(r16)
    4760:	003fd606 	br	46bc <__alt_data_end+0xfffec01c>
    4764:	80c00e17 	ldw	r3,56(r16)
    4768:	0005883a 	mov	r2,zero
    476c:	80c00015 	stw	r3,0(r16)
    4770:	003fd206 	br	46bc <__alt_data_end+0xfffec01c>
    4774:	800b883a 	mov	r5,r16
    4778:	8809883a 	mov	r4,r17
    477c:	00030ec0 	call	30ec <_fflush_r>
    4780:	10000a1e 	bne	r2,zero,47ac <__srefill_r+0x1bc>
    4784:	8080030b 	ldhu	r2,12(r16)
    4788:	00fffdc4 	movi	r3,-9
    478c:	80000215 	stw	zero,8(r16)
    4790:	1886703a 	and	r3,r3,r2
    4794:	80000615 	stw	zero,24(r16)
    4798:	003fd206 	br	46e4 <__alt_data_end+0xfffec044>
    479c:	00800244 	movi	r2,9
    47a0:	88800015 	stw	r2,0(r17)
    47a4:	18c01014 	ori	r3,r3,64
    47a8:	80c0030d 	sth	r3,12(r16)
    47ac:	00bfffc4 	movi	r2,-1
    47b0:	003fc206 	br	46bc <__alt_data_end+0xfffec01c>
    47b4:	800b883a 	mov	r5,r16
    47b8:	8809883a 	mov	r4,r17
    47bc:	0003ae40 	call	3ae4 <__smakebuf_r>
    47c0:	003fb106 	br	4688 <__alt_data_end+0xfffebfe8>

000047c4 <_sbrk_r>:
    47c4:	defffd04 	addi	sp,sp,-12
    47c8:	dc000015 	stw	r16,0(sp)
    47cc:	04000074 	movhi	r16,1
    47d0:	dc400115 	stw	r17,4(sp)
    47d4:	84228d04 	addi	r16,r16,-30156
    47d8:	2023883a 	mov	r17,r4
    47dc:	2809883a 	mov	r4,r5
    47e0:	dfc00215 	stw	ra,8(sp)
    47e4:	80000015 	stw	zero,0(r16)
    47e8:	00053080 	call	5308 <sbrk>
    47ec:	00ffffc4 	movi	r3,-1
    47f0:	10c00526 	beq	r2,r3,4808 <_sbrk_r+0x44>
    47f4:	dfc00217 	ldw	ra,8(sp)
    47f8:	dc400117 	ldw	r17,4(sp)
    47fc:	dc000017 	ldw	r16,0(sp)
    4800:	dec00304 	addi	sp,sp,12
    4804:	f800283a 	ret
    4808:	80c00017 	ldw	r3,0(r16)
    480c:	183ff926 	beq	r3,zero,47f4 <__alt_data_end+0xfffec154>
    4810:	88c00015 	stw	r3,0(r17)
    4814:	003ff706 	br	47f4 <__alt_data_end+0xfffec154>

00004818 <__sread>:
    4818:	defffe04 	addi	sp,sp,-8
    481c:	dc000015 	stw	r16,0(sp)
    4820:	2821883a 	mov	r16,r5
    4824:	2940038f 	ldh	r5,14(r5)
    4828:	dfc00115 	stw	ra,4(sp)
    482c:	0004c1c0 	call	4c1c <_read_r>
    4830:	10000716 	blt	r2,zero,4850 <__sread+0x38>
    4834:	80c01417 	ldw	r3,80(r16)
    4838:	1887883a 	add	r3,r3,r2
    483c:	80c01415 	stw	r3,80(r16)
    4840:	dfc00117 	ldw	ra,4(sp)
    4844:	dc000017 	ldw	r16,0(sp)
    4848:	dec00204 	addi	sp,sp,8
    484c:	f800283a 	ret
    4850:	80c0030b 	ldhu	r3,12(r16)
    4854:	18fbffcc 	andi	r3,r3,61439
    4858:	80c0030d 	sth	r3,12(r16)
    485c:	dfc00117 	ldw	ra,4(sp)
    4860:	dc000017 	ldw	r16,0(sp)
    4864:	dec00204 	addi	sp,sp,8
    4868:	f800283a 	ret

0000486c <__seofread>:
    486c:	0005883a 	mov	r2,zero
    4870:	f800283a 	ret

00004874 <__swrite>:
    4874:	2880030b 	ldhu	r2,12(r5)
    4878:	defffb04 	addi	sp,sp,-20
    487c:	dcc00315 	stw	r19,12(sp)
    4880:	dc800215 	stw	r18,8(sp)
    4884:	dc400115 	stw	r17,4(sp)
    4888:	dc000015 	stw	r16,0(sp)
    488c:	dfc00415 	stw	ra,16(sp)
    4890:	10c0400c 	andi	r3,r2,256
    4894:	2821883a 	mov	r16,r5
    4898:	2023883a 	mov	r17,r4
    489c:	3025883a 	mov	r18,r6
    48a0:	3827883a 	mov	r19,r7
    48a4:	18000526 	beq	r3,zero,48bc <__swrite+0x48>
    48a8:	2940038f 	ldh	r5,14(r5)
    48ac:	01c00084 	movi	r7,2
    48b0:	000d883a 	mov	r6,zero
    48b4:	0004bbc0 	call	4bbc <_lseek_r>
    48b8:	8080030b 	ldhu	r2,12(r16)
    48bc:	8140038f 	ldh	r5,14(r16)
    48c0:	10bbffcc 	andi	r2,r2,61439
    48c4:	980f883a 	mov	r7,r19
    48c8:	900d883a 	mov	r6,r18
    48cc:	8809883a 	mov	r4,r17
    48d0:	8080030d 	sth	r2,12(r16)
    48d4:	dfc00417 	ldw	ra,16(sp)
    48d8:	dcc00317 	ldw	r19,12(sp)
    48dc:	dc800217 	ldw	r18,8(sp)
    48e0:	dc400117 	ldw	r17,4(sp)
    48e4:	dc000017 	ldw	r16,0(sp)
    48e8:	dec00504 	addi	sp,sp,20
    48ec:	00049541 	jmpi	4954 <_write_r>

000048f0 <__sseek>:
    48f0:	defffe04 	addi	sp,sp,-8
    48f4:	dc000015 	stw	r16,0(sp)
    48f8:	2821883a 	mov	r16,r5
    48fc:	2940038f 	ldh	r5,14(r5)
    4900:	dfc00115 	stw	ra,4(sp)
    4904:	0004bbc0 	call	4bbc <_lseek_r>
    4908:	00ffffc4 	movi	r3,-1
    490c:	10c00826 	beq	r2,r3,4930 <__sseek+0x40>
    4910:	80c0030b 	ldhu	r3,12(r16)
    4914:	80801415 	stw	r2,80(r16)
    4918:	18c40014 	ori	r3,r3,4096
    491c:	80c0030d 	sth	r3,12(r16)
    4920:	dfc00117 	ldw	ra,4(sp)
    4924:	dc000017 	ldw	r16,0(sp)
    4928:	dec00204 	addi	sp,sp,8
    492c:	f800283a 	ret
    4930:	80c0030b 	ldhu	r3,12(r16)
    4934:	18fbffcc 	andi	r3,r3,61439
    4938:	80c0030d 	sth	r3,12(r16)
    493c:	dfc00117 	ldw	ra,4(sp)
    4940:	dc000017 	ldw	r16,0(sp)
    4944:	dec00204 	addi	sp,sp,8
    4948:	f800283a 	ret

0000494c <__sclose>:
    494c:	2940038f 	ldh	r5,14(r5)
    4950:	00049b41 	jmpi	49b4 <_close_r>

00004954 <_write_r>:
    4954:	defffd04 	addi	sp,sp,-12
    4958:	2805883a 	mov	r2,r5
    495c:	dc000015 	stw	r16,0(sp)
    4960:	04000074 	movhi	r16,1
    4964:	dc400115 	stw	r17,4(sp)
    4968:	300b883a 	mov	r5,r6
    496c:	84228d04 	addi	r16,r16,-30156
    4970:	2023883a 	mov	r17,r4
    4974:	380d883a 	mov	r6,r7
    4978:	1009883a 	mov	r4,r2
    497c:	dfc00215 	stw	ra,8(sp)
    4980:	80000015 	stw	zero,0(r16)
    4984:	00053f40 	call	53f4 <write>
    4988:	00ffffc4 	movi	r3,-1
    498c:	10c00526 	beq	r2,r3,49a4 <_write_r+0x50>
    4990:	dfc00217 	ldw	ra,8(sp)
    4994:	dc400117 	ldw	r17,4(sp)
    4998:	dc000017 	ldw	r16,0(sp)
    499c:	dec00304 	addi	sp,sp,12
    49a0:	f800283a 	ret
    49a4:	80c00017 	ldw	r3,0(r16)
    49a8:	183ff926 	beq	r3,zero,4990 <__alt_data_end+0xfffec2f0>
    49ac:	88c00015 	stw	r3,0(r17)
    49b0:	003ff706 	br	4990 <__alt_data_end+0xfffec2f0>

000049b4 <_close_r>:
    49b4:	defffd04 	addi	sp,sp,-12
    49b8:	dc000015 	stw	r16,0(sp)
    49bc:	04000074 	movhi	r16,1
    49c0:	dc400115 	stw	r17,4(sp)
    49c4:	84228d04 	addi	r16,r16,-30156
    49c8:	2023883a 	mov	r17,r4
    49cc:	2809883a 	mov	r4,r5
    49d0:	dfc00215 	stw	ra,8(sp)
    49d4:	80000015 	stw	zero,0(r16)
    49d8:	00015500 	call	1550 <close>
    49dc:	00ffffc4 	movi	r3,-1
    49e0:	10c00526 	beq	r2,r3,49f8 <_close_r+0x44>
    49e4:	dfc00217 	ldw	ra,8(sp)
    49e8:	dc400117 	ldw	r17,4(sp)
    49ec:	dc000017 	ldw	r16,0(sp)
    49f0:	dec00304 	addi	sp,sp,12
    49f4:	f800283a 	ret
    49f8:	80c00017 	ldw	r3,0(r16)
    49fc:	183ff926 	beq	r3,zero,49e4 <__alt_data_end+0xfffec344>
    4a00:	88c00015 	stw	r3,0(r17)
    4a04:	003ff706 	br	49e4 <__alt_data_end+0xfffec344>

00004a08 <_fclose_r>:
    4a08:	28003926 	beq	r5,zero,4af0 <_fclose_r+0xe8>
    4a0c:	defffc04 	addi	sp,sp,-16
    4a10:	dc400115 	stw	r17,4(sp)
    4a14:	dc000015 	stw	r16,0(sp)
    4a18:	dfc00315 	stw	ra,12(sp)
    4a1c:	dc800215 	stw	r18,8(sp)
    4a20:	2023883a 	mov	r17,r4
    4a24:	2821883a 	mov	r16,r5
    4a28:	20000226 	beq	r4,zero,4a34 <_fclose_r+0x2c>
    4a2c:	20800e17 	ldw	r2,56(r4)
    4a30:	10002726 	beq	r2,zero,4ad0 <_fclose_r+0xc8>
    4a34:	8080030f 	ldh	r2,12(r16)
    4a38:	1000071e 	bne	r2,zero,4a58 <_fclose_r+0x50>
    4a3c:	0005883a 	mov	r2,zero
    4a40:	dfc00317 	ldw	ra,12(sp)
    4a44:	dc800217 	ldw	r18,8(sp)
    4a48:	dc400117 	ldw	r17,4(sp)
    4a4c:	dc000017 	ldw	r16,0(sp)
    4a50:	dec00404 	addi	sp,sp,16
    4a54:	f800283a 	ret
    4a58:	800b883a 	mov	r5,r16
    4a5c:	8809883a 	mov	r4,r17
    4a60:	0002ed00 	call	2ed0 <__sflush_r>
    4a64:	1025883a 	mov	r18,r2
    4a68:	80800b17 	ldw	r2,44(r16)
    4a6c:	10000426 	beq	r2,zero,4a80 <_fclose_r+0x78>
    4a70:	81400717 	ldw	r5,28(r16)
    4a74:	8809883a 	mov	r4,r17
    4a78:	103ee83a 	callr	r2
    4a7c:	10001616 	blt	r2,zero,4ad8 <_fclose_r+0xd0>
    4a80:	8080030b 	ldhu	r2,12(r16)
    4a84:	1080200c 	andi	r2,r2,128
    4a88:	1000151e 	bne	r2,zero,4ae0 <_fclose_r+0xd8>
    4a8c:	81400c17 	ldw	r5,48(r16)
    4a90:	28000526 	beq	r5,zero,4aa8 <_fclose_r+0xa0>
    4a94:	80801004 	addi	r2,r16,64
    4a98:	28800226 	beq	r5,r2,4aa4 <_fclose_r+0x9c>
    4a9c:	8809883a 	mov	r4,r17
    4aa0:	000364c0 	call	364c <_free_r>
    4aa4:	80000c15 	stw	zero,48(r16)
    4aa8:	81401117 	ldw	r5,68(r16)
    4aac:	28000326 	beq	r5,zero,4abc <_fclose_r+0xb4>
    4ab0:	8809883a 	mov	r4,r17
    4ab4:	000364c0 	call	364c <_free_r>
    4ab8:	80001115 	stw	zero,68(r16)
    4abc:	00034e80 	call	34e8 <__sfp_lock_acquire>
    4ac0:	8000030d 	sth	zero,12(r16)
    4ac4:	00034ec0 	call	34ec <__sfp_lock_release>
    4ac8:	9005883a 	mov	r2,r18
    4acc:	003fdc06 	br	4a40 <__alt_data_end+0xfffec3a0>
    4ad0:	00034d80 	call	34d8 <__sinit>
    4ad4:	003fd706 	br	4a34 <__alt_data_end+0xfffec394>
    4ad8:	04bfffc4 	movi	r18,-1
    4adc:	003fe806 	br	4a80 <__alt_data_end+0xfffec3e0>
    4ae0:	81400417 	ldw	r5,16(r16)
    4ae4:	8809883a 	mov	r4,r17
    4ae8:	000364c0 	call	364c <_free_r>
    4aec:	003fe706 	br	4a8c <__alt_data_end+0xfffec3ec>
    4af0:	0005883a 	mov	r2,zero
    4af4:	f800283a 	ret

00004af8 <fclose>:
    4af8:	00800034 	movhi	r2,0
    4afc:	109be704 	addi	r2,r2,28572
    4b00:	200b883a 	mov	r5,r4
    4b04:	11000017 	ldw	r4,0(r2)
    4b08:	0004a081 	jmpi	4a08 <_fclose_r>

00004b0c <_fstat_r>:
    4b0c:	defffd04 	addi	sp,sp,-12
    4b10:	2805883a 	mov	r2,r5
    4b14:	dc000015 	stw	r16,0(sp)
    4b18:	04000074 	movhi	r16,1
    4b1c:	dc400115 	stw	r17,4(sp)
    4b20:	84228d04 	addi	r16,r16,-30156
    4b24:	2023883a 	mov	r17,r4
    4b28:	300b883a 	mov	r5,r6
    4b2c:	1009883a 	mov	r4,r2
    4b30:	dfc00215 	stw	ra,8(sp)
    4b34:	80000015 	stw	zero,0(r16)
    4b38:	0004ec80 	call	4ec8 <fstat>
    4b3c:	00ffffc4 	movi	r3,-1
    4b40:	10c00526 	beq	r2,r3,4b58 <_fstat_r+0x4c>
    4b44:	dfc00217 	ldw	ra,8(sp)
    4b48:	dc400117 	ldw	r17,4(sp)
    4b4c:	dc000017 	ldw	r16,0(sp)
    4b50:	dec00304 	addi	sp,sp,12
    4b54:	f800283a 	ret
    4b58:	80c00017 	ldw	r3,0(r16)
    4b5c:	183ff926 	beq	r3,zero,4b44 <__alt_data_end+0xfffec4a4>
    4b60:	88c00015 	stw	r3,0(r17)
    4b64:	003ff706 	br	4b44 <__alt_data_end+0xfffec4a4>

00004b68 <_isatty_r>:
    4b68:	defffd04 	addi	sp,sp,-12
    4b6c:	dc000015 	stw	r16,0(sp)
    4b70:	04000074 	movhi	r16,1
    4b74:	dc400115 	stw	r17,4(sp)
    4b78:	84228d04 	addi	r16,r16,-30156
    4b7c:	2023883a 	mov	r17,r4
    4b80:	2809883a 	mov	r4,r5
    4b84:	dfc00215 	stw	ra,8(sp)
    4b88:	80000015 	stw	zero,0(r16)
    4b8c:	0004fbc0 	call	4fbc <isatty>
    4b90:	00ffffc4 	movi	r3,-1
    4b94:	10c00526 	beq	r2,r3,4bac <_isatty_r+0x44>
    4b98:	dfc00217 	ldw	ra,8(sp)
    4b9c:	dc400117 	ldw	r17,4(sp)
    4ba0:	dc000017 	ldw	r16,0(sp)
    4ba4:	dec00304 	addi	sp,sp,12
    4ba8:	f800283a 	ret
    4bac:	80c00017 	ldw	r3,0(r16)
    4bb0:	183ff926 	beq	r3,zero,4b98 <__alt_data_end+0xfffec4f8>
    4bb4:	88c00015 	stw	r3,0(r17)
    4bb8:	003ff706 	br	4b98 <__alt_data_end+0xfffec4f8>

00004bbc <_lseek_r>:
    4bbc:	defffd04 	addi	sp,sp,-12
    4bc0:	2805883a 	mov	r2,r5
    4bc4:	dc000015 	stw	r16,0(sp)
    4bc8:	04000074 	movhi	r16,1
    4bcc:	dc400115 	stw	r17,4(sp)
    4bd0:	300b883a 	mov	r5,r6
    4bd4:	84228d04 	addi	r16,r16,-30156
    4bd8:	2023883a 	mov	r17,r4
    4bdc:	380d883a 	mov	r6,r7
    4be0:	1009883a 	mov	r4,r2
    4be4:	dfc00215 	stw	ra,8(sp)
    4be8:	80000015 	stw	zero,0(r16)
    4bec:	00050a40 	call	50a4 <lseek>
    4bf0:	00ffffc4 	movi	r3,-1
    4bf4:	10c00526 	beq	r2,r3,4c0c <_lseek_r+0x50>
    4bf8:	dfc00217 	ldw	ra,8(sp)
    4bfc:	dc400117 	ldw	r17,4(sp)
    4c00:	dc000017 	ldw	r16,0(sp)
    4c04:	dec00304 	addi	sp,sp,12
    4c08:	f800283a 	ret
    4c0c:	80c00017 	ldw	r3,0(r16)
    4c10:	183ff926 	beq	r3,zero,4bf8 <__alt_data_end+0xfffec558>
    4c14:	88c00015 	stw	r3,0(r17)
    4c18:	003ff706 	br	4bf8 <__alt_data_end+0xfffec558>

00004c1c <_read_r>:
    4c1c:	defffd04 	addi	sp,sp,-12
    4c20:	2805883a 	mov	r2,r5
    4c24:	dc000015 	stw	r16,0(sp)
    4c28:	04000074 	movhi	r16,1
    4c2c:	dc400115 	stw	r17,4(sp)
    4c30:	300b883a 	mov	r5,r6
    4c34:	84228d04 	addi	r16,r16,-30156
    4c38:	2023883a 	mov	r17,r4
    4c3c:	380d883a 	mov	r6,r7
    4c40:	1009883a 	mov	r4,r2
    4c44:	dfc00215 	stw	ra,8(sp)
    4c48:	80000015 	stw	zero,0(r16)
    4c4c:	00052040 	call	5204 <read>
    4c50:	00ffffc4 	movi	r3,-1
    4c54:	10c00526 	beq	r2,r3,4c6c <_read_r+0x50>
    4c58:	dfc00217 	ldw	ra,8(sp)
    4c5c:	dc400117 	ldw	r17,4(sp)
    4c60:	dc000017 	ldw	r16,0(sp)
    4c64:	dec00304 	addi	sp,sp,12
    4c68:	f800283a 	ret
    4c6c:	80c00017 	ldw	r3,0(r16)
    4c70:	183ff926 	beq	r3,zero,4c58 <__alt_data_end+0xfffec5b8>
    4c74:	88c00015 	stw	r3,0(r17)
    4c78:	003ff706 	br	4c58 <__alt_data_end+0xfffec5b8>

00004c7c <__divsi3>:
    4c7c:	20001b16 	blt	r4,zero,4cec <__divsi3+0x70>
    4c80:	000f883a 	mov	r7,zero
    4c84:	28001616 	blt	r5,zero,4ce0 <__divsi3+0x64>
    4c88:	200d883a 	mov	r6,r4
    4c8c:	29001a2e 	bgeu	r5,r4,4cf8 <__divsi3+0x7c>
    4c90:	00800804 	movi	r2,32
    4c94:	00c00044 	movi	r3,1
    4c98:	00000106 	br	4ca0 <__divsi3+0x24>
    4c9c:	10000d26 	beq	r2,zero,4cd4 <__divsi3+0x58>
    4ca0:	294b883a 	add	r5,r5,r5
    4ca4:	10bfffc4 	addi	r2,r2,-1
    4ca8:	18c7883a 	add	r3,r3,r3
    4cac:	293ffb36 	bltu	r5,r4,4c9c <__alt_data_end+0xfffec5fc>
    4cb0:	0005883a 	mov	r2,zero
    4cb4:	18000726 	beq	r3,zero,4cd4 <__divsi3+0x58>
    4cb8:	0005883a 	mov	r2,zero
    4cbc:	31400236 	bltu	r6,r5,4cc8 <__divsi3+0x4c>
    4cc0:	314dc83a 	sub	r6,r6,r5
    4cc4:	10c4b03a 	or	r2,r2,r3
    4cc8:	1806d07a 	srli	r3,r3,1
    4ccc:	280ad07a 	srli	r5,r5,1
    4cd0:	183ffa1e 	bne	r3,zero,4cbc <__alt_data_end+0xfffec61c>
    4cd4:	38000126 	beq	r7,zero,4cdc <__divsi3+0x60>
    4cd8:	0085c83a 	sub	r2,zero,r2
    4cdc:	f800283a 	ret
    4ce0:	014bc83a 	sub	r5,zero,r5
    4ce4:	39c0005c 	xori	r7,r7,1
    4ce8:	003fe706 	br	4c88 <__alt_data_end+0xfffec5e8>
    4cec:	0109c83a 	sub	r4,zero,r4
    4cf0:	01c00044 	movi	r7,1
    4cf4:	003fe306 	br	4c84 <__alt_data_end+0xfffec5e4>
    4cf8:	00c00044 	movi	r3,1
    4cfc:	003fee06 	br	4cb8 <__alt_data_end+0xfffec618>

00004d00 <__modsi3>:
    4d00:	20001716 	blt	r4,zero,4d60 <__modsi3+0x60>
    4d04:	000f883a 	mov	r7,zero
    4d08:	2005883a 	mov	r2,r4
    4d0c:	28001216 	blt	r5,zero,4d58 <__modsi3+0x58>
    4d10:	2900162e 	bgeu	r5,r4,4d6c <__modsi3+0x6c>
    4d14:	01800804 	movi	r6,32
    4d18:	00c00044 	movi	r3,1
    4d1c:	00000106 	br	4d24 <__modsi3+0x24>
    4d20:	30000a26 	beq	r6,zero,4d4c <__modsi3+0x4c>
    4d24:	294b883a 	add	r5,r5,r5
    4d28:	31bfffc4 	addi	r6,r6,-1
    4d2c:	18c7883a 	add	r3,r3,r3
    4d30:	293ffb36 	bltu	r5,r4,4d20 <__alt_data_end+0xfffec680>
    4d34:	18000526 	beq	r3,zero,4d4c <__modsi3+0x4c>
    4d38:	1806d07a 	srli	r3,r3,1
    4d3c:	11400136 	bltu	r2,r5,4d44 <__modsi3+0x44>
    4d40:	1145c83a 	sub	r2,r2,r5
    4d44:	280ad07a 	srli	r5,r5,1
    4d48:	183ffb1e 	bne	r3,zero,4d38 <__alt_data_end+0xfffec698>
    4d4c:	38000126 	beq	r7,zero,4d54 <__modsi3+0x54>
    4d50:	0085c83a 	sub	r2,zero,r2
    4d54:	f800283a 	ret
    4d58:	014bc83a 	sub	r5,zero,r5
    4d5c:	003fec06 	br	4d10 <__alt_data_end+0xfffec670>
    4d60:	0109c83a 	sub	r4,zero,r4
    4d64:	01c00044 	movi	r7,1
    4d68:	003fe706 	br	4d08 <__alt_data_end+0xfffec668>
    4d6c:	00c00044 	movi	r3,1
    4d70:	003ff106 	br	4d38 <__alt_data_end+0xfffec698>

00004d74 <__udivsi3>:
    4d74:	200d883a 	mov	r6,r4
    4d78:	2900152e 	bgeu	r5,r4,4dd0 <__udivsi3+0x5c>
    4d7c:	28001416 	blt	r5,zero,4dd0 <__udivsi3+0x5c>
    4d80:	00800804 	movi	r2,32
    4d84:	00c00044 	movi	r3,1
    4d88:	00000206 	br	4d94 <__udivsi3+0x20>
    4d8c:	10000e26 	beq	r2,zero,4dc8 <__udivsi3+0x54>
    4d90:	28000516 	blt	r5,zero,4da8 <__udivsi3+0x34>
    4d94:	294b883a 	add	r5,r5,r5
    4d98:	10bfffc4 	addi	r2,r2,-1
    4d9c:	18c7883a 	add	r3,r3,r3
    4da0:	293ffa36 	bltu	r5,r4,4d8c <__alt_data_end+0xfffec6ec>
    4da4:	18000826 	beq	r3,zero,4dc8 <__udivsi3+0x54>
    4da8:	0005883a 	mov	r2,zero
    4dac:	31400236 	bltu	r6,r5,4db8 <__udivsi3+0x44>
    4db0:	314dc83a 	sub	r6,r6,r5
    4db4:	10c4b03a 	or	r2,r2,r3
    4db8:	1806d07a 	srli	r3,r3,1
    4dbc:	280ad07a 	srli	r5,r5,1
    4dc0:	183ffa1e 	bne	r3,zero,4dac <__alt_data_end+0xfffec70c>
    4dc4:	f800283a 	ret
    4dc8:	0005883a 	mov	r2,zero
    4dcc:	f800283a 	ret
    4dd0:	00c00044 	movi	r3,1
    4dd4:	003ff406 	br	4da8 <__alt_data_end+0xfffec708>

00004dd8 <__umodsi3>:
    4dd8:	2005883a 	mov	r2,r4
    4ddc:	2900122e 	bgeu	r5,r4,4e28 <__umodsi3+0x50>
    4de0:	28001116 	blt	r5,zero,4e28 <__umodsi3+0x50>
    4de4:	01800804 	movi	r6,32
    4de8:	00c00044 	movi	r3,1
    4dec:	00000206 	br	4df8 <__umodsi3+0x20>
    4df0:	30000c26 	beq	r6,zero,4e24 <__umodsi3+0x4c>
    4df4:	28000516 	blt	r5,zero,4e0c <__umodsi3+0x34>
    4df8:	294b883a 	add	r5,r5,r5
    4dfc:	31bfffc4 	addi	r6,r6,-1
    4e00:	18c7883a 	add	r3,r3,r3
    4e04:	293ffa36 	bltu	r5,r4,4df0 <__alt_data_end+0xfffec750>
    4e08:	18000626 	beq	r3,zero,4e24 <__umodsi3+0x4c>
    4e0c:	1806d07a 	srli	r3,r3,1
    4e10:	11400136 	bltu	r2,r5,4e18 <__umodsi3+0x40>
    4e14:	1145c83a 	sub	r2,r2,r5
    4e18:	280ad07a 	srli	r5,r5,1
    4e1c:	183ffb1e 	bne	r3,zero,4e0c <__alt_data_end+0xfffec76c>
    4e20:	f800283a 	ret
    4e24:	f800283a 	ret
    4e28:	00c00044 	movi	r3,1
    4e2c:	003ff706 	br	4e0c <__alt_data_end+0xfffec76c>

00004e30 <__mulsi3>:
    4e30:	0005883a 	mov	r2,zero
    4e34:	20000726 	beq	r4,zero,4e54 <__mulsi3+0x24>
    4e38:	20c0004c 	andi	r3,r4,1
    4e3c:	2008d07a 	srli	r4,r4,1
    4e40:	18000126 	beq	r3,zero,4e48 <__mulsi3+0x18>
    4e44:	1145883a 	add	r2,r2,r5
    4e48:	294b883a 	add	r5,r5,r5
    4e4c:	203ffa1e 	bne	r4,zero,4e38 <__alt_data_end+0xfffec798>
    4e50:	f800283a 	ret
    4e54:	f800283a 	ret

00004e58 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    4e58:	defffd04 	addi	sp,sp,-12
    4e5c:	df000215 	stw	fp,8(sp)
    4e60:	df000204 	addi	fp,sp,8
    4e64:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    4e68:	0001883a 	nop
    4e6c:	e0bfff17 	ldw	r2,-4(fp)
    4e70:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    4e74:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    4e78:	10000226 	beq	r2,zero,4e84 <_exit+0x2c>
    ALT_SIM_FAIL();
    4e7c:	002af070 	cmpltui	zero,zero,43969
    4e80:	00000106 	br	4e88 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    4e84:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    4e88:	003fff06 	br	4e88 <__alt_data_end+0xfffec7e8>

00004e8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4e8c:	defffe04 	addi	sp,sp,-8
    4e90:	dfc00115 	stw	ra,4(sp)
    4e94:	df000015 	stw	fp,0(sp)
    4e98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4e9c:	d0a00517 	ldw	r2,-32748(gp)
    4ea0:	10000326 	beq	r2,zero,4eb0 <alt_get_errno+0x24>
    4ea4:	d0a00517 	ldw	r2,-32748(gp)
    4ea8:	103ee83a 	callr	r2
    4eac:	00000106 	br	4eb4 <alt_get_errno+0x28>
    4eb0:	d0a6b004 	addi	r2,gp,-25920
}
    4eb4:	e037883a 	mov	sp,fp
    4eb8:	dfc00117 	ldw	ra,4(sp)
    4ebc:	df000017 	ldw	fp,0(sp)
    4ec0:	dec00204 	addi	sp,sp,8
    4ec4:	f800283a 	ret

00004ec8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    4ec8:	defffb04 	addi	sp,sp,-20
    4ecc:	dfc00415 	stw	ra,16(sp)
    4ed0:	df000315 	stw	fp,12(sp)
    4ed4:	df000304 	addi	fp,sp,12
    4ed8:	e13ffe15 	stw	r4,-8(fp)
    4edc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4ee0:	e0bffe17 	ldw	r2,-8(fp)
    4ee4:	10000816 	blt	r2,zero,4f08 <fstat+0x40>
    4ee8:	01400304 	movi	r5,12
    4eec:	e13ffe17 	ldw	r4,-8(fp)
    4ef0:	0004e300 	call	4e30 <__mulsi3>
    4ef4:	1007883a 	mov	r3,r2
    4ef8:	00800034 	movhi	r2,0
    4efc:	10997204 	addi	r2,r2,26056
    4f00:	1885883a 	add	r2,r3,r2
    4f04:	00000106 	br	4f0c <fstat+0x44>
    4f08:	0005883a 	mov	r2,zero
    4f0c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    4f10:	e0bffd17 	ldw	r2,-12(fp)
    4f14:	10001026 	beq	r2,zero,4f58 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    4f18:	e0bffd17 	ldw	r2,-12(fp)
    4f1c:	10800017 	ldw	r2,0(r2)
    4f20:	10800817 	ldw	r2,32(r2)
    4f24:	10000726 	beq	r2,zero,4f44 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    4f28:	e0bffd17 	ldw	r2,-12(fp)
    4f2c:	10800017 	ldw	r2,0(r2)
    4f30:	10800817 	ldw	r2,32(r2)
    4f34:	e17fff17 	ldw	r5,-4(fp)
    4f38:	e13ffd17 	ldw	r4,-12(fp)
    4f3c:	103ee83a 	callr	r2
    4f40:	00000a06 	br	4f6c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    4f44:	e0bfff17 	ldw	r2,-4(fp)
    4f48:	00c80004 	movi	r3,8192
    4f4c:	10c00115 	stw	r3,4(r2)
      return 0;
    4f50:	0005883a 	mov	r2,zero
    4f54:	00000506 	br	4f6c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    4f58:	0004e8c0 	call	4e8c <alt_get_errno>
    4f5c:	1007883a 	mov	r3,r2
    4f60:	00801444 	movi	r2,81
    4f64:	18800015 	stw	r2,0(r3)
    return -1;
    4f68:	00bfffc4 	movi	r2,-1
  }
}
    4f6c:	e037883a 	mov	sp,fp
    4f70:	dfc00117 	ldw	ra,4(sp)
    4f74:	df000017 	ldw	fp,0(sp)
    4f78:	dec00204 	addi	sp,sp,8
    4f7c:	f800283a 	ret

00004f80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4f80:	defffe04 	addi	sp,sp,-8
    4f84:	dfc00115 	stw	ra,4(sp)
    4f88:	df000015 	stw	fp,0(sp)
    4f8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4f90:	d0a00517 	ldw	r2,-32748(gp)
    4f94:	10000326 	beq	r2,zero,4fa4 <alt_get_errno+0x24>
    4f98:	d0a00517 	ldw	r2,-32748(gp)
    4f9c:	103ee83a 	callr	r2
    4fa0:	00000106 	br	4fa8 <alt_get_errno+0x28>
    4fa4:	d0a6b004 	addi	r2,gp,-25920
}
    4fa8:	e037883a 	mov	sp,fp
    4fac:	dfc00117 	ldw	ra,4(sp)
    4fb0:	df000017 	ldw	fp,0(sp)
    4fb4:	dec00204 	addi	sp,sp,8
    4fb8:	f800283a 	ret

00004fbc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    4fbc:	deffed04 	addi	sp,sp,-76
    4fc0:	dfc01215 	stw	ra,72(sp)
    4fc4:	df001115 	stw	fp,68(sp)
    4fc8:	df001104 	addi	fp,sp,68
    4fcc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4fd0:	e0bfff17 	ldw	r2,-4(fp)
    4fd4:	10000816 	blt	r2,zero,4ff8 <isatty+0x3c>
    4fd8:	01400304 	movi	r5,12
    4fdc:	e13fff17 	ldw	r4,-4(fp)
    4fe0:	0004e300 	call	4e30 <__mulsi3>
    4fe4:	1007883a 	mov	r3,r2
    4fe8:	00800034 	movhi	r2,0
    4fec:	10997204 	addi	r2,r2,26056
    4ff0:	1885883a 	add	r2,r3,r2
    4ff4:	00000106 	br	4ffc <isatty+0x40>
    4ff8:	0005883a 	mov	r2,zero
    4ffc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    5000:	e0bfef17 	ldw	r2,-68(fp)
    5004:	10000e26 	beq	r2,zero,5040 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    5008:	e0bfef17 	ldw	r2,-68(fp)
    500c:	10800017 	ldw	r2,0(r2)
    5010:	10800817 	ldw	r2,32(r2)
    5014:	1000021e 	bne	r2,zero,5020 <isatty+0x64>
    {
      return 1;
    5018:	00800044 	movi	r2,1
    501c:	00000d06 	br	5054 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    5020:	e0bff004 	addi	r2,fp,-64
    5024:	100b883a 	mov	r5,r2
    5028:	e13fff17 	ldw	r4,-4(fp)
    502c:	0004ec80 	call	4ec8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    5030:	e0bff117 	ldw	r2,-60(fp)
    5034:	10880020 	cmpeqi	r2,r2,8192
    5038:	10803fcc 	andi	r2,r2,255
    503c:	00000506 	br	5054 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    5040:	0004f800 	call	4f80 <alt_get_errno>
    5044:	1007883a 	mov	r3,r2
    5048:	00801444 	movi	r2,81
    504c:	18800015 	stw	r2,0(r3)
    return 0;
    5050:	0005883a 	mov	r2,zero
  }
}
    5054:	e037883a 	mov	sp,fp
    5058:	dfc00117 	ldw	ra,4(sp)
    505c:	df000017 	ldw	fp,0(sp)
    5060:	dec00204 	addi	sp,sp,8
    5064:	f800283a 	ret

00005068 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5068:	defffe04 	addi	sp,sp,-8
    506c:	dfc00115 	stw	ra,4(sp)
    5070:	df000015 	stw	fp,0(sp)
    5074:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5078:	d0a00517 	ldw	r2,-32748(gp)
    507c:	10000326 	beq	r2,zero,508c <alt_get_errno+0x24>
    5080:	d0a00517 	ldw	r2,-32748(gp)
    5084:	103ee83a 	callr	r2
    5088:	00000106 	br	5090 <alt_get_errno+0x28>
    508c:	d0a6b004 	addi	r2,gp,-25920
}
    5090:	e037883a 	mov	sp,fp
    5094:	dfc00117 	ldw	ra,4(sp)
    5098:	df000017 	ldw	fp,0(sp)
    509c:	dec00204 	addi	sp,sp,8
    50a0:	f800283a 	ret

000050a4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    50a4:	defff904 	addi	sp,sp,-28
    50a8:	dfc00615 	stw	ra,24(sp)
    50ac:	df000515 	stw	fp,20(sp)
    50b0:	df000504 	addi	fp,sp,20
    50b4:	e13ffd15 	stw	r4,-12(fp)
    50b8:	e17ffe15 	stw	r5,-8(fp)
    50bc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    50c0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    50c4:	e0bffd17 	ldw	r2,-12(fp)
    50c8:	10000816 	blt	r2,zero,50ec <lseek+0x48>
    50cc:	01400304 	movi	r5,12
    50d0:	e13ffd17 	ldw	r4,-12(fp)
    50d4:	0004e300 	call	4e30 <__mulsi3>
    50d8:	1007883a 	mov	r3,r2
    50dc:	00800034 	movhi	r2,0
    50e0:	10997204 	addi	r2,r2,26056
    50e4:	1885883a 	add	r2,r3,r2
    50e8:	00000106 	br	50f0 <lseek+0x4c>
    50ec:	0005883a 	mov	r2,zero
    50f0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    50f4:	e0bffc17 	ldw	r2,-16(fp)
    50f8:	10001026 	beq	r2,zero,513c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    50fc:	e0bffc17 	ldw	r2,-16(fp)
    5100:	10800017 	ldw	r2,0(r2)
    5104:	10800717 	ldw	r2,28(r2)
    5108:	10000926 	beq	r2,zero,5130 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    510c:	e0bffc17 	ldw	r2,-16(fp)
    5110:	10800017 	ldw	r2,0(r2)
    5114:	10800717 	ldw	r2,28(r2)
    5118:	e1bfff17 	ldw	r6,-4(fp)
    511c:	e17ffe17 	ldw	r5,-8(fp)
    5120:	e13ffc17 	ldw	r4,-16(fp)
    5124:	103ee83a 	callr	r2
    5128:	e0bffb15 	stw	r2,-20(fp)
    512c:	00000506 	br	5144 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    5130:	00bfde84 	movi	r2,-134
    5134:	e0bffb15 	stw	r2,-20(fp)
    5138:	00000206 	br	5144 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    513c:	00bfebc4 	movi	r2,-81
    5140:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    5144:	e0bffb17 	ldw	r2,-20(fp)
    5148:	1000070e 	bge	r2,zero,5168 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    514c:	00050680 	call	5068 <alt_get_errno>
    5150:	1007883a 	mov	r3,r2
    5154:	e0bffb17 	ldw	r2,-20(fp)
    5158:	0085c83a 	sub	r2,zero,r2
    515c:	18800015 	stw	r2,0(r3)
    rc = -1;
    5160:	00bfffc4 	movi	r2,-1
    5164:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    5168:	e0bffb17 	ldw	r2,-20(fp)
}
    516c:	e037883a 	mov	sp,fp
    5170:	dfc00117 	ldw	ra,4(sp)
    5174:	df000017 	ldw	fp,0(sp)
    5178:	dec00204 	addi	sp,sp,8
    517c:	f800283a 	ret

00005180 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    5180:	defffe04 	addi	sp,sp,-8
    5184:	df000115 	stw	fp,4(sp)
    5188:	df000104 	addi	fp,sp,4
    518c:	e13fff15 	stw	r4,-4(fp)
}
    5190:	0001883a 	nop
    5194:	e037883a 	mov	sp,fp
    5198:	df000017 	ldw	fp,0(sp)
    519c:	dec00104 	addi	sp,sp,4
    51a0:	f800283a 	ret

000051a4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    51a4:	defffe04 	addi	sp,sp,-8
    51a8:	df000115 	stw	fp,4(sp)
    51ac:	df000104 	addi	fp,sp,4
    51b0:	e13fff15 	stw	r4,-4(fp)
}
    51b4:	0001883a 	nop
    51b8:	e037883a 	mov	sp,fp
    51bc:	df000017 	ldw	fp,0(sp)
    51c0:	dec00104 	addi	sp,sp,4
    51c4:	f800283a 	ret

000051c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    51c8:	defffe04 	addi	sp,sp,-8
    51cc:	dfc00115 	stw	ra,4(sp)
    51d0:	df000015 	stw	fp,0(sp)
    51d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    51d8:	d0a00517 	ldw	r2,-32748(gp)
    51dc:	10000326 	beq	r2,zero,51ec <alt_get_errno+0x24>
    51e0:	d0a00517 	ldw	r2,-32748(gp)
    51e4:	103ee83a 	callr	r2
    51e8:	00000106 	br	51f0 <alt_get_errno+0x28>
    51ec:	d0a6b004 	addi	r2,gp,-25920
}
    51f0:	e037883a 	mov	sp,fp
    51f4:	dfc00117 	ldw	ra,4(sp)
    51f8:	df000017 	ldw	fp,0(sp)
    51fc:	dec00204 	addi	sp,sp,8
    5200:	f800283a 	ret

00005204 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    5204:	defff904 	addi	sp,sp,-28
    5208:	dfc00615 	stw	ra,24(sp)
    520c:	df000515 	stw	fp,20(sp)
    5210:	df000504 	addi	fp,sp,20
    5214:	e13ffd15 	stw	r4,-12(fp)
    5218:	e17ffe15 	stw	r5,-8(fp)
    521c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5220:	e0bffd17 	ldw	r2,-12(fp)
    5224:	10000816 	blt	r2,zero,5248 <read+0x44>
    5228:	01400304 	movi	r5,12
    522c:	e13ffd17 	ldw	r4,-12(fp)
    5230:	0004e300 	call	4e30 <__mulsi3>
    5234:	1007883a 	mov	r3,r2
    5238:	00800034 	movhi	r2,0
    523c:	10997204 	addi	r2,r2,26056
    5240:	1885883a 	add	r2,r3,r2
    5244:	00000106 	br	524c <read+0x48>
    5248:	0005883a 	mov	r2,zero
    524c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    5250:	e0bffb17 	ldw	r2,-20(fp)
    5254:	10002226 	beq	r2,zero,52e0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    5258:	e0bffb17 	ldw	r2,-20(fp)
    525c:	10800217 	ldw	r2,8(r2)
    5260:	108000cc 	andi	r2,r2,3
    5264:	10800060 	cmpeqi	r2,r2,1
    5268:	1000181e 	bne	r2,zero,52cc <read+0xc8>
        (fd->dev->read))
    526c:	e0bffb17 	ldw	r2,-20(fp)
    5270:	10800017 	ldw	r2,0(r2)
    5274:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    5278:	10001426 	beq	r2,zero,52cc <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    527c:	e0bffb17 	ldw	r2,-20(fp)
    5280:	10800017 	ldw	r2,0(r2)
    5284:	10800517 	ldw	r2,20(r2)
    5288:	e0ffff17 	ldw	r3,-4(fp)
    528c:	180d883a 	mov	r6,r3
    5290:	e17ffe17 	ldw	r5,-8(fp)
    5294:	e13ffb17 	ldw	r4,-20(fp)
    5298:	103ee83a 	callr	r2
    529c:	e0bffc15 	stw	r2,-16(fp)
    52a0:	e0bffc17 	ldw	r2,-16(fp)
    52a4:	1000070e 	bge	r2,zero,52c4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    52a8:	00051c80 	call	51c8 <alt_get_errno>
    52ac:	1007883a 	mov	r3,r2
    52b0:	e0bffc17 	ldw	r2,-16(fp)
    52b4:	0085c83a 	sub	r2,zero,r2
    52b8:	18800015 	stw	r2,0(r3)
          return -1;
    52bc:	00bfffc4 	movi	r2,-1
    52c0:	00000c06 	br	52f4 <read+0xf0>
        }
        return rval;
    52c4:	e0bffc17 	ldw	r2,-16(fp)
    52c8:	00000a06 	br	52f4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    52cc:	00051c80 	call	51c8 <alt_get_errno>
    52d0:	1007883a 	mov	r3,r2
    52d4:	00800344 	movi	r2,13
    52d8:	18800015 	stw	r2,0(r3)
    52dc:	00000406 	br	52f0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    52e0:	00051c80 	call	51c8 <alt_get_errno>
    52e4:	1007883a 	mov	r3,r2
    52e8:	00801444 	movi	r2,81
    52ec:	18800015 	stw	r2,0(r3)
  }
  return -1;
    52f0:	00bfffc4 	movi	r2,-1
}
    52f4:	e037883a 	mov	sp,fp
    52f8:	dfc00117 	ldw	ra,4(sp)
    52fc:	df000017 	ldw	fp,0(sp)
    5300:	dec00204 	addi	sp,sp,8
    5304:	f800283a 	ret

00005308 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    5308:	defff904 	addi	sp,sp,-28
    530c:	df000615 	stw	fp,24(sp)
    5310:	df000604 	addi	fp,sp,24
    5314:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5318:	0005303a 	rdctl	r2,status
    531c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5320:	e0fffe17 	ldw	r3,-8(fp)
    5324:	00bfff84 	movi	r2,-2
    5328:	1884703a 	and	r2,r3,r2
    532c:	1001703a 	wrctl	status,r2
  
  return context;
    5330:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    5334:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    5338:	d0a00d17 	ldw	r2,-32716(gp)
    533c:	10c000c4 	addi	r3,r2,3
    5340:	00bfff04 	movi	r2,-4
    5344:	1884703a 	and	r2,r3,r2
    5348:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    534c:	d0e00d17 	ldw	r3,-32716(gp)
    5350:	e0bfff17 	ldw	r2,-4(fp)
    5354:	1887883a 	add	r3,r3,r2
    5358:	008000b4 	movhi	r2,2
    535c:	10a1a804 	addi	r2,r2,-31072
    5360:	10c0062e 	bgeu	r2,r3,537c <sbrk+0x74>
    5364:	e0bffb17 	ldw	r2,-20(fp)
    5368:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    536c:	e0bffa17 	ldw	r2,-24(fp)
    5370:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    5374:	00bfffc4 	movi	r2,-1
    5378:	00000b06 	br	53a8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    537c:	d0a00d17 	ldw	r2,-32716(gp)
    5380:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    5384:	d0e00d17 	ldw	r3,-32716(gp)
    5388:	e0bfff17 	ldw	r2,-4(fp)
    538c:	1885883a 	add	r2,r3,r2
    5390:	d0a00d15 	stw	r2,-32716(gp)
    5394:	e0bffb17 	ldw	r2,-20(fp)
    5398:	e0bffc15 	stw	r2,-16(fp)
    539c:	e0bffc17 	ldw	r2,-16(fp)
    53a0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    53a4:	e0bffd17 	ldw	r2,-12(fp)
} 
    53a8:	e037883a 	mov	sp,fp
    53ac:	df000017 	ldw	fp,0(sp)
    53b0:	dec00104 	addi	sp,sp,4
    53b4:	f800283a 	ret

000053b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    53b8:	defffe04 	addi	sp,sp,-8
    53bc:	dfc00115 	stw	ra,4(sp)
    53c0:	df000015 	stw	fp,0(sp)
    53c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    53c8:	d0a00517 	ldw	r2,-32748(gp)
    53cc:	10000326 	beq	r2,zero,53dc <alt_get_errno+0x24>
    53d0:	d0a00517 	ldw	r2,-32748(gp)
    53d4:	103ee83a 	callr	r2
    53d8:	00000106 	br	53e0 <alt_get_errno+0x28>
    53dc:	d0a6b004 	addi	r2,gp,-25920
}
    53e0:	e037883a 	mov	sp,fp
    53e4:	dfc00117 	ldw	ra,4(sp)
    53e8:	df000017 	ldw	fp,0(sp)
    53ec:	dec00204 	addi	sp,sp,8
    53f0:	f800283a 	ret

000053f4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    53f4:	defff904 	addi	sp,sp,-28
    53f8:	dfc00615 	stw	ra,24(sp)
    53fc:	df000515 	stw	fp,20(sp)
    5400:	df000504 	addi	fp,sp,20
    5404:	e13ffd15 	stw	r4,-12(fp)
    5408:	e17ffe15 	stw	r5,-8(fp)
    540c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5410:	e0bffd17 	ldw	r2,-12(fp)
    5414:	10000816 	blt	r2,zero,5438 <write+0x44>
    5418:	01400304 	movi	r5,12
    541c:	e13ffd17 	ldw	r4,-12(fp)
    5420:	0004e300 	call	4e30 <__mulsi3>
    5424:	1007883a 	mov	r3,r2
    5428:	00800034 	movhi	r2,0
    542c:	10997204 	addi	r2,r2,26056
    5430:	1885883a 	add	r2,r3,r2
    5434:	00000106 	br	543c <write+0x48>
    5438:	0005883a 	mov	r2,zero
    543c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    5440:	e0bffb17 	ldw	r2,-20(fp)
    5444:	10002126 	beq	r2,zero,54cc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    5448:	e0bffb17 	ldw	r2,-20(fp)
    544c:	10800217 	ldw	r2,8(r2)
    5450:	108000cc 	andi	r2,r2,3
    5454:	10001826 	beq	r2,zero,54b8 <write+0xc4>
    5458:	e0bffb17 	ldw	r2,-20(fp)
    545c:	10800017 	ldw	r2,0(r2)
    5460:	10800617 	ldw	r2,24(r2)
    5464:	10001426 	beq	r2,zero,54b8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    5468:	e0bffb17 	ldw	r2,-20(fp)
    546c:	10800017 	ldw	r2,0(r2)
    5470:	10800617 	ldw	r2,24(r2)
    5474:	e0ffff17 	ldw	r3,-4(fp)
    5478:	180d883a 	mov	r6,r3
    547c:	e17ffe17 	ldw	r5,-8(fp)
    5480:	e13ffb17 	ldw	r4,-20(fp)
    5484:	103ee83a 	callr	r2
    5488:	e0bffc15 	stw	r2,-16(fp)
    548c:	e0bffc17 	ldw	r2,-16(fp)
    5490:	1000070e 	bge	r2,zero,54b0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    5494:	00053b80 	call	53b8 <alt_get_errno>
    5498:	1007883a 	mov	r3,r2
    549c:	e0bffc17 	ldw	r2,-16(fp)
    54a0:	0085c83a 	sub	r2,zero,r2
    54a4:	18800015 	stw	r2,0(r3)
        return -1;
    54a8:	00bfffc4 	movi	r2,-1
    54ac:	00000c06 	br	54e0 <write+0xec>
      }
      return rval;
    54b0:	e0bffc17 	ldw	r2,-16(fp)
    54b4:	00000a06 	br	54e0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    54b8:	00053b80 	call	53b8 <alt_get_errno>
    54bc:	1007883a 	mov	r3,r2
    54c0:	00800344 	movi	r2,13
    54c4:	18800015 	stw	r2,0(r3)
    54c8:	00000406 	br	54dc <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    54cc:	00053b80 	call	53b8 <alt_get_errno>
    54d0:	1007883a 	mov	r3,r2
    54d4:	00801444 	movi	r2,81
    54d8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    54dc:	00bfffc4 	movi	r2,-1
}
    54e0:	e037883a 	mov	sp,fp
    54e4:	dfc00117 	ldw	ra,4(sp)
    54e8:	df000017 	ldw	fp,0(sp)
    54ec:	dec00204 	addi	sp,sp,8
    54f0:	f800283a 	ret
