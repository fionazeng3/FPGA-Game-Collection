
lab4.elf:     file format elf32-littlenios2
lab4.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000007b8 memsz 0x000007b8 flags r-x
    LOAD off    0x000017d8 vaddr 0x000007d8 paddr 0x0000084c align 2**12
         filesz 0x00000074 memsz 0x00000074 flags rw-
    LOAD off    0x000018c0 vaddr 0x000008c0 paddr 0x000008c0 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  0000184c  2**0
                  CONTENTS
  2 .text         0000078c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000002c  000007ac  000007ac  000017ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000074  000007d8  0000084c  000017d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000008c0  000008c0  000018c0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  000008cc  000008cc  0000184c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000184c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000288  00000000  00000000  00001870  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001d1d  00000000  00000000  00001af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000db2  00000000  00000000  00003815  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000ee2  00000000  00000000  000045c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000344  00000000  00000000  000054ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000a4c  00000000  00000000  000057f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009df  00000000  00000000  0000623c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00006c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000120  00000000  00000000  00006c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00007dfa  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00007dfd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00007e00  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00007e01  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00007e02  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00007e0b  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00007e14  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000005  00000000  00000000  00007e1d  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000021  00000000  00000000  00007e22  2**0
                  CONTENTS, READONLY
 26 .jdi          00003753  00000000  00000000  00007e43  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0007b94d  00000000  00000000  0000b596  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
000007ac l    d  .rodata	00000000 .rodata
000007d8 l    d  .rwdata	00000000 .rwdata
000008c0 l    d  .bss	00000000 .bss
000008cc l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab4_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000005a0 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000240 g     F .text	0000002c alt_main
0000084c g       *ABS*	00000000 __flash_rwdata_start
00000424 g     F .text	00000038 alt_putstr
00000834 g     O .rwdata	00000004 jtag_uart
000005ac g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000008c4 g     O .bss	00000004 alt_argv
00008830 g       *ABS*	00000000 _gp
0000045c g     F .text	00000004 usleep
000007d8 g     O .rwdata	00000030 alt_fd_list
00000484 g     F .text	0000005c altera_avalon_jtag_uart_read
000006c8 g     F .text	00000064 .hidden __udivsi3
00000838 g     O .rwdata	00000004 alt_max_fd
000008cc g       *ABS*	00000000 __bss_end
0000011c g     F .text	00000044 alt_getchar
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
00000808 g     O .rwdata	00000028 alt_dev_null
0000059c g     F .text	00000004 alt_dcache_flush_all
0000084c g       *ABS*	00000000 __ram_rwdata_end
0000083c g     O .rwdata	00000008 alt_dev_list
000007d8 g       *ABS*	00000000 __ram_rodata_end
0000072c g     F .text	00000058 .hidden __umodsi3
000008cc g       *ABS*	00000000 end
00001000 g       *ABS*	00000000 __alt_stack_pointer
000004e0 g     F .text	00000034 altera_avalon_jtag_uart_write
0000026c g     F .text	00000170 alt_printf
00000020 g     F .text	0000003c _start
00000480 g     F .text	00000004 alt_sys_init
00000784 g     F .text	00000028 .hidden __mulsi3
000007d8 g       *ABS*	00000000 __ram_rwdata_start
000007ac g       *ABS*	00000000 __ram_rodata_start
00000514 g     F .text	00000088 alt_busy_sleep
000008cc g       *ABS*	00000000 __alt_stack_base
000008c0 g       *ABS*	00000000 __bss_start
0000005c g     F .text	000000c0 main
000008c0 g     O .bss	00000004 alt_envp
00000830 g     O .rwdata	00000001 bufferIn
000005d0 g     F .text	00000084 .hidden __divsi3
000007ac g       *ABS*	00000000 __flash_rodata_start
00000460 g     F .text	00000020 alt_irq_init
000008c8 g     O .bss	00000004 alt_argc
00000844 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000084c g       *ABS*	00000000 _edata
000008cc g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00000654 g     F .text	00000074 .hidden __modsi3
00001000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
000005b4 g     F .text	0000001c strlen
000003dc g     F .text	00000048 alt_putchar
000005a8 g     F .text	00000004 alt_icache_flush_all
00000160 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dec40014 	ori	sp,sp,4096
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a20c14 	ori	gp,gp,34864
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	10823014 	ori	r2,r2,2240

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c23314 	ori	r3,r3,2252

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff7814>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00001600 	call	160 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00002400 	call	240 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <_gp+0xffff7828>

0000005c <main>:
#define sout (volatile char *) 0x0002000

// Writes given character
char bufferIn = '0';
int main()
{
  5c:	defffc04 	addi	sp,sp,-16
  60:	dfc00315 	stw	ra,12(sp)
  64:	dc800215 	stw	r18,8(sp)
  68:	dc400115 	stw	r17,4(sp)
  6c:	dc000015 	stw	r16,0(sp)

	*load = 0;
  70:	00881004 	movi	r2,8256
  74:	10000005 	stb	zero,0(r2)
	*enable = 0;
  78:	00880c04 	movi	r2,8240
  7c:	10000005 	stb	zero,0(r2)
//	*data_in = 0xFF;

	while (1)
	{
		// Write
		alt_putstr("Enter a letter:\n");
  80:	01000034 	movhi	r4,0
  84:	2101eb04 	addi	r4,r4,1964
  88:	00004240 	call	424 <alt_putstr>
		char keyboard = alt_getchar();
  8c:	000011c0 	call	11c <alt_getchar>
  90:	1021883a 	mov	r16,r2
		alt_getchar();
		*(enable) = 1;
  94:	04480c04 	movi	r17,8240
	while (1)
	{
		// Write
		alt_putstr("Enter a letter:\n");
		char keyboard = alt_getchar();
		alt_getchar();
  98:	000011c0 	call	11c <alt_getchar>
		*(enable) = 1;
  9c:	04800044 	movi	r18,1
  a0:	8c800005 	stb	r18,0(r17)
		usleep(10000);
  a4:	0109c404 	movi	r4,10000
  a8:	000045c0 	call	45c <usleep>
		*(data_out) = keyboard;
  ac:	00881404 	movi	r2,8272
  b0:	14000005 	stb	r16,0(r2)
		usleep(10000);
  b4:	0109c404 	movi	r4,10000
  b8:	000045c0 	call	45c <usleep>
		*(load) = 1;
  bc:	04081004 	movi	r16,8256
  c0:	84800005 	stb	r18,0(r16)
		usleep(50000);
  c4:	0130d414 	movui	r4,50000
  c8:	000045c0 	call	45c <usleep>
		*(enable) = 0;

		*(load) = 0;
		usleep(500000);
  cc:	01000234 	movhi	r4,8
		usleep(10000);
		*(data_out) = keyboard;
		usleep(10000);
		*(load) = 1;
		usleep(50000);
		*(enable) = 0;
  d0:	88000005 	stb	zero,0(r17)

		*(load) = 0;
  d4:	80000005 	stb	zero,0(r16)
		usleep(500000);
  d8:	21284804 	addi	r4,r4,-24288
  dc:	000045c0 	call	45c <usleep>

		//writeToSerial(keyboard);
		//bufferIn = keyboard;
        alt_printf("data in %c", *data_in);
  e0:	04081804 	movi	r16,8288
  e4:	81400003 	ldbu	r5,0(r16)
  e8:	01000034 	movhi	r4,0
  ec:	2101f004 	addi	r4,r4,1984
  f0:	29403fcc 	andi	r5,r5,255
  f4:	2940201c 	xori	r5,r5,128
  f8:	297fe004 	addi	r5,r5,-128
  fc:	000026c0 	call	26c <alt_printf>
		*leds = *data_in;
 100:	80c00003 	ldbu	r3,0(r16)
 104:	00882c04 	movi	r2,8368
		usleep(1000000);
 108:	010003f4 	movhi	r4,15
		usleep(500000);

		//writeToSerial(keyboard);
		//bufferIn = keyboard;
        alt_printf("data in %c", *data_in);
		*leds = *data_in;
 10c:	10c00005 	stb	r3,0(r2)
		usleep(1000000);
 110:	21109004 	addi	r4,r4,16960
 114:	000045c0 	call	45c <usleep>
 118:	003fd906 	br	80 <_gp+0xffff7850>

0000011c <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 11c:	00800034 	movhi	r2,0
 120:	1081f604 	addi	r2,r2,2008
 124:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
 128:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 12c:	01000034 	movhi	r4,0
 130:	01800044 	movi	r6,1
 134:	d80b883a 	mov	r5,sp
 138:	21020d04 	addi	r4,r4,2100
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
 13c:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 140:	00004840 	call	484 <altera_avalon_jtag_uart_read>
 144:	0080020e 	bge	zero,r2,150 <alt_getchar+0x34>
        return -1;
    }
    return c;
 148:	d8800007 	ldb	r2,0(sp)
 14c:	00000106 	br	154 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
 150:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
 154:	dfc00117 	ldw	ra,4(sp)
 158:	dec00204 	addi	sp,sp,8
 15c:	f800283a 	ret

00000160 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 160:	deffff04 	addi	sp,sp,-4
 164:	01000034 	movhi	r4,0
 168:	01400034 	movhi	r5,0
 16c:	dfc00015 	stw	ra,0(sp)
 170:	2101f604 	addi	r4,r4,2008
 174:	29421304 	addi	r5,r5,2124

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 178:	2140061e 	bne	r4,r5,194 <alt_load+0x34>
 17c:	01000034 	movhi	r4,0
 180:	01400034 	movhi	r5,0
 184:	21000804 	addi	r4,r4,32
 188:	29400804 	addi	r5,r5,32
 18c:	2140121e 	bne	r4,r5,1d8 <alt_load+0x78>
 190:	00000b06 	br	1c0 <alt_load+0x60>
 194:	00c00034 	movhi	r3,0
 198:	18c21304 	addi	r3,r3,2124
 19c:	1907c83a 	sub	r3,r3,r4
 1a0:	0005883a 	mov	r2,zero
  {
    while( to != end )
 1a4:	10fff526 	beq	r2,r3,17c <_gp+0xffff794c>
    {
      *to++ = *from++;
 1a8:	114f883a 	add	r7,r2,r5
 1ac:	39c00017 	ldw	r7,0(r7)
 1b0:	110d883a 	add	r6,r2,r4
 1b4:	10800104 	addi	r2,r2,4
 1b8:	31c00015 	stw	r7,0(r6)
 1bc:	003ff906 	br	1a4 <_gp+0xffff7974>
 1c0:	01000034 	movhi	r4,0
 1c4:	01400034 	movhi	r5,0
 1c8:	2101eb04 	addi	r4,r4,1964
 1cc:	2941eb04 	addi	r5,r5,1964

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 1d0:	2140101e 	bne	r4,r5,214 <alt_load+0xb4>
 1d4:	00000b06 	br	204 <alt_load+0xa4>
 1d8:	00c00034 	movhi	r3,0
 1dc:	18c00804 	addi	r3,r3,32
 1e0:	1907c83a 	sub	r3,r3,r4
 1e4:	0005883a 	mov	r2,zero
  {
    while( to != end )
 1e8:	10fff526 	beq	r2,r3,1c0 <_gp+0xffff7990>
    {
      *to++ = *from++;
 1ec:	114f883a 	add	r7,r2,r5
 1f0:	39c00017 	ldw	r7,0(r7)
 1f4:	110d883a 	add	r6,r2,r4
 1f8:	10800104 	addi	r2,r2,4
 1fc:	31c00015 	stw	r7,0(r6)
 200:	003ff906 	br	1e8 <_gp+0xffff79b8>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 204:	000059c0 	call	59c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 208:	dfc00017 	ldw	ra,0(sp)
 20c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 210:	00005a81 	jmpi	5a8 <alt_icache_flush_all>
 214:	00c00034 	movhi	r3,0
 218:	18c1f604 	addi	r3,r3,2008
 21c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 220:	0005883a 	mov	r2,zero
  {
    while( to != end )
 224:	18bff726 	beq	r3,r2,204 <_gp+0xffff79d4>
    {
      *to++ = *from++;
 228:	114f883a 	add	r7,r2,r5
 22c:	39c00017 	ldw	r7,0(r7)
 230:	110d883a 	add	r6,r2,r4
 234:	10800104 	addi	r2,r2,4
 238:	31c00015 	stw	r7,0(r6)
 23c:	003ff906 	br	224 <_gp+0xffff79f4>

00000240 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 240:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 244:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 248:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 24c:	00004600 	call	460 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 250:	00004800 	call	480 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 254:	d1a02417 	ldw	r6,-32624(gp)
 258:	d1602517 	ldw	r5,-32620(gp)
 25c:	d1202617 	ldw	r4,-32616(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 260:	dfc00017 	ldw	ra,0(sp)
 264:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 268:	000005c1 	jmpi	5c <main>

0000026c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 26c:	defff204 	addi	sp,sp,-56
 270:	2005883a 	mov	r2,r4
 274:	dfc00a15 	stw	ra,40(sp)
 278:	df000915 	stw	fp,36(sp)
 27c:	ddc00815 	stw	r23,32(sp)
 280:	dd800715 	stw	r22,28(sp)
 284:	dd400615 	stw	r21,24(sp)
 288:	dd000515 	stw	r20,20(sp)
 28c:	dcc00415 	stw	r19,16(sp)
 290:	dc800315 	stw	r18,12(sp)
 294:	dc400215 	stw	r17,8(sp)
 298:	dc000115 	stw	r16,4(sp)
 29c:	d9400b15 	stw	r5,44(sp)
 2a0:	d9800c15 	stw	r6,48(sp)
 2a4:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 2a8:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
 2ac:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
 2b0:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
 2b4:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 2b8:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 2bc:	11000007 	ldb	r4,0(r2)
 2c0:	20003a26 	beq	r4,zero,3ac <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 2c4:	24000226 	beq	r4,r16,2d0 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 2c8:	14400044 	addi	r17,r2,1
 2cc:	00001406 	br	320 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 2d0:	14400084 	addi	r17,r2,2
 2d4:	10800047 	ldb	r2,1(r2)
 2d8:	10003426 	beq	r2,zero,3ac <alt_printf+0x140>
            {
                if (c == '%')
 2dc:	1400021e 	bne	r2,r16,2e8 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 2e0:	8009883a 	mov	r4,r16
 2e4:	00000e06 	br	320 <alt_printf+0xb4>
                } 
                else if (c == 'c')
 2e8:	1480051e 	bne	r2,r18,300 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
 2ec:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
 2f0:	ad800104 	addi	r22,r21,4
 2f4:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
 2f8:	00003dc0 	call	3dc <alt_putchar>
 2fc:	00002906 	br	3a4 <alt_printf+0x138>
                }
                else if (c == 'x')
 300:	14c0201e 	bne	r2,r19,384 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 304:	adc00017 	ldw	r23,0(r21)
 308:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 30c:	b8000326 	beq	r23,zero,31c <alt_printf+0xb0>
 310:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 314:	00c003c4 	movi	r3,15
 318:	00000306 	br	328 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
 31c:	01000c04 	movi	r4,48
 320:	00003dc0 	call	3dc <alt_putchar>
                        continue;
 324:	00001f06 	br	3a4 <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 328:	1d84983a 	sll	r2,r3,r22
 32c:	15c4703a 	and	r2,r2,r23
 330:	1000021e 	bne	r2,zero,33c <alt_printf+0xd0>
                        digit_shift -= 4;
 334:	b5bfff04 	addi	r22,r22,-4
 338:	003ffb06 	br	328 <_gp+0xffff7af8>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 33c:	070003c4 	movi	fp,15
                        if (digit <= 9)
 340:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 344:	b0001716 	blt	r22,zero,3a4 <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 348:	e588983a 	sll	r4,fp,r22
 34c:	25c8703a 	and	r4,r4,r23
 350:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
 354:	19000236 	bltu	r3,r4,360 <alt_printf+0xf4>
                            c = '0' + digit;
 358:	21000c04 	addi	r4,r4,48
 35c:	00000106 	br	364 <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
 360:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
 364:	21003fcc 	andi	r4,r4,255
 368:	2100201c 	xori	r4,r4,128
 36c:	213fe004 	addi	r4,r4,-128
 370:	d8c00015 	stw	r3,0(sp)
 374:	00003dc0 	call	3dc <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 378:	b5bfff04 	addi	r22,r22,-4
 37c:	d8c00017 	ldw	r3,0(sp)
 380:	003ff006 	br	344 <_gp+0xffff7b14>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 384:	1500071e 	bne	r2,r20,3a4 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 388:	ad800017 	ldw	r22,0(r21)
 38c:	ad400104 	addi	r21,r21,4

                    while(*s)
 390:	b1000007 	ldb	r4,0(r22)
 394:	20000326 	beq	r4,zero,3a4 <alt_printf+0x138>
                      alt_putchar(*s++);
 398:	b5800044 	addi	r22,r22,1
 39c:	00003dc0 	call	3dc <alt_putchar>
 3a0:	003ffb06 	br	390 <_gp+0xffff7b60>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
 3a4:	8805883a 	mov	r2,r17
 3a8:	003fc406 	br	2bc <_gp+0xffff7a8c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 3ac:	dfc00a17 	ldw	ra,40(sp)
 3b0:	df000917 	ldw	fp,36(sp)
 3b4:	ddc00817 	ldw	r23,32(sp)
 3b8:	dd800717 	ldw	r22,28(sp)
 3bc:	dd400617 	ldw	r21,24(sp)
 3c0:	dd000517 	ldw	r20,20(sp)
 3c4:	dcc00417 	ldw	r19,16(sp)
 3c8:	dc800317 	ldw	r18,12(sp)
 3cc:	dc400217 	ldw	r17,8(sp)
 3d0:	dc000117 	ldw	r16,4(sp)
 3d4:	dec00e04 	addi	sp,sp,56
 3d8:	f800283a 	ret

000003dc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 3dc:	defffd04 	addi	sp,sp,-12
 3e0:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
 3e4:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 3e8:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 3ec:	01000034 	movhi	r4,0
 3f0:	000f883a 	mov	r7,zero
 3f4:	01800044 	movi	r6,1
 3f8:	d80b883a 	mov	r5,sp
 3fc:	21020d04 	addi	r4,r4,2100
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 400:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 404:	00004e00 	call	4e0 <altera_avalon_jtag_uart_write>
 408:	00ffffc4 	movi	r3,-1
 40c:	10c00126 	beq	r2,r3,414 <alt_putchar+0x38>
        return -1;
    }
    return c;
 410:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
 414:	dfc00217 	ldw	ra,8(sp)
 418:	dc000117 	ldw	r16,4(sp)
 41c:	dec00304 	addi	sp,sp,12
 420:	f800283a 	ret

00000424 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 424:	defffe04 	addi	sp,sp,-8
 428:	dc000015 	stw	r16,0(sp)
 42c:	dfc00115 	stw	ra,4(sp)
 430:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 434:	00005b40 	call	5b4 <strlen>
 438:	01000034 	movhi	r4,0
 43c:	000f883a 	mov	r7,zero
 440:	100d883a 	mov	r6,r2
 444:	800b883a 	mov	r5,r16
 448:	21020d04 	addi	r4,r4,2100
#else
    return fputs(str, stdout);
#endif
#endif
}
 44c:	dfc00117 	ldw	ra,4(sp)
 450:	dc000017 	ldw	r16,0(sp)
 454:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 458:	00004e01 	jmpi	4e0 <altera_avalon_jtag_uart_write>

0000045c <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
 45c:	00005141 	jmpi	514 <alt_busy_sleep>

00000460 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 460:	deffff04 	addi	sp,sp,-4
 464:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 468:	00005ac0 	call	5ac <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 46c:	00800044 	movi	r2,1
 470:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 474:	dfc00017 	ldw	ra,0(sp)
 478:	dec00104 	addi	sp,sp,4
 47c:	f800283a 	ret

00000480 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 480:	f800283a 	ret

00000484 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
 484:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
 488:	298d883a 	add	r6,r5,r6

  while (ptr < end)
 48c:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 490:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 494:	11800b2e 	bgeu	r2,r6,4c4 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 498:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 49c:	1a60000c 	andi	r9,r3,32768
 4a0:	48000326 	beq	r9,zero,4b0 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4a4:	10c00005 	stb	r3,0(r2)
 4a8:	10800044 	addi	r2,r2,1
 4ac:	003ff906 	br	494 <_gp+0xffff7c64>
    else if (ptr != buffer)
 4b0:	11400226 	beq	r2,r5,4bc <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
 4b4:	1145c83a 	sub	r2,r2,r5
 4b8:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 4bc:	403ff526 	beq	r8,zero,494 <_gp+0xffff7c64>
 4c0:	00000106 	br	4c8 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
 4c4:	117ffb1e 	bne	r2,r5,4b4 <_gp+0xffff7c84>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
 4c8:	39d0000c 	andi	r7,r7,16384
 4cc:	3800021e 	bne	r7,zero,4d8 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
 4d0:	00bffec4 	movi	r2,-5
 4d4:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
 4d8:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
 4dc:	f800283a 	ret

000004e0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 4e0:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4e4:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 4e8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 4ec:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 4f0:	2980072e 	bgeu	r5,r6,510 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 4f4:	38c00037 	ldwio	r3,0(r7)
 4f8:	18ffffec 	andhi	r3,r3,65535
 4fc:	183ffc26 	beq	r3,zero,4f0 <_gp+0xffff7cc0>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 500:	28c00007 	ldb	r3,0(r5)
 504:	20c00035 	stwio	r3,0(r4)
 508:	29400044 	addi	r5,r5,1
 50c:	003ff806 	br	4f0 <_gp+0xffff7cc0>

  return count;
}
 510:	f800283a 	ret

00000514 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 514:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 518:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 51c:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 520:	dc000015 	stw	r16,0(sp)
 524:	dfc00115 	stw	ra,4(sp)
 528:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 52c:	00006c80 	call	6c8 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 530:	10001026 	beq	r2,zero,574 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 534:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 538:	013999b4 	movhi	r4,58982
 53c:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 540:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 544:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 548:	297fffc4 	addi	r5,r5,-1
 54c:	283ffe1e 	bne	r5,zero,548 <_gp+0xffff7d18>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 550:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 554:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 558:	18bffb16 	blt	r3,r2,548 <_gp+0xffff7d18>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 55c:	01400144 	movi	r5,5
 560:	8009883a 	mov	r4,r16
 564:	00007840 	call	784 <__mulsi3>
 568:	10bfffc4 	addi	r2,r2,-1
 56c:	103ffe1e 	bne	r2,zero,568 <_gp+0xffff7d38>
 570:	00000506 	br	588 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 574:	01400144 	movi	r5,5
 578:	8009883a 	mov	r4,r16
 57c:	00007840 	call	784 <__mulsi3>
 580:	10bfffc4 	addi	r2,r2,-1
 584:	00bffe16 	blt	zero,r2,580 <_gp+0xffff7d50>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 588:	0005883a 	mov	r2,zero
 58c:	dfc00117 	ldw	ra,4(sp)
 590:	dc000017 	ldw	r16,0(sp)
 594:	dec00204 	addi	sp,sp,8
 598:	f800283a 	ret

0000059c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 59c:	f800283a 	ret

000005a0 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 5a0:	3005883a 	mov	r2,r6
 5a4:	f800283a 	ret

000005a8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 5a8:	f800283a 	ret

000005ac <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 5ac:	000170fa 	wrctl	ienable,zero
 5b0:	f800283a 	ret

000005b4 <strlen>:
 5b4:	2005883a 	mov	r2,r4
 5b8:	10c00007 	ldb	r3,0(r2)
 5bc:	18000226 	beq	r3,zero,5c8 <strlen+0x14>
 5c0:	10800044 	addi	r2,r2,1
 5c4:	003ffc06 	br	5b8 <_gp+0xffff7d88>
 5c8:	1105c83a 	sub	r2,r2,r4
 5cc:	f800283a 	ret

000005d0 <__divsi3>:
 5d0:	20001b16 	blt	r4,zero,640 <__divsi3+0x70>
 5d4:	000f883a 	mov	r7,zero
 5d8:	28001616 	blt	r5,zero,634 <__divsi3+0x64>
 5dc:	200d883a 	mov	r6,r4
 5e0:	29001a2e 	bgeu	r5,r4,64c <__divsi3+0x7c>
 5e4:	00800804 	movi	r2,32
 5e8:	00c00044 	movi	r3,1
 5ec:	00000106 	br	5f4 <__divsi3+0x24>
 5f0:	10000d26 	beq	r2,zero,628 <__divsi3+0x58>
 5f4:	294b883a 	add	r5,r5,r5
 5f8:	10bfffc4 	addi	r2,r2,-1
 5fc:	18c7883a 	add	r3,r3,r3
 600:	293ffb36 	bltu	r5,r4,5f0 <_gp+0xffff7dc0>
 604:	0005883a 	mov	r2,zero
 608:	18000726 	beq	r3,zero,628 <__divsi3+0x58>
 60c:	0005883a 	mov	r2,zero
 610:	31400236 	bltu	r6,r5,61c <__divsi3+0x4c>
 614:	314dc83a 	sub	r6,r6,r5
 618:	10c4b03a 	or	r2,r2,r3
 61c:	1806d07a 	srli	r3,r3,1
 620:	280ad07a 	srli	r5,r5,1
 624:	183ffa1e 	bne	r3,zero,610 <_gp+0xffff7de0>
 628:	38000126 	beq	r7,zero,630 <__divsi3+0x60>
 62c:	0085c83a 	sub	r2,zero,r2
 630:	f800283a 	ret
 634:	014bc83a 	sub	r5,zero,r5
 638:	39c0005c 	xori	r7,r7,1
 63c:	003fe706 	br	5dc <_gp+0xffff7dac>
 640:	0109c83a 	sub	r4,zero,r4
 644:	01c00044 	movi	r7,1
 648:	003fe306 	br	5d8 <_gp+0xffff7da8>
 64c:	00c00044 	movi	r3,1
 650:	003fee06 	br	60c <_gp+0xffff7ddc>

00000654 <__modsi3>:
 654:	20001716 	blt	r4,zero,6b4 <__modsi3+0x60>
 658:	000f883a 	mov	r7,zero
 65c:	2005883a 	mov	r2,r4
 660:	28001216 	blt	r5,zero,6ac <__modsi3+0x58>
 664:	2900162e 	bgeu	r5,r4,6c0 <__modsi3+0x6c>
 668:	01800804 	movi	r6,32
 66c:	00c00044 	movi	r3,1
 670:	00000106 	br	678 <__modsi3+0x24>
 674:	30000a26 	beq	r6,zero,6a0 <__modsi3+0x4c>
 678:	294b883a 	add	r5,r5,r5
 67c:	31bfffc4 	addi	r6,r6,-1
 680:	18c7883a 	add	r3,r3,r3
 684:	293ffb36 	bltu	r5,r4,674 <_gp+0xffff7e44>
 688:	18000526 	beq	r3,zero,6a0 <__modsi3+0x4c>
 68c:	1806d07a 	srli	r3,r3,1
 690:	11400136 	bltu	r2,r5,698 <__modsi3+0x44>
 694:	1145c83a 	sub	r2,r2,r5
 698:	280ad07a 	srli	r5,r5,1
 69c:	183ffb1e 	bne	r3,zero,68c <_gp+0xffff7e5c>
 6a0:	38000126 	beq	r7,zero,6a8 <__modsi3+0x54>
 6a4:	0085c83a 	sub	r2,zero,r2
 6a8:	f800283a 	ret
 6ac:	014bc83a 	sub	r5,zero,r5
 6b0:	003fec06 	br	664 <_gp+0xffff7e34>
 6b4:	0109c83a 	sub	r4,zero,r4
 6b8:	01c00044 	movi	r7,1
 6bc:	003fe706 	br	65c <_gp+0xffff7e2c>
 6c0:	00c00044 	movi	r3,1
 6c4:	003ff106 	br	68c <_gp+0xffff7e5c>

000006c8 <__udivsi3>:
 6c8:	200d883a 	mov	r6,r4
 6cc:	2900152e 	bgeu	r5,r4,724 <__udivsi3+0x5c>
 6d0:	28001416 	blt	r5,zero,724 <__udivsi3+0x5c>
 6d4:	00800804 	movi	r2,32
 6d8:	00c00044 	movi	r3,1
 6dc:	00000206 	br	6e8 <__udivsi3+0x20>
 6e0:	10000e26 	beq	r2,zero,71c <__udivsi3+0x54>
 6e4:	28000516 	blt	r5,zero,6fc <__udivsi3+0x34>
 6e8:	294b883a 	add	r5,r5,r5
 6ec:	10bfffc4 	addi	r2,r2,-1
 6f0:	18c7883a 	add	r3,r3,r3
 6f4:	293ffa36 	bltu	r5,r4,6e0 <_gp+0xffff7eb0>
 6f8:	18000826 	beq	r3,zero,71c <__udivsi3+0x54>
 6fc:	0005883a 	mov	r2,zero
 700:	31400236 	bltu	r6,r5,70c <__udivsi3+0x44>
 704:	314dc83a 	sub	r6,r6,r5
 708:	10c4b03a 	or	r2,r2,r3
 70c:	1806d07a 	srli	r3,r3,1
 710:	280ad07a 	srli	r5,r5,1
 714:	183ffa1e 	bne	r3,zero,700 <_gp+0xffff7ed0>
 718:	f800283a 	ret
 71c:	0005883a 	mov	r2,zero
 720:	f800283a 	ret
 724:	00c00044 	movi	r3,1
 728:	003ff406 	br	6fc <_gp+0xffff7ecc>

0000072c <__umodsi3>:
 72c:	2005883a 	mov	r2,r4
 730:	2900122e 	bgeu	r5,r4,77c <__umodsi3+0x50>
 734:	28001116 	blt	r5,zero,77c <__umodsi3+0x50>
 738:	01800804 	movi	r6,32
 73c:	00c00044 	movi	r3,1
 740:	00000206 	br	74c <__umodsi3+0x20>
 744:	30000c26 	beq	r6,zero,778 <__umodsi3+0x4c>
 748:	28000516 	blt	r5,zero,760 <__umodsi3+0x34>
 74c:	294b883a 	add	r5,r5,r5
 750:	31bfffc4 	addi	r6,r6,-1
 754:	18c7883a 	add	r3,r3,r3
 758:	293ffa36 	bltu	r5,r4,744 <_gp+0xffff7f14>
 75c:	18000626 	beq	r3,zero,778 <__umodsi3+0x4c>
 760:	1806d07a 	srli	r3,r3,1
 764:	11400136 	bltu	r2,r5,76c <__umodsi3+0x40>
 768:	1145c83a 	sub	r2,r2,r5
 76c:	280ad07a 	srli	r5,r5,1
 770:	183ffb1e 	bne	r3,zero,760 <_gp+0xffff7f30>
 774:	f800283a 	ret
 778:	f800283a 	ret
 77c:	00c00044 	movi	r3,1
 780:	003ff706 	br	760 <_gp+0xffff7f30>

00000784 <__mulsi3>:
 784:	0005883a 	mov	r2,zero
 788:	20000726 	beq	r4,zero,7a8 <__mulsi3+0x24>
 78c:	20c0004c 	andi	r3,r4,1
 790:	2008d07a 	srli	r4,r4,1
 794:	18000126 	beq	r3,zero,79c <__mulsi3+0x18>
 798:	1145883a 	add	r2,r2,r5
 79c:	294b883a 	add	r5,r5,r5
 7a0:	203ffa1e 	bne	r4,zero,78c <_gp+0xffff7f5c>
 7a4:	f800283a 	ret
 7a8:	f800283a 	ret
