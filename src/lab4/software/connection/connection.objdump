
connection.elf:     file format elf32-littlenios2
connection.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000108a0 memsz 0x000108a0 flags r-x
    LOAD off    0x000118c0 vaddr 0x000108c0 paddr 0x000123ac align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00013e98 vaddr 0x00013e98 paddr 0x00013e98 align 2**12
         filesz 0x00000000 memsz 0x00000174 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010320  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000370  00010550  00010550  00011550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  000108c0  000123ac  000118c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000174  00013e98  00013e98  00013e98  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  0001400c  0001400c  000133ac  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000133ac  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001048  00000000  00000000  000133d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000278ce  00000000  00000000  00014418  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009fa8  00000000  00000000  0003bce6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c41e  00000000  00000000  00045c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002404  00000000  00000000  000520ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003af0  00000000  00000000  000544b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001816e  00000000  00000000  00057fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00070110  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000019f0  00000000  00000000  00070150  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00074e3e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00074e41  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00074e44  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00074e45  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00074e46  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00074e4f  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00074e58  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000005  00000000  00000000  00074e61  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001c  00000000  00000000  00074e66  2**0
                  CONTENTS, READONLY
 26 .jdi          00003753  00000000  00000000  00074e82  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0005d1e8  00000000  00000000  000785d5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00010550 l    d  .rodata	00000000 .rodata
000108c0 l    d  .rwdata	00000000 .rwdata
00013e98 l    d  .bss	00000000 .bss
0001400c l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../connection_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 itoa.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 utoa.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001060e l     O .rodata	00000010 zeroes.4404
000029f0 l     F .text	000000bc __sbprintf
0001061e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002c00 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004758 l     F .text	00000008 __fp_unlock
0000476c l     F .text	0000019c __sinit.part.1
00004908 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000108c0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00010d04 l     O .rwdata	00000020 lc_ctype_charset
00010ce4 l     O .rwdata	00000020 lc_message_charset
00010d24 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00010650 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000072ec l     F .text	000000fc __sprint_r.part.0
00010774 l     O .rodata	00000010 zeroes.4349
00008928 l     F .text	000000bc __sbprintf
00010784 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000d4d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000d5e4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000d610 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d738 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d820 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d90c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_read.c
0000dd8c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001239c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000e030 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000e16c l     F .text	00000034 alt_dev_reg
0001130c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000e444 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000e650 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000ef2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000f38c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000f4ec l     F .text	0000003c alt_get_errno
0000f528 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 refill.c
0001032c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 alt_exit.c
00013ecc g     O .bss	00000004 alt_instruction_exception_handler
00006dfc g     F .text	00000074 _mprec_log10
00006ee8 g     F .text	0000008c __any_on
000093a4 g     F .text	00000054 _isatty_r
0001065c g     O .rodata	00000028 __mprec_tinytens
0000da24 g     F .text	0000007c alt_main
00013f0c g     O .bss	00000100 alt_irq
000093f8 g     F .text	00000060 _lseek_r
000123ac g       *ABS*	00000000 __flash_rwdata_start
0000bea8 g     F .text	00000088 .hidden __eqdf2
0000026c g     F .text	0000007c stupid
0001400c g       *ABS*	00000000 __alt_heap_start
00000560 g     F .text	0000003c printf
00009cd0 g     F .text	0000009c _wcrtomb_r
00007114 g     F .text	0000005c __sseek
00004ab8 g     F .text	00000010 __sinit
00009b78 g     F .text	00000140 __swbuf_r
000050c4 g     F .text	0000007c _setlocale_r
00004910 g     F .text	00000078 __sfmoreglue
0000dac4 g     F .text	00000024 __malloc_unlock
00009458 g     F .text	0000015c memmove
00004aa0 g     F .text	00000018 _cleanup
00005ebc g     F .text	000000a8 _Balloc
0000dd50 g     F .text	0000003c alt_putstr
0000bf30 g     F .text	000000dc .hidden __gtdf2
0000f914 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00008e80 g     F .text	0000005c _fstat_r
00013eb0 g     O .bss	00000004 errno
00010080 g     F .text	00000014 __srget
00007090 g     F .text	00000008 __seofread
00013eb8 g     O .bss	00000004 alt_argv
0001a36c g       *ABS*	00000000 _gp
0000e000 g     F .text	00000030 usleep
0001118c g     O .rwdata	00000180 alt_fd_list
0000fd30 g     F .text	00000070 _getc_r
0000fda0 g     F .text	00000088 getc
0000f938 g     F .text	00000090 alt_find_dev
00005c4c g     F .text	00000148 memcpy
00004760 g     F .text	0000000c _cleanup_r
0000d2e8 g     F .text	000000dc .hidden __floatsidf
0000f470 g     F .text	0000007c alt_io_redirect
0000c00c g     F .text	000000f4 .hidden __ltdf2
00010550 g       *ABS*	00000000 __DTOR_END__
0000fb94 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00006f74 g     F .text	00000074 __fpclassifyd
00006d58 g     F .text	000000a4 __ratio
0000890c g     F .text	0000001c __vfiprintf_internal
0000e848 g     F .text	0000021c altera_avalon_jtag_uart_read
00000530 g     F .text	00000030 _printf_r
0000ab70 g     F .text	00000064 .hidden __udivsi3
0000d774 g     F .text	000000ac isatty
000106ac g     O .rodata	000000c8 __mprec_tens
00005140 g     F .text	0000000c __locale_charset
00013eac g     O .bss	00000004 __malloc_top_pad
00012374 g     O .rwdata	00000004 __mb_cur_max
0000052c g     F .text	00000004 itoa
00005170 g     F .text	0000000c _localeconv_r
00008edc g     F .text	000004c8 __sfvwrite_r
000062f0 g     F .text	0000003c __i2b
00006fe8 g     F .text	00000054 _sbrk_r
000095b4 g     F .text	00000060 _read_r
00012394 g     O .rwdata	00000004 alt_max_fd
00008b74 g     F .text	000000f0 _fclose_r
00004728 g     F .text	00000030 fflush
00013ea8 g     O .bss	00000004 __malloc_max_sbrked_mem
0000ac2c g     F .text	000008ac .hidden __adddf3
00006b00 g     F .text	0000010c __b2d
0000a4b4 g     F .text	000005c4 .hidden __umoddi3
0000d948 g     F .text	000000dc lseek
0001236c g     O .rwdata	00000004 _global_impure_ptr
00009614 g     F .text	00000564 _realloc_r
0001400c g       *ABS*	00000000 __bss_end
0000f29c g     F .text	000000f0 alt_iic_isr_register
0000d704 g     F .text	00000034 alt_getchar
0000f80c g     F .text	00000108 alt_tick
00009eb8 g     F .text	000005fc .hidden __udivdi3
00000380 g     F .text	000000dc send
00008ddc g     F .text	00000024 _fputwc_r
00010684 g     O .rodata	00000028 __mprec_bigtens
000060d4 g     F .text	00000104 __s2b
0000d3c4 g     F .text	000000a8 .hidden __floatunsidf
00006840 g     F .text	00000060 __mcmp
00004ad8 g     F .text	00000018 __fp_lock_all
0000f250 g     F .text	0000004c alt_ic_irq_enabled
0000f770 g     F .text	0000009c alt_alarm_stop
00013ec0 g     O .bss	00000004 alt_irq_active
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
000000fc g     F .exceptions	000000d4 alt_irq_handler
00011164 g     O .rwdata	00000028 alt_dev_null
0000ef0c g     F .text	00000020 alt_dcache_flush_all
000061d8 g     F .text	00000068 __hi0bits
000006f4 g     F .text	00000004 utoa
0000d268 g     F .text	00000080 .hidden __fixdfsi
000123ac g       *ABS*	00000000 __ram_rwdata_end
0001238c g     O .rwdata	00000008 alt_dev_list
0000e06c g     F .text	00000100 write
0000fea4 g     F .text	000000a0 _putc_r
000108c0 g       *ABS*	00000000 __ram_rodata_end
0000d64c g     F .text	000000b8 fstat
0000c00c g     F .text	000000f4 .hidden __ledf2
000065b8 g     F .text	00000140 __pow5mult
00007400 g     F .text	0000150c ___vfiprintf_internal_r
00013ea0 g     O .bss	00000004 __nlocale_changed
0000abd4 g     F .text	00000058 .hidden __umodsi3
0001400c g       *ABS*	00000000 end
000004c4 g     F .text	00000068 __itoa
0000e384 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00010550 g       *ABS*	00000000 __CTOR_LIST__
000186a0 g       *ABS*	00000000 __alt_stack_pointer
0000d46c g     F .text	00000064 .hidden __clzsi2
0000ea64 g     F .text	00000224 altera_avalon_jtag_uart_write
00004ac8 g     F .text	00000004 __sfp_lock_acquire
00005b68 g     F .text	000000e4 memchr
000006f8 g     F .text	000022dc ___vfprintf_internal_r
00004c2c g     F .text	00000310 _free_r
0000dae8 g     F .text	0000022c alt_printf
0000514c g     F .text	00000010 __locale_mb_cur_max
0001000c g     F .text	00000074 __srget_r
000101ac g     F .text	00000180 __call_exitprocs
00013e9c g     O .bss	00000004 __mlocale_changed
00012378 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00013ec4 g     O .bss	00000004 _alt_tick_rate
000066f8 g     F .text	00000148 __lshift
00013ec8 g     O .bss	00000004 _alt_nticks
0000ddc8 g     F .text	00000104 read
0000e1d8 g     F .text	00000048 alt_sys_init
00010094 g     F .text	00000118 __register_exitproc
00013ef8 g     O .bss	00000014 buffer
0000632c g     F .text	0000028c __multiply
0000e6f0 g     F .text	00000068 altera_avalon_jtag_uart_close
0000049c g     F .text	00000028 .hidden __mulsi3
000108c0 g       *ABS*	00000000 __ram_rwdata_start
00010550 g       *ABS*	00000000 __ram_rodata_start
00013ed0 g     O .bss	00000028 __malloc_current_mallinfo
00006c0c g     F .text	0000014c __d2b
0000e220 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000fad0 g     F .text	000000c4 alt_get_fd
0000edb4 g     F .text	00000158 alt_busy_sleep
00008a44 g     F .text	00000054 _close_r
0000fe28 g     F .text	0000007c memcmp
0000e2e0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001400c g       *ABS*	00000000 __alt_stack_base
0000e330 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002aac g     F .text	00000154 __swsetup_r
0000b4d8 g     F .text	000009d0 .hidden __divdf3
00004988 g     F .text	00000118 __sfp
00006e70 g     F .text	00000078 __copybits
00010d5c g     O .rwdata	00000408 __malloc_av_
00004ad4 g     F .text	00000004 __sinit_lock_release
0000c100 g     F .text	0000086c .hidden __muldf3
0000703c g     F .text	00000054 __sread
0000f9c8 g     F .text	00000108 alt_find_file
0000ef68 g     F .text	000000a4 alt_dev_llist_insert
0000daa0 g     F .text	00000024 __malloc_lock
0000df50 g     F .text	000000b0 sbrk
000046cc g     F .text	0000005c _fflush_r
00008a98 g     F .text	000000dc _calloc_r
0000059c g     F .text	00000158 __utoa
00013e98 g       *ABS*	00000000 __bss_start
00005d94 g     F .text	00000128 memset
0000045c g     F .text	00000040 main
00013ebc g     O .bss	00000004 alt_envp
00013ea4 g     O .bss	00000004 __malloc_max_total_mem
0000e280 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009cb8 g     F .text	00000018 __swbuf
00007170 g     F .text	00000008 __sclose
000186a0 g       *ABS*	00000000 __alt_heap_limit
00008c64 g     F .text	00000014 fclose
00002e28 g     F .text	00001688 _dtoa_r
0000535c g     F .text	0000080c _malloc_r
00009e2c g     F .text	00000030 __ascii_wctomb
00012398 g     O .rwdata	00000004 alt_errno
00004f3c g     F .text	000000c4 _fwalk
0000ff44 g     F .text	000000c8 putc
0000aa78 g     F .text	00000084 .hidden __divsi3
00004b08 g     F .text	00000124 _malloc_trim_r
00010550 g       *ABS*	00000000 __CTOR_END__
00007178 g     F .text	000000dc strcmp
00010550 g       *ABS*	00000000 __flash_rodata_start
00010550 g       *ABS*	00000000 __DTOR_LIST__
0000bea8 g     F .text	00000088 .hidden __nedf2
0000e1a0 g     F .text	00000038 alt_irq_init
0000decc g     F .text	00000084 alt_release_fd
00010794 g     O .rodata	00000100 .hidden __clz_tab
00013e98 g     O .bss	00000004 _PathLocale
0000fc30 g     F .text	00000014 atexit
000089e4 g     F .text	00000060 _write_r
0000517c g     F .text	00000018 setlocale
00012370 g     O .rwdata	00000004 _impure_ptr
00013eb4 g     O .bss	00000004 alt_argc
000002e8 g     F .text	00000098 receive
000044b0 g     F .text	0000021c __sflush_r
0000f06c g     F .text	00000060 _do_dtors
00005168 g     F .text	00000008 __locale_cjk_lang
00010348 g     F .text	000001d4 __srefill_r
00000020 g       .exceptions	00000000 alt_irq_entry
00006a9c g     F .text	00000064 __ulp
00004af0 g     F .text	00000018 __fp_unlock_all
00012384 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005194 g     F .text	0000000c localeconv
0000f0ec g     F .text	00000050 alt_ic_isr_register
000123ac g       *ABS*	00000000 _edata
0001400c g       *ABS*	00000000 _end
00008c78 g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
0000e758 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000fc7c g     F .text	0000009c _fputs_r
0000f1c4 g     F .text	0000008c alt_ic_irq_disable
00007098 g     F .text	0000007c __swrite
0001237c g     O .rwdata	00000004 __malloc_trim_threshold
0000515c g     F .text	0000000c __locale_msgcharset
0000fc44 g     F .text	00000038 exit
00005000 g     F .text	000000c4 _fwalk_reent
000068a0 g     F .text	000001fc __mdiff
0000aafc g     F .text	00000074 .hidden __modsi3
000186a0 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004acc g     F .text	00000004 __sfp_lock_release
0001051c g     F .text	00000034 _exit
0000ec88 g     F .text	0000012c alt_alarm_start
000051a0 g     F .text	000001bc __smakebuf_r
00007254 g     F .text	00000098 strlen
0000f614 g     F .text	0000015c open
0000bf30 g     F .text	000000dc .hidden __gedf2
0000dd14 g     F .text	0000003c alt_putchar
00012380 g     O .rwdata	00000004 __wctomb
000073e8 g     F .text	00000018 __sprint_r
0000f0cc g     F .text	00000020 alt_icache_flush_all
0000fd18 g     F .text	00000018 fputs
000123a0 g     O .rwdata	00000004 alt_priority_mask
0000f13c g     F .text	00000088 alt_ic_irq_enable
000029d4 g     F .text	0000001c __vfprintf_internal
00009e5c g     F .text	0000005c _wctomb_r
0000c96c g     F .text	000008fc .hidden __subdf3
00006240 g     F .text	000000b0 __lo0bits
000123a4 g     O .rwdata	00000008 alt_alarm_list
0000f00c g     F .text	00000060 _do_ctors
00009d6c g     F .text	000000c0 wcrtomb
0000d50c g     F .text	000000d8 close
0000d888 g     F .text	00000084 alt_load
00008e00 g     F .text	00000080 fputwc
00004ad0 g     F .text	00000004 __sinit_lock_acquire
00005f8c g     F .text	00000148 __multadd
00005f64 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	108fc304 	addi	r2,r2,16140
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	108fc304 	addi	r2,r2,16140
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <_gp+0xfffe5dc0>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <_gp+0xfffe5db4>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a6d817 	ldw	r2,-25760(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a6d817 	ldw	r2,-25760(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dee1a814 	ori	sp,sp,34464
    movhi gp, %hi(_gp)
     238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     23c:	d6a8db14 	ori	gp,gp,41836
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	108fa614 	ori	r2,r2,16024

    movhi r3, %hi(__bss_end)
     248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     24c:	18d00314 	ori	r3,r3,16396

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <_gp+0xfffe5ee8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	000d8880 	call	d888 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	000da240 	call	da24 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <_gp+0xfffe5efc>

0000026c <stupid>:
#define charRec (volatile char*) 0x21000


char buffer[20];

char stupid() {
     26c:	defff904 	addi	sp,sp,-28
     270:	dfc00615 	stw	ra,24(sp)
     274:	df000515 	stw	fp,20(sp)
     278:	df000504 	addi	fp,sp,20
    char c1 = alt_getchar();
     27c:	000d7040 	call	d704 <alt_getchar>
     280:	e0bffb05 	stb	r2,-20(fp)
    alt_getchar();
     284:	000d7040 	call	d704 <alt_getchar>
    char c2 = alt_getchar();
     288:	000d7040 	call	d704 <alt_getchar>
     28c:	e0bffb45 	stb	r2,-19(fp)
    alt_getchar();
     290:	000d7040 	call	d704 <alt_getchar>
    int big = c1 - '0';
     294:	e0bffb07 	ldb	r2,-20(fp)
     298:	10bff404 	addi	r2,r2,-48
     29c:	e0bffc15 	stw	r2,-16(fp)
    int small = c2 - '0';
     2a0:	e0bffb47 	ldb	r2,-19(fp)
     2a4:	10bff404 	addi	r2,r2,-48
     2a8:	e0bffd15 	stw	r2,-12(fp)
    int result = big * 10 + small;
     2ac:	01400284 	movi	r5,10
     2b0:	e13ffc17 	ldw	r4,-16(fp)
     2b4:	000049c0 	call	49c <__mulsi3>
     2b8:	1007883a 	mov	r3,r2
     2bc:	e0bffd17 	ldw	r2,-12(fp)
     2c0:	1885883a 	add	r2,r3,r2
     2c4:	e0bffe15 	stw	r2,-8(fp)
    char value = (char) result;
     2c8:	e0bffe17 	ldw	r2,-8(fp)
     2cc:	e0bfff05 	stb	r2,-4(fp)
    return value;
     2d0:	e0bfff03 	ldbu	r2,-4(fp)

}
     2d4:	e037883a 	mov	sp,fp
     2d8:	dfc00117 	ldw	ra,4(sp)
     2dc:	df000017 	ldw	fp,0(sp)
     2e0:	dec00204 	addi	sp,sp,8
     2e4:	f800283a 	ret

000002e8 <receive>:
void receive() {
     2e8:	defffc04 	addi	sp,sp,-16
     2ec:	dfc00315 	stw	ra,12(sp)
     2f0:	df000215 	stw	fp,8(sp)
     2f4:	df000204 	addi	fp,sp,8
	char result = '0';
     2f8:	00800c04 	movi	r2,48
     2fc:	e0bffe05 	stb	r2,-8(fp)
	while((*(charRec) & 0x1) != 0x1) {}
     300:	0001883a 	nop
     304:	008000b4 	movhi	r2,2
     308:	10840004 	addi	r2,r2,4096
     30c:	10800003 	ldbu	r2,0(r2)
     310:	10803fcc 	andi	r2,r2,255
     314:	1080004c 	andi	r2,r2,1
     318:	103ffa26 	beq	r2,zero,304 <_gp+0xfffe5f98>
	result = *(PLAYERIN);
     31c:	008000b4 	movhi	r2,2
     320:	10841404 	addi	r2,r2,4176
     324:	10800003 	ldbu	r2,0(r2)
     328:	e0bffe05 	stb	r2,-8(fp)
	result -= '0';
     32c:	e0bffe03 	ldbu	r2,-8(fp)
     330:	10bff404 	addi	r2,r2,-48
     334:	e0bffe05 	stb	r2,-8(fp)
	int trans = (int) result;
     338:	e0bffe07 	ldb	r2,-8(fp)
     33c:	e0bfff15 	stw	r2,-4(fp)
	itoa(trans, buffer, 10);
     340:	01800284 	movi	r6,10
     344:	01400074 	movhi	r5,1
     348:	294fbe04 	addi	r5,r5,16120
     34c:	e13fff17 	ldw	r4,-4(fp)
     350:	000052c0 	call	52c <itoa>
	alt_printf("received grid is %s\n", buffer);
     354:	01400074 	movhi	r5,1
     358:	294fbe04 	addi	r5,r5,16120
     35c:	01000074 	movhi	r4,1
     360:	21015404 	addi	r4,r4,1360
     364:	000dae80 	call	dae8 <alt_printf>
	return;
     368:	0001883a 	nop
}
     36c:	e037883a 	mov	sp,fp
     370:	dfc00117 	ldw	ra,4(sp)
     374:	df000017 	ldw	fp,0(sp)
     378:	dec00204 	addi	sp,sp,8
     37c:	f800283a 	ret

00000380 <send>:

void send() {
     380:	defffc04 	addi	sp,sp,-16
     384:	dfc00315 	stw	ra,12(sp)
     388:	df000215 	stw	fp,8(sp)
     38c:	df000204 	addi	fp,sp,8
	alt_putstr("Which grid do you want to choose? \n");
     390:	01000074 	movhi	r4,1
     394:	21015a04 	addi	r4,r4,1384
     398:	000dd500 	call	dd50 <alt_putstr>
    alt_putstr("Now please enter the grid \n");
     39c:	01000074 	movhi	r4,1
     3a0:	21016304 	addi	r4,r4,1420
     3a4:	000dd500 	call	dd50 <alt_putstr>
	char result = stupid();
     3a8:	000026c0 	call	26c <stupid>
     3ac:	e0bffe05 	stb	r2,-8(fp)
	*(PLAYEROUT) = (char) result;
     3b0:	008000b4 	movhi	r2,2
     3b4:	10841004 	addi	r2,r2,4160
     3b8:	e0fffe03 	ldbu	r3,-8(fp)
     3bc:	10c00005 	stb	r3,0(r2)
	result -= '0';
     3c0:	e0bffe03 	ldbu	r2,-8(fp)
     3c4:	10bff404 	addi	r2,r2,-48
     3c8:	e0bffe05 	stb	r2,-8(fp)
	int trans = (int) result;
     3cc:	e0bffe07 	ldb	r2,-8(fp)
     3d0:	e0bfff15 	stw	r2,-4(fp)
	if(trans == 2) alt_printf("yes\n");
     3d4:	e0bfff17 	ldw	r2,-4(fp)
     3d8:	10800098 	cmpnei	r2,r2,2
     3dc:	1000031e 	bne	r2,zero,3ec <send+0x6c>
     3e0:	01000074 	movhi	r4,1
     3e4:	21016a04 	addi	r4,r4,1448
     3e8:	000dae80 	call	dae8 <alt_printf>
	//itoa(trans, buffer, 10);
	//alt_printf("sending char %s\n",buffer);
	*(transmit) = 0x1;
     3ec:	008000b4 	movhi	r2,2
     3f0:	10840804 	addi	r2,r2,4128
     3f4:	00c00044 	movi	r3,1
     3f8:	10c00005 	stb	r3,0(r2)
	usleep(1000);
     3fc:	0100fa04 	movi	r4,1000
     400:	000e0000 	call	e000 <usleep>
	*(load) = 0x1;
     404:	008000b4 	movhi	r2,2
     408:	10840c04 	addi	r2,r2,4144
     40c:	00c00044 	movi	r3,1
     410:	10c00005 	stb	r3,0(r2)
	while(!charRec){}
     414:	0001883a 	nop
	usleep(2000);
     418:	0101f404 	movi	r4,2000
     41c:	000e0000 	call	e000 <usleep>
	*(transmit) = 0x0;
     420:	008000b4 	movhi	r2,2
     424:	10840804 	addi	r2,r2,4128
     428:	10000005 	stb	zero,0(r2)
	*(load) = 0x0;
     42c:	008000b4 	movhi	r2,2
     430:	10840c04 	addi	r2,r2,4144
     434:	10000005 	stb	zero,0(r2)
	alt_printf("sent \n");
     438:	01000074 	movhi	r4,1
     43c:	21016c04 	addi	r4,r4,1456
     440:	000dae80 	call	dae8 <alt_printf>
	return;
     444:	0001883a 	nop
}
     448:	e037883a 	mov	sp,fp
     44c:	dfc00117 	ldw	ra,4(sp)
     450:	df000017 	ldw	fp,0(sp)
     454:	dec00204 	addi	sp,sp,8
     458:	f800283a 	ret

0000045c <main>:
int main()
{
     45c:	defffd04 	addi	sp,sp,-12
     460:	dfc00215 	stw	ra,8(sp)
     464:	df000115 	stw	fp,4(sp)
     468:	df000104 	addi	fp,sp,4
	while(1) {
		printf("send or receive?");
     46c:	01000074 	movhi	r4,1
     470:	21016e04 	addi	r4,r4,1464
     474:	00005600 	call	560 <printf>
		char choice = alt_getchar();
     478:	000d7040 	call	d704 <alt_getchar>
     47c:	e0bfff05 	stb	r2,-4(fp)
		if (choice == 'r') {
     480:	e0bfff07 	ldb	r2,-4(fp)
     484:	10801c98 	cmpnei	r2,r2,114
     488:	1000021e 	bne	r2,zero,494 <main+0x38>
			receive();
     48c:	00002e80 	call	2e8 <receive>
     490:	003ff606 	br	46c <_gp+0xfffe6100>
		} else {
			send();
     494:	00003800 	call	380 <send>
		}
	}
     498:	003ff406 	br	46c <_gp+0xfffe6100>

0000049c <__mulsi3>:
     49c:	0005883a 	mov	r2,zero
     4a0:	20000726 	beq	r4,zero,4c0 <__mulsi3+0x24>
     4a4:	20c0004c 	andi	r3,r4,1
     4a8:	2008d07a 	srli	r4,r4,1
     4ac:	18000126 	beq	r3,zero,4b4 <__mulsi3+0x18>
     4b0:	1145883a 	add	r2,r2,r5
     4b4:	294b883a 	add	r5,r5,r5
     4b8:	203ffa1e 	bne	r4,zero,4a4 <_gp+0xfffe6138>
     4bc:	f800283a 	ret
     4c0:	f800283a 	ret

000004c4 <__itoa>:
     4c4:	30bfff84 	addi	r2,r6,-2
     4c8:	00c00884 	movi	r3,34
     4cc:	18801436 	bltu	r3,r2,520 <__itoa+0x5c>
     4d0:	defffe04 	addi	sp,sp,-8
     4d4:	dfc00115 	stw	ra,4(sp)
     4d8:	dc000015 	stw	r16,0(sp)
     4dc:	00800284 	movi	r2,10
     4e0:	30800926 	beq	r6,r2,508 <__itoa+0x44>
     4e4:	0005883a 	mov	r2,zero
     4e8:	2821883a 	mov	r16,r5
     4ec:	288b883a 	add	r5,r5,r2
     4f0:	000059c0 	call	59c <__utoa>
     4f4:	8005883a 	mov	r2,r16
     4f8:	dfc00117 	ldw	ra,4(sp)
     4fc:	dc000017 	ldw	r16,0(sp)
     500:	dec00204 	addi	sp,sp,8
     504:	f800283a 	ret
     508:	203ff60e 	bge	r4,zero,4e4 <_gp+0xfffe6178>
     50c:	00800b44 	movi	r2,45
     510:	28800005 	stb	r2,0(r5)
     514:	0109c83a 	sub	r4,zero,r4
     518:	00800044 	movi	r2,1
     51c:	003ff206 	br	4e8 <_gp+0xfffe617c>
     520:	28000005 	stb	zero,0(r5)
     524:	0005883a 	mov	r2,zero
     528:	f800283a 	ret

0000052c <itoa>:
     52c:	00004c41 	jmpi	4c4 <__itoa>

00000530 <_printf_r>:
     530:	defffd04 	addi	sp,sp,-12
     534:	2805883a 	mov	r2,r5
     538:	dfc00015 	stw	ra,0(sp)
     53c:	d9800115 	stw	r6,4(sp)
     540:	d9c00215 	stw	r7,8(sp)
     544:	21400217 	ldw	r5,8(r4)
     548:	d9c00104 	addi	r7,sp,4
     54c:	100d883a 	mov	r6,r2
     550:	00006f80 	call	6f8 <___vfprintf_internal_r>
     554:	dfc00017 	ldw	ra,0(sp)
     558:	dec00304 	addi	sp,sp,12
     55c:	f800283a 	ret

00000560 <printf>:
     560:	defffc04 	addi	sp,sp,-16
     564:	dfc00015 	stw	ra,0(sp)
     568:	d9400115 	stw	r5,4(sp)
     56c:	d9800215 	stw	r6,8(sp)
     570:	d9c00315 	stw	r7,12(sp)
     574:	00800074 	movhi	r2,1
     578:	1088dc04 	addi	r2,r2,9072
     57c:	10800017 	ldw	r2,0(r2)
     580:	200b883a 	mov	r5,r4
     584:	d9800104 	addi	r6,sp,4
     588:	11000217 	ldw	r4,8(r2)
     58c:	00029d40 	call	29d4 <__vfprintf_internal>
     590:	dfc00017 	ldw	ra,0(sp)
     594:	dec00404 	addi	sp,sp,16
     598:	f800283a 	ret

0000059c <__utoa>:
     59c:	008cccb4 	movhi	r2,13106
     5a0:	defff004 	addi	sp,sp,-64
     5a4:	108c4c04 	addi	r2,r2,12592
     5a8:	d8800015 	stw	r2,0(sp)
     5ac:	008dcdb4 	movhi	r2,14134
     5b0:	108d4d04 	addi	r2,r2,13620
     5b4:	d8800115 	stw	r2,4(sp)
     5b8:	00989874 	movhi	r2,25185
     5bc:	108e4e04 	addi	r2,r2,14648
     5c0:	d8800215 	stw	r2,8(sp)
     5c4:	00999974 	movhi	r2,26213
     5c8:	109918c4 	addi	r2,r2,25699
     5cc:	d8800315 	stw	r2,12(sp)
     5d0:	009a9a74 	movhi	r2,27241
     5d4:	109a19c4 	addi	r2,r2,26727
     5d8:	d8800415 	stw	r2,16(sp)
     5dc:	009b9b74 	movhi	r2,28269
     5e0:	109b1ac4 	addi	r2,r2,27755
     5e4:	d8800515 	stw	r2,20(sp)
     5e8:	009c9c74 	movhi	r2,29297
     5ec:	109c1bc4 	addi	r2,r2,28783
     5f0:	d8800615 	stw	r2,24(sp)
     5f4:	009d9d74 	movhi	r2,30325
     5f8:	109d1cc4 	addi	r2,r2,29811
     5fc:	d8800715 	stw	r2,28(sp)
     600:	009e9e74 	movhi	r2,31353
     604:	109e1dc4 	addi	r2,r2,30839
     608:	dd000e15 	stw	r20,56(sp)
     60c:	d8800815 	stw	r2,32(sp)
     610:	dfc00f15 	stw	ra,60(sp)
     614:	dcc00d15 	stw	r19,52(sp)
     618:	dc800c15 	stw	r18,48(sp)
     61c:	dc400b15 	stw	r17,44(sp)
     620:	dc000a15 	stw	r16,40(sp)
     624:	d8000905 	stb	zero,36(sp)
     628:	30bfff84 	addi	r2,r6,-2
     62c:	00c00884 	movi	r3,34
     630:	2829883a 	mov	r20,r5
     634:	18802c36 	bltu	r3,r2,6e8 <__utoa+0x14c>
     638:	3027883a 	mov	r19,r6
     63c:	2023883a 	mov	r17,r4
     640:	2825883a 	mov	r18,r5
     644:	0021883a 	mov	r16,zero
     648:	00000106 	br	650 <__utoa+0xb4>
     64c:	1821883a 	mov	r16,r3
     650:	8809883a 	mov	r4,r17
     654:	980b883a 	mov	r5,r19
     658:	000abd40 	call	abd4 <__umodsi3>
     65c:	d885883a 	add	r2,sp,r2
     660:	10800003 	ldbu	r2,0(r2)
     664:	8809883a 	mov	r4,r17
     668:	980b883a 	mov	r5,r19
     66c:	90800005 	stb	r2,0(r18)
     670:	000ab700 	call	ab70 <__udivsi3>
     674:	1023883a 	mov	r17,r2
     678:	80c00044 	addi	r3,r16,1
     67c:	94800044 	addi	r18,r18,1
     680:	103ff21e 	bne	r2,zero,64c <_gp+0xfffe62e0>
     684:	a0c7883a 	add	r3,r20,r3
     688:	18000005 	stb	zero,0(r3)
     68c:	80000d26 	beq	r16,zero,6c4 <__utoa+0x128>
     690:	01c00044 	movi	r7,1
     694:	a409883a 	add	r4,r20,r16
     698:	a007883a 	mov	r3,r20
     69c:	3d0fc83a 	sub	r7,r7,r20
     6a0:	21800003 	ldbu	r6,0(r4)
     6a4:	19400003 	ldbu	r5,0(r3)
     6a8:	38c5883a 	add	r2,r7,r3
     6ac:	19800005 	stb	r6,0(r3)
     6b0:	21400005 	stb	r5,0(r4)
     6b4:	843fffc4 	addi	r16,r16,-1
     6b8:	18c00044 	addi	r3,r3,1
     6bc:	213fffc4 	addi	r4,r4,-1
     6c0:	143ff716 	blt	r2,r16,6a0 <_gp+0xfffe6334>
     6c4:	a005883a 	mov	r2,r20
     6c8:	dfc00f17 	ldw	ra,60(sp)
     6cc:	dd000e17 	ldw	r20,56(sp)
     6d0:	dcc00d17 	ldw	r19,52(sp)
     6d4:	dc800c17 	ldw	r18,48(sp)
     6d8:	dc400b17 	ldw	r17,44(sp)
     6dc:	dc000a17 	ldw	r16,40(sp)
     6e0:	dec01004 	addi	sp,sp,64
     6e4:	f800283a 	ret
     6e8:	28000005 	stb	zero,0(r5)
     6ec:	0005883a 	mov	r2,zero
     6f0:	003ff506 	br	6c8 <_gp+0xfffe635c>

000006f4 <utoa>:
     6f4:	000059c1 	jmpi	59c <__utoa>

000006f8 <___vfprintf_internal_r>:
     6f8:	deffb804 	addi	sp,sp,-288
     6fc:	dfc04715 	stw	ra,284(sp)
     700:	ddc04515 	stw	r23,276(sp)
     704:	dd404315 	stw	r21,268(sp)
     708:	d9002d15 	stw	r4,180(sp)
     70c:	282f883a 	mov	r23,r5
     710:	302b883a 	mov	r21,r6
     714:	d9c02e15 	stw	r7,184(sp)
     718:	df004615 	stw	fp,280(sp)
     71c:	dd804415 	stw	r22,272(sp)
     720:	dd004215 	stw	r20,264(sp)
     724:	dcc04115 	stw	r19,260(sp)
     728:	dc804015 	stw	r18,256(sp)
     72c:	dc403f15 	stw	r17,252(sp)
     730:	dc003e15 	stw	r16,248(sp)
     734:	00051700 	call	5170 <_localeconv_r>
     738:	10800017 	ldw	r2,0(r2)
     73c:	1009883a 	mov	r4,r2
     740:	d8803415 	stw	r2,208(sp)
     744:	00072540 	call	7254 <strlen>
     748:	d8803715 	stw	r2,220(sp)
     74c:	d8802d17 	ldw	r2,180(sp)
     750:	10000226 	beq	r2,zero,75c <___vfprintf_internal_r+0x64>
     754:	10800e17 	ldw	r2,56(r2)
     758:	1000fb26 	beq	r2,zero,b48 <___vfprintf_internal_r+0x450>
     75c:	b880030b 	ldhu	r2,12(r23)
     760:	10c8000c 	andi	r3,r2,8192
     764:	1800061e 	bne	r3,zero,780 <___vfprintf_internal_r+0x88>
     768:	b9001917 	ldw	r4,100(r23)
     76c:	00f7ffc4 	movi	r3,-8193
     770:	10880014 	ori	r2,r2,8192
     774:	20c6703a 	and	r3,r4,r3
     778:	b880030d 	sth	r2,12(r23)
     77c:	b8c01915 	stw	r3,100(r23)
     780:	10c0020c 	andi	r3,r2,8
     784:	1800c326 	beq	r3,zero,a94 <___vfprintf_internal_r+0x39c>
     788:	b8c00417 	ldw	r3,16(r23)
     78c:	1800c126 	beq	r3,zero,a94 <___vfprintf_internal_r+0x39c>
     790:	1080068c 	andi	r2,r2,26
     794:	00c00284 	movi	r3,10
     798:	10c0c626 	beq	r2,r3,ab4 <___vfprintf_internal_r+0x3bc>
     79c:	d8c00404 	addi	r3,sp,16
     7a0:	05000074 	movhi	r20,1
     7a4:	d9001e04 	addi	r4,sp,120
     7a8:	a5018384 	addi	r20,r20,1550
     7ac:	d8c01e15 	stw	r3,120(sp)
     7b0:	d8002015 	stw	zero,128(sp)
     7b4:	d8001f15 	stw	zero,124(sp)
     7b8:	d8003315 	stw	zero,204(sp)
     7bc:	d8003615 	stw	zero,216(sp)
     7c0:	d8003815 	stw	zero,224(sp)
     7c4:	1811883a 	mov	r8,r3
     7c8:	d8003915 	stw	zero,228(sp)
     7cc:	d8003a15 	stw	zero,232(sp)
     7d0:	d8002f15 	stw	zero,188(sp)
     7d4:	d9002815 	stw	r4,160(sp)
     7d8:	a8800007 	ldb	r2,0(r21)
     7dc:	10028b26 	beq	r2,zero,120c <___vfprintf_internal_r+0xb14>
     7e0:	00c00944 	movi	r3,37
     7e4:	a823883a 	mov	r17,r21
     7e8:	10c0021e 	bne	r2,r3,7f4 <___vfprintf_internal_r+0xfc>
     7ec:	00001406 	br	840 <___vfprintf_internal_r+0x148>
     7f0:	10c00326 	beq	r2,r3,800 <___vfprintf_internal_r+0x108>
     7f4:	8c400044 	addi	r17,r17,1
     7f8:	88800007 	ldb	r2,0(r17)
     7fc:	103ffc1e 	bne	r2,zero,7f0 <_gp+0xfffe6484>
     800:	8d61c83a 	sub	r16,r17,r21
     804:	80000e26 	beq	r16,zero,840 <___vfprintf_internal_r+0x148>
     808:	d8c02017 	ldw	r3,128(sp)
     80c:	d8801f17 	ldw	r2,124(sp)
     810:	45400015 	stw	r21,0(r8)
     814:	1c07883a 	add	r3,r3,r16
     818:	10800044 	addi	r2,r2,1
     81c:	d8c02015 	stw	r3,128(sp)
     820:	44000115 	stw	r16,4(r8)
     824:	d8801f15 	stw	r2,124(sp)
     828:	00c001c4 	movi	r3,7
     82c:	1880a916 	blt	r3,r2,ad4 <___vfprintf_internal_r+0x3dc>
     830:	42000204 	addi	r8,r8,8
     834:	d9402f17 	ldw	r5,188(sp)
     838:	2c0b883a 	add	r5,r5,r16
     83c:	d9402f15 	stw	r5,188(sp)
     840:	88800007 	ldb	r2,0(r17)
     844:	1000aa26 	beq	r2,zero,af0 <___vfprintf_internal_r+0x3f8>
     848:	8d400044 	addi	r21,r17,1
     84c:	8c400047 	ldb	r17,1(r17)
     850:	0021883a 	mov	r16,zero
     854:	00bfffc4 	movi	r2,-1
     858:	0025883a 	mov	r18,zero
     85c:	dc002905 	stb	r16,164(sp)
     860:	d8002785 	stb	zero,158(sp)
     864:	d8002b05 	stb	zero,172(sp)
     868:	d8802a15 	stw	r2,168(sp)
     86c:	d8003115 	stw	zero,196(sp)
     870:	04c01604 	movi	r19,88
     874:	05800244 	movi	r22,9
     878:	9021883a 	mov	r16,r18
     87c:	4039883a 	mov	fp,r8
     880:	ad400044 	addi	r21,r21,1
     884:	88bff804 	addi	r2,r17,-32
     888:	98833236 	bltu	r19,r2,1554 <___vfprintf_internal_r+0xe5c>
     88c:	100490ba 	slli	r2,r2,2
     890:	00c00034 	movhi	r3,0
     894:	18c22904 	addi	r3,r3,2212
     898:	10c5883a 	add	r2,r2,r3
     89c:	10800017 	ldw	r2,0(r2)
     8a0:	1000683a 	jmp	r2
     8a4:	0000144c 	andi	zero,zero,81
     8a8:	00001554 	movui	zero,85
     8ac:	00001554 	movui	zero,85
     8b0:	0000146c 	andhi	zero,zero,81
     8b4:	00001554 	movui	zero,85
     8b8:	00001554 	movui	zero,85
     8bc:	00001554 	movui	zero,85
     8c0:	00001554 	movui	zero,85
     8c4:	00001554 	movui	zero,85
     8c8:	00001554 	movui	zero,85
     8cc:	00000b54 	movui	zero,45
     8d0:	0000135c 	xori	zero,zero,77
     8d4:	00001554 	movui	zero,85
     8d8:	00000a18 	cmpnei	zero,zero,40
     8dc:	00000b78 	rdprs	zero,zero,45
     8e0:	00001554 	movui	zero,85
     8e4:	00000bc8 	cmpgei	zero,zero,47
     8e8:	00000bd4 	movui	zero,47
     8ec:	00000bd4 	movui	zero,47
     8f0:	00000bd4 	movui	zero,47
     8f4:	00000bd4 	movui	zero,47
     8f8:	00000bd4 	movui	zero,47
     8fc:	00000bd4 	movui	zero,47
     900:	00000bd4 	movui	zero,47
     904:	00000bd4 	movui	zero,47
     908:	00000bd4 	movui	zero,47
     90c:	00001554 	movui	zero,85
     910:	00001554 	movui	zero,85
     914:	00001554 	movui	zero,85
     918:	00001554 	movui	zero,85
     91c:	00001554 	movui	zero,85
     920:	00001554 	movui	zero,85
     924:	00001554 	movui	zero,85
     928:	00001554 	movui	zero,85
     92c:	00001554 	movui	zero,85
     930:	00001554 	movui	zero,85
     934:	00000c10 	cmplti	zero,zero,48
     938:	00000cd8 	cmpnei	zero,zero,51
     93c:	00001554 	movui	zero,85
     940:	00000cd8 	cmpnei	zero,zero,51
     944:	00001554 	movui	zero,85
     948:	00001554 	movui	zero,85
     94c:	00001554 	movui	zero,85
     950:	00001554 	movui	zero,85
     954:	00000d84 	movi	zero,54
     958:	00001554 	movui	zero,85
     95c:	00001554 	movui	zero,85
     960:	00000d90 	cmplti	zero,zero,54
     964:	00001554 	movui	zero,85
     968:	00001554 	movui	zero,85
     96c:	00001554 	movui	zero,85
     970:	00001554 	movui	zero,85
     974:	00001554 	movui	zero,85
     978:	00001214 	movui	zero,72
     97c:	00001554 	movui	zero,85
     980:	00001554 	movui	zero,85
     984:	00001280 	call	128 <alt_irq_handler+0x2c>
     988:	00001554 	movui	zero,85
     98c:	00001554 	movui	zero,85
     990:	00001554 	movui	zero,85
     994:	00001554 	movui	zero,85
     998:	00001554 	movui	zero,85
     99c:	00001554 	movui	zero,85
     9a0:	00001554 	movui	zero,85
     9a4:	00001554 	movui	zero,85
     9a8:	00001554 	movui	zero,85
     9ac:	00001554 	movui	zero,85
     9b0:	000014f8 	rdprs	zero,zero,83
     9b4:	00001478 	rdprs	zero,zero,81
     9b8:	00000cd8 	cmpnei	zero,zero,51
     9bc:	00000cd8 	cmpnei	zero,zero,51
     9c0:	00000cd8 	cmpnei	zero,zero,51
     9c4:	00001498 	cmpnei	zero,zero,82
     9c8:	00001478 	rdprs	zero,zero,81
     9cc:	00001554 	movui	zero,85
     9d0:	00001554 	movui	zero,85
     9d4:	000014a4 	muli	zero,zero,82
     9d8:	00001554 	movui	zero,85
     9dc:	000014b8 	rdprs	zero,zero,82
     9e0:	0000133c 	xorhi	zero,zero,76
     9e4:	00000a24 	muli	zero,zero,40
     9e8:	00001374 	movhi	zero,77
     9ec:	00001554 	movui	zero,85
     9f0:	00001380 	call	138 <alt_irq_handler+0x3c>
     9f4:	00001554 	movui	zero,85
     9f8:	000013e4 	muli	zero,zero,79
     9fc:	00001554 	movui	zero,85
     a00:	00001554 	movui	zero,85
     a04:	00001404 	movi	zero,80
     a08:	d8c03117 	ldw	r3,196(sp)
     a0c:	d8802e15 	stw	r2,184(sp)
     a10:	00c7c83a 	sub	r3,zero,r3
     a14:	d8c03115 	stw	r3,196(sp)
     a18:	84000114 	ori	r16,r16,4
     a1c:	ac400007 	ldb	r17,0(r21)
     a20:	003f9706 	br	880 <_gp+0xfffe6514>
     a24:	00800c04 	movi	r2,48
     a28:	d8802705 	stb	r2,156(sp)
     a2c:	00801e04 	movi	r2,120
     a30:	d8802745 	stb	r2,157(sp)
     a34:	d9002a17 	ldw	r4,168(sp)
     a38:	d8802e17 	ldw	r2,184(sp)
     a3c:	d8002785 	stb	zero,158(sp)
     a40:	e011883a 	mov	r8,fp
     a44:	10c00104 	addi	r3,r2,4
     a48:	14c00017 	ldw	r19,0(r2)
     a4c:	002d883a 	mov	r22,zero
     a50:	80800094 	ori	r2,r16,2
     a54:	2002ca16 	blt	r4,zero,1580 <___vfprintf_internal_r+0xe88>
     a58:	00bfdfc4 	movi	r2,-129
     a5c:	80a4703a 	and	r18,r16,r2
     a60:	d8c02e15 	stw	r3,184(sp)
     a64:	94800094 	ori	r18,r18,2
     a68:	9802b41e 	bne	r19,zero,153c <___vfprintf_internal_r+0xe44>
     a6c:	01400074 	movhi	r5,1
     a70:	29417c04 	addi	r5,r5,1520
     a74:	d9403915 	stw	r5,228(sp)
     a78:	04401e04 	movi	r17,120
     a7c:	d8802a17 	ldw	r2,168(sp)
     a80:	0039883a 	mov	fp,zero
     a84:	1001fa26 	beq	r2,zero,1270 <___vfprintf_internal_r+0xb78>
     a88:	0027883a 	mov	r19,zero
     a8c:	002d883a 	mov	r22,zero
     a90:	00021906 	br	12f8 <___vfprintf_internal_r+0xc00>
     a94:	d9002d17 	ldw	r4,180(sp)
     a98:	b80b883a 	mov	r5,r23
     a9c:	0002aac0 	call	2aac <__swsetup_r>
     aa0:	1005dc1e 	bne	r2,zero,2214 <___vfprintf_internal_r+0x1b1c>
     aa4:	b880030b 	ldhu	r2,12(r23)
     aa8:	00c00284 	movi	r3,10
     aac:	1080068c 	andi	r2,r2,26
     ab0:	10ff3a1e 	bne	r2,r3,79c <_gp+0xfffe6430>
     ab4:	b880038f 	ldh	r2,14(r23)
     ab8:	103f3816 	blt	r2,zero,79c <_gp+0xfffe6430>
     abc:	d9c02e17 	ldw	r7,184(sp)
     ac0:	d9002d17 	ldw	r4,180(sp)
     ac4:	a80d883a 	mov	r6,r21
     ac8:	b80b883a 	mov	r5,r23
     acc:	00029f00 	call	29f0 <__sbprintf>
     ad0:	00001106 	br	b18 <___vfprintf_internal_r+0x420>
     ad4:	d9002d17 	ldw	r4,180(sp)
     ad8:	d9801e04 	addi	r6,sp,120
     adc:	b80b883a 	mov	r5,r23
     ae0:	00073e80 	call	73e8 <__sprint_r>
     ae4:	1000081e 	bne	r2,zero,b08 <___vfprintf_internal_r+0x410>
     ae8:	da000404 	addi	r8,sp,16
     aec:	003f5106 	br	834 <_gp+0xfffe64c8>
     af0:	d8802017 	ldw	r2,128(sp)
     af4:	10000426 	beq	r2,zero,b08 <___vfprintf_internal_r+0x410>
     af8:	d9002d17 	ldw	r4,180(sp)
     afc:	d9801e04 	addi	r6,sp,120
     b00:	b80b883a 	mov	r5,r23
     b04:	00073e80 	call	73e8 <__sprint_r>
     b08:	b880030b 	ldhu	r2,12(r23)
     b0c:	1080100c 	andi	r2,r2,64
     b10:	1005c01e 	bne	r2,zero,2214 <___vfprintf_internal_r+0x1b1c>
     b14:	d8802f17 	ldw	r2,188(sp)
     b18:	dfc04717 	ldw	ra,284(sp)
     b1c:	df004617 	ldw	fp,280(sp)
     b20:	ddc04517 	ldw	r23,276(sp)
     b24:	dd804417 	ldw	r22,272(sp)
     b28:	dd404317 	ldw	r21,268(sp)
     b2c:	dd004217 	ldw	r20,264(sp)
     b30:	dcc04117 	ldw	r19,260(sp)
     b34:	dc804017 	ldw	r18,256(sp)
     b38:	dc403f17 	ldw	r17,252(sp)
     b3c:	dc003e17 	ldw	r16,248(sp)
     b40:	dec04804 	addi	sp,sp,288
     b44:	f800283a 	ret
     b48:	d9002d17 	ldw	r4,180(sp)
     b4c:	0004ab80 	call	4ab8 <__sinit>
     b50:	003f0206 	br	75c <_gp+0xfffe63f0>
     b54:	d9002e17 	ldw	r4,184(sp)
     b58:	d9402e17 	ldw	r5,184(sp)
     b5c:	21000017 	ldw	r4,0(r4)
     b60:	28800104 	addi	r2,r5,4
     b64:	d9003115 	stw	r4,196(sp)
     b68:	203fa716 	blt	r4,zero,a08 <_gp+0xfffe669c>
     b6c:	d8802e15 	stw	r2,184(sp)
     b70:	ac400007 	ldb	r17,0(r21)
     b74:	003f4206 	br	880 <_gp+0xfffe6514>
     b78:	ac400007 	ldb	r17,0(r21)
     b7c:	01000a84 	movi	r4,42
     b80:	a8c00044 	addi	r3,r21,1
     b84:	89075826 	beq	r17,r4,28e8 <___vfprintf_internal_r+0x21f0>
     b88:	8cbff404 	addi	r18,r17,-48
     b8c:	b486ae36 	bltu	r22,r18,2648 <___vfprintf_internal_r+0x1f50>
     b90:	0009883a 	mov	r4,zero
     b94:	1823883a 	mov	r17,r3
     b98:	01400284 	movi	r5,10
     b9c:	000049c0 	call	49c <__mulsi3>
     ba0:	88c00007 	ldb	r3,0(r17)
     ba4:	1489883a 	add	r4,r2,r18
     ba8:	8d400044 	addi	r21,r17,1
     bac:	1cbff404 	addi	r18,r3,-48
     bb0:	a823883a 	mov	r17,r21
     bb4:	b4bff82e 	bgeu	r22,r18,b98 <_gp+0xfffe682c>
     bb8:	1823883a 	mov	r17,r3
     bbc:	2005f616 	blt	r4,zero,2398 <___vfprintf_internal_r+0x1ca0>
     bc0:	d9002a15 	stw	r4,168(sp)
     bc4:	003f2f06 	br	884 <_gp+0xfffe6518>
     bc8:	84002014 	ori	r16,r16,128
     bcc:	ac400007 	ldb	r17,0(r21)
     bd0:	003f2b06 	br	880 <_gp+0xfffe6514>
     bd4:	8cbff404 	addi	r18,r17,-48
     bd8:	d8003115 	stw	zero,196(sp)
     bdc:	0009883a 	mov	r4,zero
     be0:	a823883a 	mov	r17,r21
     be4:	01400284 	movi	r5,10
     be8:	000049c0 	call	49c <__mulsi3>
     bec:	88c00007 	ldb	r3,0(r17)
     bf0:	9089883a 	add	r4,r18,r2
     bf4:	ad400044 	addi	r21,r21,1
     bf8:	1cbff404 	addi	r18,r3,-48
     bfc:	a823883a 	mov	r17,r21
     c00:	b4bff82e 	bgeu	r22,r18,be4 <_gp+0xfffe6878>
     c04:	1823883a 	mov	r17,r3
     c08:	d9003115 	stw	r4,196(sp)
     c0c:	003f1d06 	br	884 <_gp+0xfffe6518>
     c10:	8025883a 	mov	r18,r16
     c14:	dc002903 	ldbu	r16,164(sp)
     c18:	e011883a 	mov	r8,fp
     c1c:	84003fcc 	andi	r16,r16,255
     c20:	8007531e 	bne	r16,zero,2970 <___vfprintf_internal_r+0x2278>
     c24:	94800414 	ori	r18,r18,16
     c28:	9080080c 	andi	r2,r18,32
     c2c:	1003a326 	beq	r2,zero,1abc <___vfprintf_internal_r+0x13c4>
     c30:	d9002e17 	ldw	r4,184(sp)
     c34:	20800117 	ldw	r2,4(r4)
     c38:	24c00017 	ldw	r19,0(r4)
     c3c:	21000204 	addi	r4,r4,8
     c40:	d9002e15 	stw	r4,184(sp)
     c44:	102d883a 	mov	r22,r2
     c48:	10047316 	blt	r2,zero,1e18 <___vfprintf_internal_r+0x1720>
     c4c:	d9002a17 	ldw	r4,168(sp)
     c50:	df002783 	ldbu	fp,158(sp)
     c54:	2003e416 	blt	r4,zero,1be8 <___vfprintf_internal_r+0x14f0>
     c58:	00ffdfc4 	movi	r3,-129
     c5c:	9d84b03a 	or	r2,r19,r22
     c60:	90e4703a 	and	r18,r18,r3
     c64:	10018026 	beq	r2,zero,1268 <___vfprintf_internal_r+0xb70>
     c68:	b003ab26 	beq	r22,zero,1b18 <___vfprintf_internal_r+0x1420>
     c6c:	dc402915 	stw	r17,164(sp)
     c70:	dc001e04 	addi	r16,sp,120
     c74:	b023883a 	mov	r17,r22
     c78:	402d883a 	mov	r22,r8
     c7c:	9809883a 	mov	r4,r19
     c80:	880b883a 	mov	r5,r17
     c84:	01800284 	movi	r6,10
     c88:	000f883a 	mov	r7,zero
     c8c:	000a4b40 	call	a4b4 <__umoddi3>
     c90:	10800c04 	addi	r2,r2,48
     c94:	843fffc4 	addi	r16,r16,-1
     c98:	9809883a 	mov	r4,r19
     c9c:	880b883a 	mov	r5,r17
     ca0:	80800005 	stb	r2,0(r16)
     ca4:	01800284 	movi	r6,10
     ca8:	000f883a 	mov	r7,zero
     cac:	0009eb80 	call	9eb8 <__udivdi3>
     cb0:	1027883a 	mov	r19,r2
     cb4:	10c4b03a 	or	r2,r2,r3
     cb8:	1823883a 	mov	r17,r3
     cbc:	103fef1e 	bne	r2,zero,c7c <_gp+0xfffe6910>
     cc0:	d8c02817 	ldw	r3,160(sp)
     cc4:	dc402917 	ldw	r17,164(sp)
     cc8:	b011883a 	mov	r8,r22
     ccc:	1c07c83a 	sub	r3,r3,r16
     cd0:	d8c02b15 	stw	r3,172(sp)
     cd4:	00005f06 	br	e54 <___vfprintf_internal_r+0x75c>
     cd8:	8025883a 	mov	r18,r16
     cdc:	dc002903 	ldbu	r16,164(sp)
     ce0:	e011883a 	mov	r8,fp
     ce4:	84003fcc 	andi	r16,r16,255
     ce8:	80071e1e 	bne	r16,zero,2964 <___vfprintf_internal_r+0x226c>
     cec:	9080020c 	andi	r2,r18,8
     cf0:	1004af26 	beq	r2,zero,1fb0 <___vfprintf_internal_r+0x18b8>
     cf4:	d9002e17 	ldw	r4,184(sp)
     cf8:	d9402e17 	ldw	r5,184(sp)
     cfc:	d8802e17 	ldw	r2,184(sp)
     d00:	21000017 	ldw	r4,0(r4)
     d04:	29400117 	ldw	r5,4(r5)
     d08:	10800204 	addi	r2,r2,8
     d0c:	d9003615 	stw	r4,216(sp)
     d10:	d9403815 	stw	r5,224(sp)
     d14:	d8802e15 	stw	r2,184(sp)
     d18:	d9003617 	ldw	r4,216(sp)
     d1c:	d9403817 	ldw	r5,224(sp)
     d20:	da003d15 	stw	r8,244(sp)
     d24:	04000044 	movi	r16,1
     d28:	0006f740 	call	6f74 <__fpclassifyd>
     d2c:	da003d17 	ldw	r8,244(sp)
     d30:	1404441e 	bne	r2,r16,1e44 <___vfprintf_internal_r+0x174c>
     d34:	d9003617 	ldw	r4,216(sp)
     d38:	d9403817 	ldw	r5,224(sp)
     d3c:	000d883a 	mov	r6,zero
     d40:	000f883a 	mov	r7,zero
     d44:	000c00c0 	call	c00c <__ledf2>
     d48:	da003d17 	ldw	r8,244(sp)
     d4c:	1005e316 	blt	r2,zero,24dc <___vfprintf_internal_r+0x1de4>
     d50:	df002783 	ldbu	fp,158(sp)
     d54:	008011c4 	movi	r2,71
     d58:	1445580e 	bge	r2,r17,22bc <___vfprintf_internal_r+0x1bc4>
     d5c:	04000074 	movhi	r16,1
     d60:	84017404 	addi	r16,r16,1488
     d64:	00c000c4 	movi	r3,3
     d68:	00bfdfc4 	movi	r2,-129
     d6c:	d8c02915 	stw	r3,164(sp)
     d70:	90a4703a 	and	r18,r18,r2
     d74:	d8c02b15 	stw	r3,172(sp)
     d78:	d8002a15 	stw	zero,168(sp)
     d7c:	d8003215 	stw	zero,200(sp)
     d80:	00003a06 	br	e6c <___vfprintf_internal_r+0x774>
     d84:	84000214 	ori	r16,r16,8
     d88:	ac400007 	ldb	r17,0(r21)
     d8c:	003ebc06 	br	880 <_gp+0xfffe6514>
     d90:	8025883a 	mov	r18,r16
     d94:	dc002903 	ldbu	r16,164(sp)
     d98:	e011883a 	mov	r8,fp
     d9c:	84003fcc 	andi	r16,r16,255
     da0:	8007001e 	bne	r16,zero,29a4 <___vfprintf_internal_r+0x22ac>
     da4:	94800414 	ori	r18,r18,16
     da8:	9080080c 	andi	r2,r18,32
     dac:	1002fa26 	beq	r2,zero,1998 <___vfprintf_internal_r+0x12a0>
     db0:	d9002e17 	ldw	r4,184(sp)
     db4:	d9402a17 	ldw	r5,168(sp)
     db8:	d8002785 	stb	zero,158(sp)
     dbc:	20800204 	addi	r2,r4,8
     dc0:	24c00017 	ldw	r19,0(r4)
     dc4:	25800117 	ldw	r22,4(r4)
     dc8:	2804b116 	blt	r5,zero,2090 <___vfprintf_internal_r+0x1998>
     dcc:	013fdfc4 	movi	r4,-129
     dd0:	9d86b03a 	or	r3,r19,r22
     dd4:	d8802e15 	stw	r2,184(sp)
     dd8:	9124703a 	and	r18,r18,r4
     ddc:	1802fb1e 	bne	r3,zero,19cc <___vfprintf_internal_r+0x12d4>
     de0:	d8c02a17 	ldw	r3,168(sp)
     de4:	0039883a 	mov	fp,zero
     de8:	1805e526 	beq	r3,zero,2580 <___vfprintf_internal_r+0x1e88>
     dec:	0027883a 	mov	r19,zero
     df0:	002d883a 	mov	r22,zero
     df4:	dc001e04 	addi	r16,sp,120
     df8:	9806d0fa 	srli	r3,r19,3
     dfc:	b008977a 	slli	r4,r22,29
     e00:	b02cd0fa 	srli	r22,r22,3
     e04:	9cc001cc 	andi	r19,r19,7
     e08:	98800c04 	addi	r2,r19,48
     e0c:	843fffc4 	addi	r16,r16,-1
     e10:	20e6b03a 	or	r19,r4,r3
     e14:	80800005 	stb	r2,0(r16)
     e18:	9d86b03a 	or	r3,r19,r22
     e1c:	183ff61e 	bne	r3,zero,df8 <_gp+0xfffe6a8c>
     e20:	90c0004c 	andi	r3,r18,1
     e24:	18014126 	beq	r3,zero,132c <___vfprintf_internal_r+0xc34>
     e28:	10803fcc 	andi	r2,r2,255
     e2c:	1080201c 	xori	r2,r2,128
     e30:	10bfe004 	addi	r2,r2,-128
     e34:	00c00c04 	movi	r3,48
     e38:	10c13c26 	beq	r2,r3,132c <___vfprintf_internal_r+0xc34>
     e3c:	80ffffc5 	stb	r3,-1(r16)
     e40:	d8c02817 	ldw	r3,160(sp)
     e44:	80bfffc4 	addi	r2,r16,-1
     e48:	1021883a 	mov	r16,r2
     e4c:	1887c83a 	sub	r3,r3,r2
     e50:	d8c02b15 	stw	r3,172(sp)
     e54:	d8802b17 	ldw	r2,172(sp)
     e58:	d9002a17 	ldw	r4,168(sp)
     e5c:	1100010e 	bge	r2,r4,e64 <___vfprintf_internal_r+0x76c>
     e60:	2005883a 	mov	r2,r4
     e64:	d8802915 	stw	r2,164(sp)
     e68:	d8003215 	stw	zero,200(sp)
     e6c:	e7003fcc 	andi	fp,fp,255
     e70:	e700201c 	xori	fp,fp,128
     e74:	e73fe004 	addi	fp,fp,-128
     e78:	e0000326 	beq	fp,zero,e88 <___vfprintf_internal_r+0x790>
     e7c:	d8c02917 	ldw	r3,164(sp)
     e80:	18c00044 	addi	r3,r3,1
     e84:	d8c02915 	stw	r3,164(sp)
     e88:	90c0008c 	andi	r3,r18,2
     e8c:	d8c02c15 	stw	r3,176(sp)
     e90:	18000326 	beq	r3,zero,ea0 <___vfprintf_internal_r+0x7a8>
     e94:	d8c02917 	ldw	r3,164(sp)
     e98:	18c00084 	addi	r3,r3,2
     e9c:	d8c02915 	stw	r3,164(sp)
     ea0:	90c0210c 	andi	r3,r18,132
     ea4:	d8c03015 	stw	r3,192(sp)
     ea8:	1801c51e 	bne	r3,zero,15c0 <___vfprintf_internal_r+0xec8>
     eac:	d9003117 	ldw	r4,196(sp)
     eb0:	d8c02917 	ldw	r3,164(sp)
     eb4:	20e7c83a 	sub	r19,r4,r3
     eb8:	04c1c10e 	bge	zero,r19,15c0 <___vfprintf_internal_r+0xec8>
     ebc:	02400404 	movi	r9,16
     ec0:	d8c02017 	ldw	r3,128(sp)
     ec4:	d8801f17 	ldw	r2,124(sp)
     ec8:	4cc52f0e 	bge	r9,r19,2388 <___vfprintf_internal_r+0x1c90>
     ecc:	01400074 	movhi	r5,1
     ed0:	29418784 	addi	r5,r5,1566
     ed4:	dc403b15 	stw	r17,236(sp)
     ed8:	d9403515 	stw	r5,212(sp)
     edc:	9823883a 	mov	r17,r19
     ee0:	482d883a 	mov	r22,r9
     ee4:	9027883a 	mov	r19,r18
     ee8:	070001c4 	movi	fp,7
     eec:	8025883a 	mov	r18,r16
     ef0:	dc002d17 	ldw	r16,180(sp)
     ef4:	00000306 	br	f04 <___vfprintf_internal_r+0x80c>
     ef8:	8c7ffc04 	addi	r17,r17,-16
     efc:	42000204 	addi	r8,r8,8
     f00:	b440130e 	bge	r22,r17,f50 <___vfprintf_internal_r+0x858>
     f04:	01000074 	movhi	r4,1
     f08:	18c00404 	addi	r3,r3,16
     f0c:	10800044 	addi	r2,r2,1
     f10:	21018784 	addi	r4,r4,1566
     f14:	41000015 	stw	r4,0(r8)
     f18:	45800115 	stw	r22,4(r8)
     f1c:	d8c02015 	stw	r3,128(sp)
     f20:	d8801f15 	stw	r2,124(sp)
     f24:	e0bff40e 	bge	fp,r2,ef8 <_gp+0xfffe6b8c>
     f28:	d9801e04 	addi	r6,sp,120
     f2c:	b80b883a 	mov	r5,r23
     f30:	8009883a 	mov	r4,r16
     f34:	00073e80 	call	73e8 <__sprint_r>
     f38:	103ef31e 	bne	r2,zero,b08 <_gp+0xfffe679c>
     f3c:	8c7ffc04 	addi	r17,r17,-16
     f40:	d8c02017 	ldw	r3,128(sp)
     f44:	d8801f17 	ldw	r2,124(sp)
     f48:	da000404 	addi	r8,sp,16
     f4c:	b47fed16 	blt	r22,r17,f04 <_gp+0xfffe6b98>
     f50:	9021883a 	mov	r16,r18
     f54:	9825883a 	mov	r18,r19
     f58:	8827883a 	mov	r19,r17
     f5c:	dc403b17 	ldw	r17,236(sp)
     f60:	d9403517 	ldw	r5,212(sp)
     f64:	98c7883a 	add	r3,r19,r3
     f68:	10800044 	addi	r2,r2,1
     f6c:	41400015 	stw	r5,0(r8)
     f70:	44c00115 	stw	r19,4(r8)
     f74:	d8c02015 	stw	r3,128(sp)
     f78:	d8801f15 	stw	r2,124(sp)
     f7c:	010001c4 	movi	r4,7
     f80:	2082c516 	blt	r4,r2,1a98 <___vfprintf_internal_r+0x13a0>
     f84:	df002787 	ldb	fp,158(sp)
     f88:	42000204 	addi	r8,r8,8
     f8c:	e0000c26 	beq	fp,zero,fc0 <___vfprintf_internal_r+0x8c8>
     f90:	d8801f17 	ldw	r2,124(sp)
     f94:	d9002784 	addi	r4,sp,158
     f98:	18c00044 	addi	r3,r3,1
     f9c:	10800044 	addi	r2,r2,1
     fa0:	41000015 	stw	r4,0(r8)
     fa4:	01000044 	movi	r4,1
     fa8:	41000115 	stw	r4,4(r8)
     fac:	d8c02015 	stw	r3,128(sp)
     fb0:	d8801f15 	stw	r2,124(sp)
     fb4:	010001c4 	movi	r4,7
     fb8:	20825e16 	blt	r4,r2,1934 <___vfprintf_internal_r+0x123c>
     fbc:	42000204 	addi	r8,r8,8
     fc0:	d8802c17 	ldw	r2,176(sp)
     fc4:	10000c26 	beq	r2,zero,ff8 <___vfprintf_internal_r+0x900>
     fc8:	d8801f17 	ldw	r2,124(sp)
     fcc:	d9002704 	addi	r4,sp,156
     fd0:	18c00084 	addi	r3,r3,2
     fd4:	10800044 	addi	r2,r2,1
     fd8:	41000015 	stw	r4,0(r8)
     fdc:	01000084 	movi	r4,2
     fe0:	41000115 	stw	r4,4(r8)
     fe4:	d8c02015 	stw	r3,128(sp)
     fe8:	d8801f15 	stw	r2,124(sp)
     fec:	010001c4 	movi	r4,7
     ff0:	20825816 	blt	r4,r2,1954 <___vfprintf_internal_r+0x125c>
     ff4:	42000204 	addi	r8,r8,8
     ff8:	d9003017 	ldw	r4,192(sp)
     ffc:	00802004 	movi	r2,128
    1000:	2081bb26 	beq	r4,r2,16f0 <___vfprintf_internal_r+0xff8>
    1004:	d9402a17 	ldw	r5,168(sp)
    1008:	d8802b17 	ldw	r2,172(sp)
    100c:	28adc83a 	sub	r22,r5,r2
    1010:	0580310e 	bge	zero,r22,10d8 <___vfprintf_internal_r+0x9e0>
    1014:	07000404 	movi	fp,16
    1018:	d8801f17 	ldw	r2,124(sp)
    101c:	e584360e 	bge	fp,r22,20f8 <___vfprintf_internal_r+0x1a00>
    1020:	01400074 	movhi	r5,1
    1024:	29418384 	addi	r5,r5,1550
    1028:	dc402a15 	stw	r17,168(sp)
    102c:	d9402c15 	stw	r5,176(sp)
    1030:	b023883a 	mov	r17,r22
    1034:	04c001c4 	movi	r19,7
    1038:	a82d883a 	mov	r22,r21
    103c:	902b883a 	mov	r21,r18
    1040:	8025883a 	mov	r18,r16
    1044:	dc002d17 	ldw	r16,180(sp)
    1048:	00000306 	br	1058 <___vfprintf_internal_r+0x960>
    104c:	8c7ffc04 	addi	r17,r17,-16
    1050:	42000204 	addi	r8,r8,8
    1054:	e440110e 	bge	fp,r17,109c <___vfprintf_internal_r+0x9a4>
    1058:	18c00404 	addi	r3,r3,16
    105c:	10800044 	addi	r2,r2,1
    1060:	45000015 	stw	r20,0(r8)
    1064:	47000115 	stw	fp,4(r8)
    1068:	d8c02015 	stw	r3,128(sp)
    106c:	d8801f15 	stw	r2,124(sp)
    1070:	98bff60e 	bge	r19,r2,104c <_gp+0xfffe6ce0>
    1074:	d9801e04 	addi	r6,sp,120
    1078:	b80b883a 	mov	r5,r23
    107c:	8009883a 	mov	r4,r16
    1080:	00073e80 	call	73e8 <__sprint_r>
    1084:	103ea01e 	bne	r2,zero,b08 <_gp+0xfffe679c>
    1088:	8c7ffc04 	addi	r17,r17,-16
    108c:	d8c02017 	ldw	r3,128(sp)
    1090:	d8801f17 	ldw	r2,124(sp)
    1094:	da000404 	addi	r8,sp,16
    1098:	e47fef16 	blt	fp,r17,1058 <_gp+0xfffe6cec>
    109c:	9021883a 	mov	r16,r18
    10a0:	a825883a 	mov	r18,r21
    10a4:	b02b883a 	mov	r21,r22
    10a8:	882d883a 	mov	r22,r17
    10ac:	dc402a17 	ldw	r17,168(sp)
    10b0:	d9002c17 	ldw	r4,176(sp)
    10b4:	1d87883a 	add	r3,r3,r22
    10b8:	10800044 	addi	r2,r2,1
    10bc:	41000015 	stw	r4,0(r8)
    10c0:	45800115 	stw	r22,4(r8)
    10c4:	d8c02015 	stw	r3,128(sp)
    10c8:	d8801f15 	stw	r2,124(sp)
    10cc:	010001c4 	movi	r4,7
    10d0:	20821016 	blt	r4,r2,1914 <___vfprintf_internal_r+0x121c>
    10d4:	42000204 	addi	r8,r8,8
    10d8:	9080400c 	andi	r2,r18,256
    10dc:	10013a1e 	bne	r2,zero,15c8 <___vfprintf_internal_r+0xed0>
    10e0:	d9402b17 	ldw	r5,172(sp)
    10e4:	d8801f17 	ldw	r2,124(sp)
    10e8:	44000015 	stw	r16,0(r8)
    10ec:	1947883a 	add	r3,r3,r5
    10f0:	10800044 	addi	r2,r2,1
    10f4:	41400115 	stw	r5,4(r8)
    10f8:	d8c02015 	stw	r3,128(sp)
    10fc:	d8801f15 	stw	r2,124(sp)
    1100:	010001c4 	movi	r4,7
    1104:	2081f516 	blt	r4,r2,18dc <___vfprintf_internal_r+0x11e4>
    1108:	42000204 	addi	r8,r8,8
    110c:	9480010c 	andi	r18,r18,4
    1110:	90003226 	beq	r18,zero,11dc <___vfprintf_internal_r+0xae4>
    1114:	d9403117 	ldw	r5,196(sp)
    1118:	d8802917 	ldw	r2,164(sp)
    111c:	28a1c83a 	sub	r16,r5,r2
    1120:	04002e0e 	bge	zero,r16,11dc <___vfprintf_internal_r+0xae4>
    1124:	04400404 	movi	r17,16
    1128:	d8801f17 	ldw	r2,124(sp)
    112c:	8c04c40e 	bge	r17,r16,2440 <___vfprintf_internal_r+0x1d48>
    1130:	01400074 	movhi	r5,1
    1134:	29418784 	addi	r5,r5,1566
    1138:	d9403515 	stw	r5,212(sp)
    113c:	048001c4 	movi	r18,7
    1140:	dcc02d17 	ldw	r19,180(sp)
    1144:	00000306 	br	1154 <___vfprintf_internal_r+0xa5c>
    1148:	843ffc04 	addi	r16,r16,-16
    114c:	42000204 	addi	r8,r8,8
    1150:	8c00130e 	bge	r17,r16,11a0 <___vfprintf_internal_r+0xaa8>
    1154:	01000074 	movhi	r4,1
    1158:	18c00404 	addi	r3,r3,16
    115c:	10800044 	addi	r2,r2,1
    1160:	21018784 	addi	r4,r4,1566
    1164:	41000015 	stw	r4,0(r8)
    1168:	44400115 	stw	r17,4(r8)
    116c:	d8c02015 	stw	r3,128(sp)
    1170:	d8801f15 	stw	r2,124(sp)
    1174:	90bff40e 	bge	r18,r2,1148 <_gp+0xfffe6ddc>
    1178:	d9801e04 	addi	r6,sp,120
    117c:	b80b883a 	mov	r5,r23
    1180:	9809883a 	mov	r4,r19
    1184:	00073e80 	call	73e8 <__sprint_r>
    1188:	103e5f1e 	bne	r2,zero,b08 <_gp+0xfffe679c>
    118c:	843ffc04 	addi	r16,r16,-16
    1190:	d8c02017 	ldw	r3,128(sp)
    1194:	d8801f17 	ldw	r2,124(sp)
    1198:	da000404 	addi	r8,sp,16
    119c:	8c3fed16 	blt	r17,r16,1154 <_gp+0xfffe6de8>
    11a0:	d9403517 	ldw	r5,212(sp)
    11a4:	1c07883a 	add	r3,r3,r16
    11a8:	10800044 	addi	r2,r2,1
    11ac:	41400015 	stw	r5,0(r8)
    11b0:	44000115 	stw	r16,4(r8)
    11b4:	d8c02015 	stw	r3,128(sp)
    11b8:	d8801f15 	stw	r2,124(sp)
    11bc:	010001c4 	movi	r4,7
    11c0:	2080060e 	bge	r4,r2,11dc <___vfprintf_internal_r+0xae4>
    11c4:	d9002d17 	ldw	r4,180(sp)
    11c8:	d9801e04 	addi	r6,sp,120
    11cc:	b80b883a 	mov	r5,r23
    11d0:	00073e80 	call	73e8 <__sprint_r>
    11d4:	103e4c1e 	bne	r2,zero,b08 <_gp+0xfffe679c>
    11d8:	d8c02017 	ldw	r3,128(sp)
    11dc:	d8803117 	ldw	r2,196(sp)
    11e0:	d9002917 	ldw	r4,164(sp)
    11e4:	1100010e 	bge	r2,r4,11ec <___vfprintf_internal_r+0xaf4>
    11e8:	2005883a 	mov	r2,r4
    11ec:	d9402f17 	ldw	r5,188(sp)
    11f0:	288b883a 	add	r5,r5,r2
    11f4:	d9402f15 	stw	r5,188(sp)
    11f8:	1801c01e 	bne	r3,zero,18fc <___vfprintf_internal_r+0x1204>
    11fc:	a8800007 	ldb	r2,0(r21)
    1200:	d8001f15 	stw	zero,124(sp)
    1204:	da000404 	addi	r8,sp,16
    1208:	103d751e 	bne	r2,zero,7e0 <_gp+0xfffe6474>
    120c:	a823883a 	mov	r17,r21
    1210:	003d8b06 	br	840 <_gp+0xfffe64d4>
    1214:	8025883a 	mov	r18,r16
    1218:	dc002903 	ldbu	r16,164(sp)
    121c:	e011883a 	mov	r8,fp
    1220:	84003fcc 	andi	r16,r16,255
    1224:	8005e51e 	bne	r16,zero,29bc <___vfprintf_internal_r+0x22c4>
    1228:	94800414 	ori	r18,r18,16
    122c:	9080080c 	andi	r2,r18,32
    1230:	10022b26 	beq	r2,zero,1ae0 <___vfprintf_internal_r+0x13e8>
    1234:	d9002e17 	ldw	r4,184(sp)
    1238:	d9402a17 	ldw	r5,168(sp)
    123c:	d8002785 	stb	zero,158(sp)
    1240:	20c00204 	addi	r3,r4,8
    1244:	24c00017 	ldw	r19,0(r4)
    1248:	25800117 	ldw	r22,4(r4)
    124c:	28042e16 	blt	r5,zero,2308 <___vfprintf_internal_r+0x1c10>
    1250:	013fdfc4 	movi	r4,-129
    1254:	9d84b03a 	or	r2,r19,r22
    1258:	d8c02e15 	stw	r3,184(sp)
    125c:	9124703a 	and	r18,r18,r4
    1260:	0039883a 	mov	fp,zero
    1264:	103e801e 	bne	r2,zero,c68 <_gp+0xfffe68fc>
    1268:	d9002a17 	ldw	r4,168(sp)
    126c:	2002e01e 	bne	r4,zero,1df0 <___vfprintf_internal_r+0x16f8>
    1270:	d8002a15 	stw	zero,168(sp)
    1274:	d8002b15 	stw	zero,172(sp)
    1278:	dc001e04 	addi	r16,sp,120
    127c:	003ef506 	br	e54 <_gp+0xfffe6ae8>
    1280:	8025883a 	mov	r18,r16
    1284:	dc002903 	ldbu	r16,164(sp)
    1288:	e011883a 	mov	r8,fp
    128c:	84003fcc 	andi	r16,r16,255
    1290:	8005ba1e 	bne	r16,zero,297c <___vfprintf_internal_r+0x2284>
    1294:	01000074 	movhi	r4,1
    1298:	21017704 	addi	r4,r4,1500
    129c:	d9003915 	stw	r4,228(sp)
    12a0:	9080080c 	andi	r2,r18,32
    12a4:	10006126 	beq	r2,zero,142c <___vfprintf_internal_r+0xd34>
    12a8:	d9402e17 	ldw	r5,184(sp)
    12ac:	2cc00017 	ldw	r19,0(r5)
    12b0:	2d800117 	ldw	r22,4(r5)
    12b4:	29400204 	addi	r5,r5,8
    12b8:	d9402e15 	stw	r5,184(sp)
    12bc:	9080004c 	andi	r2,r18,1
    12c0:	1001ac26 	beq	r2,zero,1974 <___vfprintf_internal_r+0x127c>
    12c4:	9d84b03a 	or	r2,r19,r22
    12c8:	10038526 	beq	r2,zero,20e0 <___vfprintf_internal_r+0x19e8>
    12cc:	d8c02a17 	ldw	r3,168(sp)
    12d0:	00800c04 	movi	r2,48
    12d4:	d8802705 	stb	r2,156(sp)
    12d8:	dc402745 	stb	r17,157(sp)
    12dc:	d8002785 	stb	zero,158(sp)
    12e0:	90800094 	ori	r2,r18,2
    12e4:	18047916 	blt	r3,zero,24cc <___vfprintf_internal_r+0x1dd4>
    12e8:	00bfdfc4 	movi	r2,-129
    12ec:	90a4703a 	and	r18,r18,r2
    12f0:	94800094 	ori	r18,r18,2
    12f4:	0039883a 	mov	fp,zero
    12f8:	d9003917 	ldw	r4,228(sp)
    12fc:	dc001e04 	addi	r16,sp,120
    1300:	988003cc 	andi	r2,r19,15
    1304:	b006973a 	slli	r3,r22,28
    1308:	2085883a 	add	r2,r4,r2
    130c:	9826d13a 	srli	r19,r19,4
    1310:	10800003 	ldbu	r2,0(r2)
    1314:	b02cd13a 	srli	r22,r22,4
    1318:	843fffc4 	addi	r16,r16,-1
    131c:	1ce6b03a 	or	r19,r3,r19
    1320:	80800005 	stb	r2,0(r16)
    1324:	9d84b03a 	or	r2,r19,r22
    1328:	103ff51e 	bne	r2,zero,1300 <_gp+0xfffe6f94>
    132c:	d8c02817 	ldw	r3,160(sp)
    1330:	1c07c83a 	sub	r3,r3,r16
    1334:	d8c02b15 	stw	r3,172(sp)
    1338:	003ec606 	br	e54 <_gp+0xfffe6ae8>
    133c:	8025883a 	mov	r18,r16
    1340:	dc002903 	ldbu	r16,164(sp)
    1344:	e011883a 	mov	r8,fp
    1348:	84003fcc 	andi	r16,r16,255
    134c:	803e9626 	beq	r16,zero,da8 <_gp+0xfffe6a3c>
    1350:	d8c02b03 	ldbu	r3,172(sp)
    1354:	d8c02785 	stb	r3,158(sp)
    1358:	003e9306 	br	da8 <_gp+0xfffe6a3c>
    135c:	00c00044 	movi	r3,1
    1360:	d8c02905 	stb	r3,164(sp)
    1364:	00c00ac4 	movi	r3,43
    1368:	d8c02b05 	stb	r3,172(sp)
    136c:	ac400007 	ldb	r17,0(r21)
    1370:	003d4306 	br	880 <_gp+0xfffe6514>
    1374:	84000814 	ori	r16,r16,32
    1378:	ac400007 	ldb	r17,0(r21)
    137c:	003d4006 	br	880 <_gp+0xfffe6514>
    1380:	d8802e17 	ldw	r2,184(sp)
    1384:	8025883a 	mov	r18,r16
    1388:	d8002785 	stb	zero,158(sp)
    138c:	14000017 	ldw	r16,0(r2)
    1390:	e011883a 	mov	r8,fp
    1394:	14c00104 	addi	r19,r2,4
    1398:	80042d26 	beq	r16,zero,2450 <___vfprintf_internal_r+0x1d58>
    139c:	d8c02a17 	ldw	r3,168(sp)
    13a0:	1803e416 	blt	r3,zero,2334 <___vfprintf_internal_r+0x1c3c>
    13a4:	180d883a 	mov	r6,r3
    13a8:	000b883a 	mov	r5,zero
    13ac:	8009883a 	mov	r4,r16
    13b0:	df003d15 	stw	fp,244(sp)
    13b4:	0005b680 	call	5b68 <memchr>
    13b8:	da003d17 	ldw	r8,244(sp)
    13bc:	10046826 	beq	r2,zero,2560 <___vfprintf_internal_r+0x1e68>
    13c0:	1405c83a 	sub	r2,r2,r16
    13c4:	d8802b15 	stw	r2,172(sp)
    13c8:	1003e016 	blt	r2,zero,234c <___vfprintf_internal_r+0x1c54>
    13cc:	df002783 	ldbu	fp,158(sp)
    13d0:	d8802915 	stw	r2,164(sp)
    13d4:	dcc02e15 	stw	r19,184(sp)
    13d8:	d8002a15 	stw	zero,168(sp)
    13dc:	d8003215 	stw	zero,200(sp)
    13e0:	003ea206 	br	e6c <_gp+0xfffe6b00>
    13e4:	8025883a 	mov	r18,r16
    13e8:	dc002903 	ldbu	r16,164(sp)
    13ec:	e011883a 	mov	r8,fp
    13f0:	84003fcc 	andi	r16,r16,255
    13f4:	803f8d26 	beq	r16,zero,122c <_gp+0xfffe6ec0>
    13f8:	d8c02b03 	ldbu	r3,172(sp)
    13fc:	d8c02785 	stb	r3,158(sp)
    1400:	003f8a06 	br	122c <_gp+0xfffe6ec0>
    1404:	8025883a 	mov	r18,r16
    1408:	dc002903 	ldbu	r16,164(sp)
    140c:	e011883a 	mov	r8,fp
    1410:	84003fcc 	andi	r16,r16,255
    1414:	8005661e 	bne	r16,zero,29b0 <___vfprintf_internal_r+0x22b8>
    1418:	01000074 	movhi	r4,1
    141c:	21017c04 	addi	r4,r4,1520
    1420:	d9003915 	stw	r4,228(sp)
    1424:	9080080c 	andi	r2,r18,32
    1428:	103f9f1e 	bne	r2,zero,12a8 <_gp+0xfffe6f3c>
    142c:	9080040c 	andi	r2,r18,16
    1430:	1002eb26 	beq	r2,zero,1fe0 <___vfprintf_internal_r+0x18e8>
    1434:	d8802e17 	ldw	r2,184(sp)
    1438:	002d883a 	mov	r22,zero
    143c:	14c00017 	ldw	r19,0(r2)
    1440:	10800104 	addi	r2,r2,4
    1444:	d8802e15 	stw	r2,184(sp)
    1448:	003f9c06 	br	12bc <_gp+0xfffe6f50>
    144c:	d8802b07 	ldb	r2,172(sp)
    1450:	1002e11e 	bne	r2,zero,1fd8 <___vfprintf_internal_r+0x18e0>
    1454:	00c00044 	movi	r3,1
    1458:	d8c02905 	stb	r3,164(sp)
    145c:	00c00804 	movi	r3,32
    1460:	d8c02b05 	stb	r3,172(sp)
    1464:	ac400007 	ldb	r17,0(r21)
    1468:	003d0506 	br	880 <_gp+0xfffe6514>
    146c:	84000054 	ori	r16,r16,1
    1470:	ac400007 	ldb	r17,0(r21)
    1474:	003d0206 	br	880 <_gp+0xfffe6514>
    1478:	8025883a 	mov	r18,r16
    147c:	dc002903 	ldbu	r16,164(sp)
    1480:	e011883a 	mov	r8,fp
    1484:	84003fcc 	andi	r16,r16,255
    1488:	803de726 	beq	r16,zero,c28 <_gp+0xfffe68bc>
    148c:	d8c02b03 	ldbu	r3,172(sp)
    1490:	d8c02785 	stb	r3,158(sp)
    1494:	003de406 	br	c28 <_gp+0xfffe68bc>
    1498:	84001014 	ori	r16,r16,64
    149c:	ac400007 	ldb	r17,0(r21)
    14a0:	003cf706 	br	880 <_gp+0xfffe6514>
    14a4:	ac400007 	ldb	r17,0(r21)
    14a8:	00801b04 	movi	r2,108
    14ac:	88838f26 	beq	r17,r2,22ec <___vfprintf_internal_r+0x1bf4>
    14b0:	84000414 	ori	r16,r16,16
    14b4:	003cf206 	br	880 <_gp+0xfffe6514>
    14b8:	8025883a 	mov	r18,r16
    14bc:	dc002903 	ldbu	r16,164(sp)
    14c0:	e011883a 	mov	r8,fp
    14c4:	84003fcc 	andi	r16,r16,255
    14c8:	80053f1e 	bne	r16,zero,29c8 <___vfprintf_internal_r+0x22d0>
    14cc:	9080080c 	andi	r2,r18,32
    14d0:	1002d226 	beq	r2,zero,201c <___vfprintf_internal_r+0x1924>
    14d4:	d9002e17 	ldw	r4,184(sp)
    14d8:	d9402f17 	ldw	r5,188(sp)
    14dc:	20800017 	ldw	r2,0(r4)
    14e0:	2807d7fa 	srai	r3,r5,31
    14e4:	21000104 	addi	r4,r4,4
    14e8:	d9002e15 	stw	r4,184(sp)
    14ec:	11400015 	stw	r5,0(r2)
    14f0:	10c00115 	stw	r3,4(r2)
    14f4:	003cb806 	br	7d8 <_gp+0xfffe646c>
    14f8:	d8c02e17 	ldw	r3,184(sp)
    14fc:	d9002e17 	ldw	r4,184(sp)
    1500:	8025883a 	mov	r18,r16
    1504:	18800017 	ldw	r2,0(r3)
    1508:	21000104 	addi	r4,r4,4
    150c:	00c00044 	movi	r3,1
    1510:	e011883a 	mov	r8,fp
    1514:	d8c02915 	stw	r3,164(sp)
    1518:	d8002785 	stb	zero,158(sp)
    151c:	d8801405 	stb	r2,80(sp)
    1520:	d9002e15 	stw	r4,184(sp)
    1524:	d8c02b15 	stw	r3,172(sp)
    1528:	d8002a15 	stw	zero,168(sp)
    152c:	d8003215 	stw	zero,200(sp)
    1530:	dc001404 	addi	r16,sp,80
    1534:	0039883a 	mov	fp,zero
    1538:	003e5306 	br	e88 <_gp+0xfffe6b1c>
    153c:	01000074 	movhi	r4,1
    1540:	21017c04 	addi	r4,r4,1520
    1544:	0039883a 	mov	fp,zero
    1548:	d9003915 	stw	r4,228(sp)
    154c:	04401e04 	movi	r17,120
    1550:	003f6906 	br	12f8 <_gp+0xfffe6f8c>
    1554:	8025883a 	mov	r18,r16
    1558:	dc002903 	ldbu	r16,164(sp)
    155c:	e011883a 	mov	r8,fp
    1560:	84003fcc 	andi	r16,r16,255
    1564:	8005081e 	bne	r16,zero,2988 <___vfprintf_internal_r+0x2290>
    1568:	883d6126 	beq	r17,zero,af0 <_gp+0xfffe6784>
    156c:	00c00044 	movi	r3,1
    1570:	d8c02915 	stw	r3,164(sp)
    1574:	dc401405 	stb	r17,80(sp)
    1578:	d8002785 	stb	zero,158(sp)
    157c:	003fe906 	br	1524 <_gp+0xfffe71b8>
    1580:	01400074 	movhi	r5,1
    1584:	29417c04 	addi	r5,r5,1520
    1588:	d9403915 	stw	r5,228(sp)
    158c:	d8c02e15 	stw	r3,184(sp)
    1590:	1025883a 	mov	r18,r2
    1594:	04401e04 	movi	r17,120
    1598:	9d84b03a 	or	r2,r19,r22
    159c:	1000fc1e 	bne	r2,zero,1990 <___vfprintf_internal_r+0x1298>
    15a0:	0039883a 	mov	fp,zero
    15a4:	00800084 	movi	r2,2
    15a8:	10803fcc 	andi	r2,r2,255
    15ac:	00c00044 	movi	r3,1
    15b0:	10c20f26 	beq	r2,r3,1df0 <___vfprintf_internal_r+0x16f8>
    15b4:	00c00084 	movi	r3,2
    15b8:	10fd3326 	beq	r2,r3,a88 <_gp+0xfffe671c>
    15bc:	003e0b06 	br	dec <_gp+0xfffe6a80>
    15c0:	d8c02017 	ldw	r3,128(sp)
    15c4:	003e7106 	br	f8c <_gp+0xfffe6c20>
    15c8:	00801944 	movi	r2,101
    15cc:	14407e0e 	bge	r2,r17,17c8 <___vfprintf_internal_r+0x10d0>
    15d0:	d9003617 	ldw	r4,216(sp)
    15d4:	d9403817 	ldw	r5,224(sp)
    15d8:	000d883a 	mov	r6,zero
    15dc:	000f883a 	mov	r7,zero
    15e0:	d8c03c15 	stw	r3,240(sp)
    15e4:	da003d15 	stw	r8,244(sp)
    15e8:	000bea80 	call	bea8 <__eqdf2>
    15ec:	d8c03c17 	ldw	r3,240(sp)
    15f0:	da003d17 	ldw	r8,244(sp)
    15f4:	1000f71e 	bne	r2,zero,19d4 <___vfprintf_internal_r+0x12dc>
    15f8:	d8801f17 	ldw	r2,124(sp)
    15fc:	01000074 	movhi	r4,1
    1600:	21018304 	addi	r4,r4,1548
    1604:	18c00044 	addi	r3,r3,1
    1608:	10800044 	addi	r2,r2,1
    160c:	41000015 	stw	r4,0(r8)
    1610:	01000044 	movi	r4,1
    1614:	41000115 	stw	r4,4(r8)
    1618:	d8c02015 	stw	r3,128(sp)
    161c:	d8801f15 	stw	r2,124(sp)
    1620:	010001c4 	movi	r4,7
    1624:	2082b816 	blt	r4,r2,2108 <___vfprintf_internal_r+0x1a10>
    1628:	42000204 	addi	r8,r8,8
    162c:	d8802617 	ldw	r2,152(sp)
    1630:	d9403317 	ldw	r5,204(sp)
    1634:	11400216 	blt	r2,r5,1640 <___vfprintf_internal_r+0xf48>
    1638:	9080004c 	andi	r2,r18,1
    163c:	103eb326 	beq	r2,zero,110c <_gp+0xfffe6da0>
    1640:	d8803717 	ldw	r2,220(sp)
    1644:	d9003417 	ldw	r4,208(sp)
    1648:	d9403717 	ldw	r5,220(sp)
    164c:	1887883a 	add	r3,r3,r2
    1650:	d8801f17 	ldw	r2,124(sp)
    1654:	41000015 	stw	r4,0(r8)
    1658:	41400115 	stw	r5,4(r8)
    165c:	10800044 	addi	r2,r2,1
    1660:	d8c02015 	stw	r3,128(sp)
    1664:	d8801f15 	stw	r2,124(sp)
    1668:	010001c4 	movi	r4,7
    166c:	20832916 	blt	r4,r2,2314 <___vfprintf_internal_r+0x1c1c>
    1670:	42000204 	addi	r8,r8,8
    1674:	d8803317 	ldw	r2,204(sp)
    1678:	143fffc4 	addi	r16,r2,-1
    167c:	043ea30e 	bge	zero,r16,110c <_gp+0xfffe6da0>
    1680:	04400404 	movi	r17,16
    1684:	d8801f17 	ldw	r2,124(sp)
    1688:	8c00880e 	bge	r17,r16,18ac <___vfprintf_internal_r+0x11b4>
    168c:	01400074 	movhi	r5,1
    1690:	29418384 	addi	r5,r5,1550
    1694:	d9402c15 	stw	r5,176(sp)
    1698:	058001c4 	movi	r22,7
    169c:	dcc02d17 	ldw	r19,180(sp)
    16a0:	00000306 	br	16b0 <___vfprintf_internal_r+0xfb8>
    16a4:	42000204 	addi	r8,r8,8
    16a8:	843ffc04 	addi	r16,r16,-16
    16ac:	8c00820e 	bge	r17,r16,18b8 <___vfprintf_internal_r+0x11c0>
    16b0:	18c00404 	addi	r3,r3,16
    16b4:	10800044 	addi	r2,r2,1
    16b8:	45000015 	stw	r20,0(r8)
    16bc:	44400115 	stw	r17,4(r8)
    16c0:	d8c02015 	stw	r3,128(sp)
    16c4:	d8801f15 	stw	r2,124(sp)
    16c8:	b0bff60e 	bge	r22,r2,16a4 <_gp+0xfffe7338>
    16cc:	d9801e04 	addi	r6,sp,120
    16d0:	b80b883a 	mov	r5,r23
    16d4:	9809883a 	mov	r4,r19
    16d8:	00073e80 	call	73e8 <__sprint_r>
    16dc:	103d0a1e 	bne	r2,zero,b08 <_gp+0xfffe679c>
    16e0:	d8c02017 	ldw	r3,128(sp)
    16e4:	d8801f17 	ldw	r2,124(sp)
    16e8:	da000404 	addi	r8,sp,16
    16ec:	003fee06 	br	16a8 <_gp+0xfffe733c>
    16f0:	d9403117 	ldw	r5,196(sp)
    16f4:	d8802917 	ldw	r2,164(sp)
    16f8:	28adc83a 	sub	r22,r5,r2
    16fc:	05be410e 	bge	zero,r22,1004 <_gp+0xfffe6c98>
    1700:	07000404 	movi	fp,16
    1704:	d8801f17 	ldw	r2,124(sp)
    1708:	e5838f0e 	bge	fp,r22,2548 <___vfprintf_internal_r+0x1e50>
    170c:	01400074 	movhi	r5,1
    1710:	29418384 	addi	r5,r5,1550
    1714:	dc403015 	stw	r17,192(sp)
    1718:	d9402c15 	stw	r5,176(sp)
    171c:	b023883a 	mov	r17,r22
    1720:	04c001c4 	movi	r19,7
    1724:	a82d883a 	mov	r22,r21
    1728:	902b883a 	mov	r21,r18
    172c:	8025883a 	mov	r18,r16
    1730:	dc002d17 	ldw	r16,180(sp)
    1734:	00000306 	br	1744 <___vfprintf_internal_r+0x104c>
    1738:	8c7ffc04 	addi	r17,r17,-16
    173c:	42000204 	addi	r8,r8,8
    1740:	e440110e 	bge	fp,r17,1788 <___vfprintf_internal_r+0x1090>
    1744:	18c00404 	addi	r3,r3,16
    1748:	10800044 	addi	r2,r2,1
    174c:	45000015 	stw	r20,0(r8)
    1750:	47000115 	stw	fp,4(r8)
    1754:	d8c02015 	stw	r3,128(sp)
    1758:	d8801f15 	stw	r2,124(sp)
    175c:	98bff60e 	bge	r19,r2,1738 <_gp+0xfffe73cc>
    1760:	d9801e04 	addi	r6,sp,120
    1764:	b80b883a 	mov	r5,r23
    1768:	8009883a 	mov	r4,r16
    176c:	00073e80 	call	73e8 <__sprint_r>
    1770:	103ce51e 	bne	r2,zero,b08 <_gp+0xfffe679c>
    1774:	8c7ffc04 	addi	r17,r17,-16
    1778:	d8c02017 	ldw	r3,128(sp)
    177c:	d8801f17 	ldw	r2,124(sp)
    1780:	da000404 	addi	r8,sp,16
    1784:	e47fef16 	blt	fp,r17,1744 <_gp+0xfffe73d8>
    1788:	9021883a 	mov	r16,r18
    178c:	a825883a 	mov	r18,r21
    1790:	b02b883a 	mov	r21,r22
    1794:	882d883a 	mov	r22,r17
    1798:	dc403017 	ldw	r17,192(sp)
    179c:	d9002c17 	ldw	r4,176(sp)
    17a0:	1d87883a 	add	r3,r3,r22
    17a4:	10800044 	addi	r2,r2,1
    17a8:	41000015 	stw	r4,0(r8)
    17ac:	45800115 	stw	r22,4(r8)
    17b0:	d8c02015 	stw	r3,128(sp)
    17b4:	d8801f15 	stw	r2,124(sp)
    17b8:	010001c4 	movi	r4,7
    17bc:	20818e16 	blt	r4,r2,1df8 <___vfprintf_internal_r+0x1700>
    17c0:	42000204 	addi	r8,r8,8
    17c4:	003e0f06 	br	1004 <_gp+0xfffe6c98>
    17c8:	d9403317 	ldw	r5,204(sp)
    17cc:	00800044 	movi	r2,1
    17d0:	18c00044 	addi	r3,r3,1
    17d4:	1141530e 	bge	r2,r5,1d24 <___vfprintf_internal_r+0x162c>
    17d8:	dc401f17 	ldw	r17,124(sp)
    17dc:	00800044 	movi	r2,1
    17e0:	40800115 	stw	r2,4(r8)
    17e4:	8c400044 	addi	r17,r17,1
    17e8:	44000015 	stw	r16,0(r8)
    17ec:	d8c02015 	stw	r3,128(sp)
    17f0:	dc401f15 	stw	r17,124(sp)
    17f4:	008001c4 	movi	r2,7
    17f8:	14416b16 	blt	r2,r17,1da8 <___vfprintf_internal_r+0x16b0>
    17fc:	42000204 	addi	r8,r8,8
    1800:	d8803717 	ldw	r2,220(sp)
    1804:	d9003417 	ldw	r4,208(sp)
    1808:	8c400044 	addi	r17,r17,1
    180c:	10c7883a 	add	r3,r2,r3
    1810:	40800115 	stw	r2,4(r8)
    1814:	41000015 	stw	r4,0(r8)
    1818:	d8c02015 	stw	r3,128(sp)
    181c:	dc401f15 	stw	r17,124(sp)
    1820:	008001c4 	movi	r2,7
    1824:	14416916 	blt	r2,r17,1dcc <___vfprintf_internal_r+0x16d4>
    1828:	45800204 	addi	r22,r8,8
    182c:	d9003617 	ldw	r4,216(sp)
    1830:	d9403817 	ldw	r5,224(sp)
    1834:	000d883a 	mov	r6,zero
    1838:	000f883a 	mov	r7,zero
    183c:	d8c03c15 	stw	r3,240(sp)
    1840:	000bea80 	call	bea8 <__eqdf2>
    1844:	d8c03c17 	ldw	r3,240(sp)
    1848:	1000bc26 	beq	r2,zero,1b3c <___vfprintf_internal_r+0x1444>
    184c:	d9403317 	ldw	r5,204(sp)
    1850:	84000044 	addi	r16,r16,1
    1854:	8c400044 	addi	r17,r17,1
    1858:	28bfffc4 	addi	r2,r5,-1
    185c:	1887883a 	add	r3,r3,r2
    1860:	b0800115 	stw	r2,4(r22)
    1864:	b4000015 	stw	r16,0(r22)
    1868:	d8c02015 	stw	r3,128(sp)
    186c:	dc401f15 	stw	r17,124(sp)
    1870:	008001c4 	movi	r2,7
    1874:	14414316 	blt	r2,r17,1d84 <___vfprintf_internal_r+0x168c>
    1878:	b5800204 	addi	r22,r22,8
    187c:	d9003a17 	ldw	r4,232(sp)
    1880:	df0022c4 	addi	fp,sp,139
    1884:	8c400044 	addi	r17,r17,1
    1888:	20c7883a 	add	r3,r4,r3
    188c:	b7000015 	stw	fp,0(r22)
    1890:	b1000115 	stw	r4,4(r22)
    1894:	d8c02015 	stw	r3,128(sp)
    1898:	dc401f15 	stw	r17,124(sp)
    189c:	008001c4 	movi	r2,7
    18a0:	14400e16 	blt	r2,r17,18dc <___vfprintf_internal_r+0x11e4>
    18a4:	b2000204 	addi	r8,r22,8
    18a8:	003e1806 	br	110c <_gp+0xfffe6da0>
    18ac:	01000074 	movhi	r4,1
    18b0:	21018384 	addi	r4,r4,1550
    18b4:	d9002c15 	stw	r4,176(sp)
    18b8:	d9002c17 	ldw	r4,176(sp)
    18bc:	1c07883a 	add	r3,r3,r16
    18c0:	44000115 	stw	r16,4(r8)
    18c4:	41000015 	stw	r4,0(r8)
    18c8:	10800044 	addi	r2,r2,1
    18cc:	d8c02015 	stw	r3,128(sp)
    18d0:	d8801f15 	stw	r2,124(sp)
    18d4:	010001c4 	movi	r4,7
    18d8:	20be0b0e 	bge	r4,r2,1108 <_gp+0xfffe6d9c>
    18dc:	d9002d17 	ldw	r4,180(sp)
    18e0:	d9801e04 	addi	r6,sp,120
    18e4:	b80b883a 	mov	r5,r23
    18e8:	00073e80 	call	73e8 <__sprint_r>
    18ec:	103c861e 	bne	r2,zero,b08 <_gp+0xfffe679c>
    18f0:	d8c02017 	ldw	r3,128(sp)
    18f4:	da000404 	addi	r8,sp,16
    18f8:	003e0406 	br	110c <_gp+0xfffe6da0>
    18fc:	d9002d17 	ldw	r4,180(sp)
    1900:	d9801e04 	addi	r6,sp,120
    1904:	b80b883a 	mov	r5,r23
    1908:	00073e80 	call	73e8 <__sprint_r>
    190c:	103e3b26 	beq	r2,zero,11fc <_gp+0xfffe6e90>
    1910:	003c7d06 	br	b08 <_gp+0xfffe679c>
    1914:	d9002d17 	ldw	r4,180(sp)
    1918:	d9801e04 	addi	r6,sp,120
    191c:	b80b883a 	mov	r5,r23
    1920:	00073e80 	call	73e8 <__sprint_r>
    1924:	103c781e 	bne	r2,zero,b08 <_gp+0xfffe679c>
    1928:	d8c02017 	ldw	r3,128(sp)
    192c:	da000404 	addi	r8,sp,16
    1930:	003de906 	br	10d8 <_gp+0xfffe6d6c>
    1934:	d9002d17 	ldw	r4,180(sp)
    1938:	d9801e04 	addi	r6,sp,120
    193c:	b80b883a 	mov	r5,r23
    1940:	00073e80 	call	73e8 <__sprint_r>
    1944:	103c701e 	bne	r2,zero,b08 <_gp+0xfffe679c>
    1948:	d8c02017 	ldw	r3,128(sp)
    194c:	da000404 	addi	r8,sp,16
    1950:	003d9b06 	br	fc0 <_gp+0xfffe6c54>
    1954:	d9002d17 	ldw	r4,180(sp)
    1958:	d9801e04 	addi	r6,sp,120
    195c:	b80b883a 	mov	r5,r23
    1960:	00073e80 	call	73e8 <__sprint_r>
    1964:	103c681e 	bne	r2,zero,b08 <_gp+0xfffe679c>
    1968:	d8c02017 	ldw	r3,128(sp)
    196c:	da000404 	addi	r8,sp,16
    1970:	003da106 	br	ff8 <_gp+0xfffe6c8c>
    1974:	d9402a17 	ldw	r5,168(sp)
    1978:	d8002785 	stb	zero,158(sp)
    197c:	283f0616 	blt	r5,zero,1598 <_gp+0xfffe722c>
    1980:	00ffdfc4 	movi	r3,-129
    1984:	9d84b03a 	or	r2,r19,r22
    1988:	90e4703a 	and	r18,r18,r3
    198c:	103c3b26 	beq	r2,zero,a7c <_gp+0xfffe6710>
    1990:	0039883a 	mov	fp,zero
    1994:	003e5806 	br	12f8 <_gp+0xfffe6f8c>
    1998:	9080040c 	andi	r2,r18,16
    199c:	1001b326 	beq	r2,zero,206c <___vfprintf_internal_r+0x1974>
    19a0:	d8c02e17 	ldw	r3,184(sp)
    19a4:	d9002a17 	ldw	r4,168(sp)
    19a8:	d8002785 	stb	zero,158(sp)
    19ac:	18800104 	addi	r2,r3,4
    19b0:	1cc00017 	ldw	r19,0(r3)
    19b4:	002d883a 	mov	r22,zero
    19b8:	2001b516 	blt	r4,zero,2090 <___vfprintf_internal_r+0x1998>
    19bc:	00ffdfc4 	movi	r3,-129
    19c0:	d8802e15 	stw	r2,184(sp)
    19c4:	90e4703a 	and	r18,r18,r3
    19c8:	983d0526 	beq	r19,zero,de0 <_gp+0xfffe6a74>
    19cc:	0039883a 	mov	fp,zero
    19d0:	003d0806 	br	df4 <_gp+0xfffe6a88>
    19d4:	dc402617 	ldw	r17,152(sp)
    19d8:	0441d30e 	bge	zero,r17,2128 <___vfprintf_internal_r+0x1a30>
    19dc:	dc403217 	ldw	r17,200(sp)
    19e0:	d8803317 	ldw	r2,204(sp)
    19e4:	1440010e 	bge	r2,r17,19ec <___vfprintf_internal_r+0x12f4>
    19e8:	1023883a 	mov	r17,r2
    19ec:	04400a0e 	bge	zero,r17,1a18 <___vfprintf_internal_r+0x1320>
    19f0:	d8801f17 	ldw	r2,124(sp)
    19f4:	1c47883a 	add	r3,r3,r17
    19f8:	44000015 	stw	r16,0(r8)
    19fc:	10800044 	addi	r2,r2,1
    1a00:	44400115 	stw	r17,4(r8)
    1a04:	d8c02015 	stw	r3,128(sp)
    1a08:	d8801f15 	stw	r2,124(sp)
    1a0c:	010001c4 	movi	r4,7
    1a10:	20826516 	blt	r4,r2,23a8 <___vfprintf_internal_r+0x1cb0>
    1a14:	42000204 	addi	r8,r8,8
    1a18:	88026116 	blt	r17,zero,23a0 <___vfprintf_internal_r+0x1ca8>
    1a1c:	d9003217 	ldw	r4,200(sp)
    1a20:	2463c83a 	sub	r17,r4,r17
    1a24:	04407b0e 	bge	zero,r17,1c14 <___vfprintf_internal_r+0x151c>
    1a28:	05800404 	movi	r22,16
    1a2c:	d8801f17 	ldw	r2,124(sp)
    1a30:	b4419d0e 	bge	r22,r17,20a8 <___vfprintf_internal_r+0x19b0>
    1a34:	01000074 	movhi	r4,1
    1a38:	21018384 	addi	r4,r4,1550
    1a3c:	d9002c15 	stw	r4,176(sp)
    1a40:	070001c4 	movi	fp,7
    1a44:	dcc02d17 	ldw	r19,180(sp)
    1a48:	00000306 	br	1a58 <___vfprintf_internal_r+0x1360>
    1a4c:	42000204 	addi	r8,r8,8
    1a50:	8c7ffc04 	addi	r17,r17,-16
    1a54:	b441970e 	bge	r22,r17,20b4 <___vfprintf_internal_r+0x19bc>
    1a58:	18c00404 	addi	r3,r3,16
    1a5c:	10800044 	addi	r2,r2,1
    1a60:	45000015 	stw	r20,0(r8)
    1a64:	45800115 	stw	r22,4(r8)
    1a68:	d8c02015 	stw	r3,128(sp)
    1a6c:	d8801f15 	stw	r2,124(sp)
    1a70:	e0bff60e 	bge	fp,r2,1a4c <_gp+0xfffe76e0>
    1a74:	d9801e04 	addi	r6,sp,120
    1a78:	b80b883a 	mov	r5,r23
    1a7c:	9809883a 	mov	r4,r19
    1a80:	00073e80 	call	73e8 <__sprint_r>
    1a84:	103c201e 	bne	r2,zero,b08 <_gp+0xfffe679c>
    1a88:	d8c02017 	ldw	r3,128(sp)
    1a8c:	d8801f17 	ldw	r2,124(sp)
    1a90:	da000404 	addi	r8,sp,16
    1a94:	003fee06 	br	1a50 <_gp+0xfffe76e4>
    1a98:	d9002d17 	ldw	r4,180(sp)
    1a9c:	d9801e04 	addi	r6,sp,120
    1aa0:	b80b883a 	mov	r5,r23
    1aa4:	00073e80 	call	73e8 <__sprint_r>
    1aa8:	103c171e 	bne	r2,zero,b08 <_gp+0xfffe679c>
    1aac:	d8c02017 	ldw	r3,128(sp)
    1ab0:	df002787 	ldb	fp,158(sp)
    1ab4:	da000404 	addi	r8,sp,16
    1ab8:	003d3406 	br	f8c <_gp+0xfffe6c20>
    1abc:	9080040c 	andi	r2,r18,16
    1ac0:	10016126 	beq	r2,zero,2048 <___vfprintf_internal_r+0x1950>
    1ac4:	d9402e17 	ldw	r5,184(sp)
    1ac8:	2cc00017 	ldw	r19,0(r5)
    1acc:	29400104 	addi	r5,r5,4
    1ad0:	d9402e15 	stw	r5,184(sp)
    1ad4:	982dd7fa 	srai	r22,r19,31
    1ad8:	b005883a 	mov	r2,r22
    1adc:	003c5a06 	br	c48 <_gp+0xfffe68dc>
    1ae0:	9080040c 	andi	r2,r18,16
    1ae4:	10003526 	beq	r2,zero,1bbc <___vfprintf_internal_r+0x14c4>
    1ae8:	d8c02e17 	ldw	r3,184(sp)
    1aec:	d9002a17 	ldw	r4,168(sp)
    1af0:	d8002785 	stb	zero,158(sp)
    1af4:	18800104 	addi	r2,r3,4
    1af8:	1cc00017 	ldw	r19,0(r3)
    1afc:	002d883a 	mov	r22,zero
    1b00:	20003716 	blt	r4,zero,1be0 <___vfprintf_internal_r+0x14e8>
    1b04:	00ffdfc4 	movi	r3,-129
    1b08:	d8802e15 	stw	r2,184(sp)
    1b0c:	90e4703a 	and	r18,r18,r3
    1b10:	0039883a 	mov	fp,zero
    1b14:	983dd426 	beq	r19,zero,1268 <_gp+0xfffe6efc>
    1b18:	00800244 	movi	r2,9
    1b1c:	14fc5336 	bltu	r2,r19,c6c <_gp+0xfffe6900>
    1b20:	d8c02817 	ldw	r3,160(sp)
    1b24:	dc001dc4 	addi	r16,sp,119
    1b28:	9cc00c04 	addi	r19,r19,48
    1b2c:	1c07c83a 	sub	r3,r3,r16
    1b30:	dcc01dc5 	stb	r19,119(sp)
    1b34:	d8c02b15 	stw	r3,172(sp)
    1b38:	003cc606 	br	e54 <_gp+0xfffe6ae8>
    1b3c:	d8803317 	ldw	r2,204(sp)
    1b40:	143fffc4 	addi	r16,r2,-1
    1b44:	043f4d0e 	bge	zero,r16,187c <_gp+0xfffe7510>
    1b48:	07000404 	movi	fp,16
    1b4c:	e400810e 	bge	fp,r16,1d54 <___vfprintf_internal_r+0x165c>
    1b50:	01400074 	movhi	r5,1
    1b54:	29418384 	addi	r5,r5,1550
    1b58:	d9402c15 	stw	r5,176(sp)
    1b5c:	01c001c4 	movi	r7,7
    1b60:	dcc02d17 	ldw	r19,180(sp)
    1b64:	00000306 	br	1b74 <___vfprintf_internal_r+0x147c>
    1b68:	b5800204 	addi	r22,r22,8
    1b6c:	843ffc04 	addi	r16,r16,-16
    1b70:	e4007b0e 	bge	fp,r16,1d60 <___vfprintf_internal_r+0x1668>
    1b74:	18c00404 	addi	r3,r3,16
    1b78:	8c400044 	addi	r17,r17,1
    1b7c:	b5000015 	stw	r20,0(r22)
    1b80:	b7000115 	stw	fp,4(r22)
    1b84:	d8c02015 	stw	r3,128(sp)
    1b88:	dc401f15 	stw	r17,124(sp)
    1b8c:	3c7ff60e 	bge	r7,r17,1b68 <_gp+0xfffe77fc>
    1b90:	d9801e04 	addi	r6,sp,120
    1b94:	b80b883a 	mov	r5,r23
    1b98:	9809883a 	mov	r4,r19
    1b9c:	d9c03c15 	stw	r7,240(sp)
    1ba0:	00073e80 	call	73e8 <__sprint_r>
    1ba4:	d9c03c17 	ldw	r7,240(sp)
    1ba8:	103bd71e 	bne	r2,zero,b08 <_gp+0xfffe679c>
    1bac:	d8c02017 	ldw	r3,128(sp)
    1bb0:	dc401f17 	ldw	r17,124(sp)
    1bb4:	dd800404 	addi	r22,sp,16
    1bb8:	003fec06 	br	1b6c <_gp+0xfffe7800>
    1bbc:	9080100c 	andi	r2,r18,64
    1bc0:	d8002785 	stb	zero,158(sp)
    1bc4:	10010e26 	beq	r2,zero,2000 <___vfprintf_internal_r+0x1908>
    1bc8:	d9402e17 	ldw	r5,184(sp)
    1bcc:	d8c02a17 	ldw	r3,168(sp)
    1bd0:	002d883a 	mov	r22,zero
    1bd4:	28800104 	addi	r2,r5,4
    1bd8:	2cc0000b 	ldhu	r19,0(r5)
    1bdc:	183fc90e 	bge	r3,zero,1b04 <_gp+0xfffe7798>
    1be0:	d8802e15 	stw	r2,184(sp)
    1be4:	0039883a 	mov	fp,zero
    1be8:	9d84b03a 	or	r2,r19,r22
    1bec:	103c1e1e 	bne	r2,zero,c68 <_gp+0xfffe68fc>
    1bf0:	00800044 	movi	r2,1
    1bf4:	003e6c06 	br	15a8 <_gp+0xfffe723c>
    1bf8:	d9002d17 	ldw	r4,180(sp)
    1bfc:	d9801e04 	addi	r6,sp,120
    1c00:	b80b883a 	mov	r5,r23
    1c04:	00073e80 	call	73e8 <__sprint_r>
    1c08:	103bbf1e 	bne	r2,zero,b08 <_gp+0xfffe679c>
    1c0c:	d8c02017 	ldw	r3,128(sp)
    1c10:	da000404 	addi	r8,sp,16
    1c14:	d9003217 	ldw	r4,200(sp)
    1c18:	d8802617 	ldw	r2,152(sp)
    1c1c:	d9403317 	ldw	r5,204(sp)
    1c20:	8123883a 	add	r17,r16,r4
    1c24:	11400216 	blt	r2,r5,1c30 <___vfprintf_internal_r+0x1538>
    1c28:	9100004c 	andi	r4,r18,1
    1c2c:	20000d26 	beq	r4,zero,1c64 <___vfprintf_internal_r+0x156c>
    1c30:	d9003717 	ldw	r4,220(sp)
    1c34:	d9403417 	ldw	r5,208(sp)
    1c38:	1907883a 	add	r3,r3,r4
    1c3c:	d9001f17 	ldw	r4,124(sp)
    1c40:	41400015 	stw	r5,0(r8)
    1c44:	d9403717 	ldw	r5,220(sp)
    1c48:	21000044 	addi	r4,r4,1
    1c4c:	d8c02015 	stw	r3,128(sp)
    1c50:	41400115 	stw	r5,4(r8)
    1c54:	d9001f15 	stw	r4,124(sp)
    1c58:	014001c4 	movi	r5,7
    1c5c:	2901e816 	blt	r5,r4,2400 <___vfprintf_internal_r+0x1d08>
    1c60:	42000204 	addi	r8,r8,8
    1c64:	d9003317 	ldw	r4,204(sp)
    1c68:	8121883a 	add	r16,r16,r4
    1c6c:	2085c83a 	sub	r2,r4,r2
    1c70:	8461c83a 	sub	r16,r16,r17
    1c74:	1400010e 	bge	r2,r16,1c7c <___vfprintf_internal_r+0x1584>
    1c78:	1021883a 	mov	r16,r2
    1c7c:	04000a0e 	bge	zero,r16,1ca8 <___vfprintf_internal_r+0x15b0>
    1c80:	d9001f17 	ldw	r4,124(sp)
    1c84:	1c07883a 	add	r3,r3,r16
    1c88:	44400015 	stw	r17,0(r8)
    1c8c:	21000044 	addi	r4,r4,1
    1c90:	44000115 	stw	r16,4(r8)
    1c94:	d8c02015 	stw	r3,128(sp)
    1c98:	d9001f15 	stw	r4,124(sp)
    1c9c:	014001c4 	movi	r5,7
    1ca0:	2901fb16 	blt	r5,r4,2490 <___vfprintf_internal_r+0x1d98>
    1ca4:	42000204 	addi	r8,r8,8
    1ca8:	8001f716 	blt	r16,zero,2488 <___vfprintf_internal_r+0x1d90>
    1cac:	1421c83a 	sub	r16,r2,r16
    1cb0:	043d160e 	bge	zero,r16,110c <_gp+0xfffe6da0>
    1cb4:	04400404 	movi	r17,16
    1cb8:	d8801f17 	ldw	r2,124(sp)
    1cbc:	8c3efb0e 	bge	r17,r16,18ac <_gp+0xfffe7540>
    1cc0:	01400074 	movhi	r5,1
    1cc4:	29418384 	addi	r5,r5,1550
    1cc8:	d9402c15 	stw	r5,176(sp)
    1ccc:	058001c4 	movi	r22,7
    1cd0:	dcc02d17 	ldw	r19,180(sp)
    1cd4:	00000306 	br	1ce4 <___vfprintf_internal_r+0x15ec>
    1cd8:	42000204 	addi	r8,r8,8
    1cdc:	843ffc04 	addi	r16,r16,-16
    1ce0:	8c3ef50e 	bge	r17,r16,18b8 <_gp+0xfffe754c>
    1ce4:	18c00404 	addi	r3,r3,16
    1ce8:	10800044 	addi	r2,r2,1
    1cec:	45000015 	stw	r20,0(r8)
    1cf0:	44400115 	stw	r17,4(r8)
    1cf4:	d8c02015 	stw	r3,128(sp)
    1cf8:	d8801f15 	stw	r2,124(sp)
    1cfc:	b0bff60e 	bge	r22,r2,1cd8 <_gp+0xfffe796c>
    1d00:	d9801e04 	addi	r6,sp,120
    1d04:	b80b883a 	mov	r5,r23
    1d08:	9809883a 	mov	r4,r19
    1d0c:	00073e80 	call	73e8 <__sprint_r>
    1d10:	103b7d1e 	bne	r2,zero,b08 <_gp+0xfffe679c>
    1d14:	d8c02017 	ldw	r3,128(sp)
    1d18:	d8801f17 	ldw	r2,124(sp)
    1d1c:	da000404 	addi	r8,sp,16
    1d20:	003fee06 	br	1cdc <_gp+0xfffe7970>
    1d24:	9088703a 	and	r4,r18,r2
    1d28:	203eab1e 	bne	r4,zero,17d8 <_gp+0xfffe746c>
    1d2c:	dc401f17 	ldw	r17,124(sp)
    1d30:	40800115 	stw	r2,4(r8)
    1d34:	44000015 	stw	r16,0(r8)
    1d38:	8c400044 	addi	r17,r17,1
    1d3c:	d8c02015 	stw	r3,128(sp)
    1d40:	dc401f15 	stw	r17,124(sp)
    1d44:	008001c4 	movi	r2,7
    1d48:	14400e16 	blt	r2,r17,1d84 <___vfprintf_internal_r+0x168c>
    1d4c:	45800204 	addi	r22,r8,8
    1d50:	003eca06 	br	187c <_gp+0xfffe7510>
    1d54:	01000074 	movhi	r4,1
    1d58:	21018384 	addi	r4,r4,1550
    1d5c:	d9002c15 	stw	r4,176(sp)
    1d60:	d8802c17 	ldw	r2,176(sp)
    1d64:	1c07883a 	add	r3,r3,r16
    1d68:	8c400044 	addi	r17,r17,1
    1d6c:	b0800015 	stw	r2,0(r22)
    1d70:	b4000115 	stw	r16,4(r22)
    1d74:	d8c02015 	stw	r3,128(sp)
    1d78:	dc401f15 	stw	r17,124(sp)
    1d7c:	008001c4 	movi	r2,7
    1d80:	147ebd0e 	bge	r2,r17,1878 <_gp+0xfffe750c>
    1d84:	d9002d17 	ldw	r4,180(sp)
    1d88:	d9801e04 	addi	r6,sp,120
    1d8c:	b80b883a 	mov	r5,r23
    1d90:	00073e80 	call	73e8 <__sprint_r>
    1d94:	103b5c1e 	bne	r2,zero,b08 <_gp+0xfffe679c>
    1d98:	d8c02017 	ldw	r3,128(sp)
    1d9c:	dc401f17 	ldw	r17,124(sp)
    1da0:	dd800404 	addi	r22,sp,16
    1da4:	003eb506 	br	187c <_gp+0xfffe7510>
    1da8:	d9002d17 	ldw	r4,180(sp)
    1dac:	d9801e04 	addi	r6,sp,120
    1db0:	b80b883a 	mov	r5,r23
    1db4:	00073e80 	call	73e8 <__sprint_r>
    1db8:	103b531e 	bne	r2,zero,b08 <_gp+0xfffe679c>
    1dbc:	d8c02017 	ldw	r3,128(sp)
    1dc0:	dc401f17 	ldw	r17,124(sp)
    1dc4:	da000404 	addi	r8,sp,16
    1dc8:	003e8d06 	br	1800 <_gp+0xfffe7494>
    1dcc:	d9002d17 	ldw	r4,180(sp)
    1dd0:	d9801e04 	addi	r6,sp,120
    1dd4:	b80b883a 	mov	r5,r23
    1dd8:	00073e80 	call	73e8 <__sprint_r>
    1ddc:	103b4a1e 	bne	r2,zero,b08 <_gp+0xfffe679c>
    1de0:	d8c02017 	ldw	r3,128(sp)
    1de4:	dc401f17 	ldw	r17,124(sp)
    1de8:	dd800404 	addi	r22,sp,16
    1dec:	003e8f06 	br	182c <_gp+0xfffe74c0>
    1df0:	0027883a 	mov	r19,zero
    1df4:	003f4a06 	br	1b20 <_gp+0xfffe77b4>
    1df8:	d9002d17 	ldw	r4,180(sp)
    1dfc:	d9801e04 	addi	r6,sp,120
    1e00:	b80b883a 	mov	r5,r23
    1e04:	00073e80 	call	73e8 <__sprint_r>
    1e08:	103b3f1e 	bne	r2,zero,b08 <_gp+0xfffe679c>
    1e0c:	d8c02017 	ldw	r3,128(sp)
    1e10:	da000404 	addi	r8,sp,16
    1e14:	003c7b06 	br	1004 <_gp+0xfffe6c98>
    1e18:	d9402a17 	ldw	r5,168(sp)
    1e1c:	04e7c83a 	sub	r19,zero,r19
    1e20:	07000b44 	movi	fp,45
    1e24:	9804c03a 	cmpne	r2,r19,zero
    1e28:	05adc83a 	sub	r22,zero,r22
    1e2c:	df002785 	stb	fp,158(sp)
    1e30:	b0adc83a 	sub	r22,r22,r2
    1e34:	28017b16 	blt	r5,zero,2424 <___vfprintf_internal_r+0x1d2c>
    1e38:	00bfdfc4 	movi	r2,-129
    1e3c:	90a4703a 	and	r18,r18,r2
    1e40:	003b8906 	br	c68 <_gp+0xfffe68fc>
    1e44:	d9003617 	ldw	r4,216(sp)
    1e48:	d9403817 	ldw	r5,224(sp)
    1e4c:	da003d15 	stw	r8,244(sp)
    1e50:	0006f740 	call	6f74 <__fpclassifyd>
    1e54:	da003d17 	ldw	r8,244(sp)
    1e58:	1000f026 	beq	r2,zero,221c <___vfprintf_internal_r+0x1b24>
    1e5c:	d9002a17 	ldw	r4,168(sp)
    1e60:	05bff7c4 	movi	r22,-33
    1e64:	00bfffc4 	movi	r2,-1
    1e68:	8dac703a 	and	r22,r17,r22
    1e6c:	20820026 	beq	r4,r2,2670 <___vfprintf_internal_r+0x1f78>
    1e70:	008011c4 	movi	r2,71
    1e74:	b081f726 	beq	r22,r2,2654 <___vfprintf_internal_r+0x1f5c>
    1e78:	d9003817 	ldw	r4,224(sp)
    1e7c:	90c04014 	ori	r3,r18,256
    1e80:	d8c02c15 	stw	r3,176(sp)
    1e84:	20021516 	blt	r4,zero,26dc <___vfprintf_internal_r+0x1fe4>
    1e88:	dcc03817 	ldw	r19,224(sp)
    1e8c:	d8002905 	stb	zero,164(sp)
    1e90:	00801984 	movi	r2,102
    1e94:	8881f926 	beq	r17,r2,267c <___vfprintf_internal_r+0x1f84>
    1e98:	00801184 	movi	r2,70
    1e9c:	88821c26 	beq	r17,r2,2710 <___vfprintf_internal_r+0x2018>
    1ea0:	00801144 	movi	r2,69
    1ea4:	b081ef26 	beq	r22,r2,2664 <___vfprintf_internal_r+0x1f6c>
    1ea8:	d8c02a17 	ldw	r3,168(sp)
    1eac:	d8802104 	addi	r2,sp,132
    1eb0:	d8800315 	stw	r2,12(sp)
    1eb4:	d9403617 	ldw	r5,216(sp)
    1eb8:	d8802504 	addi	r2,sp,148
    1ebc:	d9002d17 	ldw	r4,180(sp)
    1ec0:	d8800215 	stw	r2,8(sp)
    1ec4:	d8802604 	addi	r2,sp,152
    1ec8:	d8c00015 	stw	r3,0(sp)
    1ecc:	d8800115 	stw	r2,4(sp)
    1ed0:	01c00084 	movi	r7,2
    1ed4:	980d883a 	mov	r6,r19
    1ed8:	d8c03c15 	stw	r3,240(sp)
    1edc:	da003d15 	stw	r8,244(sp)
    1ee0:	0002e280 	call	2e28 <_dtoa_r>
    1ee4:	1021883a 	mov	r16,r2
    1ee8:	008019c4 	movi	r2,103
    1eec:	d8c03c17 	ldw	r3,240(sp)
    1ef0:	da003d17 	ldw	r8,244(sp)
    1ef4:	88817126 	beq	r17,r2,24bc <___vfprintf_internal_r+0x1dc4>
    1ef8:	008011c4 	movi	r2,71
    1efc:	88829126 	beq	r17,r2,2944 <___vfprintf_internal_r+0x224c>
    1f00:	80f9883a 	add	fp,r16,r3
    1f04:	d9003617 	ldw	r4,216(sp)
    1f08:	000d883a 	mov	r6,zero
    1f0c:	000f883a 	mov	r7,zero
    1f10:	980b883a 	mov	r5,r19
    1f14:	da003d15 	stw	r8,244(sp)
    1f18:	000bea80 	call	bea8 <__eqdf2>
    1f1c:	da003d17 	ldw	r8,244(sp)
    1f20:	10018d26 	beq	r2,zero,2558 <___vfprintf_internal_r+0x1e60>
    1f24:	d8802117 	ldw	r2,132(sp)
    1f28:	1700062e 	bgeu	r2,fp,1f44 <___vfprintf_internal_r+0x184c>
    1f2c:	01000c04 	movi	r4,48
    1f30:	10c00044 	addi	r3,r2,1
    1f34:	d8c02115 	stw	r3,132(sp)
    1f38:	11000005 	stb	r4,0(r2)
    1f3c:	d8802117 	ldw	r2,132(sp)
    1f40:	173ffb36 	bltu	r2,fp,1f30 <_gp+0xfffe7bc4>
    1f44:	1405c83a 	sub	r2,r2,r16
    1f48:	d8803315 	stw	r2,204(sp)
    1f4c:	008011c4 	movi	r2,71
    1f50:	b0817626 	beq	r22,r2,252c <___vfprintf_internal_r+0x1e34>
    1f54:	00801944 	movi	r2,101
    1f58:	1442800e 	bge	r2,r17,295c <___vfprintf_internal_r+0x2264>
    1f5c:	d8c02617 	ldw	r3,152(sp)
    1f60:	00801984 	movi	r2,102
    1f64:	d8c03215 	stw	r3,200(sp)
    1f68:	8881fe26 	beq	r17,r2,2764 <___vfprintf_internal_r+0x206c>
    1f6c:	d8c03217 	ldw	r3,200(sp)
    1f70:	d9003317 	ldw	r4,204(sp)
    1f74:	1901dd16 	blt	r3,r4,26ec <___vfprintf_internal_r+0x1ff4>
    1f78:	9480004c 	andi	r18,r18,1
    1f7c:	90022b1e 	bne	r18,zero,282c <___vfprintf_internal_r+0x2134>
    1f80:	1805883a 	mov	r2,r3
    1f84:	18028316 	blt	r3,zero,2994 <___vfprintf_internal_r+0x229c>
    1f88:	d8c03217 	ldw	r3,200(sp)
    1f8c:	044019c4 	movi	r17,103
    1f90:	d8c02b15 	stw	r3,172(sp)
    1f94:	df002907 	ldb	fp,164(sp)
    1f98:	e001531e 	bne	fp,zero,24e8 <___vfprintf_internal_r+0x1df0>
    1f9c:	df002783 	ldbu	fp,158(sp)
    1fa0:	d8802915 	stw	r2,164(sp)
    1fa4:	dc802c17 	ldw	r18,176(sp)
    1fa8:	d8002a15 	stw	zero,168(sp)
    1fac:	003baf06 	br	e6c <_gp+0xfffe6b00>
    1fb0:	d8c02e17 	ldw	r3,184(sp)
    1fb4:	d9002e17 	ldw	r4,184(sp)
    1fb8:	d9402e17 	ldw	r5,184(sp)
    1fbc:	18c00017 	ldw	r3,0(r3)
    1fc0:	21000117 	ldw	r4,4(r4)
    1fc4:	29400204 	addi	r5,r5,8
    1fc8:	d8c03615 	stw	r3,216(sp)
    1fcc:	d9003815 	stw	r4,224(sp)
    1fd0:	d9402e15 	stw	r5,184(sp)
    1fd4:	003b5006 	br	d18 <_gp+0xfffe69ac>
    1fd8:	ac400007 	ldb	r17,0(r21)
    1fdc:	003a2806 	br	880 <_gp+0xfffe6514>
    1fe0:	9080100c 	andi	r2,r18,64
    1fe4:	1000a826 	beq	r2,zero,2288 <___vfprintf_internal_r+0x1b90>
    1fe8:	d8c02e17 	ldw	r3,184(sp)
    1fec:	002d883a 	mov	r22,zero
    1ff0:	1cc0000b 	ldhu	r19,0(r3)
    1ff4:	18c00104 	addi	r3,r3,4
    1ff8:	d8c02e15 	stw	r3,184(sp)
    1ffc:	003caf06 	br	12bc <_gp+0xfffe6f50>
    2000:	d9002e17 	ldw	r4,184(sp)
    2004:	d9402a17 	ldw	r5,168(sp)
    2008:	002d883a 	mov	r22,zero
    200c:	20800104 	addi	r2,r4,4
    2010:	24c00017 	ldw	r19,0(r4)
    2014:	283ebb0e 	bge	r5,zero,1b04 <_gp+0xfffe7798>
    2018:	003ef106 	br	1be0 <_gp+0xfffe7874>
    201c:	9080040c 	andi	r2,r18,16
    2020:	1000921e 	bne	r2,zero,226c <___vfprintf_internal_r+0x1b74>
    2024:	9480100c 	andi	r18,r18,64
    2028:	90013926 	beq	r18,zero,2510 <___vfprintf_internal_r+0x1e18>
    202c:	d9402e17 	ldw	r5,184(sp)
    2030:	d8c02f17 	ldw	r3,188(sp)
    2034:	28800017 	ldw	r2,0(r5)
    2038:	29400104 	addi	r5,r5,4
    203c:	d9402e15 	stw	r5,184(sp)
    2040:	10c0000d 	sth	r3,0(r2)
    2044:	0039e406 	br	7d8 <_gp+0xfffe646c>
    2048:	9080100c 	andi	r2,r18,64
    204c:	10008026 	beq	r2,zero,2250 <___vfprintf_internal_r+0x1b58>
    2050:	d8802e17 	ldw	r2,184(sp)
    2054:	14c0000f 	ldh	r19,0(r2)
    2058:	10800104 	addi	r2,r2,4
    205c:	d8802e15 	stw	r2,184(sp)
    2060:	982dd7fa 	srai	r22,r19,31
    2064:	b005883a 	mov	r2,r22
    2068:	003af706 	br	c48 <_gp+0xfffe68dc>
    206c:	9080100c 	andi	r2,r18,64
    2070:	d8002785 	stb	zero,158(sp)
    2074:	10008a1e 	bne	r2,zero,22a0 <___vfprintf_internal_r+0x1ba8>
    2078:	d9002e17 	ldw	r4,184(sp)
    207c:	d9402a17 	ldw	r5,168(sp)
    2080:	002d883a 	mov	r22,zero
    2084:	20800104 	addi	r2,r4,4
    2088:	24c00017 	ldw	r19,0(r4)
    208c:	283e4b0e 	bge	r5,zero,19bc <_gp+0xfffe7650>
    2090:	9d86b03a 	or	r3,r19,r22
    2094:	d8802e15 	stw	r2,184(sp)
    2098:	183e4c1e 	bne	r3,zero,19cc <_gp+0xfffe7660>
    209c:	0039883a 	mov	fp,zero
    20a0:	0005883a 	mov	r2,zero
    20a4:	003d4006 	br	15a8 <_gp+0xfffe723c>
    20a8:	01400074 	movhi	r5,1
    20ac:	29418384 	addi	r5,r5,1550
    20b0:	d9402c15 	stw	r5,176(sp)
    20b4:	d9402c17 	ldw	r5,176(sp)
    20b8:	1c47883a 	add	r3,r3,r17
    20bc:	10800044 	addi	r2,r2,1
    20c0:	41400015 	stw	r5,0(r8)
    20c4:	44400115 	stw	r17,4(r8)
    20c8:	d8c02015 	stw	r3,128(sp)
    20cc:	d8801f15 	stw	r2,124(sp)
    20d0:	010001c4 	movi	r4,7
    20d4:	20bec816 	blt	r4,r2,1bf8 <_gp+0xfffe788c>
    20d8:	42000204 	addi	r8,r8,8
    20dc:	003ecd06 	br	1c14 <_gp+0xfffe78a8>
    20e0:	d9002a17 	ldw	r4,168(sp)
    20e4:	d8002785 	stb	zero,158(sp)
    20e8:	203d2d16 	blt	r4,zero,15a0 <_gp+0xfffe7234>
    20ec:	00bfdfc4 	movi	r2,-129
    20f0:	90a4703a 	and	r18,r18,r2
    20f4:	003a6106 	br	a7c <_gp+0xfffe6710>
    20f8:	01000074 	movhi	r4,1
    20fc:	21018384 	addi	r4,r4,1550
    2100:	d9002c15 	stw	r4,176(sp)
    2104:	003bea06 	br	10b0 <_gp+0xfffe6d44>
    2108:	d9002d17 	ldw	r4,180(sp)
    210c:	d9801e04 	addi	r6,sp,120
    2110:	b80b883a 	mov	r5,r23
    2114:	00073e80 	call	73e8 <__sprint_r>
    2118:	103a7b1e 	bne	r2,zero,b08 <_gp+0xfffe679c>
    211c:	d8c02017 	ldw	r3,128(sp)
    2120:	da000404 	addi	r8,sp,16
    2124:	003d4106 	br	162c <_gp+0xfffe72c0>
    2128:	d8801f17 	ldw	r2,124(sp)
    212c:	01400074 	movhi	r5,1
    2130:	01000044 	movi	r4,1
    2134:	18c00044 	addi	r3,r3,1
    2138:	10800044 	addi	r2,r2,1
    213c:	29418304 	addi	r5,r5,1548
    2140:	41000115 	stw	r4,4(r8)
    2144:	41400015 	stw	r5,0(r8)
    2148:	d8c02015 	stw	r3,128(sp)
    214c:	d8801f15 	stw	r2,124(sp)
    2150:	010001c4 	movi	r4,7
    2154:	20805c16 	blt	r4,r2,22c8 <___vfprintf_internal_r+0x1bd0>
    2158:	42000204 	addi	r8,r8,8
    215c:	8800041e 	bne	r17,zero,2170 <___vfprintf_internal_r+0x1a78>
    2160:	d8803317 	ldw	r2,204(sp)
    2164:	1000021e 	bne	r2,zero,2170 <___vfprintf_internal_r+0x1a78>
    2168:	9080004c 	andi	r2,r18,1
    216c:	103be726 	beq	r2,zero,110c <_gp+0xfffe6da0>
    2170:	d9003717 	ldw	r4,220(sp)
    2174:	d8801f17 	ldw	r2,124(sp)
    2178:	d9403417 	ldw	r5,208(sp)
    217c:	20c7883a 	add	r3,r4,r3
    2180:	10800044 	addi	r2,r2,1
    2184:	41000115 	stw	r4,4(r8)
    2188:	41400015 	stw	r5,0(r8)
    218c:	d8c02015 	stw	r3,128(sp)
    2190:	d8801f15 	stw	r2,124(sp)
    2194:	010001c4 	movi	r4,7
    2198:	20812116 	blt	r4,r2,2620 <___vfprintf_internal_r+0x1f28>
    219c:	42000204 	addi	r8,r8,8
    21a0:	0463c83a 	sub	r17,zero,r17
    21a4:	0440730e 	bge	zero,r17,2374 <___vfprintf_internal_r+0x1c7c>
    21a8:	05800404 	movi	r22,16
    21ac:	b440860e 	bge	r22,r17,23c8 <___vfprintf_internal_r+0x1cd0>
    21b0:	01400074 	movhi	r5,1
    21b4:	29418384 	addi	r5,r5,1550
    21b8:	d9402c15 	stw	r5,176(sp)
    21bc:	070001c4 	movi	fp,7
    21c0:	dcc02d17 	ldw	r19,180(sp)
    21c4:	00000306 	br	21d4 <___vfprintf_internal_r+0x1adc>
    21c8:	42000204 	addi	r8,r8,8
    21cc:	8c7ffc04 	addi	r17,r17,-16
    21d0:	b440800e 	bge	r22,r17,23d4 <___vfprintf_internal_r+0x1cdc>
    21d4:	18c00404 	addi	r3,r3,16
    21d8:	10800044 	addi	r2,r2,1
    21dc:	45000015 	stw	r20,0(r8)
    21e0:	45800115 	stw	r22,4(r8)
    21e4:	d8c02015 	stw	r3,128(sp)
    21e8:	d8801f15 	stw	r2,124(sp)
    21ec:	e0bff60e 	bge	fp,r2,21c8 <_gp+0xfffe7e5c>
    21f0:	d9801e04 	addi	r6,sp,120
    21f4:	b80b883a 	mov	r5,r23
    21f8:	9809883a 	mov	r4,r19
    21fc:	00073e80 	call	73e8 <__sprint_r>
    2200:	103a411e 	bne	r2,zero,b08 <_gp+0xfffe679c>
    2204:	d8c02017 	ldw	r3,128(sp)
    2208:	d8801f17 	ldw	r2,124(sp)
    220c:	da000404 	addi	r8,sp,16
    2210:	003fee06 	br	21cc <_gp+0xfffe7e60>
    2214:	00bfffc4 	movi	r2,-1
    2218:	003a3f06 	br	b18 <_gp+0xfffe67ac>
    221c:	008011c4 	movi	r2,71
    2220:	1440b816 	blt	r2,r17,2504 <___vfprintf_internal_r+0x1e0c>
    2224:	04000074 	movhi	r16,1
    2228:	84017504 	addi	r16,r16,1492
    222c:	00c000c4 	movi	r3,3
    2230:	00bfdfc4 	movi	r2,-129
    2234:	d8c02915 	stw	r3,164(sp)
    2238:	90a4703a 	and	r18,r18,r2
    223c:	df002783 	ldbu	fp,158(sp)
    2240:	d8c02b15 	stw	r3,172(sp)
    2244:	d8002a15 	stw	zero,168(sp)
    2248:	d8003215 	stw	zero,200(sp)
    224c:	003b0706 	br	e6c <_gp+0xfffe6b00>
    2250:	d8c02e17 	ldw	r3,184(sp)
    2254:	1cc00017 	ldw	r19,0(r3)
    2258:	18c00104 	addi	r3,r3,4
    225c:	d8c02e15 	stw	r3,184(sp)
    2260:	982dd7fa 	srai	r22,r19,31
    2264:	b005883a 	mov	r2,r22
    2268:	003a7706 	br	c48 <_gp+0xfffe68dc>
    226c:	d8c02e17 	ldw	r3,184(sp)
    2270:	d9002f17 	ldw	r4,188(sp)
    2274:	18800017 	ldw	r2,0(r3)
    2278:	18c00104 	addi	r3,r3,4
    227c:	d8c02e15 	stw	r3,184(sp)
    2280:	11000015 	stw	r4,0(r2)
    2284:	00395406 	br	7d8 <_gp+0xfffe646c>
    2288:	d9002e17 	ldw	r4,184(sp)
    228c:	002d883a 	mov	r22,zero
    2290:	24c00017 	ldw	r19,0(r4)
    2294:	21000104 	addi	r4,r4,4
    2298:	d9002e15 	stw	r4,184(sp)
    229c:	003c0706 	br	12bc <_gp+0xfffe6f50>
    22a0:	d9402e17 	ldw	r5,184(sp)
    22a4:	d8c02a17 	ldw	r3,168(sp)
    22a8:	002d883a 	mov	r22,zero
    22ac:	28800104 	addi	r2,r5,4
    22b0:	2cc0000b 	ldhu	r19,0(r5)
    22b4:	183dc10e 	bge	r3,zero,19bc <_gp+0xfffe7650>
    22b8:	003f7506 	br	2090 <_gp+0xfffe7d24>
    22bc:	04000074 	movhi	r16,1
    22c0:	84017304 	addi	r16,r16,1484
    22c4:	003aa706 	br	d64 <_gp+0xfffe69f8>
    22c8:	d9002d17 	ldw	r4,180(sp)
    22cc:	d9801e04 	addi	r6,sp,120
    22d0:	b80b883a 	mov	r5,r23
    22d4:	00073e80 	call	73e8 <__sprint_r>
    22d8:	103a0b1e 	bne	r2,zero,b08 <_gp+0xfffe679c>
    22dc:	dc402617 	ldw	r17,152(sp)
    22e0:	d8c02017 	ldw	r3,128(sp)
    22e4:	da000404 	addi	r8,sp,16
    22e8:	003f9c06 	br	215c <_gp+0xfffe7df0>
    22ec:	ac400043 	ldbu	r17,1(r21)
    22f0:	84000814 	ori	r16,r16,32
    22f4:	ad400044 	addi	r21,r21,1
    22f8:	8c403fcc 	andi	r17,r17,255
    22fc:	8c40201c 	xori	r17,r17,128
    2300:	8c7fe004 	addi	r17,r17,-128
    2304:	00395e06 	br	880 <_gp+0xfffe6514>
    2308:	d8c02e15 	stw	r3,184(sp)
    230c:	0039883a 	mov	fp,zero
    2310:	003e3506 	br	1be8 <_gp+0xfffe787c>
    2314:	d9002d17 	ldw	r4,180(sp)
    2318:	d9801e04 	addi	r6,sp,120
    231c:	b80b883a 	mov	r5,r23
    2320:	00073e80 	call	73e8 <__sprint_r>
    2324:	1039f81e 	bne	r2,zero,b08 <_gp+0xfffe679c>
    2328:	d8c02017 	ldw	r3,128(sp)
    232c:	da000404 	addi	r8,sp,16
    2330:	003cd006 	br	1674 <_gp+0xfffe7308>
    2334:	8009883a 	mov	r4,r16
    2338:	df003d15 	stw	fp,244(sp)
    233c:	00072540 	call	7254 <strlen>
    2340:	d8802b15 	stw	r2,172(sp)
    2344:	da003d17 	ldw	r8,244(sp)
    2348:	103c200e 	bge	r2,zero,13cc <_gp+0xfffe7060>
    234c:	0005883a 	mov	r2,zero
    2350:	003c1e06 	br	13cc <_gp+0xfffe7060>
    2354:	d9002d17 	ldw	r4,180(sp)
    2358:	d9801e04 	addi	r6,sp,120
    235c:	b80b883a 	mov	r5,r23
    2360:	00073e80 	call	73e8 <__sprint_r>
    2364:	1039e81e 	bne	r2,zero,b08 <_gp+0xfffe679c>
    2368:	d8c02017 	ldw	r3,128(sp)
    236c:	d8801f17 	ldw	r2,124(sp)
    2370:	da000404 	addi	r8,sp,16
    2374:	d9403317 	ldw	r5,204(sp)
    2378:	10800044 	addi	r2,r2,1
    237c:	44000015 	stw	r16,0(r8)
    2380:	28c7883a 	add	r3,r5,r3
    2384:	003b5b06 	br	10f4 <_gp+0xfffe6d88>
    2388:	01000074 	movhi	r4,1
    238c:	21018784 	addi	r4,r4,1566
    2390:	d9003515 	stw	r4,212(sp)
    2394:	003af206 	br	f60 <_gp+0xfffe6bf4>
    2398:	013fffc4 	movi	r4,-1
    239c:	003a0806 	br	bc0 <_gp+0xfffe6854>
    23a0:	0023883a 	mov	r17,zero
    23a4:	003d9d06 	br	1a1c <_gp+0xfffe76b0>
    23a8:	d9002d17 	ldw	r4,180(sp)
    23ac:	d9801e04 	addi	r6,sp,120
    23b0:	b80b883a 	mov	r5,r23
    23b4:	00073e80 	call	73e8 <__sprint_r>
    23b8:	1039d31e 	bne	r2,zero,b08 <_gp+0xfffe679c>
    23bc:	d8c02017 	ldw	r3,128(sp)
    23c0:	da000404 	addi	r8,sp,16
    23c4:	003d9406 	br	1a18 <_gp+0xfffe76ac>
    23c8:	01000074 	movhi	r4,1
    23cc:	21018384 	addi	r4,r4,1550
    23d0:	d9002c15 	stw	r4,176(sp)
    23d4:	d9002c17 	ldw	r4,176(sp)
    23d8:	1c47883a 	add	r3,r3,r17
    23dc:	10800044 	addi	r2,r2,1
    23e0:	41000015 	stw	r4,0(r8)
    23e4:	44400115 	stw	r17,4(r8)
    23e8:	d8c02015 	stw	r3,128(sp)
    23ec:	d8801f15 	stw	r2,124(sp)
    23f0:	010001c4 	movi	r4,7
    23f4:	20bfd716 	blt	r4,r2,2354 <_gp+0xfffe7fe8>
    23f8:	42000204 	addi	r8,r8,8
    23fc:	003fdd06 	br	2374 <_gp+0xfffe8008>
    2400:	d9002d17 	ldw	r4,180(sp)
    2404:	d9801e04 	addi	r6,sp,120
    2408:	b80b883a 	mov	r5,r23
    240c:	00073e80 	call	73e8 <__sprint_r>
    2410:	1039bd1e 	bne	r2,zero,b08 <_gp+0xfffe679c>
    2414:	d8802617 	ldw	r2,152(sp)
    2418:	d8c02017 	ldw	r3,128(sp)
    241c:	da000404 	addi	r8,sp,16
    2420:	003e1006 	br	1c64 <_gp+0xfffe78f8>
    2424:	00800044 	movi	r2,1
    2428:	10803fcc 	andi	r2,r2,255
    242c:	00c00044 	movi	r3,1
    2430:	10fa0d26 	beq	r2,r3,c68 <_gp+0xfffe68fc>
    2434:	00c00084 	movi	r3,2
    2438:	10fbaf26 	beq	r2,r3,12f8 <_gp+0xfffe6f8c>
    243c:	003a6d06 	br	df4 <_gp+0xfffe6a88>
    2440:	01000074 	movhi	r4,1
    2444:	21018784 	addi	r4,r4,1566
    2448:	d9003515 	stw	r4,212(sp)
    244c:	003b5406 	br	11a0 <_gp+0xfffe6e34>
    2450:	d8802a17 	ldw	r2,168(sp)
    2454:	00c00184 	movi	r3,6
    2458:	1880012e 	bgeu	r3,r2,2460 <___vfprintf_internal_r+0x1d68>
    245c:	1805883a 	mov	r2,r3
    2460:	d8802b15 	stw	r2,172(sp)
    2464:	1000ef16 	blt	r2,zero,2824 <___vfprintf_internal_r+0x212c>
    2468:	04000074 	movhi	r16,1
    246c:	d8802915 	stw	r2,164(sp)
    2470:	dcc02e15 	stw	r19,184(sp)
    2474:	d8002a15 	stw	zero,168(sp)
    2478:	d8003215 	stw	zero,200(sp)
    247c:	84018104 	addi	r16,r16,1540
    2480:	0039883a 	mov	fp,zero
    2484:	003a8006 	br	e88 <_gp+0xfffe6b1c>
    2488:	0021883a 	mov	r16,zero
    248c:	003e0706 	br	1cac <_gp+0xfffe7940>
    2490:	d9002d17 	ldw	r4,180(sp)
    2494:	d9801e04 	addi	r6,sp,120
    2498:	b80b883a 	mov	r5,r23
    249c:	00073e80 	call	73e8 <__sprint_r>
    24a0:	1039991e 	bne	r2,zero,b08 <_gp+0xfffe679c>
    24a4:	d8802617 	ldw	r2,152(sp)
    24a8:	d9403317 	ldw	r5,204(sp)
    24ac:	d8c02017 	ldw	r3,128(sp)
    24b0:	da000404 	addi	r8,sp,16
    24b4:	2885c83a 	sub	r2,r5,r2
    24b8:	003dfb06 	br	1ca8 <_gp+0xfffe793c>
    24bc:	9080004c 	andi	r2,r18,1
    24c0:	103e8f1e 	bne	r2,zero,1f00 <_gp+0xfffe7b94>
    24c4:	d8802117 	ldw	r2,132(sp)
    24c8:	003e9e06 	br	1f44 <_gp+0xfffe7bd8>
    24cc:	1025883a 	mov	r18,r2
    24d0:	0039883a 	mov	fp,zero
    24d4:	00800084 	movi	r2,2
    24d8:	003fd306 	br	2428 <_gp+0xfffe80bc>
    24dc:	07000b44 	movi	fp,45
    24e0:	df002785 	stb	fp,158(sp)
    24e4:	003a1b06 	br	d54 <_gp+0xfffe69e8>
    24e8:	00c00b44 	movi	r3,45
    24ec:	d8c02785 	stb	r3,158(sp)
    24f0:	d8802915 	stw	r2,164(sp)
    24f4:	dc802c17 	ldw	r18,176(sp)
    24f8:	d8002a15 	stw	zero,168(sp)
    24fc:	07000b44 	movi	fp,45
    2500:	003a5e06 	br	e7c <_gp+0xfffe6b10>
    2504:	04000074 	movhi	r16,1
    2508:	84017604 	addi	r16,r16,1496
    250c:	003f4706 	br	222c <_gp+0xfffe7ec0>
    2510:	d9002e17 	ldw	r4,184(sp)
    2514:	d9402f17 	ldw	r5,188(sp)
    2518:	20800017 	ldw	r2,0(r4)
    251c:	21000104 	addi	r4,r4,4
    2520:	d9002e15 	stw	r4,184(sp)
    2524:	11400015 	stw	r5,0(r2)
    2528:	0038ab06 	br	7d8 <_gp+0xfffe646c>
    252c:	dd802617 	ldw	r22,152(sp)
    2530:	00bfff44 	movi	r2,-3
    2534:	b0801c16 	blt	r22,r2,25a8 <___vfprintf_internal_r+0x1eb0>
    2538:	d9402a17 	ldw	r5,168(sp)
    253c:	2d801a16 	blt	r5,r22,25a8 <___vfprintf_internal_r+0x1eb0>
    2540:	dd803215 	stw	r22,200(sp)
    2544:	003e8906 	br	1f6c <_gp+0xfffe7c00>
    2548:	01000074 	movhi	r4,1
    254c:	21018384 	addi	r4,r4,1550
    2550:	d9002c15 	stw	r4,176(sp)
    2554:	003c9106 	br	179c <_gp+0xfffe7430>
    2558:	e005883a 	mov	r2,fp
    255c:	003e7906 	br	1f44 <_gp+0xfffe7bd8>
    2560:	d9002a17 	ldw	r4,168(sp)
    2564:	df002783 	ldbu	fp,158(sp)
    2568:	dcc02e15 	stw	r19,184(sp)
    256c:	d9002915 	stw	r4,164(sp)
    2570:	d9002b15 	stw	r4,172(sp)
    2574:	d8002a15 	stw	zero,168(sp)
    2578:	d8003215 	stw	zero,200(sp)
    257c:	003a3b06 	br	e6c <_gp+0xfffe6b00>
    2580:	9080004c 	andi	r2,r18,1
    2584:	0039883a 	mov	fp,zero
    2588:	10000426 	beq	r2,zero,259c <___vfprintf_internal_r+0x1ea4>
    258c:	00800c04 	movi	r2,48
    2590:	dc001dc4 	addi	r16,sp,119
    2594:	d8801dc5 	stb	r2,119(sp)
    2598:	003b6406 	br	132c <_gp+0xfffe6fc0>
    259c:	d8002b15 	stw	zero,172(sp)
    25a0:	dc001e04 	addi	r16,sp,120
    25a4:	003a2b06 	br	e54 <_gp+0xfffe6ae8>
    25a8:	8c7fff84 	addi	r17,r17,-2
    25ac:	b5bfffc4 	addi	r22,r22,-1
    25b0:	dd802615 	stw	r22,152(sp)
    25b4:	dc4022c5 	stb	r17,139(sp)
    25b8:	b000bf16 	blt	r22,zero,28b8 <___vfprintf_internal_r+0x21c0>
    25bc:	00800ac4 	movi	r2,43
    25c0:	d8802305 	stb	r2,140(sp)
    25c4:	00800244 	movi	r2,9
    25c8:	15807016 	blt	r2,r22,278c <___vfprintf_internal_r+0x2094>
    25cc:	00800c04 	movi	r2,48
    25d0:	b5800c04 	addi	r22,r22,48
    25d4:	d8802345 	stb	r2,141(sp)
    25d8:	dd802385 	stb	r22,142(sp)
    25dc:	d88023c4 	addi	r2,sp,143
    25e0:	df0022c4 	addi	fp,sp,139
    25e4:	d8c03317 	ldw	r3,204(sp)
    25e8:	1739c83a 	sub	fp,r2,fp
    25ec:	d9003317 	ldw	r4,204(sp)
    25f0:	e0c7883a 	add	r3,fp,r3
    25f4:	df003a15 	stw	fp,232(sp)
    25f8:	d8c02b15 	stw	r3,172(sp)
    25fc:	00800044 	movi	r2,1
    2600:	1100b30e 	bge	r2,r4,28d0 <___vfprintf_internal_r+0x21d8>
    2604:	d8c02b17 	ldw	r3,172(sp)
    2608:	18c00044 	addi	r3,r3,1
    260c:	d8c02b15 	stw	r3,172(sp)
    2610:	1805883a 	mov	r2,r3
    2614:	1800ac16 	blt	r3,zero,28c8 <___vfprintf_internal_r+0x21d0>
    2618:	d8003215 	stw	zero,200(sp)
    261c:	003e5d06 	br	1f94 <_gp+0xfffe7c28>
    2620:	d9002d17 	ldw	r4,180(sp)
    2624:	d9801e04 	addi	r6,sp,120
    2628:	b80b883a 	mov	r5,r23
    262c:	00073e80 	call	73e8 <__sprint_r>
    2630:	1039351e 	bne	r2,zero,b08 <_gp+0xfffe679c>
    2634:	dc402617 	ldw	r17,152(sp)
    2638:	d8c02017 	ldw	r3,128(sp)
    263c:	d8801f17 	ldw	r2,124(sp)
    2640:	da000404 	addi	r8,sp,16
    2644:	003ed606 	br	21a0 <_gp+0xfffe7e34>
    2648:	182b883a 	mov	r21,r3
    264c:	d8002a15 	stw	zero,168(sp)
    2650:	00388c06 	br	884 <_gp+0xfffe6518>
    2654:	d8802a17 	ldw	r2,168(sp)
    2658:	103e071e 	bne	r2,zero,1e78 <_gp+0xfffe7b0c>
    265c:	dc002a15 	stw	r16,168(sp)
    2660:	003e0506 	br	1e78 <_gp+0xfffe7b0c>
    2664:	d9002a17 	ldw	r4,168(sp)
    2668:	20c00044 	addi	r3,r4,1
    266c:	003e0f06 	br	1eac <_gp+0xfffe7b40>
    2670:	01400184 	movi	r5,6
    2674:	d9402a15 	stw	r5,168(sp)
    2678:	003dff06 	br	1e78 <_gp+0xfffe7b0c>
    267c:	d8802104 	addi	r2,sp,132
    2680:	d8800315 	stw	r2,12(sp)
    2684:	d8802504 	addi	r2,sp,148
    2688:	d8800215 	stw	r2,8(sp)
    268c:	d8802604 	addi	r2,sp,152
    2690:	d8800115 	stw	r2,4(sp)
    2694:	d8802a17 	ldw	r2,168(sp)
    2698:	d9403617 	ldw	r5,216(sp)
    269c:	d9002d17 	ldw	r4,180(sp)
    26a0:	d8800015 	stw	r2,0(sp)
    26a4:	01c000c4 	movi	r7,3
    26a8:	980d883a 	mov	r6,r19
    26ac:	da003d15 	stw	r8,244(sp)
    26b0:	0002e280 	call	2e28 <_dtoa_r>
    26b4:	d8c02a17 	ldw	r3,168(sp)
    26b8:	da003d17 	ldw	r8,244(sp)
    26bc:	1021883a 	mov	r16,r2
    26c0:	10f9883a 	add	fp,r2,r3
    26c4:	81000007 	ldb	r4,0(r16)
    26c8:	00800c04 	movi	r2,48
    26cc:	20805e26 	beq	r4,r2,2848 <___vfprintf_internal_r+0x2150>
    26d0:	d8c02617 	ldw	r3,152(sp)
    26d4:	e0f9883a 	add	fp,fp,r3
    26d8:	003e0a06 	br	1f04 <_gp+0xfffe7b98>
    26dc:	00c00b44 	movi	r3,45
    26e0:	24e0003c 	xorhi	r19,r4,32768
    26e4:	d8c02905 	stb	r3,164(sp)
    26e8:	003de906 	br	1e90 <_gp+0xfffe7b24>
    26ec:	d8c03217 	ldw	r3,200(sp)
    26f0:	00c07a0e 	bge	zero,r3,28dc <___vfprintf_internal_r+0x21e4>
    26f4:	00800044 	movi	r2,1
    26f8:	d9003317 	ldw	r4,204(sp)
    26fc:	1105883a 	add	r2,r2,r4
    2700:	d8802b15 	stw	r2,172(sp)
    2704:	10004e16 	blt	r2,zero,2840 <___vfprintf_internal_r+0x2148>
    2708:	044019c4 	movi	r17,103
    270c:	003e2106 	br	1f94 <_gp+0xfffe7c28>
    2710:	d9002a17 	ldw	r4,168(sp)
    2714:	d8802104 	addi	r2,sp,132
    2718:	d8800315 	stw	r2,12(sp)
    271c:	d9000015 	stw	r4,0(sp)
    2720:	d8802504 	addi	r2,sp,148
    2724:	d9403617 	ldw	r5,216(sp)
    2728:	d9002d17 	ldw	r4,180(sp)
    272c:	d8800215 	stw	r2,8(sp)
    2730:	d8802604 	addi	r2,sp,152
    2734:	d8800115 	stw	r2,4(sp)
    2738:	01c000c4 	movi	r7,3
    273c:	980d883a 	mov	r6,r19
    2740:	da003d15 	stw	r8,244(sp)
    2744:	0002e280 	call	2e28 <_dtoa_r>
    2748:	d8c02a17 	ldw	r3,168(sp)
    274c:	da003d17 	ldw	r8,244(sp)
    2750:	1021883a 	mov	r16,r2
    2754:	00801184 	movi	r2,70
    2758:	80f9883a 	add	fp,r16,r3
    275c:	88bfd926 	beq	r17,r2,26c4 <_gp+0xfffe8358>
    2760:	003de806 	br	1f04 <_gp+0xfffe7b98>
    2764:	d9002a17 	ldw	r4,168(sp)
    2768:	00c04d0e 	bge	zero,r3,28a0 <___vfprintf_internal_r+0x21a8>
    276c:	2000441e 	bne	r4,zero,2880 <___vfprintf_internal_r+0x2188>
    2770:	9480004c 	andi	r18,r18,1
    2774:	9000421e 	bne	r18,zero,2880 <___vfprintf_internal_r+0x2188>
    2778:	1805883a 	mov	r2,r3
    277c:	18006f16 	blt	r3,zero,293c <___vfprintf_internal_r+0x2244>
    2780:	d8c03217 	ldw	r3,200(sp)
    2784:	d8c02b15 	stw	r3,172(sp)
    2788:	003e0206 	br	1f94 <_gp+0xfffe7c28>
    278c:	df0022c4 	addi	fp,sp,139
    2790:	dc002a15 	stw	r16,168(sp)
    2794:	4027883a 	mov	r19,r8
    2798:	e021883a 	mov	r16,fp
    279c:	b009883a 	mov	r4,r22
    27a0:	01400284 	movi	r5,10
    27a4:	000aafc0 	call	aafc <__modsi3>
    27a8:	10800c04 	addi	r2,r2,48
    27ac:	843fffc4 	addi	r16,r16,-1
    27b0:	b009883a 	mov	r4,r22
    27b4:	01400284 	movi	r5,10
    27b8:	80800005 	stb	r2,0(r16)
    27bc:	000aa780 	call	aa78 <__divsi3>
    27c0:	102d883a 	mov	r22,r2
    27c4:	00800244 	movi	r2,9
    27c8:	15bff416 	blt	r2,r22,279c <_gp+0xfffe8430>
    27cc:	9811883a 	mov	r8,r19
    27d0:	b0800c04 	addi	r2,r22,48
    27d4:	8027883a 	mov	r19,r16
    27d8:	997fffc4 	addi	r5,r19,-1
    27dc:	98bfffc5 	stb	r2,-1(r19)
    27e0:	dc002a17 	ldw	r16,168(sp)
    27e4:	2f006d2e 	bgeu	r5,fp,299c <___vfprintf_internal_r+0x22a4>
    27e8:	d9c02384 	addi	r7,sp,142
    27ec:	3ccfc83a 	sub	r7,r7,r19
    27f0:	d9002344 	addi	r4,sp,141
    27f4:	e1cf883a 	add	r7,fp,r7
    27f8:	00000106 	br	2800 <___vfprintf_internal_r+0x2108>
    27fc:	28800003 	ldbu	r2,0(r5)
    2800:	20800005 	stb	r2,0(r4)
    2804:	21000044 	addi	r4,r4,1
    2808:	29400044 	addi	r5,r5,1
    280c:	393ffb1e 	bne	r7,r4,27fc <_gp+0xfffe8490>
    2810:	d8802304 	addi	r2,sp,140
    2814:	14c5c83a 	sub	r2,r2,r19
    2818:	d8c02344 	addi	r3,sp,141
    281c:	1885883a 	add	r2,r3,r2
    2820:	003f7006 	br	25e4 <_gp+0xfffe8278>
    2824:	0005883a 	mov	r2,zero
    2828:	003f0f06 	br	2468 <_gp+0xfffe80fc>
    282c:	d8c03217 	ldw	r3,200(sp)
    2830:	18c00044 	addi	r3,r3,1
    2834:	d8c02b15 	stw	r3,172(sp)
    2838:	1805883a 	mov	r2,r3
    283c:	183fb20e 	bge	r3,zero,2708 <_gp+0xfffe839c>
    2840:	0005883a 	mov	r2,zero
    2844:	003fb006 	br	2708 <_gp+0xfffe839c>
    2848:	d9003617 	ldw	r4,216(sp)
    284c:	000d883a 	mov	r6,zero
    2850:	000f883a 	mov	r7,zero
    2854:	980b883a 	mov	r5,r19
    2858:	d8c03c15 	stw	r3,240(sp)
    285c:	da003d15 	stw	r8,244(sp)
    2860:	000bea80 	call	bea8 <__eqdf2>
    2864:	d8c03c17 	ldw	r3,240(sp)
    2868:	da003d17 	ldw	r8,244(sp)
    286c:	103f9826 	beq	r2,zero,26d0 <_gp+0xfffe8364>
    2870:	00800044 	movi	r2,1
    2874:	10c7c83a 	sub	r3,r2,r3
    2878:	d8c02615 	stw	r3,152(sp)
    287c:	003f9506 	br	26d4 <_gp+0xfffe8368>
    2880:	d9002a17 	ldw	r4,168(sp)
    2884:	d8c03217 	ldw	r3,200(sp)
    2888:	20800044 	addi	r2,r4,1
    288c:	1885883a 	add	r2,r3,r2
    2890:	d8802b15 	stw	r2,172(sp)
    2894:	103dbf0e 	bge	r2,zero,1f94 <_gp+0xfffe7c28>
    2898:	0005883a 	mov	r2,zero
    289c:	003dbd06 	br	1f94 <_gp+0xfffe7c28>
    28a0:	2000201e 	bne	r4,zero,2924 <___vfprintf_internal_r+0x222c>
    28a4:	9480004c 	andi	r18,r18,1
    28a8:	90001e1e 	bne	r18,zero,2924 <___vfprintf_internal_r+0x222c>
    28ac:	00800044 	movi	r2,1
    28b0:	d8802b15 	stw	r2,172(sp)
    28b4:	003db706 	br	1f94 <_gp+0xfffe7c28>
    28b8:	00800b44 	movi	r2,45
    28bc:	05adc83a 	sub	r22,zero,r22
    28c0:	d8802305 	stb	r2,140(sp)
    28c4:	003f3f06 	br	25c4 <_gp+0xfffe8258>
    28c8:	0005883a 	mov	r2,zero
    28cc:	003f5206 	br	2618 <_gp+0xfffe82ac>
    28d0:	90a4703a 	and	r18,r18,r2
    28d4:	903f4e26 	beq	r18,zero,2610 <_gp+0xfffe82a4>
    28d8:	003f4a06 	br	2604 <_gp+0xfffe8298>
    28dc:	00800084 	movi	r2,2
    28e0:	10c5c83a 	sub	r2,r2,r3
    28e4:	003f8406 	br	26f8 <_gp+0xfffe838c>
    28e8:	d9402e17 	ldw	r5,184(sp)
    28ec:	d9002e17 	ldw	r4,184(sp)
    28f0:	ac400043 	ldbu	r17,1(r21)
    28f4:	29400017 	ldw	r5,0(r5)
    28f8:	20800104 	addi	r2,r4,4
    28fc:	d8802e15 	stw	r2,184(sp)
    2900:	d9402a15 	stw	r5,168(sp)
    2904:	182b883a 	mov	r21,r3
    2908:	283e7b0e 	bge	r5,zero,22f8 <_gp+0xfffe7f8c>
    290c:	8c403fcc 	andi	r17,r17,255
    2910:	017fffc4 	movi	r5,-1
    2914:	8c40201c 	xori	r17,r17,128
    2918:	d9402a15 	stw	r5,168(sp)
    291c:	8c7fe004 	addi	r17,r17,-128
    2920:	0037d706 	br	880 <_gp+0xfffe6514>
    2924:	d8c02a17 	ldw	r3,168(sp)
    2928:	18c00084 	addi	r3,r3,2
    292c:	d8c02b15 	stw	r3,172(sp)
    2930:	1805883a 	mov	r2,r3
    2934:	183d970e 	bge	r3,zero,1f94 <_gp+0xfffe7c28>
    2938:	003fd706 	br	2898 <_gp+0xfffe852c>
    293c:	0005883a 	mov	r2,zero
    2940:	003f8f06 	br	2780 <_gp+0xfffe8414>
    2944:	9080004c 	andi	r2,r18,1
    2948:	103f821e 	bne	r2,zero,2754 <_gp+0xfffe83e8>
    294c:	d8802117 	ldw	r2,132(sp)
    2950:	1405c83a 	sub	r2,r2,r16
    2954:	d8803315 	stw	r2,204(sp)
    2958:	b47ef426 	beq	r22,r17,252c <_gp+0xfffe81c0>
    295c:	dd802617 	ldw	r22,152(sp)
    2960:	003f1206 	br	25ac <_gp+0xfffe8240>
    2964:	d8c02b03 	ldbu	r3,172(sp)
    2968:	d8c02785 	stb	r3,158(sp)
    296c:	0038df06 	br	cec <_gp+0xfffe6980>
    2970:	d8c02b03 	ldbu	r3,172(sp)
    2974:	d8c02785 	stb	r3,158(sp)
    2978:	0038aa06 	br	c24 <_gp+0xfffe68b8>
    297c:	d8c02b03 	ldbu	r3,172(sp)
    2980:	d8c02785 	stb	r3,158(sp)
    2984:	003a4306 	br	1294 <_gp+0xfffe6f28>
    2988:	d8c02b03 	ldbu	r3,172(sp)
    298c:	d8c02785 	stb	r3,158(sp)
    2990:	003af506 	br	1568 <_gp+0xfffe71fc>
    2994:	0005883a 	mov	r2,zero
    2998:	003d7b06 	br	1f88 <_gp+0xfffe7c1c>
    299c:	d8802344 	addi	r2,sp,141
    29a0:	003f1006 	br	25e4 <_gp+0xfffe8278>
    29a4:	d8c02b03 	ldbu	r3,172(sp)
    29a8:	d8c02785 	stb	r3,158(sp)
    29ac:	0038fd06 	br	da4 <_gp+0xfffe6a38>
    29b0:	d8c02b03 	ldbu	r3,172(sp)
    29b4:	d8c02785 	stb	r3,158(sp)
    29b8:	003a9706 	br	1418 <_gp+0xfffe70ac>
    29bc:	d8c02b03 	ldbu	r3,172(sp)
    29c0:	d8c02785 	stb	r3,158(sp)
    29c4:	003a1806 	br	1228 <_gp+0xfffe6ebc>
    29c8:	d8c02b03 	ldbu	r3,172(sp)
    29cc:	d8c02785 	stb	r3,158(sp)
    29d0:	003abe06 	br	14cc <_gp+0xfffe7160>

000029d4 <__vfprintf_internal>:
    29d4:	00800074 	movhi	r2,1
    29d8:	1088dc04 	addi	r2,r2,9072
    29dc:	300f883a 	mov	r7,r6
    29e0:	280d883a 	mov	r6,r5
    29e4:	200b883a 	mov	r5,r4
    29e8:	11000017 	ldw	r4,0(r2)
    29ec:	00006f81 	jmpi	6f8 <___vfprintf_internal_r>

000029f0 <__sbprintf>:
    29f0:	2880030b 	ldhu	r2,12(r5)
    29f4:	2ac01917 	ldw	r11,100(r5)
    29f8:	2a80038b 	ldhu	r10,14(r5)
    29fc:	2a400717 	ldw	r9,28(r5)
    2a00:	2a000917 	ldw	r8,36(r5)
    2a04:	defee204 	addi	sp,sp,-1144
    2a08:	00c10004 	movi	r3,1024
    2a0c:	dc011a15 	stw	r16,1128(sp)
    2a10:	10bfff4c 	andi	r2,r2,65533
    2a14:	2821883a 	mov	r16,r5
    2a18:	d8cb883a 	add	r5,sp,r3
    2a1c:	dc811c15 	stw	r18,1136(sp)
    2a20:	dc411b15 	stw	r17,1132(sp)
    2a24:	dfc11d15 	stw	ra,1140(sp)
    2a28:	2025883a 	mov	r18,r4
    2a2c:	d881030d 	sth	r2,1036(sp)
    2a30:	dac11915 	stw	r11,1124(sp)
    2a34:	da81038d 	sth	r10,1038(sp)
    2a38:	da410715 	stw	r9,1052(sp)
    2a3c:	da010915 	stw	r8,1060(sp)
    2a40:	dec10015 	stw	sp,1024(sp)
    2a44:	dec10415 	stw	sp,1040(sp)
    2a48:	d8c10215 	stw	r3,1032(sp)
    2a4c:	d8c10515 	stw	r3,1044(sp)
    2a50:	d8010615 	stw	zero,1048(sp)
    2a54:	00006f80 	call	6f8 <___vfprintf_internal_r>
    2a58:	1023883a 	mov	r17,r2
    2a5c:	10000416 	blt	r2,zero,2a70 <__sbprintf+0x80>
    2a60:	d9410004 	addi	r5,sp,1024
    2a64:	9009883a 	mov	r4,r18
    2a68:	00046cc0 	call	46cc <_fflush_r>
    2a6c:	10000d1e 	bne	r2,zero,2aa4 <__sbprintf+0xb4>
    2a70:	d881030b 	ldhu	r2,1036(sp)
    2a74:	1080100c 	andi	r2,r2,64
    2a78:	10000326 	beq	r2,zero,2a88 <__sbprintf+0x98>
    2a7c:	8080030b 	ldhu	r2,12(r16)
    2a80:	10801014 	ori	r2,r2,64
    2a84:	8080030d 	sth	r2,12(r16)
    2a88:	8805883a 	mov	r2,r17
    2a8c:	dfc11d17 	ldw	ra,1140(sp)
    2a90:	dc811c17 	ldw	r18,1136(sp)
    2a94:	dc411b17 	ldw	r17,1132(sp)
    2a98:	dc011a17 	ldw	r16,1128(sp)
    2a9c:	dec11e04 	addi	sp,sp,1144
    2aa0:	f800283a 	ret
    2aa4:	047fffc4 	movi	r17,-1
    2aa8:	003ff106 	br	2a70 <_gp+0xfffe8704>

00002aac <__swsetup_r>:
    2aac:	00800074 	movhi	r2,1
    2ab0:	defffd04 	addi	sp,sp,-12
    2ab4:	1088dc04 	addi	r2,r2,9072
    2ab8:	dc400115 	stw	r17,4(sp)
    2abc:	2023883a 	mov	r17,r4
    2ac0:	11000017 	ldw	r4,0(r2)
    2ac4:	dc000015 	stw	r16,0(sp)
    2ac8:	dfc00215 	stw	ra,8(sp)
    2acc:	2821883a 	mov	r16,r5
    2ad0:	20000226 	beq	r4,zero,2adc <__swsetup_r+0x30>
    2ad4:	20800e17 	ldw	r2,56(r4)
    2ad8:	10003126 	beq	r2,zero,2ba0 <__swsetup_r+0xf4>
    2adc:	8080030b 	ldhu	r2,12(r16)
    2ae0:	10c0020c 	andi	r3,r2,8
    2ae4:	1009883a 	mov	r4,r2
    2ae8:	18000f26 	beq	r3,zero,2b28 <__swsetup_r+0x7c>
    2aec:	80c00417 	ldw	r3,16(r16)
    2af0:	18001526 	beq	r3,zero,2b48 <__swsetup_r+0x9c>
    2af4:	1100004c 	andi	r4,r2,1
    2af8:	20001c1e 	bne	r4,zero,2b6c <__swsetup_r+0xc0>
    2afc:	1080008c 	andi	r2,r2,2
    2b00:	1000291e 	bne	r2,zero,2ba8 <__swsetup_r+0xfc>
    2b04:	80800517 	ldw	r2,20(r16)
    2b08:	80800215 	stw	r2,8(r16)
    2b0c:	18001c26 	beq	r3,zero,2b80 <__swsetup_r+0xd4>
    2b10:	0005883a 	mov	r2,zero
    2b14:	dfc00217 	ldw	ra,8(sp)
    2b18:	dc400117 	ldw	r17,4(sp)
    2b1c:	dc000017 	ldw	r16,0(sp)
    2b20:	dec00304 	addi	sp,sp,12
    2b24:	f800283a 	ret
    2b28:	2080040c 	andi	r2,r4,16
    2b2c:	10002e26 	beq	r2,zero,2be8 <__swsetup_r+0x13c>
    2b30:	2080010c 	andi	r2,r4,4
    2b34:	10001e1e 	bne	r2,zero,2bb0 <__swsetup_r+0x104>
    2b38:	80c00417 	ldw	r3,16(r16)
    2b3c:	20800214 	ori	r2,r4,8
    2b40:	8080030d 	sth	r2,12(r16)
    2b44:	183feb1e 	bne	r3,zero,2af4 <_gp+0xfffe8788>
    2b48:	1100a00c 	andi	r4,r2,640
    2b4c:	01408004 	movi	r5,512
    2b50:	217fe826 	beq	r4,r5,2af4 <_gp+0xfffe8788>
    2b54:	800b883a 	mov	r5,r16
    2b58:	8809883a 	mov	r4,r17
    2b5c:	00051a00 	call	51a0 <__smakebuf_r>
    2b60:	8080030b 	ldhu	r2,12(r16)
    2b64:	80c00417 	ldw	r3,16(r16)
    2b68:	003fe206 	br	2af4 <_gp+0xfffe8788>
    2b6c:	80800517 	ldw	r2,20(r16)
    2b70:	80000215 	stw	zero,8(r16)
    2b74:	0085c83a 	sub	r2,zero,r2
    2b78:	80800615 	stw	r2,24(r16)
    2b7c:	183fe41e 	bne	r3,zero,2b10 <_gp+0xfffe87a4>
    2b80:	80c0030b 	ldhu	r3,12(r16)
    2b84:	0005883a 	mov	r2,zero
    2b88:	1900200c 	andi	r4,r3,128
    2b8c:	203fe126 	beq	r4,zero,2b14 <_gp+0xfffe87a8>
    2b90:	18c01014 	ori	r3,r3,64
    2b94:	80c0030d 	sth	r3,12(r16)
    2b98:	00bfffc4 	movi	r2,-1
    2b9c:	003fdd06 	br	2b14 <_gp+0xfffe87a8>
    2ba0:	0004ab80 	call	4ab8 <__sinit>
    2ba4:	003fcd06 	br	2adc <_gp+0xfffe8770>
    2ba8:	0005883a 	mov	r2,zero
    2bac:	003fd606 	br	2b08 <_gp+0xfffe879c>
    2bb0:	81400c17 	ldw	r5,48(r16)
    2bb4:	28000626 	beq	r5,zero,2bd0 <__swsetup_r+0x124>
    2bb8:	80801004 	addi	r2,r16,64
    2bbc:	28800326 	beq	r5,r2,2bcc <__swsetup_r+0x120>
    2bc0:	8809883a 	mov	r4,r17
    2bc4:	0004c2c0 	call	4c2c <_free_r>
    2bc8:	8100030b 	ldhu	r4,12(r16)
    2bcc:	80000c15 	stw	zero,48(r16)
    2bd0:	80c00417 	ldw	r3,16(r16)
    2bd4:	00bff6c4 	movi	r2,-37
    2bd8:	1108703a 	and	r4,r2,r4
    2bdc:	80000115 	stw	zero,4(r16)
    2be0:	80c00015 	stw	r3,0(r16)
    2be4:	003fd506 	br	2b3c <_gp+0xfffe87d0>
    2be8:	00800244 	movi	r2,9
    2bec:	88800015 	stw	r2,0(r17)
    2bf0:	20801014 	ori	r2,r4,64
    2bf4:	8080030d 	sth	r2,12(r16)
    2bf8:	00bfffc4 	movi	r2,-1
    2bfc:	003fc506 	br	2b14 <_gp+0xfffe87a8>

00002c00 <quorem>:
    2c00:	defff204 	addi	sp,sp,-56
    2c04:	ddc00b15 	stw	r23,44(sp)
    2c08:	20800417 	ldw	r2,16(r4)
    2c0c:	2dc00417 	ldw	r23,16(r5)
    2c10:	dfc00d15 	stw	ra,52(sp)
    2c14:	df000c15 	stw	fp,48(sp)
    2c18:	dd800a15 	stw	r22,40(sp)
    2c1c:	dd400915 	stw	r21,36(sp)
    2c20:	dd000815 	stw	r20,32(sp)
    2c24:	dcc00715 	stw	r19,28(sp)
    2c28:	dc800615 	stw	r18,24(sp)
    2c2c:	dc400515 	stw	r17,20(sp)
    2c30:	dc000415 	stw	r16,16(sp)
    2c34:	15c07a16 	blt	r2,r23,2e20 <quorem+0x220>
    2c38:	bdffffc4 	addi	r23,r23,-1
    2c3c:	bde9883a 	add	r20,r23,r23
    2c40:	28c00504 	addi	r3,r5,20
    2c44:	a529883a 	add	r20,r20,r20
    2c48:	1d39883a 	add	fp,r3,r20
    2c4c:	24c00504 	addi	r19,r4,20
    2c50:	d9400215 	stw	r5,8(sp)
    2c54:	9d29883a 	add	r20,r19,r20
    2c58:	e1400017 	ldw	r5,0(fp)
    2c5c:	d9000015 	stw	r4,0(sp)
    2c60:	a1000017 	ldw	r4,0(r20)
    2c64:	29400044 	addi	r5,r5,1
    2c68:	d8c00115 	stw	r3,4(sp)
    2c6c:	dd000315 	stw	r20,12(sp)
    2c70:	000ab700 	call	ab70 <__udivsi3>
    2c74:	1025883a 	mov	r18,r2
    2c78:	10003026 	beq	r2,zero,2d3c <quorem+0x13c>
    2c7c:	dc400117 	ldw	r17,4(sp)
    2c80:	9829883a 	mov	r20,r19
    2c84:	002d883a 	mov	r22,zero
    2c88:	0021883a 	mov	r16,zero
    2c8c:	8d400017 	ldw	r21,0(r17)
    2c90:	900b883a 	mov	r5,r18
    2c94:	8c400104 	addi	r17,r17,4
    2c98:	a93fffcc 	andi	r4,r21,65535
    2c9c:	000049c0 	call	49c <__mulsi3>
    2ca0:	a808d43a 	srli	r4,r21,16
    2ca4:	900b883a 	mov	r5,r18
    2ca8:	15ad883a 	add	r22,r2,r22
    2cac:	000049c0 	call	49c <__mulsi3>
    2cb0:	a1000017 	ldw	r4,0(r20)
    2cb4:	b00cd43a 	srli	r6,r22,16
    2cb8:	b0ffffcc 	andi	r3,r22,65535
    2cbc:	217fffcc 	andi	r5,r4,65535
    2cc0:	2c21883a 	add	r16,r5,r16
    2cc4:	80c7c83a 	sub	r3,r16,r3
    2cc8:	2008d43a 	srli	r4,r4,16
    2ccc:	1185883a 	add	r2,r2,r6
    2cd0:	1821d43a 	srai	r16,r3,16
    2cd4:	117fffcc 	andi	r5,r2,65535
    2cd8:	2149c83a 	sub	r4,r4,r5
    2cdc:	2421883a 	add	r16,r4,r16
    2ce0:	8008943a 	slli	r4,r16,16
    2ce4:	18ffffcc 	andi	r3,r3,65535
    2ce8:	102cd43a 	srli	r22,r2,16
    2cec:	20c8b03a 	or	r4,r4,r3
    2cf0:	a1000015 	stw	r4,0(r20)
    2cf4:	8021d43a 	srai	r16,r16,16
    2cf8:	a5000104 	addi	r20,r20,4
    2cfc:	e47fe32e 	bgeu	fp,r17,2c8c <_gp+0xfffe8920>
    2d00:	d8c00317 	ldw	r3,12(sp)
    2d04:	18800017 	ldw	r2,0(r3)
    2d08:	10000c1e 	bne	r2,zero,2d3c <quorem+0x13c>
    2d0c:	18bfff04 	addi	r2,r3,-4
    2d10:	9880082e 	bgeu	r19,r2,2d34 <quorem+0x134>
    2d14:	18ffff17 	ldw	r3,-4(r3)
    2d18:	18000326 	beq	r3,zero,2d28 <quorem+0x128>
    2d1c:	00000506 	br	2d34 <quorem+0x134>
    2d20:	10c00017 	ldw	r3,0(r2)
    2d24:	1800031e 	bne	r3,zero,2d34 <quorem+0x134>
    2d28:	10bfff04 	addi	r2,r2,-4
    2d2c:	bdffffc4 	addi	r23,r23,-1
    2d30:	98bffb36 	bltu	r19,r2,2d20 <_gp+0xfffe89b4>
    2d34:	d8c00017 	ldw	r3,0(sp)
    2d38:	1dc00415 	stw	r23,16(r3)
    2d3c:	d9400217 	ldw	r5,8(sp)
    2d40:	d9000017 	ldw	r4,0(sp)
    2d44:	00068400 	call	6840 <__mcmp>
    2d48:	10002816 	blt	r2,zero,2dec <quorem+0x1ec>
    2d4c:	dc400117 	ldw	r17,4(sp)
    2d50:	94800044 	addi	r18,r18,1
    2d54:	980d883a 	mov	r6,r19
    2d58:	0007883a 	mov	r3,zero
    2d5c:	31000017 	ldw	r4,0(r6)
    2d60:	89400017 	ldw	r5,0(r17)
    2d64:	31800104 	addi	r6,r6,4
    2d68:	20bfffcc 	andi	r2,r4,65535
    2d6c:	10c7883a 	add	r3,r2,r3
    2d70:	28bfffcc 	andi	r2,r5,65535
    2d74:	1885c83a 	sub	r2,r3,r2
    2d78:	280ad43a 	srli	r5,r5,16
    2d7c:	2008d43a 	srli	r4,r4,16
    2d80:	1007d43a 	srai	r3,r2,16
    2d84:	10bfffcc 	andi	r2,r2,65535
    2d88:	2149c83a 	sub	r4,r4,r5
    2d8c:	20c9883a 	add	r4,r4,r3
    2d90:	200a943a 	slli	r5,r4,16
    2d94:	8c400104 	addi	r17,r17,4
    2d98:	2007d43a 	srai	r3,r4,16
    2d9c:	2884b03a 	or	r2,r5,r2
    2da0:	30bfff15 	stw	r2,-4(r6)
    2da4:	e47fed2e 	bgeu	fp,r17,2d5c <_gp+0xfffe89f0>
    2da8:	bdc5883a 	add	r2,r23,r23
    2dac:	1085883a 	add	r2,r2,r2
    2db0:	9887883a 	add	r3,r19,r2
    2db4:	18800017 	ldw	r2,0(r3)
    2db8:	10000c1e 	bne	r2,zero,2dec <quorem+0x1ec>
    2dbc:	18bfff04 	addi	r2,r3,-4
    2dc0:	9880082e 	bgeu	r19,r2,2de4 <quorem+0x1e4>
    2dc4:	18ffff17 	ldw	r3,-4(r3)
    2dc8:	18000326 	beq	r3,zero,2dd8 <quorem+0x1d8>
    2dcc:	00000506 	br	2de4 <quorem+0x1e4>
    2dd0:	10c00017 	ldw	r3,0(r2)
    2dd4:	1800031e 	bne	r3,zero,2de4 <quorem+0x1e4>
    2dd8:	10bfff04 	addi	r2,r2,-4
    2ddc:	bdffffc4 	addi	r23,r23,-1
    2de0:	98bffb36 	bltu	r19,r2,2dd0 <_gp+0xfffe8a64>
    2de4:	d8c00017 	ldw	r3,0(sp)
    2de8:	1dc00415 	stw	r23,16(r3)
    2dec:	9005883a 	mov	r2,r18
    2df0:	dfc00d17 	ldw	ra,52(sp)
    2df4:	df000c17 	ldw	fp,48(sp)
    2df8:	ddc00b17 	ldw	r23,44(sp)
    2dfc:	dd800a17 	ldw	r22,40(sp)
    2e00:	dd400917 	ldw	r21,36(sp)
    2e04:	dd000817 	ldw	r20,32(sp)
    2e08:	dcc00717 	ldw	r19,28(sp)
    2e0c:	dc800617 	ldw	r18,24(sp)
    2e10:	dc400517 	ldw	r17,20(sp)
    2e14:	dc000417 	ldw	r16,16(sp)
    2e18:	dec00e04 	addi	sp,sp,56
    2e1c:	f800283a 	ret
    2e20:	0005883a 	mov	r2,zero
    2e24:	003ff206 	br	2df0 <_gp+0xfffe8a84>

00002e28 <_dtoa_r>:
    2e28:	20801017 	ldw	r2,64(r4)
    2e2c:	deffde04 	addi	sp,sp,-136
    2e30:	df002015 	stw	fp,128(sp)
    2e34:	dcc01b15 	stw	r19,108(sp)
    2e38:	dc801a15 	stw	r18,104(sp)
    2e3c:	dc401915 	stw	r17,100(sp)
    2e40:	dc001815 	stw	r16,96(sp)
    2e44:	dfc02115 	stw	ra,132(sp)
    2e48:	ddc01f15 	stw	r23,124(sp)
    2e4c:	dd801e15 	stw	r22,120(sp)
    2e50:	dd401d15 	stw	r21,116(sp)
    2e54:	dd001c15 	stw	r20,112(sp)
    2e58:	d9c00315 	stw	r7,12(sp)
    2e5c:	2039883a 	mov	fp,r4
    2e60:	3023883a 	mov	r17,r6
    2e64:	2825883a 	mov	r18,r5
    2e68:	dc002417 	ldw	r16,144(sp)
    2e6c:	3027883a 	mov	r19,r6
    2e70:	10000826 	beq	r2,zero,2e94 <_dtoa_r+0x6c>
    2e74:	21801117 	ldw	r6,68(r4)
    2e78:	00c00044 	movi	r3,1
    2e7c:	100b883a 	mov	r5,r2
    2e80:	1986983a 	sll	r3,r3,r6
    2e84:	11800115 	stw	r6,4(r2)
    2e88:	10c00215 	stw	r3,8(r2)
    2e8c:	0005f640 	call	5f64 <_Bfree>
    2e90:	e0001015 	stw	zero,64(fp)
    2e94:	88002e16 	blt	r17,zero,2f50 <_dtoa_r+0x128>
    2e98:	80000015 	stw	zero,0(r16)
    2e9c:	889ffc2c 	andhi	r2,r17,32752
    2ea0:	00dffc34 	movhi	r3,32752
    2ea4:	10c01c26 	beq	r2,r3,2f18 <_dtoa_r+0xf0>
    2ea8:	000d883a 	mov	r6,zero
    2eac:	000f883a 	mov	r7,zero
    2eb0:	9009883a 	mov	r4,r18
    2eb4:	980b883a 	mov	r5,r19
    2eb8:	000bea80 	call	bea8 <__eqdf2>
    2ebc:	10002b1e 	bne	r2,zero,2f6c <_dtoa_r+0x144>
    2ec0:	d9c02317 	ldw	r7,140(sp)
    2ec4:	00800044 	movi	r2,1
    2ec8:	38800015 	stw	r2,0(r7)
    2ecc:	d8802517 	ldw	r2,148(sp)
    2ed0:	10019e26 	beq	r2,zero,354c <_dtoa_r+0x724>
    2ed4:	d8c02517 	ldw	r3,148(sp)
    2ed8:	00800074 	movhi	r2,1
    2edc:	10818344 	addi	r2,r2,1549
    2ee0:	18800015 	stw	r2,0(r3)
    2ee4:	10bfffc4 	addi	r2,r2,-1
    2ee8:	dfc02117 	ldw	ra,132(sp)
    2eec:	df002017 	ldw	fp,128(sp)
    2ef0:	ddc01f17 	ldw	r23,124(sp)
    2ef4:	dd801e17 	ldw	r22,120(sp)
    2ef8:	dd401d17 	ldw	r21,116(sp)
    2efc:	dd001c17 	ldw	r20,112(sp)
    2f00:	dcc01b17 	ldw	r19,108(sp)
    2f04:	dc801a17 	ldw	r18,104(sp)
    2f08:	dc401917 	ldw	r17,100(sp)
    2f0c:	dc001817 	ldw	r16,96(sp)
    2f10:	dec02204 	addi	sp,sp,136
    2f14:	f800283a 	ret
    2f18:	d8c02317 	ldw	r3,140(sp)
    2f1c:	0089c3c4 	movi	r2,9999
    2f20:	18800015 	stw	r2,0(r3)
    2f24:	90017726 	beq	r18,zero,3504 <_dtoa_r+0x6dc>
    2f28:	00800074 	movhi	r2,1
    2f2c:	10818f04 	addi	r2,r2,1596
    2f30:	d9002517 	ldw	r4,148(sp)
    2f34:	203fec26 	beq	r4,zero,2ee8 <_gp+0xfffe8b7c>
    2f38:	10c000c7 	ldb	r3,3(r2)
    2f3c:	1801781e 	bne	r3,zero,3520 <_dtoa_r+0x6f8>
    2f40:	10c000c4 	addi	r3,r2,3
    2f44:	d9802517 	ldw	r6,148(sp)
    2f48:	30c00015 	stw	r3,0(r6)
    2f4c:	003fe606 	br	2ee8 <_gp+0xfffe8b7c>
    2f50:	04e00034 	movhi	r19,32768
    2f54:	9cffffc4 	addi	r19,r19,-1
    2f58:	00800044 	movi	r2,1
    2f5c:	8ce6703a 	and	r19,r17,r19
    2f60:	80800015 	stw	r2,0(r16)
    2f64:	9823883a 	mov	r17,r19
    2f68:	003fcc06 	br	2e9c <_gp+0xfffe8b30>
    2f6c:	d8800204 	addi	r2,sp,8
    2f70:	d8800015 	stw	r2,0(sp)
    2f74:	d9c00104 	addi	r7,sp,4
    2f78:	900b883a 	mov	r5,r18
    2f7c:	980d883a 	mov	r6,r19
    2f80:	e009883a 	mov	r4,fp
    2f84:	8820d53a 	srli	r16,r17,20
    2f88:	0006c0c0 	call	6c0c <__d2b>
    2f8c:	d8800915 	stw	r2,36(sp)
    2f90:	8001651e 	bne	r16,zero,3528 <_dtoa_r+0x700>
    2f94:	dd800217 	ldw	r22,8(sp)
    2f98:	dc000117 	ldw	r16,4(sp)
    2f9c:	00800804 	movi	r2,32
    2fa0:	b421883a 	add	r16,r22,r16
    2fa4:	80c10c84 	addi	r3,r16,1074
    2fa8:	10c2d10e 	bge	r2,r3,3af0 <_dtoa_r+0xcc8>
    2fac:	00801004 	movi	r2,64
    2fb0:	81010484 	addi	r4,r16,1042
    2fb4:	10c7c83a 	sub	r3,r2,r3
    2fb8:	9108d83a 	srl	r4,r18,r4
    2fbc:	88e2983a 	sll	r17,r17,r3
    2fc0:	2448b03a 	or	r4,r4,r17
    2fc4:	000d3c40 	call	d3c4 <__floatunsidf>
    2fc8:	017f8434 	movhi	r5,65040
    2fcc:	01800044 	movi	r6,1
    2fd0:	1009883a 	mov	r4,r2
    2fd4:	194b883a 	add	r5,r3,r5
    2fd8:	843fffc4 	addi	r16,r16,-1
    2fdc:	d9801115 	stw	r6,68(sp)
    2fe0:	000d883a 	mov	r6,zero
    2fe4:	01cffe34 	movhi	r7,16376
    2fe8:	000c96c0 	call	c96c <__subdf3>
    2fec:	0198dbf4 	movhi	r6,25455
    2ff0:	01cff4f4 	movhi	r7,16339
    2ff4:	3190d844 	addi	r6,r6,17249
    2ff8:	39e1e9c4 	addi	r7,r7,-30809
    2ffc:	1009883a 	mov	r4,r2
    3000:	180b883a 	mov	r5,r3
    3004:	000c1000 	call	c100 <__muldf3>
    3008:	01a2d874 	movhi	r6,35681
    300c:	01cff1f4 	movhi	r7,16327
    3010:	31b22cc4 	addi	r6,r6,-14157
    3014:	39e28a04 	addi	r7,r7,-30168
    3018:	180b883a 	mov	r5,r3
    301c:	1009883a 	mov	r4,r2
    3020:	000ac2c0 	call	ac2c <__adddf3>
    3024:	8009883a 	mov	r4,r16
    3028:	1029883a 	mov	r20,r2
    302c:	1823883a 	mov	r17,r3
    3030:	000d2e80 	call	d2e8 <__floatsidf>
    3034:	019427f4 	movhi	r6,20639
    3038:	01cff4f4 	movhi	r7,16339
    303c:	319e7ec4 	addi	r6,r6,31227
    3040:	39d104c4 	addi	r7,r7,17427
    3044:	1009883a 	mov	r4,r2
    3048:	180b883a 	mov	r5,r3
    304c:	000c1000 	call	c100 <__muldf3>
    3050:	100d883a 	mov	r6,r2
    3054:	180f883a 	mov	r7,r3
    3058:	a009883a 	mov	r4,r20
    305c:	880b883a 	mov	r5,r17
    3060:	000ac2c0 	call	ac2c <__adddf3>
    3064:	1009883a 	mov	r4,r2
    3068:	180b883a 	mov	r5,r3
    306c:	1029883a 	mov	r20,r2
    3070:	1823883a 	mov	r17,r3
    3074:	000d2680 	call	d268 <__fixdfsi>
    3078:	000d883a 	mov	r6,zero
    307c:	000f883a 	mov	r7,zero
    3080:	a009883a 	mov	r4,r20
    3084:	880b883a 	mov	r5,r17
    3088:	d8800515 	stw	r2,20(sp)
    308c:	000c00c0 	call	c00c <__ledf2>
    3090:	10028716 	blt	r2,zero,3ab0 <_dtoa_r+0xc88>
    3094:	d8c00517 	ldw	r3,20(sp)
    3098:	00800584 	movi	r2,22
    309c:	10c27536 	bltu	r2,r3,3a74 <_dtoa_r+0xc4c>
    30a0:	180490fa 	slli	r2,r3,3
    30a4:	00c00074 	movhi	r3,1
    30a8:	18c1ab04 	addi	r3,r3,1708
    30ac:	1885883a 	add	r2,r3,r2
    30b0:	11000017 	ldw	r4,0(r2)
    30b4:	11400117 	ldw	r5,4(r2)
    30b8:	900d883a 	mov	r6,r18
    30bc:	980f883a 	mov	r7,r19
    30c0:	000bf300 	call	bf30 <__gedf2>
    30c4:	00828d0e 	bge	zero,r2,3afc <_dtoa_r+0xcd4>
    30c8:	d9000517 	ldw	r4,20(sp)
    30cc:	d8000e15 	stw	zero,56(sp)
    30d0:	213fffc4 	addi	r4,r4,-1
    30d4:	d9000515 	stw	r4,20(sp)
    30d8:	b42dc83a 	sub	r22,r22,r16
    30dc:	b5bfffc4 	addi	r22,r22,-1
    30e0:	b0026f16 	blt	r22,zero,3aa0 <_dtoa_r+0xc78>
    30e4:	d8000815 	stw	zero,32(sp)
    30e8:	d9c00517 	ldw	r7,20(sp)
    30ec:	38026416 	blt	r7,zero,3a80 <_dtoa_r+0xc58>
    30f0:	b1ed883a 	add	r22,r22,r7
    30f4:	d9c00d15 	stw	r7,52(sp)
    30f8:	d8000a15 	stw	zero,40(sp)
    30fc:	d9800317 	ldw	r6,12(sp)
    3100:	00800244 	movi	r2,9
    3104:	11811436 	bltu	r2,r6,3558 <_dtoa_r+0x730>
    3108:	00800144 	movi	r2,5
    310c:	1184e10e 	bge	r2,r6,4494 <_dtoa_r+0x166c>
    3110:	31bfff04 	addi	r6,r6,-4
    3114:	d9800315 	stw	r6,12(sp)
    3118:	0023883a 	mov	r17,zero
    311c:	d9800317 	ldw	r6,12(sp)
    3120:	008000c4 	movi	r2,3
    3124:	30836726 	beq	r6,r2,3ec4 <_dtoa_r+0x109c>
    3128:	1183410e 	bge	r2,r6,3e30 <_dtoa_r+0x1008>
    312c:	d9c00317 	ldw	r7,12(sp)
    3130:	00800104 	movi	r2,4
    3134:	38827c26 	beq	r7,r2,3b28 <_dtoa_r+0xd00>
    3138:	00800144 	movi	r2,5
    313c:	3884c41e 	bne	r7,r2,4450 <_dtoa_r+0x1628>
    3140:	00800044 	movi	r2,1
    3144:	d8800b15 	stw	r2,44(sp)
    3148:	d8c00517 	ldw	r3,20(sp)
    314c:	d9002217 	ldw	r4,136(sp)
    3150:	1907883a 	add	r3,r3,r4
    3154:	19800044 	addi	r6,r3,1
    3158:	d8c00c15 	stw	r3,48(sp)
    315c:	d9800615 	stw	r6,24(sp)
    3160:	0183a40e 	bge	zero,r6,3ff4 <_dtoa_r+0x11cc>
    3164:	d9800617 	ldw	r6,24(sp)
    3168:	3021883a 	mov	r16,r6
    316c:	e0001115 	stw	zero,68(fp)
    3170:	008005c4 	movi	r2,23
    3174:	1184c92e 	bgeu	r2,r6,449c <_dtoa_r+0x1674>
    3178:	00c00044 	movi	r3,1
    317c:	00800104 	movi	r2,4
    3180:	1085883a 	add	r2,r2,r2
    3184:	11000504 	addi	r4,r2,20
    3188:	180b883a 	mov	r5,r3
    318c:	18c00044 	addi	r3,r3,1
    3190:	313ffb2e 	bgeu	r6,r4,3180 <_gp+0xfffe8e14>
    3194:	e1401115 	stw	r5,68(fp)
    3198:	e009883a 	mov	r4,fp
    319c:	0005ebc0 	call	5ebc <_Balloc>
    31a0:	d8800715 	stw	r2,28(sp)
    31a4:	e0801015 	stw	r2,64(fp)
    31a8:	00800384 	movi	r2,14
    31ac:	1400f736 	bltu	r2,r16,358c <_dtoa_r+0x764>
    31b0:	8800f626 	beq	r17,zero,358c <_dtoa_r+0x764>
    31b4:	d9c00517 	ldw	r7,20(sp)
    31b8:	01c39a0e 	bge	zero,r7,4024 <_dtoa_r+0x11fc>
    31bc:	388003cc 	andi	r2,r7,15
    31c0:	100490fa 	slli	r2,r2,3
    31c4:	382bd13a 	srai	r21,r7,4
    31c8:	00c00074 	movhi	r3,1
    31cc:	18c1ab04 	addi	r3,r3,1708
    31d0:	1885883a 	add	r2,r3,r2
    31d4:	a8c0040c 	andi	r3,r21,16
    31d8:	12400017 	ldw	r9,0(r2)
    31dc:	12000117 	ldw	r8,4(r2)
    31e0:	18037926 	beq	r3,zero,3fc8 <_dtoa_r+0x11a0>
    31e4:	00800074 	movhi	r2,1
    31e8:	1081a104 	addi	r2,r2,1668
    31ec:	11800817 	ldw	r6,32(r2)
    31f0:	11c00917 	ldw	r7,36(r2)
    31f4:	9009883a 	mov	r4,r18
    31f8:	980b883a 	mov	r5,r19
    31fc:	da001715 	stw	r8,92(sp)
    3200:	da401615 	stw	r9,88(sp)
    3204:	000b4d80 	call	b4d8 <__divdf3>
    3208:	da001717 	ldw	r8,92(sp)
    320c:	da401617 	ldw	r9,88(sp)
    3210:	ad4003cc 	andi	r21,r21,15
    3214:	040000c4 	movi	r16,3
    3218:	1023883a 	mov	r17,r2
    321c:	1829883a 	mov	r20,r3
    3220:	a8001126 	beq	r21,zero,3268 <_dtoa_r+0x440>
    3224:	05c00074 	movhi	r23,1
    3228:	bdc1a104 	addi	r23,r23,1668
    322c:	4805883a 	mov	r2,r9
    3230:	4007883a 	mov	r3,r8
    3234:	a980004c 	andi	r6,r21,1
    3238:	1009883a 	mov	r4,r2
    323c:	a82bd07a 	srai	r21,r21,1
    3240:	180b883a 	mov	r5,r3
    3244:	30000426 	beq	r6,zero,3258 <_dtoa_r+0x430>
    3248:	b9800017 	ldw	r6,0(r23)
    324c:	b9c00117 	ldw	r7,4(r23)
    3250:	84000044 	addi	r16,r16,1
    3254:	000c1000 	call	c100 <__muldf3>
    3258:	bdc00204 	addi	r23,r23,8
    325c:	a83ff51e 	bne	r21,zero,3234 <_gp+0xfffe8ec8>
    3260:	1013883a 	mov	r9,r2
    3264:	1811883a 	mov	r8,r3
    3268:	480d883a 	mov	r6,r9
    326c:	400f883a 	mov	r7,r8
    3270:	8809883a 	mov	r4,r17
    3274:	a00b883a 	mov	r5,r20
    3278:	000b4d80 	call	b4d8 <__divdf3>
    327c:	d8800f15 	stw	r2,60(sp)
    3280:	d8c01015 	stw	r3,64(sp)
    3284:	d8c00e17 	ldw	r3,56(sp)
    3288:	18000626 	beq	r3,zero,32a4 <_dtoa_r+0x47c>
    328c:	d9000f17 	ldw	r4,60(sp)
    3290:	d9401017 	ldw	r5,64(sp)
    3294:	000d883a 	mov	r6,zero
    3298:	01cffc34 	movhi	r7,16368
    329c:	000c00c0 	call	c00c <__ledf2>
    32a0:	10040b16 	blt	r2,zero,42d0 <_dtoa_r+0x14a8>
    32a4:	8009883a 	mov	r4,r16
    32a8:	000d2e80 	call	d2e8 <__floatsidf>
    32ac:	d9800f17 	ldw	r6,60(sp)
    32b0:	d9c01017 	ldw	r7,64(sp)
    32b4:	1009883a 	mov	r4,r2
    32b8:	180b883a 	mov	r5,r3
    32bc:	000c1000 	call	c100 <__muldf3>
    32c0:	000d883a 	mov	r6,zero
    32c4:	01d00734 	movhi	r7,16412
    32c8:	1009883a 	mov	r4,r2
    32cc:	180b883a 	mov	r5,r3
    32d0:	000ac2c0 	call	ac2c <__adddf3>
    32d4:	1021883a 	mov	r16,r2
    32d8:	d8800617 	ldw	r2,24(sp)
    32dc:	047f3034 	movhi	r17,64704
    32e0:	1c63883a 	add	r17,r3,r17
    32e4:	10031826 	beq	r2,zero,3f48 <_dtoa_r+0x1120>
    32e8:	d8c00517 	ldw	r3,20(sp)
    32ec:	db000617 	ldw	r12,24(sp)
    32f0:	d8c01315 	stw	r3,76(sp)
    32f4:	d9000b17 	ldw	r4,44(sp)
    32f8:	20038f26 	beq	r4,zero,4138 <_dtoa_r+0x1310>
    32fc:	60bfffc4 	addi	r2,r12,-1
    3300:	100490fa 	slli	r2,r2,3
    3304:	00c00074 	movhi	r3,1
    3308:	18c1ab04 	addi	r3,r3,1708
    330c:	1885883a 	add	r2,r3,r2
    3310:	11800017 	ldw	r6,0(r2)
    3314:	11c00117 	ldw	r7,4(r2)
    3318:	d8800717 	ldw	r2,28(sp)
    331c:	0009883a 	mov	r4,zero
    3320:	014ff834 	movhi	r5,16352
    3324:	db001615 	stw	r12,88(sp)
    3328:	15c00044 	addi	r23,r2,1
    332c:	000b4d80 	call	b4d8 <__divdf3>
    3330:	800d883a 	mov	r6,r16
    3334:	880f883a 	mov	r7,r17
    3338:	1009883a 	mov	r4,r2
    333c:	180b883a 	mov	r5,r3
    3340:	000c96c0 	call	c96c <__subdf3>
    3344:	d9401017 	ldw	r5,64(sp)
    3348:	d9000f17 	ldw	r4,60(sp)
    334c:	102b883a 	mov	r21,r2
    3350:	d8c01215 	stw	r3,72(sp)
    3354:	000d2680 	call	d268 <__fixdfsi>
    3358:	1009883a 	mov	r4,r2
    335c:	1029883a 	mov	r20,r2
    3360:	000d2e80 	call	d2e8 <__floatsidf>
    3364:	d9000f17 	ldw	r4,60(sp)
    3368:	d9401017 	ldw	r5,64(sp)
    336c:	100d883a 	mov	r6,r2
    3370:	180f883a 	mov	r7,r3
    3374:	000c96c0 	call	c96c <__subdf3>
    3378:	1823883a 	mov	r17,r3
    337c:	d8c00717 	ldw	r3,28(sp)
    3380:	d9401217 	ldw	r5,72(sp)
    3384:	a2000c04 	addi	r8,r20,48
    3388:	1021883a 	mov	r16,r2
    338c:	1a000005 	stb	r8,0(r3)
    3390:	800d883a 	mov	r6,r16
    3394:	880f883a 	mov	r7,r17
    3398:	a809883a 	mov	r4,r21
    339c:	4029883a 	mov	r20,r8
    33a0:	000bf300 	call	bf30 <__gedf2>
    33a4:	00841d16 	blt	zero,r2,441c <_dtoa_r+0x15f4>
    33a8:	800d883a 	mov	r6,r16
    33ac:	880f883a 	mov	r7,r17
    33b0:	0009883a 	mov	r4,zero
    33b4:	014ffc34 	movhi	r5,16368
    33b8:	000c96c0 	call	c96c <__subdf3>
    33bc:	d9401217 	ldw	r5,72(sp)
    33c0:	100d883a 	mov	r6,r2
    33c4:	180f883a 	mov	r7,r3
    33c8:	a809883a 	mov	r4,r21
    33cc:	000bf300 	call	bf30 <__gedf2>
    33d0:	db001617 	ldw	r12,88(sp)
    33d4:	00840e16 	blt	zero,r2,4410 <_dtoa_r+0x15e8>
    33d8:	00800044 	movi	r2,1
    33dc:	13006b0e 	bge	r2,r12,358c <_dtoa_r+0x764>
    33e0:	d9000717 	ldw	r4,28(sp)
    33e4:	dd800f15 	stw	r22,60(sp)
    33e8:	dcc01015 	stw	r19,64(sp)
    33ec:	2319883a 	add	r12,r4,r12
    33f0:	dcc01217 	ldw	r19,72(sp)
    33f4:	602d883a 	mov	r22,r12
    33f8:	dc801215 	stw	r18,72(sp)
    33fc:	b825883a 	mov	r18,r23
    3400:	00000906 	br	3428 <_dtoa_r+0x600>
    3404:	000c96c0 	call	c96c <__subdf3>
    3408:	a80d883a 	mov	r6,r21
    340c:	980f883a 	mov	r7,r19
    3410:	1009883a 	mov	r4,r2
    3414:	180b883a 	mov	r5,r3
    3418:	000c00c0 	call	c00c <__ledf2>
    341c:	1003e816 	blt	r2,zero,43c0 <_dtoa_r+0x1598>
    3420:	b825883a 	mov	r18,r23
    3424:	bd83e926 	beq	r23,r22,43cc <_dtoa_r+0x15a4>
    3428:	a809883a 	mov	r4,r21
    342c:	980b883a 	mov	r5,r19
    3430:	000d883a 	mov	r6,zero
    3434:	01d00934 	movhi	r7,16420
    3438:	000c1000 	call	c100 <__muldf3>
    343c:	000d883a 	mov	r6,zero
    3440:	01d00934 	movhi	r7,16420
    3444:	8009883a 	mov	r4,r16
    3448:	880b883a 	mov	r5,r17
    344c:	102b883a 	mov	r21,r2
    3450:	1827883a 	mov	r19,r3
    3454:	000c1000 	call	c100 <__muldf3>
    3458:	180b883a 	mov	r5,r3
    345c:	1009883a 	mov	r4,r2
    3460:	1821883a 	mov	r16,r3
    3464:	1023883a 	mov	r17,r2
    3468:	000d2680 	call	d268 <__fixdfsi>
    346c:	1009883a 	mov	r4,r2
    3470:	1029883a 	mov	r20,r2
    3474:	000d2e80 	call	d2e8 <__floatsidf>
    3478:	8809883a 	mov	r4,r17
    347c:	800b883a 	mov	r5,r16
    3480:	100d883a 	mov	r6,r2
    3484:	180f883a 	mov	r7,r3
    3488:	000c96c0 	call	c96c <__subdf3>
    348c:	a5000c04 	addi	r20,r20,48
    3490:	a80d883a 	mov	r6,r21
    3494:	980f883a 	mov	r7,r19
    3498:	1009883a 	mov	r4,r2
    349c:	180b883a 	mov	r5,r3
    34a0:	95000005 	stb	r20,0(r18)
    34a4:	1021883a 	mov	r16,r2
    34a8:	1823883a 	mov	r17,r3
    34ac:	000c00c0 	call	c00c <__ledf2>
    34b0:	bdc00044 	addi	r23,r23,1
    34b4:	800d883a 	mov	r6,r16
    34b8:	880f883a 	mov	r7,r17
    34bc:	0009883a 	mov	r4,zero
    34c0:	014ffc34 	movhi	r5,16368
    34c4:	103fcf0e 	bge	r2,zero,3404 <_gp+0xfffe9098>
    34c8:	d8c01317 	ldw	r3,76(sp)
    34cc:	d8c00515 	stw	r3,20(sp)
    34d0:	d9400917 	ldw	r5,36(sp)
    34d4:	e009883a 	mov	r4,fp
    34d8:	0005f640 	call	5f64 <_Bfree>
    34dc:	d9000517 	ldw	r4,20(sp)
    34e0:	d9802317 	ldw	r6,140(sp)
    34e4:	d9c02517 	ldw	r7,148(sp)
    34e8:	b8000005 	stb	zero,0(r23)
    34ec:	20800044 	addi	r2,r4,1
    34f0:	30800015 	stw	r2,0(r6)
    34f4:	3802aa26 	beq	r7,zero,3fa0 <_dtoa_r+0x1178>
    34f8:	3dc00015 	stw	r23,0(r7)
    34fc:	d8800717 	ldw	r2,28(sp)
    3500:	003e7906 	br	2ee8 <_gp+0xfffe8b7c>
    3504:	00800434 	movhi	r2,16
    3508:	10bfffc4 	addi	r2,r2,-1
    350c:	88a2703a 	and	r17,r17,r2
    3510:	883e851e 	bne	r17,zero,2f28 <_gp+0xfffe8bbc>
    3514:	00800074 	movhi	r2,1
    3518:	10818c04 	addi	r2,r2,1584
    351c:	003e8406 	br	2f30 <_gp+0xfffe8bc4>
    3520:	10c00204 	addi	r3,r2,8
    3524:	003e8706 	br	2f44 <_gp+0xfffe8bd8>
    3528:	01400434 	movhi	r5,16
    352c:	297fffc4 	addi	r5,r5,-1
    3530:	994a703a 	and	r5,r19,r5
    3534:	9009883a 	mov	r4,r18
    3538:	843f0044 	addi	r16,r16,-1023
    353c:	294ffc34 	orhi	r5,r5,16368
    3540:	dd800217 	ldw	r22,8(sp)
    3544:	d8001115 	stw	zero,68(sp)
    3548:	003ea506 	br	2fe0 <_gp+0xfffe8c74>
    354c:	00800074 	movhi	r2,1
    3550:	10818304 	addi	r2,r2,1548
    3554:	003e6406 	br	2ee8 <_gp+0xfffe8b7c>
    3558:	e0001115 	stw	zero,68(fp)
    355c:	000b883a 	mov	r5,zero
    3560:	e009883a 	mov	r4,fp
    3564:	0005ebc0 	call	5ebc <_Balloc>
    3568:	01bfffc4 	movi	r6,-1
    356c:	01c00044 	movi	r7,1
    3570:	d8800715 	stw	r2,28(sp)
    3574:	d9800c15 	stw	r6,48(sp)
    3578:	e0801015 	stw	r2,64(fp)
    357c:	d8000315 	stw	zero,12(sp)
    3580:	d9c00b15 	stw	r7,44(sp)
    3584:	d9800615 	stw	r6,24(sp)
    3588:	d8002215 	stw	zero,136(sp)
    358c:	d8800117 	ldw	r2,4(sp)
    3590:	10008916 	blt	r2,zero,37b8 <_dtoa_r+0x990>
    3594:	d9000517 	ldw	r4,20(sp)
    3598:	00c00384 	movi	r3,14
    359c:	19008616 	blt	r3,r4,37b8 <_dtoa_r+0x990>
    35a0:	200490fa 	slli	r2,r4,3
    35a4:	00c00074 	movhi	r3,1
    35a8:	d9802217 	ldw	r6,136(sp)
    35ac:	18c1ab04 	addi	r3,r3,1708
    35b0:	1885883a 	add	r2,r3,r2
    35b4:	14000017 	ldw	r16,0(r2)
    35b8:	14400117 	ldw	r17,4(r2)
    35bc:	30016316 	blt	r6,zero,3b4c <_dtoa_r+0xd24>
    35c0:	800d883a 	mov	r6,r16
    35c4:	880f883a 	mov	r7,r17
    35c8:	9009883a 	mov	r4,r18
    35cc:	980b883a 	mov	r5,r19
    35d0:	000b4d80 	call	b4d8 <__divdf3>
    35d4:	180b883a 	mov	r5,r3
    35d8:	1009883a 	mov	r4,r2
    35dc:	000d2680 	call	d268 <__fixdfsi>
    35e0:	1009883a 	mov	r4,r2
    35e4:	102b883a 	mov	r21,r2
    35e8:	000d2e80 	call	d2e8 <__floatsidf>
    35ec:	800d883a 	mov	r6,r16
    35f0:	880f883a 	mov	r7,r17
    35f4:	1009883a 	mov	r4,r2
    35f8:	180b883a 	mov	r5,r3
    35fc:	000c1000 	call	c100 <__muldf3>
    3600:	100d883a 	mov	r6,r2
    3604:	180f883a 	mov	r7,r3
    3608:	9009883a 	mov	r4,r18
    360c:	980b883a 	mov	r5,r19
    3610:	000c96c0 	call	c96c <__subdf3>
    3614:	d9c00717 	ldw	r7,28(sp)
    3618:	1009883a 	mov	r4,r2
    361c:	a8800c04 	addi	r2,r21,48
    3620:	38800005 	stb	r2,0(r7)
    3624:	3dc00044 	addi	r23,r7,1
    3628:	d9c00617 	ldw	r7,24(sp)
    362c:	01800044 	movi	r6,1
    3630:	180b883a 	mov	r5,r3
    3634:	2005883a 	mov	r2,r4
    3638:	39803826 	beq	r7,r6,371c <_dtoa_r+0x8f4>
    363c:	000d883a 	mov	r6,zero
    3640:	01d00934 	movhi	r7,16420
    3644:	000c1000 	call	c100 <__muldf3>
    3648:	000d883a 	mov	r6,zero
    364c:	000f883a 	mov	r7,zero
    3650:	1009883a 	mov	r4,r2
    3654:	180b883a 	mov	r5,r3
    3658:	1025883a 	mov	r18,r2
    365c:	1827883a 	mov	r19,r3
    3660:	000bea80 	call	bea8 <__eqdf2>
    3664:	103f9a26 	beq	r2,zero,34d0 <_gp+0xfffe9164>
    3668:	d9c00617 	ldw	r7,24(sp)
    366c:	d8c00717 	ldw	r3,28(sp)
    3670:	b829883a 	mov	r20,r23
    3674:	38bfffc4 	addi	r2,r7,-1
    3678:	18ad883a 	add	r22,r3,r2
    367c:	00000a06 	br	36a8 <_dtoa_r+0x880>
    3680:	000c1000 	call	c100 <__muldf3>
    3684:	000d883a 	mov	r6,zero
    3688:	000f883a 	mov	r7,zero
    368c:	1009883a 	mov	r4,r2
    3690:	180b883a 	mov	r5,r3
    3694:	1025883a 	mov	r18,r2
    3698:	1827883a 	mov	r19,r3
    369c:	b829883a 	mov	r20,r23
    36a0:	000bea80 	call	bea8 <__eqdf2>
    36a4:	103f8a26 	beq	r2,zero,34d0 <_gp+0xfffe9164>
    36a8:	800d883a 	mov	r6,r16
    36ac:	880f883a 	mov	r7,r17
    36b0:	9009883a 	mov	r4,r18
    36b4:	980b883a 	mov	r5,r19
    36b8:	000b4d80 	call	b4d8 <__divdf3>
    36bc:	180b883a 	mov	r5,r3
    36c0:	1009883a 	mov	r4,r2
    36c4:	000d2680 	call	d268 <__fixdfsi>
    36c8:	1009883a 	mov	r4,r2
    36cc:	102b883a 	mov	r21,r2
    36d0:	000d2e80 	call	d2e8 <__floatsidf>
    36d4:	800d883a 	mov	r6,r16
    36d8:	880f883a 	mov	r7,r17
    36dc:	1009883a 	mov	r4,r2
    36e0:	180b883a 	mov	r5,r3
    36e4:	000c1000 	call	c100 <__muldf3>
    36e8:	100d883a 	mov	r6,r2
    36ec:	180f883a 	mov	r7,r3
    36f0:	9009883a 	mov	r4,r18
    36f4:	980b883a 	mov	r5,r19
    36f8:	000c96c0 	call	c96c <__subdf3>
    36fc:	aa000c04 	addi	r8,r21,48
    3700:	a2000005 	stb	r8,0(r20)
    3704:	000d883a 	mov	r6,zero
    3708:	01d00934 	movhi	r7,16420
    370c:	1009883a 	mov	r4,r2
    3710:	180b883a 	mov	r5,r3
    3714:	a5c00044 	addi	r23,r20,1
    3718:	b53fd91e 	bne	r22,r20,3680 <_gp+0xfffe9314>
    371c:	100d883a 	mov	r6,r2
    3720:	180f883a 	mov	r7,r3
    3724:	1009883a 	mov	r4,r2
    3728:	180b883a 	mov	r5,r3
    372c:	000ac2c0 	call	ac2c <__adddf3>
    3730:	100d883a 	mov	r6,r2
    3734:	180f883a 	mov	r7,r3
    3738:	8009883a 	mov	r4,r16
    373c:	880b883a 	mov	r5,r17
    3740:	1027883a 	mov	r19,r2
    3744:	1825883a 	mov	r18,r3
    3748:	000c00c0 	call	c00c <__ledf2>
    374c:	10000816 	blt	r2,zero,3770 <_dtoa_r+0x948>
    3750:	980d883a 	mov	r6,r19
    3754:	900f883a 	mov	r7,r18
    3758:	8009883a 	mov	r4,r16
    375c:	880b883a 	mov	r5,r17
    3760:	000bea80 	call	bea8 <__eqdf2>
    3764:	103f5a1e 	bne	r2,zero,34d0 <_gp+0xfffe9164>
    3768:	ad40004c 	andi	r21,r21,1
    376c:	a83f5826 	beq	r21,zero,34d0 <_gp+0xfffe9164>
    3770:	bd3fffc3 	ldbu	r20,-1(r23)
    3774:	b8bfffc4 	addi	r2,r23,-1
    3778:	1007883a 	mov	r3,r2
    377c:	01400e44 	movi	r5,57
    3780:	d9800717 	ldw	r6,28(sp)
    3784:	00000506 	br	379c <_dtoa_r+0x974>
    3788:	18ffffc4 	addi	r3,r3,-1
    378c:	11824726 	beq	r2,r6,40ac <_dtoa_r+0x1284>
    3790:	1d000003 	ldbu	r20,0(r3)
    3794:	102f883a 	mov	r23,r2
    3798:	10bfffc4 	addi	r2,r2,-1
    379c:	a1003fcc 	andi	r4,r20,255
    37a0:	2100201c 	xori	r4,r4,128
    37a4:	213fe004 	addi	r4,r4,-128
    37a8:	217ff726 	beq	r4,r5,3788 <_gp+0xfffe941c>
    37ac:	a2000044 	addi	r8,r20,1
    37b0:	12000005 	stb	r8,0(r2)
    37b4:	003f4606 	br	34d0 <_gp+0xfffe9164>
    37b8:	d9000b17 	ldw	r4,44(sp)
    37bc:	2000c826 	beq	r4,zero,3ae0 <_dtoa_r+0xcb8>
    37c0:	d9800317 	ldw	r6,12(sp)
    37c4:	00c00044 	movi	r3,1
    37c8:	1980f90e 	bge	r3,r6,3bb0 <_dtoa_r+0xd88>
    37cc:	d8800617 	ldw	r2,24(sp)
    37d0:	d8c00a17 	ldw	r3,40(sp)
    37d4:	157fffc4 	addi	r21,r2,-1
    37d8:	1d41f316 	blt	r3,r21,3fa8 <_dtoa_r+0x1180>
    37dc:	1d6bc83a 	sub	r21,r3,r21
    37e0:	d9c00617 	ldw	r7,24(sp)
    37e4:	3802aa16 	blt	r7,zero,4290 <_dtoa_r+0x1468>
    37e8:	dd000817 	ldw	r20,32(sp)
    37ec:	d8800617 	ldw	r2,24(sp)
    37f0:	d8c00817 	ldw	r3,32(sp)
    37f4:	01400044 	movi	r5,1
    37f8:	e009883a 	mov	r4,fp
    37fc:	1887883a 	add	r3,r3,r2
    3800:	d8c00815 	stw	r3,32(sp)
    3804:	b0ad883a 	add	r22,r22,r2
    3808:	00062f00 	call	62f0 <__i2b>
    380c:	1023883a 	mov	r17,r2
    3810:	a0000826 	beq	r20,zero,3834 <_dtoa_r+0xa0c>
    3814:	0580070e 	bge	zero,r22,3834 <_dtoa_r+0xa0c>
    3818:	a005883a 	mov	r2,r20
    381c:	b500b916 	blt	r22,r20,3b04 <_dtoa_r+0xcdc>
    3820:	d9000817 	ldw	r4,32(sp)
    3824:	a0a9c83a 	sub	r20,r20,r2
    3828:	b0adc83a 	sub	r22,r22,r2
    382c:	2089c83a 	sub	r4,r4,r2
    3830:	d9000815 	stw	r4,32(sp)
    3834:	d9800a17 	ldw	r6,40(sp)
    3838:	0181810e 	bge	zero,r6,3e40 <_dtoa_r+0x1018>
    383c:	d9c00b17 	ldw	r7,44(sp)
    3840:	3800b326 	beq	r7,zero,3b10 <_dtoa_r+0xce8>
    3844:	a800b226 	beq	r21,zero,3b10 <_dtoa_r+0xce8>
    3848:	880b883a 	mov	r5,r17
    384c:	a80d883a 	mov	r6,r21
    3850:	e009883a 	mov	r4,fp
    3854:	00065b80 	call	65b8 <__pow5mult>
    3858:	d9800917 	ldw	r6,36(sp)
    385c:	100b883a 	mov	r5,r2
    3860:	e009883a 	mov	r4,fp
    3864:	1023883a 	mov	r17,r2
    3868:	000632c0 	call	632c <__multiply>
    386c:	1021883a 	mov	r16,r2
    3870:	d8800a17 	ldw	r2,40(sp)
    3874:	d9400917 	ldw	r5,36(sp)
    3878:	e009883a 	mov	r4,fp
    387c:	1545c83a 	sub	r2,r2,r21
    3880:	d8800a15 	stw	r2,40(sp)
    3884:	0005f640 	call	5f64 <_Bfree>
    3888:	d8c00a17 	ldw	r3,40(sp)
    388c:	18009f1e 	bne	r3,zero,3b0c <_dtoa_r+0xce4>
    3890:	05c00044 	movi	r23,1
    3894:	e009883a 	mov	r4,fp
    3898:	b80b883a 	mov	r5,r23
    389c:	00062f00 	call	62f0 <__i2b>
    38a0:	d9000d17 	ldw	r4,52(sp)
    38a4:	102b883a 	mov	r21,r2
    38a8:	2000ce26 	beq	r4,zero,3be4 <_dtoa_r+0xdbc>
    38ac:	200d883a 	mov	r6,r4
    38b0:	100b883a 	mov	r5,r2
    38b4:	e009883a 	mov	r4,fp
    38b8:	00065b80 	call	65b8 <__pow5mult>
    38bc:	d9800317 	ldw	r6,12(sp)
    38c0:	102b883a 	mov	r21,r2
    38c4:	b981810e 	bge	r23,r6,3ecc <_dtoa_r+0x10a4>
    38c8:	0027883a 	mov	r19,zero
    38cc:	a8800417 	ldw	r2,16(r21)
    38d0:	05c00804 	movi	r23,32
    38d4:	10800104 	addi	r2,r2,4
    38d8:	1085883a 	add	r2,r2,r2
    38dc:	1085883a 	add	r2,r2,r2
    38e0:	a885883a 	add	r2,r21,r2
    38e4:	11000017 	ldw	r4,0(r2)
    38e8:	00061d80 	call	61d8 <__hi0bits>
    38ec:	b885c83a 	sub	r2,r23,r2
    38f0:	1585883a 	add	r2,r2,r22
    38f4:	108007cc 	andi	r2,r2,31
    38f8:	1000b326 	beq	r2,zero,3bc8 <_dtoa_r+0xda0>
    38fc:	00c00804 	movi	r3,32
    3900:	1887c83a 	sub	r3,r3,r2
    3904:	01000104 	movi	r4,4
    3908:	20c2cd0e 	bge	r4,r3,4440 <_dtoa_r+0x1618>
    390c:	00c00704 	movi	r3,28
    3910:	1885c83a 	sub	r2,r3,r2
    3914:	d8c00817 	ldw	r3,32(sp)
    3918:	a0a9883a 	add	r20,r20,r2
    391c:	b0ad883a 	add	r22,r22,r2
    3920:	1887883a 	add	r3,r3,r2
    3924:	d8c00815 	stw	r3,32(sp)
    3928:	d9800817 	ldw	r6,32(sp)
    392c:	0180040e 	bge	zero,r6,3940 <_dtoa_r+0xb18>
    3930:	800b883a 	mov	r5,r16
    3934:	e009883a 	mov	r4,fp
    3938:	00066f80 	call	66f8 <__lshift>
    393c:	1021883a 	mov	r16,r2
    3940:	0580050e 	bge	zero,r22,3958 <_dtoa_r+0xb30>
    3944:	a80b883a 	mov	r5,r21
    3948:	b00d883a 	mov	r6,r22
    394c:	e009883a 	mov	r4,fp
    3950:	00066f80 	call	66f8 <__lshift>
    3954:	102b883a 	mov	r21,r2
    3958:	d9c00e17 	ldw	r7,56(sp)
    395c:	3801211e 	bne	r7,zero,3de4 <_dtoa_r+0xfbc>
    3960:	d9800617 	ldw	r6,24(sp)
    3964:	0181380e 	bge	zero,r6,3e48 <_dtoa_r+0x1020>
    3968:	d8c00b17 	ldw	r3,44(sp)
    396c:	1800ab1e 	bne	r3,zero,3c1c <_dtoa_r+0xdf4>
    3970:	dc800717 	ldw	r18,28(sp)
    3974:	dcc00617 	ldw	r19,24(sp)
    3978:	9029883a 	mov	r20,r18
    397c:	00000206 	br	3988 <_dtoa_r+0xb60>
    3980:	0005f8c0 	call	5f8c <__multadd>
    3984:	1021883a 	mov	r16,r2
    3988:	a80b883a 	mov	r5,r21
    398c:	8009883a 	mov	r4,r16
    3990:	0002c000 	call	2c00 <quorem>
    3994:	10800c04 	addi	r2,r2,48
    3998:	90800005 	stb	r2,0(r18)
    399c:	94800044 	addi	r18,r18,1
    39a0:	9507c83a 	sub	r3,r18,r20
    39a4:	000f883a 	mov	r7,zero
    39a8:	01800284 	movi	r6,10
    39ac:	800b883a 	mov	r5,r16
    39b0:	e009883a 	mov	r4,fp
    39b4:	1cfff216 	blt	r3,r19,3980 <_gp+0xfffe9614>
    39b8:	1011883a 	mov	r8,r2
    39bc:	d8800617 	ldw	r2,24(sp)
    39c0:	0082370e 	bge	zero,r2,42a0 <_dtoa_r+0x1478>
    39c4:	d9000717 	ldw	r4,28(sp)
    39c8:	0025883a 	mov	r18,zero
    39cc:	20af883a 	add	r23,r4,r2
    39d0:	01800044 	movi	r6,1
    39d4:	800b883a 	mov	r5,r16
    39d8:	e009883a 	mov	r4,fp
    39dc:	da001715 	stw	r8,92(sp)
    39e0:	00066f80 	call	66f8 <__lshift>
    39e4:	a80b883a 	mov	r5,r21
    39e8:	1009883a 	mov	r4,r2
    39ec:	d8800915 	stw	r2,36(sp)
    39f0:	00068400 	call	6840 <__mcmp>
    39f4:	da001717 	ldw	r8,92(sp)
    39f8:	0081800e 	bge	zero,r2,3ffc <_dtoa_r+0x11d4>
    39fc:	b93fffc3 	ldbu	r4,-1(r23)
    3a00:	b8bfffc4 	addi	r2,r23,-1
    3a04:	1007883a 	mov	r3,r2
    3a08:	01800e44 	movi	r6,57
    3a0c:	d9c00717 	ldw	r7,28(sp)
    3a10:	00000506 	br	3a28 <_dtoa_r+0xc00>
    3a14:	18ffffc4 	addi	r3,r3,-1
    3a18:	11c12326 	beq	r2,r7,3ea8 <_dtoa_r+0x1080>
    3a1c:	19000003 	ldbu	r4,0(r3)
    3a20:	102f883a 	mov	r23,r2
    3a24:	10bfffc4 	addi	r2,r2,-1
    3a28:	21403fcc 	andi	r5,r4,255
    3a2c:	2940201c 	xori	r5,r5,128
    3a30:	297fe004 	addi	r5,r5,-128
    3a34:	29bff726 	beq	r5,r6,3a14 <_gp+0xfffe96a8>
    3a38:	21000044 	addi	r4,r4,1
    3a3c:	11000005 	stb	r4,0(r2)
    3a40:	a80b883a 	mov	r5,r21
    3a44:	e009883a 	mov	r4,fp
    3a48:	0005f640 	call	5f64 <_Bfree>
    3a4c:	883ea026 	beq	r17,zero,34d0 <_gp+0xfffe9164>
    3a50:	90000426 	beq	r18,zero,3a64 <_dtoa_r+0xc3c>
    3a54:	94400326 	beq	r18,r17,3a64 <_dtoa_r+0xc3c>
    3a58:	900b883a 	mov	r5,r18
    3a5c:	e009883a 	mov	r4,fp
    3a60:	0005f640 	call	5f64 <_Bfree>
    3a64:	880b883a 	mov	r5,r17
    3a68:	e009883a 	mov	r4,fp
    3a6c:	0005f640 	call	5f64 <_Bfree>
    3a70:	003e9706 	br	34d0 <_gp+0xfffe9164>
    3a74:	01800044 	movi	r6,1
    3a78:	d9800e15 	stw	r6,56(sp)
    3a7c:	003d9606 	br	30d8 <_gp+0xfffe8d6c>
    3a80:	d8800817 	ldw	r2,32(sp)
    3a84:	d8c00517 	ldw	r3,20(sp)
    3a88:	d8000d15 	stw	zero,52(sp)
    3a8c:	10c5c83a 	sub	r2,r2,r3
    3a90:	00c9c83a 	sub	r4,zero,r3
    3a94:	d8800815 	stw	r2,32(sp)
    3a98:	d9000a15 	stw	r4,40(sp)
    3a9c:	003d9706 	br	30fc <_gp+0xfffe8d90>
    3aa0:	05adc83a 	sub	r22,zero,r22
    3aa4:	dd800815 	stw	r22,32(sp)
    3aa8:	002d883a 	mov	r22,zero
    3aac:	003d8e06 	br	30e8 <_gp+0xfffe8d7c>
    3ab0:	d9000517 	ldw	r4,20(sp)
    3ab4:	000d2e80 	call	d2e8 <__floatsidf>
    3ab8:	100d883a 	mov	r6,r2
    3abc:	180f883a 	mov	r7,r3
    3ac0:	a009883a 	mov	r4,r20
    3ac4:	880b883a 	mov	r5,r17
    3ac8:	000bea80 	call	bea8 <__eqdf2>
    3acc:	103d7126 	beq	r2,zero,3094 <_gp+0xfffe8d28>
    3ad0:	d9c00517 	ldw	r7,20(sp)
    3ad4:	39ffffc4 	addi	r7,r7,-1
    3ad8:	d9c00515 	stw	r7,20(sp)
    3adc:	003d6d06 	br	3094 <_gp+0xfffe8d28>
    3ae0:	dd400a17 	ldw	r21,40(sp)
    3ae4:	dd000817 	ldw	r20,32(sp)
    3ae8:	0023883a 	mov	r17,zero
    3aec:	003f4806 	br	3810 <_gp+0xfffe94a4>
    3af0:	10e3c83a 	sub	r17,r2,r3
    3af4:	9448983a 	sll	r4,r18,r17
    3af8:	003d3206 	br	2fc4 <_gp+0xfffe8c58>
    3afc:	d8000e15 	stw	zero,56(sp)
    3b00:	003d7506 	br	30d8 <_gp+0xfffe8d6c>
    3b04:	b005883a 	mov	r2,r22
    3b08:	003f4506 	br	3820 <_gp+0xfffe94b4>
    3b0c:	dc000915 	stw	r16,36(sp)
    3b10:	d9800a17 	ldw	r6,40(sp)
    3b14:	d9400917 	ldw	r5,36(sp)
    3b18:	e009883a 	mov	r4,fp
    3b1c:	00065b80 	call	65b8 <__pow5mult>
    3b20:	1021883a 	mov	r16,r2
    3b24:	003f5a06 	br	3890 <_gp+0xfffe9524>
    3b28:	01c00044 	movi	r7,1
    3b2c:	d9c00b15 	stw	r7,44(sp)
    3b30:	d8802217 	ldw	r2,136(sp)
    3b34:	0081280e 	bge	zero,r2,3fd8 <_dtoa_r+0x11b0>
    3b38:	100d883a 	mov	r6,r2
    3b3c:	1021883a 	mov	r16,r2
    3b40:	d8800c15 	stw	r2,48(sp)
    3b44:	d8800615 	stw	r2,24(sp)
    3b48:	003d8806 	br	316c <_gp+0xfffe8e00>
    3b4c:	d8800617 	ldw	r2,24(sp)
    3b50:	00be9b16 	blt	zero,r2,35c0 <_gp+0xfffe9254>
    3b54:	10010f1e 	bne	r2,zero,3f94 <_dtoa_r+0x116c>
    3b58:	880b883a 	mov	r5,r17
    3b5c:	000d883a 	mov	r6,zero
    3b60:	01d00534 	movhi	r7,16404
    3b64:	8009883a 	mov	r4,r16
    3b68:	000c1000 	call	c100 <__muldf3>
    3b6c:	900d883a 	mov	r6,r18
    3b70:	980f883a 	mov	r7,r19
    3b74:	1009883a 	mov	r4,r2
    3b78:	180b883a 	mov	r5,r3
    3b7c:	000bf300 	call	bf30 <__gedf2>
    3b80:	002b883a 	mov	r21,zero
    3b84:	0023883a 	mov	r17,zero
    3b88:	1000bf16 	blt	r2,zero,3e88 <_dtoa_r+0x1060>
    3b8c:	d9802217 	ldw	r6,136(sp)
    3b90:	ddc00717 	ldw	r23,28(sp)
    3b94:	018c303a 	nor	r6,zero,r6
    3b98:	d9800515 	stw	r6,20(sp)
    3b9c:	a80b883a 	mov	r5,r21
    3ba0:	e009883a 	mov	r4,fp
    3ba4:	0005f640 	call	5f64 <_Bfree>
    3ba8:	883e4926 	beq	r17,zero,34d0 <_gp+0xfffe9164>
    3bac:	003fad06 	br	3a64 <_gp+0xfffe96f8>
    3bb0:	d9c01117 	ldw	r7,68(sp)
    3bb4:	3801bc26 	beq	r7,zero,42a8 <_dtoa_r+0x1480>
    3bb8:	10810cc4 	addi	r2,r2,1075
    3bbc:	dd400a17 	ldw	r21,40(sp)
    3bc0:	dd000817 	ldw	r20,32(sp)
    3bc4:	003f0a06 	br	37f0 <_gp+0xfffe9484>
    3bc8:	00800704 	movi	r2,28
    3bcc:	d9000817 	ldw	r4,32(sp)
    3bd0:	a0a9883a 	add	r20,r20,r2
    3bd4:	b0ad883a 	add	r22,r22,r2
    3bd8:	2089883a 	add	r4,r4,r2
    3bdc:	d9000815 	stw	r4,32(sp)
    3be0:	003f5106 	br	3928 <_gp+0xfffe95bc>
    3be4:	d8c00317 	ldw	r3,12(sp)
    3be8:	b8c1fc0e 	bge	r23,r3,43dc <_dtoa_r+0x15b4>
    3bec:	0027883a 	mov	r19,zero
    3bf0:	b805883a 	mov	r2,r23
    3bf4:	003f3e06 	br	38f0 <_gp+0xfffe9584>
    3bf8:	880b883a 	mov	r5,r17
    3bfc:	e009883a 	mov	r4,fp
    3c00:	000f883a 	mov	r7,zero
    3c04:	01800284 	movi	r6,10
    3c08:	0005f8c0 	call	5f8c <__multadd>
    3c0c:	d9000c17 	ldw	r4,48(sp)
    3c10:	1023883a 	mov	r17,r2
    3c14:	0102040e 	bge	zero,r4,4428 <_dtoa_r+0x1600>
    3c18:	d9000615 	stw	r4,24(sp)
    3c1c:	0500050e 	bge	zero,r20,3c34 <_dtoa_r+0xe0c>
    3c20:	880b883a 	mov	r5,r17
    3c24:	a00d883a 	mov	r6,r20
    3c28:	e009883a 	mov	r4,fp
    3c2c:	00066f80 	call	66f8 <__lshift>
    3c30:	1023883a 	mov	r17,r2
    3c34:	9801241e 	bne	r19,zero,40c8 <_dtoa_r+0x12a0>
    3c38:	8829883a 	mov	r20,r17
    3c3c:	d9000617 	ldw	r4,24(sp)
    3c40:	dcc00717 	ldw	r19,28(sp)
    3c44:	9480004c 	andi	r18,r18,1
    3c48:	20bfffc4 	addi	r2,r4,-1
    3c4c:	9885883a 	add	r2,r19,r2
    3c50:	d8800415 	stw	r2,16(sp)
    3c54:	dc800615 	stw	r18,24(sp)
    3c58:	a80b883a 	mov	r5,r21
    3c5c:	8009883a 	mov	r4,r16
    3c60:	0002c000 	call	2c00 <quorem>
    3c64:	880b883a 	mov	r5,r17
    3c68:	8009883a 	mov	r4,r16
    3c6c:	102f883a 	mov	r23,r2
    3c70:	00068400 	call	6840 <__mcmp>
    3c74:	a80b883a 	mov	r5,r21
    3c78:	a00d883a 	mov	r6,r20
    3c7c:	e009883a 	mov	r4,fp
    3c80:	102d883a 	mov	r22,r2
    3c84:	00068a00 	call	68a0 <__mdiff>
    3c88:	1007883a 	mov	r3,r2
    3c8c:	10800317 	ldw	r2,12(r2)
    3c90:	bc800c04 	addi	r18,r23,48
    3c94:	180b883a 	mov	r5,r3
    3c98:	10004e1e 	bne	r2,zero,3dd4 <_dtoa_r+0xfac>
    3c9c:	8009883a 	mov	r4,r16
    3ca0:	d8c01615 	stw	r3,88(sp)
    3ca4:	00068400 	call	6840 <__mcmp>
    3ca8:	d8c01617 	ldw	r3,88(sp)
    3cac:	e009883a 	mov	r4,fp
    3cb0:	d8801615 	stw	r2,88(sp)
    3cb4:	180b883a 	mov	r5,r3
    3cb8:	0005f640 	call	5f64 <_Bfree>
    3cbc:	d8801617 	ldw	r2,88(sp)
    3cc0:	1000041e 	bne	r2,zero,3cd4 <_dtoa_r+0xeac>
    3cc4:	d9800317 	ldw	r6,12(sp)
    3cc8:	3000021e 	bne	r6,zero,3cd4 <_dtoa_r+0xeac>
    3ccc:	d8c00617 	ldw	r3,24(sp)
    3cd0:	18003726 	beq	r3,zero,3db0 <_dtoa_r+0xf88>
    3cd4:	b0002016 	blt	r22,zero,3d58 <_dtoa_r+0xf30>
    3cd8:	b000041e 	bne	r22,zero,3cec <_dtoa_r+0xec4>
    3cdc:	d9000317 	ldw	r4,12(sp)
    3ce0:	2000021e 	bne	r4,zero,3cec <_dtoa_r+0xec4>
    3ce4:	d8c00617 	ldw	r3,24(sp)
    3ce8:	18001b26 	beq	r3,zero,3d58 <_dtoa_r+0xf30>
    3cec:	00810716 	blt	zero,r2,410c <_dtoa_r+0x12e4>
    3cf0:	d8c00417 	ldw	r3,16(sp)
    3cf4:	9d800044 	addi	r22,r19,1
    3cf8:	9c800005 	stb	r18,0(r19)
    3cfc:	b02f883a 	mov	r23,r22
    3d00:	98c10626 	beq	r19,r3,411c <_dtoa_r+0x12f4>
    3d04:	800b883a 	mov	r5,r16
    3d08:	000f883a 	mov	r7,zero
    3d0c:	01800284 	movi	r6,10
    3d10:	e009883a 	mov	r4,fp
    3d14:	0005f8c0 	call	5f8c <__multadd>
    3d18:	1021883a 	mov	r16,r2
    3d1c:	000f883a 	mov	r7,zero
    3d20:	01800284 	movi	r6,10
    3d24:	880b883a 	mov	r5,r17
    3d28:	e009883a 	mov	r4,fp
    3d2c:	8d002526 	beq	r17,r20,3dc4 <_dtoa_r+0xf9c>
    3d30:	0005f8c0 	call	5f8c <__multadd>
    3d34:	a00b883a 	mov	r5,r20
    3d38:	000f883a 	mov	r7,zero
    3d3c:	01800284 	movi	r6,10
    3d40:	e009883a 	mov	r4,fp
    3d44:	1023883a 	mov	r17,r2
    3d48:	0005f8c0 	call	5f8c <__multadd>
    3d4c:	1029883a 	mov	r20,r2
    3d50:	b027883a 	mov	r19,r22
    3d54:	003fc006 	br	3c58 <_gp+0xfffe98ec>
    3d58:	9011883a 	mov	r8,r18
    3d5c:	00800e0e 	bge	zero,r2,3d98 <_dtoa_r+0xf70>
    3d60:	800b883a 	mov	r5,r16
    3d64:	01800044 	movi	r6,1
    3d68:	e009883a 	mov	r4,fp
    3d6c:	da001715 	stw	r8,92(sp)
    3d70:	00066f80 	call	66f8 <__lshift>
    3d74:	a80b883a 	mov	r5,r21
    3d78:	1009883a 	mov	r4,r2
    3d7c:	1021883a 	mov	r16,r2
    3d80:	00068400 	call	6840 <__mcmp>
    3d84:	da001717 	ldw	r8,92(sp)
    3d88:	0081960e 	bge	zero,r2,43e4 <_dtoa_r+0x15bc>
    3d8c:	00800e44 	movi	r2,57
    3d90:	40817026 	beq	r8,r2,4354 <_dtoa_r+0x152c>
    3d94:	ba000c44 	addi	r8,r23,49
    3d98:	8825883a 	mov	r18,r17
    3d9c:	9dc00044 	addi	r23,r19,1
    3da0:	9a000005 	stb	r8,0(r19)
    3da4:	a023883a 	mov	r17,r20
    3da8:	dc000915 	stw	r16,36(sp)
    3dac:	003f2406 	br	3a40 <_gp+0xfffe96d4>
    3db0:	00800e44 	movi	r2,57
    3db4:	9011883a 	mov	r8,r18
    3db8:	90816626 	beq	r18,r2,4354 <_dtoa_r+0x152c>
    3dbc:	05bff516 	blt	zero,r22,3d94 <_gp+0xfffe9a28>
    3dc0:	003ff506 	br	3d98 <_gp+0xfffe9a2c>
    3dc4:	0005f8c0 	call	5f8c <__multadd>
    3dc8:	1023883a 	mov	r17,r2
    3dcc:	1029883a 	mov	r20,r2
    3dd0:	003fdf06 	br	3d50 <_gp+0xfffe99e4>
    3dd4:	e009883a 	mov	r4,fp
    3dd8:	0005f640 	call	5f64 <_Bfree>
    3ddc:	00800044 	movi	r2,1
    3de0:	003fbc06 	br	3cd4 <_gp+0xfffe9968>
    3de4:	a80b883a 	mov	r5,r21
    3de8:	8009883a 	mov	r4,r16
    3dec:	00068400 	call	6840 <__mcmp>
    3df0:	103edb0e 	bge	r2,zero,3960 <_gp+0xfffe95f4>
    3df4:	800b883a 	mov	r5,r16
    3df8:	000f883a 	mov	r7,zero
    3dfc:	01800284 	movi	r6,10
    3e00:	e009883a 	mov	r4,fp
    3e04:	0005f8c0 	call	5f8c <__multadd>
    3e08:	1021883a 	mov	r16,r2
    3e0c:	d8800517 	ldw	r2,20(sp)
    3e10:	d8c00b17 	ldw	r3,44(sp)
    3e14:	10bfffc4 	addi	r2,r2,-1
    3e18:	d8800515 	stw	r2,20(sp)
    3e1c:	183f761e 	bne	r3,zero,3bf8 <_gp+0xfffe988c>
    3e20:	d9000c17 	ldw	r4,48(sp)
    3e24:	0101730e 	bge	zero,r4,43f4 <_dtoa_r+0x15cc>
    3e28:	d9000615 	stw	r4,24(sp)
    3e2c:	003ed006 	br	3970 <_gp+0xfffe9604>
    3e30:	00800084 	movi	r2,2
    3e34:	3081861e 	bne	r6,r2,4450 <_dtoa_r+0x1628>
    3e38:	d8000b15 	stw	zero,44(sp)
    3e3c:	003f3c06 	br	3b30 <_gp+0xfffe97c4>
    3e40:	dc000917 	ldw	r16,36(sp)
    3e44:	003e9206 	br	3890 <_gp+0xfffe9524>
    3e48:	d9c00317 	ldw	r7,12(sp)
    3e4c:	00800084 	movi	r2,2
    3e50:	11fec50e 	bge	r2,r7,3968 <_gp+0xfffe95fc>
    3e54:	d9000617 	ldw	r4,24(sp)
    3e58:	20013c1e 	bne	r4,zero,434c <_dtoa_r+0x1524>
    3e5c:	a80b883a 	mov	r5,r21
    3e60:	000f883a 	mov	r7,zero
    3e64:	01800144 	movi	r6,5
    3e68:	e009883a 	mov	r4,fp
    3e6c:	0005f8c0 	call	5f8c <__multadd>
    3e70:	100b883a 	mov	r5,r2
    3e74:	8009883a 	mov	r4,r16
    3e78:	102b883a 	mov	r21,r2
    3e7c:	00068400 	call	6840 <__mcmp>
    3e80:	dc000915 	stw	r16,36(sp)
    3e84:	00bf410e 	bge	zero,r2,3b8c <_gp+0xfffe9820>
    3e88:	d9c00717 	ldw	r7,28(sp)
    3e8c:	00800c44 	movi	r2,49
    3e90:	38800005 	stb	r2,0(r7)
    3e94:	d8800517 	ldw	r2,20(sp)
    3e98:	3dc00044 	addi	r23,r7,1
    3e9c:	10800044 	addi	r2,r2,1
    3ea0:	d8800515 	stw	r2,20(sp)
    3ea4:	003f3d06 	br	3b9c <_gp+0xfffe9830>
    3ea8:	d9800517 	ldw	r6,20(sp)
    3eac:	d9c00717 	ldw	r7,28(sp)
    3eb0:	00800c44 	movi	r2,49
    3eb4:	31800044 	addi	r6,r6,1
    3eb8:	d9800515 	stw	r6,20(sp)
    3ebc:	38800005 	stb	r2,0(r7)
    3ec0:	003edf06 	br	3a40 <_gp+0xfffe96d4>
    3ec4:	d8000b15 	stw	zero,44(sp)
    3ec8:	003c9f06 	br	3148 <_gp+0xfffe8ddc>
    3ecc:	903e7e1e 	bne	r18,zero,38c8 <_gp+0xfffe955c>
    3ed0:	00800434 	movhi	r2,16
    3ed4:	10bfffc4 	addi	r2,r2,-1
    3ed8:	9884703a 	and	r2,r19,r2
    3edc:	1000ea1e 	bne	r2,zero,4288 <_dtoa_r+0x1460>
    3ee0:	9cdffc2c 	andhi	r19,r19,32752
    3ee4:	9800e826 	beq	r19,zero,4288 <_dtoa_r+0x1460>
    3ee8:	d9c00817 	ldw	r7,32(sp)
    3eec:	b5800044 	addi	r22,r22,1
    3ef0:	04c00044 	movi	r19,1
    3ef4:	39c00044 	addi	r7,r7,1
    3ef8:	d9c00815 	stw	r7,32(sp)
    3efc:	d8800d17 	ldw	r2,52(sp)
    3f00:	103e721e 	bne	r2,zero,38cc <_gp+0xfffe9560>
    3f04:	00800044 	movi	r2,1
    3f08:	003e7906 	br	38f0 <_gp+0xfffe9584>
    3f0c:	8009883a 	mov	r4,r16
    3f10:	000d2e80 	call	d2e8 <__floatsidf>
    3f14:	d9800f17 	ldw	r6,60(sp)
    3f18:	d9c01017 	ldw	r7,64(sp)
    3f1c:	1009883a 	mov	r4,r2
    3f20:	180b883a 	mov	r5,r3
    3f24:	000c1000 	call	c100 <__muldf3>
    3f28:	000d883a 	mov	r6,zero
    3f2c:	01d00734 	movhi	r7,16412
    3f30:	1009883a 	mov	r4,r2
    3f34:	180b883a 	mov	r5,r3
    3f38:	000ac2c0 	call	ac2c <__adddf3>
    3f3c:	047f3034 	movhi	r17,64704
    3f40:	1021883a 	mov	r16,r2
    3f44:	1c63883a 	add	r17,r3,r17
    3f48:	d9000f17 	ldw	r4,60(sp)
    3f4c:	d9401017 	ldw	r5,64(sp)
    3f50:	000d883a 	mov	r6,zero
    3f54:	01d00534 	movhi	r7,16404
    3f58:	000c96c0 	call	c96c <__subdf3>
    3f5c:	800d883a 	mov	r6,r16
    3f60:	880f883a 	mov	r7,r17
    3f64:	1009883a 	mov	r4,r2
    3f68:	180b883a 	mov	r5,r3
    3f6c:	102b883a 	mov	r21,r2
    3f70:	1829883a 	mov	r20,r3
    3f74:	000bf300 	call	bf30 <__gedf2>
    3f78:	00806c16 	blt	zero,r2,412c <_dtoa_r+0x1304>
    3f7c:	89e0003c 	xorhi	r7,r17,32768
    3f80:	800d883a 	mov	r6,r16
    3f84:	a809883a 	mov	r4,r21
    3f88:	a00b883a 	mov	r5,r20
    3f8c:	000c00c0 	call	c00c <__ledf2>
    3f90:	103d7e0e 	bge	r2,zero,358c <_gp+0xfffe9220>
    3f94:	002b883a 	mov	r21,zero
    3f98:	0023883a 	mov	r17,zero
    3f9c:	003efb06 	br	3b8c <_gp+0xfffe9820>
    3fa0:	d8800717 	ldw	r2,28(sp)
    3fa4:	003bd006 	br	2ee8 <_gp+0xfffe8b7c>
    3fa8:	d9000a17 	ldw	r4,40(sp)
    3fac:	d9800d17 	ldw	r6,52(sp)
    3fb0:	dd400a15 	stw	r21,40(sp)
    3fb4:	a905c83a 	sub	r2,r21,r4
    3fb8:	308d883a 	add	r6,r6,r2
    3fbc:	d9800d15 	stw	r6,52(sp)
    3fc0:	002b883a 	mov	r21,zero
    3fc4:	003e0606 	br	37e0 <_gp+0xfffe9474>
    3fc8:	9023883a 	mov	r17,r18
    3fcc:	9829883a 	mov	r20,r19
    3fd0:	04000084 	movi	r16,2
    3fd4:	003c9206 	br	3220 <_gp+0xfffe8eb4>
    3fd8:	04000044 	movi	r16,1
    3fdc:	dc000c15 	stw	r16,48(sp)
    3fe0:	dc000615 	stw	r16,24(sp)
    3fe4:	dc002215 	stw	r16,136(sp)
    3fe8:	e0001115 	stw	zero,68(fp)
    3fec:	000b883a 	mov	r5,zero
    3ff0:	003c6906 	br	3198 <_gp+0xfffe8e2c>
    3ff4:	3021883a 	mov	r16,r6
    3ff8:	003ffb06 	br	3fe8 <_gp+0xfffe9c7c>
    3ffc:	1000021e 	bne	r2,zero,4008 <_dtoa_r+0x11e0>
    4000:	4200004c 	andi	r8,r8,1
    4004:	403e7d1e 	bne	r8,zero,39fc <_gp+0xfffe9690>
    4008:	01000c04 	movi	r4,48
    400c:	00000106 	br	4014 <_dtoa_r+0x11ec>
    4010:	102f883a 	mov	r23,r2
    4014:	b8bfffc4 	addi	r2,r23,-1
    4018:	10c00007 	ldb	r3,0(r2)
    401c:	193ffc26 	beq	r3,r4,4010 <_gp+0xfffe9ca4>
    4020:	003e8706 	br	3a40 <_gp+0xfffe96d4>
    4024:	d8800517 	ldw	r2,20(sp)
    4028:	00a3c83a 	sub	r17,zero,r2
    402c:	8800a426 	beq	r17,zero,42c0 <_dtoa_r+0x1498>
    4030:	888003cc 	andi	r2,r17,15
    4034:	100490fa 	slli	r2,r2,3
    4038:	00c00074 	movhi	r3,1
    403c:	18c1ab04 	addi	r3,r3,1708
    4040:	1885883a 	add	r2,r3,r2
    4044:	11800017 	ldw	r6,0(r2)
    4048:	11c00117 	ldw	r7,4(r2)
    404c:	9009883a 	mov	r4,r18
    4050:	980b883a 	mov	r5,r19
    4054:	8823d13a 	srai	r17,r17,4
    4058:	000c1000 	call	c100 <__muldf3>
    405c:	d8800f15 	stw	r2,60(sp)
    4060:	d8c01015 	stw	r3,64(sp)
    4064:	8800e826 	beq	r17,zero,4408 <_dtoa_r+0x15e0>
    4068:	05000074 	movhi	r20,1
    406c:	a501a104 	addi	r20,r20,1668
    4070:	04000084 	movi	r16,2
    4074:	8980004c 	andi	r6,r17,1
    4078:	1009883a 	mov	r4,r2
    407c:	8823d07a 	srai	r17,r17,1
    4080:	180b883a 	mov	r5,r3
    4084:	30000426 	beq	r6,zero,4098 <_dtoa_r+0x1270>
    4088:	a1800017 	ldw	r6,0(r20)
    408c:	a1c00117 	ldw	r7,4(r20)
    4090:	84000044 	addi	r16,r16,1
    4094:	000c1000 	call	c100 <__muldf3>
    4098:	a5000204 	addi	r20,r20,8
    409c:	883ff51e 	bne	r17,zero,4074 <_gp+0xfffe9d08>
    40a0:	d8800f15 	stw	r2,60(sp)
    40a4:	d8c01015 	stw	r3,64(sp)
    40a8:	003c7606 	br	3284 <_gp+0xfffe8f18>
    40ac:	00c00c04 	movi	r3,48
    40b0:	10c00005 	stb	r3,0(r2)
    40b4:	d8c00517 	ldw	r3,20(sp)
    40b8:	bd3fffc3 	ldbu	r20,-1(r23)
    40bc:	18c00044 	addi	r3,r3,1
    40c0:	d8c00515 	stw	r3,20(sp)
    40c4:	003db906 	br	37ac <_gp+0xfffe9440>
    40c8:	89400117 	ldw	r5,4(r17)
    40cc:	e009883a 	mov	r4,fp
    40d0:	0005ebc0 	call	5ebc <_Balloc>
    40d4:	89800417 	ldw	r6,16(r17)
    40d8:	89400304 	addi	r5,r17,12
    40dc:	11000304 	addi	r4,r2,12
    40e0:	31800084 	addi	r6,r6,2
    40e4:	318d883a 	add	r6,r6,r6
    40e8:	318d883a 	add	r6,r6,r6
    40ec:	1027883a 	mov	r19,r2
    40f0:	0005c4c0 	call	5c4c <memcpy>
    40f4:	01800044 	movi	r6,1
    40f8:	980b883a 	mov	r5,r19
    40fc:	e009883a 	mov	r4,fp
    4100:	00066f80 	call	66f8 <__lshift>
    4104:	1029883a 	mov	r20,r2
    4108:	003ecc06 	br	3c3c <_gp+0xfffe98d0>
    410c:	00800e44 	movi	r2,57
    4110:	90809026 	beq	r18,r2,4354 <_dtoa_r+0x152c>
    4114:	92000044 	addi	r8,r18,1
    4118:	003f1f06 	br	3d98 <_gp+0xfffe9a2c>
    411c:	9011883a 	mov	r8,r18
    4120:	8825883a 	mov	r18,r17
    4124:	a023883a 	mov	r17,r20
    4128:	003e2906 	br	39d0 <_gp+0xfffe9664>
    412c:	002b883a 	mov	r21,zero
    4130:	0023883a 	mov	r17,zero
    4134:	003f5406 	br	3e88 <_gp+0xfffe9b1c>
    4138:	61bfffc4 	addi	r6,r12,-1
    413c:	300490fa 	slli	r2,r6,3
    4140:	00c00074 	movhi	r3,1
    4144:	18c1ab04 	addi	r3,r3,1708
    4148:	1885883a 	add	r2,r3,r2
    414c:	11000017 	ldw	r4,0(r2)
    4150:	11400117 	ldw	r5,4(r2)
    4154:	d8800717 	ldw	r2,28(sp)
    4158:	880f883a 	mov	r7,r17
    415c:	d9801215 	stw	r6,72(sp)
    4160:	800d883a 	mov	r6,r16
    4164:	db001615 	stw	r12,88(sp)
    4168:	15c00044 	addi	r23,r2,1
    416c:	000c1000 	call	c100 <__muldf3>
    4170:	d9401017 	ldw	r5,64(sp)
    4174:	d9000f17 	ldw	r4,60(sp)
    4178:	d8c01515 	stw	r3,84(sp)
    417c:	d8801415 	stw	r2,80(sp)
    4180:	000d2680 	call	d268 <__fixdfsi>
    4184:	1009883a 	mov	r4,r2
    4188:	1021883a 	mov	r16,r2
    418c:	000d2e80 	call	d2e8 <__floatsidf>
    4190:	d9000f17 	ldw	r4,60(sp)
    4194:	d9401017 	ldw	r5,64(sp)
    4198:	100d883a 	mov	r6,r2
    419c:	180f883a 	mov	r7,r3
    41a0:	000c96c0 	call	c96c <__subdf3>
    41a4:	1829883a 	mov	r20,r3
    41a8:	d8c00717 	ldw	r3,28(sp)
    41ac:	84000c04 	addi	r16,r16,48
    41b0:	1023883a 	mov	r17,r2
    41b4:	1c000005 	stb	r16,0(r3)
    41b8:	db001617 	ldw	r12,88(sp)
    41bc:	00800044 	movi	r2,1
    41c0:	60802226 	beq	r12,r2,424c <_dtoa_r+0x1424>
    41c4:	d9c00717 	ldw	r7,28(sp)
    41c8:	8805883a 	mov	r2,r17
    41cc:	b82b883a 	mov	r21,r23
    41d0:	3b19883a 	add	r12,r7,r12
    41d4:	6023883a 	mov	r17,r12
    41d8:	a007883a 	mov	r3,r20
    41dc:	dc800f15 	stw	r18,60(sp)
    41e0:	000d883a 	mov	r6,zero
    41e4:	01d00934 	movhi	r7,16420
    41e8:	1009883a 	mov	r4,r2
    41ec:	180b883a 	mov	r5,r3
    41f0:	000c1000 	call	c100 <__muldf3>
    41f4:	180b883a 	mov	r5,r3
    41f8:	1009883a 	mov	r4,r2
    41fc:	1829883a 	mov	r20,r3
    4200:	1025883a 	mov	r18,r2
    4204:	000d2680 	call	d268 <__fixdfsi>
    4208:	1009883a 	mov	r4,r2
    420c:	1021883a 	mov	r16,r2
    4210:	000d2e80 	call	d2e8 <__floatsidf>
    4214:	100d883a 	mov	r6,r2
    4218:	180f883a 	mov	r7,r3
    421c:	9009883a 	mov	r4,r18
    4220:	a00b883a 	mov	r5,r20
    4224:	84000c04 	addi	r16,r16,48
    4228:	000c96c0 	call	c96c <__subdf3>
    422c:	ad400044 	addi	r21,r21,1
    4230:	ac3fffc5 	stb	r16,-1(r21)
    4234:	ac7fea1e 	bne	r21,r17,41e0 <_gp+0xfffe9e74>
    4238:	1023883a 	mov	r17,r2
    423c:	d8801217 	ldw	r2,72(sp)
    4240:	dc800f17 	ldw	r18,60(sp)
    4244:	1829883a 	mov	r20,r3
    4248:	b8af883a 	add	r23,r23,r2
    424c:	d9001417 	ldw	r4,80(sp)
    4250:	d9401517 	ldw	r5,84(sp)
    4254:	000d883a 	mov	r6,zero
    4258:	01cff834 	movhi	r7,16352
    425c:	000ac2c0 	call	ac2c <__adddf3>
    4260:	880d883a 	mov	r6,r17
    4264:	a00f883a 	mov	r7,r20
    4268:	1009883a 	mov	r4,r2
    426c:	180b883a 	mov	r5,r3
    4270:	000c00c0 	call	c00c <__ledf2>
    4274:	10003e0e 	bge	r2,zero,4370 <_dtoa_r+0x1548>
    4278:	d9001317 	ldw	r4,76(sp)
    427c:	bd3fffc3 	ldbu	r20,-1(r23)
    4280:	d9000515 	stw	r4,20(sp)
    4284:	003d3b06 	br	3774 <_gp+0xfffe9408>
    4288:	0027883a 	mov	r19,zero
    428c:	003f1b06 	br	3efc <_gp+0xfffe9b90>
    4290:	d8800817 	ldw	r2,32(sp)
    4294:	11e9c83a 	sub	r20,r2,r7
    4298:	0005883a 	mov	r2,zero
    429c:	003d5406 	br	37f0 <_gp+0xfffe9484>
    42a0:	00800044 	movi	r2,1
    42a4:	003dc706 	br	39c4 <_gp+0xfffe9658>
    42a8:	d8c00217 	ldw	r3,8(sp)
    42ac:	00800d84 	movi	r2,54
    42b0:	dd400a17 	ldw	r21,40(sp)
    42b4:	10c5c83a 	sub	r2,r2,r3
    42b8:	dd000817 	ldw	r20,32(sp)
    42bc:	003d4c06 	br	37f0 <_gp+0xfffe9484>
    42c0:	dc800f15 	stw	r18,60(sp)
    42c4:	dcc01015 	stw	r19,64(sp)
    42c8:	04000084 	movi	r16,2
    42cc:	003bed06 	br	3284 <_gp+0xfffe8f18>
    42d0:	d9000617 	ldw	r4,24(sp)
    42d4:	203f0d26 	beq	r4,zero,3f0c <_gp+0xfffe9ba0>
    42d8:	d9800c17 	ldw	r6,48(sp)
    42dc:	01bcab0e 	bge	zero,r6,358c <_gp+0xfffe9220>
    42e0:	d9401017 	ldw	r5,64(sp)
    42e4:	d9000f17 	ldw	r4,60(sp)
    42e8:	000d883a 	mov	r6,zero
    42ec:	01d00934 	movhi	r7,16420
    42f0:	000c1000 	call	c100 <__muldf3>
    42f4:	81000044 	addi	r4,r16,1
    42f8:	d8800f15 	stw	r2,60(sp)
    42fc:	d8c01015 	stw	r3,64(sp)
    4300:	000d2e80 	call	d2e8 <__floatsidf>
    4304:	d9800f17 	ldw	r6,60(sp)
    4308:	d9c01017 	ldw	r7,64(sp)
    430c:	1009883a 	mov	r4,r2
    4310:	180b883a 	mov	r5,r3
    4314:	000c1000 	call	c100 <__muldf3>
    4318:	01d00734 	movhi	r7,16412
    431c:	000d883a 	mov	r6,zero
    4320:	1009883a 	mov	r4,r2
    4324:	180b883a 	mov	r5,r3
    4328:	000ac2c0 	call	ac2c <__adddf3>
    432c:	d9c00517 	ldw	r7,20(sp)
    4330:	047f3034 	movhi	r17,64704
    4334:	1021883a 	mov	r16,r2
    4338:	39ffffc4 	addi	r7,r7,-1
    433c:	d9c01315 	stw	r7,76(sp)
    4340:	1c63883a 	add	r17,r3,r17
    4344:	db000c17 	ldw	r12,48(sp)
    4348:	003bea06 	br	32f4 <_gp+0xfffe8f88>
    434c:	dc000915 	stw	r16,36(sp)
    4350:	003e0e06 	br	3b8c <_gp+0xfffe9820>
    4354:	01000e44 	movi	r4,57
    4358:	8825883a 	mov	r18,r17
    435c:	9dc00044 	addi	r23,r19,1
    4360:	99000005 	stb	r4,0(r19)
    4364:	a023883a 	mov	r17,r20
    4368:	dc000915 	stw	r16,36(sp)
    436c:	003da406 	br	3a00 <_gp+0xfffe9694>
    4370:	d9801417 	ldw	r6,80(sp)
    4374:	d9c01517 	ldw	r7,84(sp)
    4378:	0009883a 	mov	r4,zero
    437c:	014ff834 	movhi	r5,16352
    4380:	000c96c0 	call	c96c <__subdf3>
    4384:	880d883a 	mov	r6,r17
    4388:	a00f883a 	mov	r7,r20
    438c:	1009883a 	mov	r4,r2
    4390:	180b883a 	mov	r5,r3
    4394:	000bf300 	call	bf30 <__gedf2>
    4398:	00bc7c0e 	bge	zero,r2,358c <_gp+0xfffe9220>
    439c:	01000c04 	movi	r4,48
    43a0:	00000106 	br	43a8 <_dtoa_r+0x1580>
    43a4:	102f883a 	mov	r23,r2
    43a8:	b8bfffc4 	addi	r2,r23,-1
    43ac:	10c00007 	ldb	r3,0(r2)
    43b0:	193ffc26 	beq	r3,r4,43a4 <_gp+0xfffea038>
    43b4:	d9801317 	ldw	r6,76(sp)
    43b8:	d9800515 	stw	r6,20(sp)
    43bc:	003c4406 	br	34d0 <_gp+0xfffe9164>
    43c0:	d9801317 	ldw	r6,76(sp)
    43c4:	d9800515 	stw	r6,20(sp)
    43c8:	003cea06 	br	3774 <_gp+0xfffe9408>
    43cc:	dd800f17 	ldw	r22,60(sp)
    43d0:	dcc01017 	ldw	r19,64(sp)
    43d4:	dc801217 	ldw	r18,72(sp)
    43d8:	003c6c06 	br	358c <_gp+0xfffe9220>
    43dc:	903e031e 	bne	r18,zero,3bec <_gp+0xfffe9880>
    43e0:	003ebb06 	br	3ed0 <_gp+0xfffe9b64>
    43e4:	103e6c1e 	bne	r2,zero,3d98 <_gp+0xfffe9a2c>
    43e8:	4080004c 	andi	r2,r8,1
    43ec:	103e6a26 	beq	r2,zero,3d98 <_gp+0xfffe9a2c>
    43f0:	003e6606 	br	3d8c <_gp+0xfffe9a20>
    43f4:	d8c00317 	ldw	r3,12(sp)
    43f8:	00800084 	movi	r2,2
    43fc:	10c02916 	blt	r2,r3,44a4 <_dtoa_r+0x167c>
    4400:	d9000c17 	ldw	r4,48(sp)
    4404:	003e8806 	br	3e28 <_gp+0xfffe9abc>
    4408:	04000084 	movi	r16,2
    440c:	003b9d06 	br	3284 <_gp+0xfffe8f18>
    4410:	d9001317 	ldw	r4,76(sp)
    4414:	d9000515 	stw	r4,20(sp)
    4418:	003cd606 	br	3774 <_gp+0xfffe9408>
    441c:	d8801317 	ldw	r2,76(sp)
    4420:	d8800515 	stw	r2,20(sp)
    4424:	003c2a06 	br	34d0 <_gp+0xfffe9164>
    4428:	d9800317 	ldw	r6,12(sp)
    442c:	00800084 	movi	r2,2
    4430:	11801516 	blt	r2,r6,4488 <_dtoa_r+0x1660>
    4434:	d9c00c17 	ldw	r7,48(sp)
    4438:	d9c00615 	stw	r7,24(sp)
    443c:	003df706 	br	3c1c <_gp+0xfffe98b0>
    4440:	193d3926 	beq	r3,r4,3928 <_gp+0xfffe95bc>
    4444:	00c00f04 	movi	r3,60
    4448:	1885c83a 	sub	r2,r3,r2
    444c:	003ddf06 	br	3bcc <_gp+0xfffe9860>
    4450:	e009883a 	mov	r4,fp
    4454:	e0001115 	stw	zero,68(fp)
    4458:	000b883a 	mov	r5,zero
    445c:	0005ebc0 	call	5ebc <_Balloc>
    4460:	d8800715 	stw	r2,28(sp)
    4464:	d8c00717 	ldw	r3,28(sp)
    4468:	00bfffc4 	movi	r2,-1
    446c:	01000044 	movi	r4,1
    4470:	d8800c15 	stw	r2,48(sp)
    4474:	e0c01015 	stw	r3,64(fp)
    4478:	d9000b15 	stw	r4,44(sp)
    447c:	d8800615 	stw	r2,24(sp)
    4480:	d8002215 	stw	zero,136(sp)
    4484:	003c4106 	br	358c <_gp+0xfffe9220>
    4488:	d8c00c17 	ldw	r3,48(sp)
    448c:	d8c00615 	stw	r3,24(sp)
    4490:	003e7006 	br	3e54 <_gp+0xfffe9ae8>
    4494:	04400044 	movi	r17,1
    4498:	003b2006 	br	311c <_gp+0xfffe8db0>
    449c:	000b883a 	mov	r5,zero
    44a0:	003b3d06 	br	3198 <_gp+0xfffe8e2c>
    44a4:	d8800c17 	ldw	r2,48(sp)
    44a8:	d8800615 	stw	r2,24(sp)
    44ac:	003e6906 	br	3e54 <_gp+0xfffe9ae8>

000044b0 <__sflush_r>:
    44b0:	2880030b 	ldhu	r2,12(r5)
    44b4:	defffb04 	addi	sp,sp,-20
    44b8:	dcc00315 	stw	r19,12(sp)
    44bc:	dc400115 	stw	r17,4(sp)
    44c0:	dfc00415 	stw	ra,16(sp)
    44c4:	dc800215 	stw	r18,8(sp)
    44c8:	dc000015 	stw	r16,0(sp)
    44cc:	10c0020c 	andi	r3,r2,8
    44d0:	2823883a 	mov	r17,r5
    44d4:	2027883a 	mov	r19,r4
    44d8:	1800311e 	bne	r3,zero,45a0 <__sflush_r+0xf0>
    44dc:	28c00117 	ldw	r3,4(r5)
    44e0:	10820014 	ori	r2,r2,2048
    44e4:	2880030d 	sth	r2,12(r5)
    44e8:	00c04b0e 	bge	zero,r3,4618 <__sflush_r+0x168>
    44ec:	8a000a17 	ldw	r8,40(r17)
    44f0:	40002326 	beq	r8,zero,4580 <__sflush_r+0xd0>
    44f4:	9c000017 	ldw	r16,0(r19)
    44f8:	10c4000c 	andi	r3,r2,4096
    44fc:	98000015 	stw	zero,0(r19)
    4500:	18004826 	beq	r3,zero,4624 <__sflush_r+0x174>
    4504:	89801417 	ldw	r6,80(r17)
    4508:	10c0010c 	andi	r3,r2,4
    450c:	18000626 	beq	r3,zero,4528 <__sflush_r+0x78>
    4510:	88c00117 	ldw	r3,4(r17)
    4514:	88800c17 	ldw	r2,48(r17)
    4518:	30cdc83a 	sub	r6,r6,r3
    451c:	10000226 	beq	r2,zero,4528 <__sflush_r+0x78>
    4520:	88800f17 	ldw	r2,60(r17)
    4524:	308dc83a 	sub	r6,r6,r2
    4528:	89400717 	ldw	r5,28(r17)
    452c:	000f883a 	mov	r7,zero
    4530:	9809883a 	mov	r4,r19
    4534:	403ee83a 	callr	r8
    4538:	00ffffc4 	movi	r3,-1
    453c:	10c04426 	beq	r2,r3,4650 <__sflush_r+0x1a0>
    4540:	88c0030b 	ldhu	r3,12(r17)
    4544:	89000417 	ldw	r4,16(r17)
    4548:	88000115 	stw	zero,4(r17)
    454c:	197dffcc 	andi	r5,r3,63487
    4550:	8940030d 	sth	r5,12(r17)
    4554:	89000015 	stw	r4,0(r17)
    4558:	18c4000c 	andi	r3,r3,4096
    455c:	18002c1e 	bne	r3,zero,4610 <__sflush_r+0x160>
    4560:	89400c17 	ldw	r5,48(r17)
    4564:	9c000015 	stw	r16,0(r19)
    4568:	28000526 	beq	r5,zero,4580 <__sflush_r+0xd0>
    456c:	88801004 	addi	r2,r17,64
    4570:	28800226 	beq	r5,r2,457c <__sflush_r+0xcc>
    4574:	9809883a 	mov	r4,r19
    4578:	0004c2c0 	call	4c2c <_free_r>
    457c:	88000c15 	stw	zero,48(r17)
    4580:	0005883a 	mov	r2,zero
    4584:	dfc00417 	ldw	ra,16(sp)
    4588:	dcc00317 	ldw	r19,12(sp)
    458c:	dc800217 	ldw	r18,8(sp)
    4590:	dc400117 	ldw	r17,4(sp)
    4594:	dc000017 	ldw	r16,0(sp)
    4598:	dec00504 	addi	sp,sp,20
    459c:	f800283a 	ret
    45a0:	2c800417 	ldw	r18,16(r5)
    45a4:	903ff626 	beq	r18,zero,4580 <_gp+0xfffea214>
    45a8:	2c000017 	ldw	r16,0(r5)
    45ac:	108000cc 	andi	r2,r2,3
    45b0:	2c800015 	stw	r18,0(r5)
    45b4:	84a1c83a 	sub	r16,r16,r18
    45b8:	1000131e 	bne	r2,zero,4608 <__sflush_r+0x158>
    45bc:	28800517 	ldw	r2,20(r5)
    45c0:	88800215 	stw	r2,8(r17)
    45c4:	04000316 	blt	zero,r16,45d4 <__sflush_r+0x124>
    45c8:	003fed06 	br	4580 <_gp+0xfffea214>
    45cc:	90a5883a 	add	r18,r18,r2
    45d0:	043feb0e 	bge	zero,r16,4580 <_gp+0xfffea214>
    45d4:	88800917 	ldw	r2,36(r17)
    45d8:	89400717 	ldw	r5,28(r17)
    45dc:	800f883a 	mov	r7,r16
    45e0:	900d883a 	mov	r6,r18
    45e4:	9809883a 	mov	r4,r19
    45e8:	103ee83a 	callr	r2
    45ec:	80a1c83a 	sub	r16,r16,r2
    45f0:	00bff616 	blt	zero,r2,45cc <_gp+0xfffea260>
    45f4:	88c0030b 	ldhu	r3,12(r17)
    45f8:	00bfffc4 	movi	r2,-1
    45fc:	18c01014 	ori	r3,r3,64
    4600:	88c0030d 	sth	r3,12(r17)
    4604:	003fdf06 	br	4584 <_gp+0xfffea218>
    4608:	0005883a 	mov	r2,zero
    460c:	003fec06 	br	45c0 <_gp+0xfffea254>
    4610:	88801415 	stw	r2,80(r17)
    4614:	003fd206 	br	4560 <_gp+0xfffea1f4>
    4618:	28c00f17 	ldw	r3,60(r5)
    461c:	00ffb316 	blt	zero,r3,44ec <_gp+0xfffea180>
    4620:	003fd706 	br	4580 <_gp+0xfffea214>
    4624:	89400717 	ldw	r5,28(r17)
    4628:	000d883a 	mov	r6,zero
    462c:	01c00044 	movi	r7,1
    4630:	9809883a 	mov	r4,r19
    4634:	403ee83a 	callr	r8
    4638:	100d883a 	mov	r6,r2
    463c:	00bfffc4 	movi	r2,-1
    4640:	30801426 	beq	r6,r2,4694 <__sflush_r+0x1e4>
    4644:	8880030b 	ldhu	r2,12(r17)
    4648:	8a000a17 	ldw	r8,40(r17)
    464c:	003fae06 	br	4508 <_gp+0xfffea19c>
    4650:	98c00017 	ldw	r3,0(r19)
    4654:	183fba26 	beq	r3,zero,4540 <_gp+0xfffea1d4>
    4658:	01000744 	movi	r4,29
    465c:	19000626 	beq	r3,r4,4678 <__sflush_r+0x1c8>
    4660:	01000584 	movi	r4,22
    4664:	19000426 	beq	r3,r4,4678 <__sflush_r+0x1c8>
    4668:	88c0030b 	ldhu	r3,12(r17)
    466c:	18c01014 	ori	r3,r3,64
    4670:	88c0030d 	sth	r3,12(r17)
    4674:	003fc306 	br	4584 <_gp+0xfffea218>
    4678:	8880030b 	ldhu	r2,12(r17)
    467c:	88c00417 	ldw	r3,16(r17)
    4680:	88000115 	stw	zero,4(r17)
    4684:	10bdffcc 	andi	r2,r2,63487
    4688:	8880030d 	sth	r2,12(r17)
    468c:	88c00015 	stw	r3,0(r17)
    4690:	003fb306 	br	4560 <_gp+0xfffea1f4>
    4694:	98800017 	ldw	r2,0(r19)
    4698:	103fea26 	beq	r2,zero,4644 <_gp+0xfffea2d8>
    469c:	00c00744 	movi	r3,29
    46a0:	10c00226 	beq	r2,r3,46ac <__sflush_r+0x1fc>
    46a4:	00c00584 	movi	r3,22
    46a8:	10c0031e 	bne	r2,r3,46b8 <__sflush_r+0x208>
    46ac:	9c000015 	stw	r16,0(r19)
    46b0:	0005883a 	mov	r2,zero
    46b4:	003fb306 	br	4584 <_gp+0xfffea218>
    46b8:	88c0030b 	ldhu	r3,12(r17)
    46bc:	3005883a 	mov	r2,r6
    46c0:	18c01014 	ori	r3,r3,64
    46c4:	88c0030d 	sth	r3,12(r17)
    46c8:	003fae06 	br	4584 <_gp+0xfffea218>

000046cc <_fflush_r>:
    46cc:	defffd04 	addi	sp,sp,-12
    46d0:	dc000115 	stw	r16,4(sp)
    46d4:	dfc00215 	stw	ra,8(sp)
    46d8:	2021883a 	mov	r16,r4
    46dc:	20000226 	beq	r4,zero,46e8 <_fflush_r+0x1c>
    46e0:	20800e17 	ldw	r2,56(r4)
    46e4:	10000c26 	beq	r2,zero,4718 <_fflush_r+0x4c>
    46e8:	2880030f 	ldh	r2,12(r5)
    46ec:	1000051e 	bne	r2,zero,4704 <_fflush_r+0x38>
    46f0:	0005883a 	mov	r2,zero
    46f4:	dfc00217 	ldw	ra,8(sp)
    46f8:	dc000117 	ldw	r16,4(sp)
    46fc:	dec00304 	addi	sp,sp,12
    4700:	f800283a 	ret
    4704:	8009883a 	mov	r4,r16
    4708:	dfc00217 	ldw	ra,8(sp)
    470c:	dc000117 	ldw	r16,4(sp)
    4710:	dec00304 	addi	sp,sp,12
    4714:	00044b01 	jmpi	44b0 <__sflush_r>
    4718:	d9400015 	stw	r5,0(sp)
    471c:	0004ab80 	call	4ab8 <__sinit>
    4720:	d9400017 	ldw	r5,0(sp)
    4724:	003ff006 	br	46e8 <_gp+0xfffea37c>

00004728 <fflush>:
    4728:	20000526 	beq	r4,zero,4740 <fflush+0x18>
    472c:	00800074 	movhi	r2,1
    4730:	1088dc04 	addi	r2,r2,9072
    4734:	200b883a 	mov	r5,r4
    4738:	11000017 	ldw	r4,0(r2)
    473c:	00046cc1 	jmpi	46cc <_fflush_r>
    4740:	00800074 	movhi	r2,1
    4744:	1088db04 	addi	r2,r2,9068
    4748:	11000017 	ldw	r4,0(r2)
    474c:	01400034 	movhi	r5,0
    4750:	2951b304 	addi	r5,r5,18124
    4754:	00050001 	jmpi	5000 <_fwalk_reent>

00004758 <__fp_unlock>:
    4758:	0005883a 	mov	r2,zero
    475c:	f800283a 	ret

00004760 <_cleanup_r>:
    4760:	01400074 	movhi	r5,1
    4764:	2962dd04 	addi	r5,r5,-29836
    4768:	00050001 	jmpi	5000 <_fwalk_reent>

0000476c <__sinit.part.1>:
    476c:	defff704 	addi	sp,sp,-36
    4770:	00c00034 	movhi	r3,0
    4774:	dfc00815 	stw	ra,32(sp)
    4778:	ddc00715 	stw	r23,28(sp)
    477c:	dd800615 	stw	r22,24(sp)
    4780:	dd400515 	stw	r21,20(sp)
    4784:	dd000415 	stw	r20,16(sp)
    4788:	dcc00315 	stw	r19,12(sp)
    478c:	dc800215 	stw	r18,8(sp)
    4790:	dc400115 	stw	r17,4(sp)
    4794:	dc000015 	stw	r16,0(sp)
    4798:	18d1d804 	addi	r3,r3,18272
    479c:	24000117 	ldw	r16,4(r4)
    47a0:	20c00f15 	stw	r3,60(r4)
    47a4:	2080bb04 	addi	r2,r4,748
    47a8:	00c000c4 	movi	r3,3
    47ac:	20c0b915 	stw	r3,740(r4)
    47b0:	2080ba15 	stw	r2,744(r4)
    47b4:	2000b815 	stw	zero,736(r4)
    47b8:	05c00204 	movi	r23,8
    47bc:	00800104 	movi	r2,4
    47c0:	2025883a 	mov	r18,r4
    47c4:	b80d883a 	mov	r6,r23
    47c8:	81001704 	addi	r4,r16,92
    47cc:	000b883a 	mov	r5,zero
    47d0:	80000015 	stw	zero,0(r16)
    47d4:	80000115 	stw	zero,4(r16)
    47d8:	80000215 	stw	zero,8(r16)
    47dc:	8080030d 	sth	r2,12(r16)
    47e0:	80001915 	stw	zero,100(r16)
    47e4:	8000038d 	sth	zero,14(r16)
    47e8:	80000415 	stw	zero,16(r16)
    47ec:	80000515 	stw	zero,20(r16)
    47f0:	80000615 	stw	zero,24(r16)
    47f4:	0005d940 	call	5d94 <memset>
    47f8:	05800034 	movhi	r22,0
    47fc:	94400217 	ldw	r17,8(r18)
    4800:	05400034 	movhi	r21,0
    4804:	05000034 	movhi	r20,0
    4808:	04c00034 	movhi	r19,0
    480c:	b59c0f04 	addi	r22,r22,28732
    4810:	ad5c2604 	addi	r21,r21,28824
    4814:	a51c4504 	addi	r20,r20,28948
    4818:	9cdc5c04 	addi	r19,r19,29040
    481c:	85800815 	stw	r22,32(r16)
    4820:	85400915 	stw	r21,36(r16)
    4824:	85000a15 	stw	r20,40(r16)
    4828:	84c00b15 	stw	r19,44(r16)
    482c:	84000715 	stw	r16,28(r16)
    4830:	00800284 	movi	r2,10
    4834:	8880030d 	sth	r2,12(r17)
    4838:	00800044 	movi	r2,1
    483c:	b80d883a 	mov	r6,r23
    4840:	89001704 	addi	r4,r17,92
    4844:	000b883a 	mov	r5,zero
    4848:	88000015 	stw	zero,0(r17)
    484c:	88000115 	stw	zero,4(r17)
    4850:	88000215 	stw	zero,8(r17)
    4854:	88001915 	stw	zero,100(r17)
    4858:	8880038d 	sth	r2,14(r17)
    485c:	88000415 	stw	zero,16(r17)
    4860:	88000515 	stw	zero,20(r17)
    4864:	88000615 	stw	zero,24(r17)
    4868:	0005d940 	call	5d94 <memset>
    486c:	94000317 	ldw	r16,12(r18)
    4870:	00800484 	movi	r2,18
    4874:	8c400715 	stw	r17,28(r17)
    4878:	8d800815 	stw	r22,32(r17)
    487c:	8d400915 	stw	r21,36(r17)
    4880:	8d000a15 	stw	r20,40(r17)
    4884:	8cc00b15 	stw	r19,44(r17)
    4888:	8080030d 	sth	r2,12(r16)
    488c:	00800084 	movi	r2,2
    4890:	80000015 	stw	zero,0(r16)
    4894:	80000115 	stw	zero,4(r16)
    4898:	80000215 	stw	zero,8(r16)
    489c:	80001915 	stw	zero,100(r16)
    48a0:	8080038d 	sth	r2,14(r16)
    48a4:	80000415 	stw	zero,16(r16)
    48a8:	80000515 	stw	zero,20(r16)
    48ac:	80000615 	stw	zero,24(r16)
    48b0:	b80d883a 	mov	r6,r23
    48b4:	000b883a 	mov	r5,zero
    48b8:	81001704 	addi	r4,r16,92
    48bc:	0005d940 	call	5d94 <memset>
    48c0:	00800044 	movi	r2,1
    48c4:	84000715 	stw	r16,28(r16)
    48c8:	85800815 	stw	r22,32(r16)
    48cc:	85400915 	stw	r21,36(r16)
    48d0:	85000a15 	stw	r20,40(r16)
    48d4:	84c00b15 	stw	r19,44(r16)
    48d8:	90800e15 	stw	r2,56(r18)
    48dc:	dfc00817 	ldw	ra,32(sp)
    48e0:	ddc00717 	ldw	r23,28(sp)
    48e4:	dd800617 	ldw	r22,24(sp)
    48e8:	dd400517 	ldw	r21,20(sp)
    48ec:	dd000417 	ldw	r20,16(sp)
    48f0:	dcc00317 	ldw	r19,12(sp)
    48f4:	dc800217 	ldw	r18,8(sp)
    48f8:	dc400117 	ldw	r17,4(sp)
    48fc:	dc000017 	ldw	r16,0(sp)
    4900:	dec00904 	addi	sp,sp,36
    4904:	f800283a 	ret

00004908 <__fp_lock>:
    4908:	0005883a 	mov	r2,zero
    490c:	f800283a 	ret

00004910 <__sfmoreglue>:
    4910:	defffc04 	addi	sp,sp,-16
    4914:	dc800215 	stw	r18,8(sp)
    4918:	2825883a 	mov	r18,r5
    491c:	dc000015 	stw	r16,0(sp)
    4920:	01401a04 	movi	r5,104
    4924:	2021883a 	mov	r16,r4
    4928:	913fffc4 	addi	r4,r18,-1
    492c:	dfc00315 	stw	ra,12(sp)
    4930:	dc400115 	stw	r17,4(sp)
    4934:	000049c0 	call	49c <__mulsi3>
    4938:	8009883a 	mov	r4,r16
    493c:	11401d04 	addi	r5,r2,116
    4940:	1023883a 	mov	r17,r2
    4944:	000535c0 	call	535c <_malloc_r>
    4948:	1021883a 	mov	r16,r2
    494c:	10000726 	beq	r2,zero,496c <__sfmoreglue+0x5c>
    4950:	11000304 	addi	r4,r2,12
    4954:	10000015 	stw	zero,0(r2)
    4958:	14800115 	stw	r18,4(r2)
    495c:	11000215 	stw	r4,8(r2)
    4960:	89801a04 	addi	r6,r17,104
    4964:	000b883a 	mov	r5,zero
    4968:	0005d940 	call	5d94 <memset>
    496c:	8005883a 	mov	r2,r16
    4970:	dfc00317 	ldw	ra,12(sp)
    4974:	dc800217 	ldw	r18,8(sp)
    4978:	dc400117 	ldw	r17,4(sp)
    497c:	dc000017 	ldw	r16,0(sp)
    4980:	dec00404 	addi	sp,sp,16
    4984:	f800283a 	ret

00004988 <__sfp>:
    4988:	defffb04 	addi	sp,sp,-20
    498c:	dc000015 	stw	r16,0(sp)
    4990:	04000074 	movhi	r16,1
    4994:	8408db04 	addi	r16,r16,9068
    4998:	dcc00315 	stw	r19,12(sp)
    499c:	2027883a 	mov	r19,r4
    49a0:	81000017 	ldw	r4,0(r16)
    49a4:	dfc00415 	stw	ra,16(sp)
    49a8:	dc800215 	stw	r18,8(sp)
    49ac:	20800e17 	ldw	r2,56(r4)
    49b0:	dc400115 	stw	r17,4(sp)
    49b4:	1000021e 	bne	r2,zero,49c0 <__sfp+0x38>
    49b8:	000476c0 	call	476c <__sinit.part.1>
    49bc:	81000017 	ldw	r4,0(r16)
    49c0:	2480b804 	addi	r18,r4,736
    49c4:	047fffc4 	movi	r17,-1
    49c8:	91000117 	ldw	r4,4(r18)
    49cc:	94000217 	ldw	r16,8(r18)
    49d0:	213fffc4 	addi	r4,r4,-1
    49d4:	20000a16 	blt	r4,zero,4a00 <__sfp+0x78>
    49d8:	8080030f 	ldh	r2,12(r16)
    49dc:	10000c26 	beq	r2,zero,4a10 <__sfp+0x88>
    49e0:	80c01d04 	addi	r3,r16,116
    49e4:	00000206 	br	49f0 <__sfp+0x68>
    49e8:	18bfe60f 	ldh	r2,-104(r3)
    49ec:	10000826 	beq	r2,zero,4a10 <__sfp+0x88>
    49f0:	213fffc4 	addi	r4,r4,-1
    49f4:	1c3ffd04 	addi	r16,r3,-12
    49f8:	18c01a04 	addi	r3,r3,104
    49fc:	247ffa1e 	bne	r4,r17,49e8 <_gp+0xfffea67c>
    4a00:	90800017 	ldw	r2,0(r18)
    4a04:	10001d26 	beq	r2,zero,4a7c <__sfp+0xf4>
    4a08:	1025883a 	mov	r18,r2
    4a0c:	003fee06 	br	49c8 <_gp+0xfffea65c>
    4a10:	00bfffc4 	movi	r2,-1
    4a14:	8080038d 	sth	r2,14(r16)
    4a18:	00800044 	movi	r2,1
    4a1c:	8080030d 	sth	r2,12(r16)
    4a20:	80001915 	stw	zero,100(r16)
    4a24:	80000015 	stw	zero,0(r16)
    4a28:	80000215 	stw	zero,8(r16)
    4a2c:	80000115 	stw	zero,4(r16)
    4a30:	80000415 	stw	zero,16(r16)
    4a34:	80000515 	stw	zero,20(r16)
    4a38:	80000615 	stw	zero,24(r16)
    4a3c:	01800204 	movi	r6,8
    4a40:	000b883a 	mov	r5,zero
    4a44:	81001704 	addi	r4,r16,92
    4a48:	0005d940 	call	5d94 <memset>
    4a4c:	8005883a 	mov	r2,r16
    4a50:	80000c15 	stw	zero,48(r16)
    4a54:	80000d15 	stw	zero,52(r16)
    4a58:	80001115 	stw	zero,68(r16)
    4a5c:	80001215 	stw	zero,72(r16)
    4a60:	dfc00417 	ldw	ra,16(sp)
    4a64:	dcc00317 	ldw	r19,12(sp)
    4a68:	dc800217 	ldw	r18,8(sp)
    4a6c:	dc400117 	ldw	r17,4(sp)
    4a70:	dc000017 	ldw	r16,0(sp)
    4a74:	dec00504 	addi	sp,sp,20
    4a78:	f800283a 	ret
    4a7c:	01400104 	movi	r5,4
    4a80:	9809883a 	mov	r4,r19
    4a84:	00049100 	call	4910 <__sfmoreglue>
    4a88:	90800015 	stw	r2,0(r18)
    4a8c:	103fde1e 	bne	r2,zero,4a08 <_gp+0xfffea69c>
    4a90:	00800304 	movi	r2,12
    4a94:	98800015 	stw	r2,0(r19)
    4a98:	0005883a 	mov	r2,zero
    4a9c:	003ff006 	br	4a60 <_gp+0xfffea6f4>

00004aa0 <_cleanup>:
    4aa0:	00800074 	movhi	r2,1
    4aa4:	1088db04 	addi	r2,r2,9068
    4aa8:	11000017 	ldw	r4,0(r2)
    4aac:	01400074 	movhi	r5,1
    4ab0:	2962dd04 	addi	r5,r5,-29836
    4ab4:	00050001 	jmpi	5000 <_fwalk_reent>

00004ab8 <__sinit>:
    4ab8:	20800e17 	ldw	r2,56(r4)
    4abc:	10000126 	beq	r2,zero,4ac4 <__sinit+0xc>
    4ac0:	f800283a 	ret
    4ac4:	000476c1 	jmpi	476c <__sinit.part.1>

00004ac8 <__sfp_lock_acquire>:
    4ac8:	f800283a 	ret

00004acc <__sfp_lock_release>:
    4acc:	f800283a 	ret

00004ad0 <__sinit_lock_acquire>:
    4ad0:	f800283a 	ret

00004ad4 <__sinit_lock_release>:
    4ad4:	f800283a 	ret

00004ad8 <__fp_lock_all>:
    4ad8:	00800074 	movhi	r2,1
    4adc:	1088dc04 	addi	r2,r2,9072
    4ae0:	11000017 	ldw	r4,0(r2)
    4ae4:	01400034 	movhi	r5,0
    4ae8:	29524204 	addi	r5,r5,18696
    4aec:	0004f3c1 	jmpi	4f3c <_fwalk>

00004af0 <__fp_unlock_all>:
    4af0:	00800074 	movhi	r2,1
    4af4:	1088dc04 	addi	r2,r2,9072
    4af8:	11000017 	ldw	r4,0(r2)
    4afc:	01400034 	movhi	r5,0
    4b00:	2951d604 	addi	r5,r5,18264
    4b04:	0004f3c1 	jmpi	4f3c <_fwalk>

00004b08 <_malloc_trim_r>:
    4b08:	defffb04 	addi	sp,sp,-20
    4b0c:	dcc00315 	stw	r19,12(sp)
    4b10:	04c00074 	movhi	r19,1
    4b14:	dc800215 	stw	r18,8(sp)
    4b18:	dc400115 	stw	r17,4(sp)
    4b1c:	dc000015 	stw	r16,0(sp)
    4b20:	dfc00415 	stw	ra,16(sp)
    4b24:	2821883a 	mov	r16,r5
    4b28:	9cc35704 	addi	r19,r19,3420
    4b2c:	2025883a 	mov	r18,r4
    4b30:	000daa00 	call	daa0 <__malloc_lock>
    4b34:	98800217 	ldw	r2,8(r19)
    4b38:	14400117 	ldw	r17,4(r2)
    4b3c:	00bfff04 	movi	r2,-4
    4b40:	88a2703a 	and	r17,r17,r2
    4b44:	8c21c83a 	sub	r16,r17,r16
    4b48:	8403fbc4 	addi	r16,r16,4079
    4b4c:	8020d33a 	srli	r16,r16,12
    4b50:	0083ffc4 	movi	r2,4095
    4b54:	843fffc4 	addi	r16,r16,-1
    4b58:	8020933a 	slli	r16,r16,12
    4b5c:	1400060e 	bge	r2,r16,4b78 <_malloc_trim_r+0x70>
    4b60:	000b883a 	mov	r5,zero
    4b64:	9009883a 	mov	r4,r18
    4b68:	0006fe80 	call	6fe8 <_sbrk_r>
    4b6c:	98c00217 	ldw	r3,8(r19)
    4b70:	1c47883a 	add	r3,r3,r17
    4b74:	10c00a26 	beq	r2,r3,4ba0 <_malloc_trim_r+0x98>
    4b78:	9009883a 	mov	r4,r18
    4b7c:	000dac40 	call	dac4 <__malloc_unlock>
    4b80:	0005883a 	mov	r2,zero
    4b84:	dfc00417 	ldw	ra,16(sp)
    4b88:	dcc00317 	ldw	r19,12(sp)
    4b8c:	dc800217 	ldw	r18,8(sp)
    4b90:	dc400117 	ldw	r17,4(sp)
    4b94:	dc000017 	ldw	r16,0(sp)
    4b98:	dec00504 	addi	sp,sp,20
    4b9c:	f800283a 	ret
    4ba0:	040bc83a 	sub	r5,zero,r16
    4ba4:	9009883a 	mov	r4,r18
    4ba8:	0006fe80 	call	6fe8 <_sbrk_r>
    4bac:	00ffffc4 	movi	r3,-1
    4bb0:	10c00d26 	beq	r2,r3,4be8 <_malloc_trim_r+0xe0>
    4bb4:	00c00074 	movhi	r3,1
    4bb8:	18cfb404 	addi	r3,r3,16080
    4bbc:	18800017 	ldw	r2,0(r3)
    4bc0:	99000217 	ldw	r4,8(r19)
    4bc4:	8c23c83a 	sub	r17,r17,r16
    4bc8:	8c400054 	ori	r17,r17,1
    4bcc:	1421c83a 	sub	r16,r2,r16
    4bd0:	24400115 	stw	r17,4(r4)
    4bd4:	9009883a 	mov	r4,r18
    4bd8:	1c000015 	stw	r16,0(r3)
    4bdc:	000dac40 	call	dac4 <__malloc_unlock>
    4be0:	00800044 	movi	r2,1
    4be4:	003fe706 	br	4b84 <_gp+0xfffea818>
    4be8:	000b883a 	mov	r5,zero
    4bec:	9009883a 	mov	r4,r18
    4bf0:	0006fe80 	call	6fe8 <_sbrk_r>
    4bf4:	99000217 	ldw	r4,8(r19)
    4bf8:	014003c4 	movi	r5,15
    4bfc:	1107c83a 	sub	r3,r2,r4
    4c00:	28ffdd0e 	bge	r5,r3,4b78 <_gp+0xfffea80c>
    4c04:	01400074 	movhi	r5,1
    4c08:	2948de04 	addi	r5,r5,9080
    4c0c:	29400017 	ldw	r5,0(r5)
    4c10:	18c00054 	ori	r3,r3,1
    4c14:	20c00115 	stw	r3,4(r4)
    4c18:	00c00074 	movhi	r3,1
    4c1c:	1145c83a 	sub	r2,r2,r5
    4c20:	18cfb404 	addi	r3,r3,16080
    4c24:	18800015 	stw	r2,0(r3)
    4c28:	003fd306 	br	4b78 <_gp+0xfffea80c>

00004c2c <_free_r>:
    4c2c:	28004126 	beq	r5,zero,4d34 <_free_r+0x108>
    4c30:	defffd04 	addi	sp,sp,-12
    4c34:	dc400115 	stw	r17,4(sp)
    4c38:	dc000015 	stw	r16,0(sp)
    4c3c:	2023883a 	mov	r17,r4
    4c40:	2821883a 	mov	r16,r5
    4c44:	dfc00215 	stw	ra,8(sp)
    4c48:	000daa00 	call	daa0 <__malloc_lock>
    4c4c:	81ffff17 	ldw	r7,-4(r16)
    4c50:	00bfff84 	movi	r2,-2
    4c54:	01000074 	movhi	r4,1
    4c58:	81bffe04 	addi	r6,r16,-8
    4c5c:	3884703a 	and	r2,r7,r2
    4c60:	21035704 	addi	r4,r4,3420
    4c64:	308b883a 	add	r5,r6,r2
    4c68:	2a400117 	ldw	r9,4(r5)
    4c6c:	22000217 	ldw	r8,8(r4)
    4c70:	00ffff04 	movi	r3,-4
    4c74:	48c6703a 	and	r3,r9,r3
    4c78:	2a005726 	beq	r5,r8,4dd8 <_free_r+0x1ac>
    4c7c:	28c00115 	stw	r3,4(r5)
    4c80:	39c0004c 	andi	r7,r7,1
    4c84:	3800091e 	bne	r7,zero,4cac <_free_r+0x80>
    4c88:	823ffe17 	ldw	r8,-8(r16)
    4c8c:	22400204 	addi	r9,r4,8
    4c90:	320dc83a 	sub	r6,r6,r8
    4c94:	31c00217 	ldw	r7,8(r6)
    4c98:	1205883a 	add	r2,r2,r8
    4c9c:	3a406526 	beq	r7,r9,4e34 <_free_r+0x208>
    4ca0:	32000317 	ldw	r8,12(r6)
    4ca4:	3a000315 	stw	r8,12(r7)
    4ca8:	41c00215 	stw	r7,8(r8)
    4cac:	28cf883a 	add	r7,r5,r3
    4cb0:	39c00117 	ldw	r7,4(r7)
    4cb4:	39c0004c 	andi	r7,r7,1
    4cb8:	38003a26 	beq	r7,zero,4da4 <_free_r+0x178>
    4cbc:	10c00054 	ori	r3,r2,1
    4cc0:	30c00115 	stw	r3,4(r6)
    4cc4:	3087883a 	add	r3,r6,r2
    4cc8:	18800015 	stw	r2,0(r3)
    4ccc:	00c07fc4 	movi	r3,511
    4cd0:	18801936 	bltu	r3,r2,4d38 <_free_r+0x10c>
    4cd4:	1004d0fa 	srli	r2,r2,3
    4cd8:	01c00044 	movi	r7,1
    4cdc:	21400117 	ldw	r5,4(r4)
    4ce0:	10c00044 	addi	r3,r2,1
    4ce4:	18c7883a 	add	r3,r3,r3
    4ce8:	1005d0ba 	srai	r2,r2,2
    4cec:	18c7883a 	add	r3,r3,r3
    4cf0:	18c7883a 	add	r3,r3,r3
    4cf4:	1907883a 	add	r3,r3,r4
    4cf8:	3884983a 	sll	r2,r7,r2
    4cfc:	19c00017 	ldw	r7,0(r3)
    4d00:	1a3ffe04 	addi	r8,r3,-8
    4d04:	1144b03a 	or	r2,r2,r5
    4d08:	32000315 	stw	r8,12(r6)
    4d0c:	31c00215 	stw	r7,8(r6)
    4d10:	20800115 	stw	r2,4(r4)
    4d14:	19800015 	stw	r6,0(r3)
    4d18:	39800315 	stw	r6,12(r7)
    4d1c:	8809883a 	mov	r4,r17
    4d20:	dfc00217 	ldw	ra,8(sp)
    4d24:	dc400117 	ldw	r17,4(sp)
    4d28:	dc000017 	ldw	r16,0(sp)
    4d2c:	dec00304 	addi	sp,sp,12
    4d30:	000dac41 	jmpi	dac4 <__malloc_unlock>
    4d34:	f800283a 	ret
    4d38:	100ad27a 	srli	r5,r2,9
    4d3c:	00c00104 	movi	r3,4
    4d40:	19404a36 	bltu	r3,r5,4e6c <_free_r+0x240>
    4d44:	100ad1ba 	srli	r5,r2,6
    4d48:	28c00e44 	addi	r3,r5,57
    4d4c:	18c7883a 	add	r3,r3,r3
    4d50:	29400e04 	addi	r5,r5,56
    4d54:	18c7883a 	add	r3,r3,r3
    4d58:	18c7883a 	add	r3,r3,r3
    4d5c:	1909883a 	add	r4,r3,r4
    4d60:	20c00017 	ldw	r3,0(r4)
    4d64:	01c00074 	movhi	r7,1
    4d68:	213ffe04 	addi	r4,r4,-8
    4d6c:	39c35704 	addi	r7,r7,3420
    4d70:	20c04426 	beq	r4,r3,4e84 <_free_r+0x258>
    4d74:	01ffff04 	movi	r7,-4
    4d78:	19400117 	ldw	r5,4(r3)
    4d7c:	29ca703a 	and	r5,r5,r7
    4d80:	1140022e 	bgeu	r2,r5,4d8c <_free_r+0x160>
    4d84:	18c00217 	ldw	r3,8(r3)
    4d88:	20fffb1e 	bne	r4,r3,4d78 <_gp+0xfffeaa0c>
    4d8c:	19000317 	ldw	r4,12(r3)
    4d90:	31000315 	stw	r4,12(r6)
    4d94:	30c00215 	stw	r3,8(r6)
    4d98:	21800215 	stw	r6,8(r4)
    4d9c:	19800315 	stw	r6,12(r3)
    4da0:	003fde06 	br	4d1c <_gp+0xfffea9b0>
    4da4:	29c00217 	ldw	r7,8(r5)
    4da8:	10c5883a 	add	r2,r2,r3
    4dac:	00c00074 	movhi	r3,1
    4db0:	18c35904 	addi	r3,r3,3428
    4db4:	38c03b26 	beq	r7,r3,4ea4 <_free_r+0x278>
    4db8:	2a000317 	ldw	r8,12(r5)
    4dbc:	11400054 	ori	r5,r2,1
    4dc0:	3087883a 	add	r3,r6,r2
    4dc4:	3a000315 	stw	r8,12(r7)
    4dc8:	41c00215 	stw	r7,8(r8)
    4dcc:	31400115 	stw	r5,4(r6)
    4dd0:	18800015 	stw	r2,0(r3)
    4dd4:	003fbd06 	br	4ccc <_gp+0xfffea960>
    4dd8:	39c0004c 	andi	r7,r7,1
    4ddc:	10c5883a 	add	r2,r2,r3
    4de0:	3800071e 	bne	r7,zero,4e00 <_free_r+0x1d4>
    4de4:	81fffe17 	ldw	r7,-8(r16)
    4de8:	31cdc83a 	sub	r6,r6,r7
    4dec:	30c00317 	ldw	r3,12(r6)
    4df0:	31400217 	ldw	r5,8(r6)
    4df4:	11c5883a 	add	r2,r2,r7
    4df8:	28c00315 	stw	r3,12(r5)
    4dfc:	19400215 	stw	r5,8(r3)
    4e00:	10c00054 	ori	r3,r2,1
    4e04:	30c00115 	stw	r3,4(r6)
    4e08:	00c00074 	movhi	r3,1
    4e0c:	18c8df04 	addi	r3,r3,9084
    4e10:	18c00017 	ldw	r3,0(r3)
    4e14:	21800215 	stw	r6,8(r4)
    4e18:	10ffc036 	bltu	r2,r3,4d1c <_gp+0xfffea9b0>
    4e1c:	00800074 	movhi	r2,1
    4e20:	108fab04 	addi	r2,r2,16044
    4e24:	11400017 	ldw	r5,0(r2)
    4e28:	8809883a 	mov	r4,r17
    4e2c:	0004b080 	call	4b08 <_malloc_trim_r>
    4e30:	003fba06 	br	4d1c <_gp+0xfffea9b0>
    4e34:	28c9883a 	add	r4,r5,r3
    4e38:	21000117 	ldw	r4,4(r4)
    4e3c:	2100004c 	andi	r4,r4,1
    4e40:	2000391e 	bne	r4,zero,4f28 <_free_r+0x2fc>
    4e44:	29c00217 	ldw	r7,8(r5)
    4e48:	29000317 	ldw	r4,12(r5)
    4e4c:	1885883a 	add	r2,r3,r2
    4e50:	10c00054 	ori	r3,r2,1
    4e54:	39000315 	stw	r4,12(r7)
    4e58:	21c00215 	stw	r7,8(r4)
    4e5c:	30c00115 	stw	r3,4(r6)
    4e60:	308d883a 	add	r6,r6,r2
    4e64:	30800015 	stw	r2,0(r6)
    4e68:	003fac06 	br	4d1c <_gp+0xfffea9b0>
    4e6c:	00c00504 	movi	r3,20
    4e70:	19401536 	bltu	r3,r5,4ec8 <_free_r+0x29c>
    4e74:	28c01704 	addi	r3,r5,92
    4e78:	18c7883a 	add	r3,r3,r3
    4e7c:	294016c4 	addi	r5,r5,91
    4e80:	003fb406 	br	4d54 <_gp+0xfffea9e8>
    4e84:	280bd0ba 	srai	r5,r5,2
    4e88:	00c00044 	movi	r3,1
    4e8c:	38800117 	ldw	r2,4(r7)
    4e90:	194a983a 	sll	r5,r3,r5
    4e94:	2007883a 	mov	r3,r4
    4e98:	2884b03a 	or	r2,r5,r2
    4e9c:	38800115 	stw	r2,4(r7)
    4ea0:	003fbb06 	br	4d90 <_gp+0xfffeaa24>
    4ea4:	21800515 	stw	r6,20(r4)
    4ea8:	21800415 	stw	r6,16(r4)
    4eac:	10c00054 	ori	r3,r2,1
    4eb0:	31c00315 	stw	r7,12(r6)
    4eb4:	31c00215 	stw	r7,8(r6)
    4eb8:	30c00115 	stw	r3,4(r6)
    4ebc:	308d883a 	add	r6,r6,r2
    4ec0:	30800015 	stw	r2,0(r6)
    4ec4:	003f9506 	br	4d1c <_gp+0xfffea9b0>
    4ec8:	00c01504 	movi	r3,84
    4ecc:	19400536 	bltu	r3,r5,4ee4 <_free_r+0x2b8>
    4ed0:	100ad33a 	srli	r5,r2,12
    4ed4:	28c01bc4 	addi	r3,r5,111
    4ed8:	18c7883a 	add	r3,r3,r3
    4edc:	29401b84 	addi	r5,r5,110
    4ee0:	003f9c06 	br	4d54 <_gp+0xfffea9e8>
    4ee4:	00c05504 	movi	r3,340
    4ee8:	19400536 	bltu	r3,r5,4f00 <_free_r+0x2d4>
    4eec:	100ad3fa 	srli	r5,r2,15
    4ef0:	28c01e04 	addi	r3,r5,120
    4ef4:	18c7883a 	add	r3,r3,r3
    4ef8:	29401dc4 	addi	r5,r5,119
    4efc:	003f9506 	br	4d54 <_gp+0xfffea9e8>
    4f00:	00c15504 	movi	r3,1364
    4f04:	19400536 	bltu	r3,r5,4f1c <_free_r+0x2f0>
    4f08:	100ad4ba 	srli	r5,r2,18
    4f0c:	28c01f44 	addi	r3,r5,125
    4f10:	18c7883a 	add	r3,r3,r3
    4f14:	29401f04 	addi	r5,r5,124
    4f18:	003f8e06 	br	4d54 <_gp+0xfffea9e8>
    4f1c:	00c03f84 	movi	r3,254
    4f20:	01401f84 	movi	r5,126
    4f24:	003f8b06 	br	4d54 <_gp+0xfffea9e8>
    4f28:	10c00054 	ori	r3,r2,1
    4f2c:	30c00115 	stw	r3,4(r6)
    4f30:	308d883a 	add	r6,r6,r2
    4f34:	30800015 	stw	r2,0(r6)
    4f38:	003f7806 	br	4d1c <_gp+0xfffea9b0>

00004f3c <_fwalk>:
    4f3c:	defff704 	addi	sp,sp,-36
    4f40:	dd000415 	stw	r20,16(sp)
    4f44:	dfc00815 	stw	ra,32(sp)
    4f48:	ddc00715 	stw	r23,28(sp)
    4f4c:	dd800615 	stw	r22,24(sp)
    4f50:	dd400515 	stw	r21,20(sp)
    4f54:	dcc00315 	stw	r19,12(sp)
    4f58:	dc800215 	stw	r18,8(sp)
    4f5c:	dc400115 	stw	r17,4(sp)
    4f60:	dc000015 	stw	r16,0(sp)
    4f64:	2500b804 	addi	r20,r4,736
    4f68:	a0002326 	beq	r20,zero,4ff8 <_fwalk+0xbc>
    4f6c:	282b883a 	mov	r21,r5
    4f70:	002f883a 	mov	r23,zero
    4f74:	05800044 	movi	r22,1
    4f78:	04ffffc4 	movi	r19,-1
    4f7c:	a4400117 	ldw	r17,4(r20)
    4f80:	a4800217 	ldw	r18,8(r20)
    4f84:	8c7fffc4 	addi	r17,r17,-1
    4f88:	88000d16 	blt	r17,zero,4fc0 <_fwalk+0x84>
    4f8c:	94000304 	addi	r16,r18,12
    4f90:	94800384 	addi	r18,r18,14
    4f94:	8080000b 	ldhu	r2,0(r16)
    4f98:	8c7fffc4 	addi	r17,r17,-1
    4f9c:	813ffd04 	addi	r4,r16,-12
    4fa0:	b080042e 	bgeu	r22,r2,4fb4 <_fwalk+0x78>
    4fa4:	9080000f 	ldh	r2,0(r18)
    4fa8:	14c00226 	beq	r2,r19,4fb4 <_fwalk+0x78>
    4fac:	a83ee83a 	callr	r21
    4fb0:	b8aeb03a 	or	r23,r23,r2
    4fb4:	84001a04 	addi	r16,r16,104
    4fb8:	94801a04 	addi	r18,r18,104
    4fbc:	8cfff51e 	bne	r17,r19,4f94 <_gp+0xfffeac28>
    4fc0:	a5000017 	ldw	r20,0(r20)
    4fc4:	a03fed1e 	bne	r20,zero,4f7c <_gp+0xfffeac10>
    4fc8:	b805883a 	mov	r2,r23
    4fcc:	dfc00817 	ldw	ra,32(sp)
    4fd0:	ddc00717 	ldw	r23,28(sp)
    4fd4:	dd800617 	ldw	r22,24(sp)
    4fd8:	dd400517 	ldw	r21,20(sp)
    4fdc:	dd000417 	ldw	r20,16(sp)
    4fe0:	dcc00317 	ldw	r19,12(sp)
    4fe4:	dc800217 	ldw	r18,8(sp)
    4fe8:	dc400117 	ldw	r17,4(sp)
    4fec:	dc000017 	ldw	r16,0(sp)
    4ff0:	dec00904 	addi	sp,sp,36
    4ff4:	f800283a 	ret
    4ff8:	002f883a 	mov	r23,zero
    4ffc:	003ff206 	br	4fc8 <_gp+0xfffeac5c>

00005000 <_fwalk_reent>:
    5000:	defff704 	addi	sp,sp,-36
    5004:	dd000415 	stw	r20,16(sp)
    5008:	dfc00815 	stw	ra,32(sp)
    500c:	ddc00715 	stw	r23,28(sp)
    5010:	dd800615 	stw	r22,24(sp)
    5014:	dd400515 	stw	r21,20(sp)
    5018:	dcc00315 	stw	r19,12(sp)
    501c:	dc800215 	stw	r18,8(sp)
    5020:	dc400115 	stw	r17,4(sp)
    5024:	dc000015 	stw	r16,0(sp)
    5028:	2500b804 	addi	r20,r4,736
    502c:	a0002326 	beq	r20,zero,50bc <_fwalk_reent+0xbc>
    5030:	282b883a 	mov	r21,r5
    5034:	2027883a 	mov	r19,r4
    5038:	002f883a 	mov	r23,zero
    503c:	05800044 	movi	r22,1
    5040:	04bfffc4 	movi	r18,-1
    5044:	a4400117 	ldw	r17,4(r20)
    5048:	a4000217 	ldw	r16,8(r20)
    504c:	8c7fffc4 	addi	r17,r17,-1
    5050:	88000c16 	blt	r17,zero,5084 <_fwalk_reent+0x84>
    5054:	84000304 	addi	r16,r16,12
    5058:	8080000b 	ldhu	r2,0(r16)
    505c:	8c7fffc4 	addi	r17,r17,-1
    5060:	817ffd04 	addi	r5,r16,-12
    5064:	b080052e 	bgeu	r22,r2,507c <_fwalk_reent+0x7c>
    5068:	8080008f 	ldh	r2,2(r16)
    506c:	9809883a 	mov	r4,r19
    5070:	14800226 	beq	r2,r18,507c <_fwalk_reent+0x7c>
    5074:	a83ee83a 	callr	r21
    5078:	b8aeb03a 	or	r23,r23,r2
    507c:	84001a04 	addi	r16,r16,104
    5080:	8cbff51e 	bne	r17,r18,5058 <_gp+0xfffeacec>
    5084:	a5000017 	ldw	r20,0(r20)
    5088:	a03fee1e 	bne	r20,zero,5044 <_gp+0xfffeacd8>
    508c:	b805883a 	mov	r2,r23
    5090:	dfc00817 	ldw	ra,32(sp)
    5094:	ddc00717 	ldw	r23,28(sp)
    5098:	dd800617 	ldw	r22,24(sp)
    509c:	dd400517 	ldw	r21,20(sp)
    50a0:	dd000417 	ldw	r20,16(sp)
    50a4:	dcc00317 	ldw	r19,12(sp)
    50a8:	dc800217 	ldw	r18,8(sp)
    50ac:	dc400117 	ldw	r17,4(sp)
    50b0:	dc000017 	ldw	r16,0(sp)
    50b4:	dec00904 	addi	sp,sp,36
    50b8:	f800283a 	ret
    50bc:	002f883a 	mov	r23,zero
    50c0:	003ff206 	br	508c <_gp+0xfffead20>

000050c4 <_setlocale_r>:
    50c4:	30001b26 	beq	r6,zero,5134 <_setlocale_r+0x70>
    50c8:	01400074 	movhi	r5,1
    50cc:	defffe04 	addi	sp,sp,-8
    50d0:	29419104 	addi	r5,r5,1604
    50d4:	3009883a 	mov	r4,r6
    50d8:	dc000015 	stw	r16,0(sp)
    50dc:	dfc00115 	stw	ra,4(sp)
    50e0:	3021883a 	mov	r16,r6
    50e4:	00071780 	call	7178 <strcmp>
    50e8:	1000061e 	bne	r2,zero,5104 <_setlocale_r+0x40>
    50ec:	00800074 	movhi	r2,1
    50f0:	10819004 	addi	r2,r2,1600
    50f4:	dfc00117 	ldw	ra,4(sp)
    50f8:	dc000017 	ldw	r16,0(sp)
    50fc:	dec00204 	addi	sp,sp,8
    5100:	f800283a 	ret
    5104:	01400074 	movhi	r5,1
    5108:	29419004 	addi	r5,r5,1600
    510c:	8009883a 	mov	r4,r16
    5110:	00071780 	call	7178 <strcmp>
    5114:	103ff526 	beq	r2,zero,50ec <_gp+0xfffead80>
    5118:	01400074 	movhi	r5,1
    511c:	29417b04 	addi	r5,r5,1516
    5120:	8009883a 	mov	r4,r16
    5124:	00071780 	call	7178 <strcmp>
    5128:	103ff026 	beq	r2,zero,50ec <_gp+0xfffead80>
    512c:	0005883a 	mov	r2,zero
    5130:	003ff006 	br	50f4 <_gp+0xfffead88>
    5134:	00800074 	movhi	r2,1
    5138:	10819004 	addi	r2,r2,1600
    513c:	f800283a 	ret

00005140 <__locale_charset>:
    5140:	00800074 	movhi	r2,1
    5144:	10834104 	addi	r2,r2,3332
    5148:	f800283a 	ret

0000514c <__locale_mb_cur_max>:
    514c:	00800074 	movhi	r2,1
    5150:	1088dd04 	addi	r2,r2,9076
    5154:	10800017 	ldw	r2,0(r2)
    5158:	f800283a 	ret

0000515c <__locale_msgcharset>:
    515c:	00800074 	movhi	r2,1
    5160:	10833904 	addi	r2,r2,3300
    5164:	f800283a 	ret

00005168 <__locale_cjk_lang>:
    5168:	0005883a 	mov	r2,zero
    516c:	f800283a 	ret

00005170 <_localeconv_r>:
    5170:	00800074 	movhi	r2,1
    5174:	10834904 	addi	r2,r2,3364
    5178:	f800283a 	ret

0000517c <setlocale>:
    517c:	00800074 	movhi	r2,1
    5180:	1088dc04 	addi	r2,r2,9072
    5184:	280d883a 	mov	r6,r5
    5188:	200b883a 	mov	r5,r4
    518c:	11000017 	ldw	r4,0(r2)
    5190:	00050c41 	jmpi	50c4 <_setlocale_r>

00005194 <localeconv>:
    5194:	00800074 	movhi	r2,1
    5198:	10834904 	addi	r2,r2,3364
    519c:	f800283a 	ret

000051a0 <__smakebuf_r>:
    51a0:	2880030b 	ldhu	r2,12(r5)
    51a4:	10c0008c 	andi	r3,r2,2
    51a8:	1800411e 	bne	r3,zero,52b0 <__smakebuf_r+0x110>
    51ac:	deffec04 	addi	sp,sp,-80
    51b0:	dc000f15 	stw	r16,60(sp)
    51b4:	2821883a 	mov	r16,r5
    51b8:	2940038f 	ldh	r5,14(r5)
    51bc:	dc401015 	stw	r17,64(sp)
    51c0:	dfc01315 	stw	ra,76(sp)
    51c4:	dcc01215 	stw	r19,72(sp)
    51c8:	dc801115 	stw	r18,68(sp)
    51cc:	2023883a 	mov	r17,r4
    51d0:	28001c16 	blt	r5,zero,5244 <__smakebuf_r+0xa4>
    51d4:	d80d883a 	mov	r6,sp
    51d8:	0008e800 	call	8e80 <_fstat_r>
    51dc:	10001816 	blt	r2,zero,5240 <__smakebuf_r+0xa0>
    51e0:	d8800117 	ldw	r2,4(sp)
    51e4:	00e00014 	movui	r3,32768
    51e8:	10bc000c 	andi	r2,r2,61440
    51ec:	14c80020 	cmpeqi	r19,r2,8192
    51f0:	10c03726 	beq	r2,r3,52d0 <__smakebuf_r+0x130>
    51f4:	80c0030b 	ldhu	r3,12(r16)
    51f8:	18c20014 	ori	r3,r3,2048
    51fc:	80c0030d 	sth	r3,12(r16)
    5200:	00c80004 	movi	r3,8192
    5204:	10c0521e 	bne	r2,r3,5350 <__smakebuf_r+0x1b0>
    5208:	8140038f 	ldh	r5,14(r16)
    520c:	8809883a 	mov	r4,r17
    5210:	00093a40 	call	93a4 <_isatty_r>
    5214:	10004c26 	beq	r2,zero,5348 <__smakebuf_r+0x1a8>
    5218:	8080030b 	ldhu	r2,12(r16)
    521c:	80c010c4 	addi	r3,r16,67
    5220:	80c00015 	stw	r3,0(r16)
    5224:	10800054 	ori	r2,r2,1
    5228:	8080030d 	sth	r2,12(r16)
    522c:	00800044 	movi	r2,1
    5230:	80c00415 	stw	r3,16(r16)
    5234:	80800515 	stw	r2,20(r16)
    5238:	04810004 	movi	r18,1024
    523c:	00000706 	br	525c <__smakebuf_r+0xbc>
    5240:	8080030b 	ldhu	r2,12(r16)
    5244:	10c0200c 	andi	r3,r2,128
    5248:	18001f1e 	bne	r3,zero,52c8 <__smakebuf_r+0x128>
    524c:	04810004 	movi	r18,1024
    5250:	10820014 	ori	r2,r2,2048
    5254:	8080030d 	sth	r2,12(r16)
    5258:	0027883a 	mov	r19,zero
    525c:	900b883a 	mov	r5,r18
    5260:	8809883a 	mov	r4,r17
    5264:	000535c0 	call	535c <_malloc_r>
    5268:	10002c26 	beq	r2,zero,531c <__smakebuf_r+0x17c>
    526c:	80c0030b 	ldhu	r3,12(r16)
    5270:	01000034 	movhi	r4,0
    5274:	2111d804 	addi	r4,r4,18272
    5278:	89000f15 	stw	r4,60(r17)
    527c:	18c02014 	ori	r3,r3,128
    5280:	80c0030d 	sth	r3,12(r16)
    5284:	80800015 	stw	r2,0(r16)
    5288:	80800415 	stw	r2,16(r16)
    528c:	84800515 	stw	r18,20(r16)
    5290:	98001a1e 	bne	r19,zero,52fc <__smakebuf_r+0x15c>
    5294:	dfc01317 	ldw	ra,76(sp)
    5298:	dcc01217 	ldw	r19,72(sp)
    529c:	dc801117 	ldw	r18,68(sp)
    52a0:	dc401017 	ldw	r17,64(sp)
    52a4:	dc000f17 	ldw	r16,60(sp)
    52a8:	dec01404 	addi	sp,sp,80
    52ac:	f800283a 	ret
    52b0:	288010c4 	addi	r2,r5,67
    52b4:	28800015 	stw	r2,0(r5)
    52b8:	28800415 	stw	r2,16(r5)
    52bc:	00800044 	movi	r2,1
    52c0:	28800515 	stw	r2,20(r5)
    52c4:	f800283a 	ret
    52c8:	04801004 	movi	r18,64
    52cc:	003fe006 	br	5250 <_gp+0xfffeaee4>
    52d0:	81000a17 	ldw	r4,40(r16)
    52d4:	00c00034 	movhi	r3,0
    52d8:	18dc4504 	addi	r3,r3,28948
    52dc:	20ffc51e 	bne	r4,r3,51f4 <_gp+0xfffeae88>
    52e0:	8080030b 	ldhu	r2,12(r16)
    52e4:	04810004 	movi	r18,1024
    52e8:	84801315 	stw	r18,76(r16)
    52ec:	1484b03a 	or	r2,r2,r18
    52f0:	8080030d 	sth	r2,12(r16)
    52f4:	0027883a 	mov	r19,zero
    52f8:	003fd806 	br	525c <_gp+0xfffeaef0>
    52fc:	8140038f 	ldh	r5,14(r16)
    5300:	8809883a 	mov	r4,r17
    5304:	00093a40 	call	93a4 <_isatty_r>
    5308:	103fe226 	beq	r2,zero,5294 <_gp+0xfffeaf28>
    530c:	8080030b 	ldhu	r2,12(r16)
    5310:	10800054 	ori	r2,r2,1
    5314:	8080030d 	sth	r2,12(r16)
    5318:	003fde06 	br	5294 <_gp+0xfffeaf28>
    531c:	8080030b 	ldhu	r2,12(r16)
    5320:	10c0800c 	andi	r3,r2,512
    5324:	183fdb1e 	bne	r3,zero,5294 <_gp+0xfffeaf28>
    5328:	10800094 	ori	r2,r2,2
    532c:	80c010c4 	addi	r3,r16,67
    5330:	8080030d 	sth	r2,12(r16)
    5334:	00800044 	movi	r2,1
    5338:	80c00015 	stw	r3,0(r16)
    533c:	80c00415 	stw	r3,16(r16)
    5340:	80800515 	stw	r2,20(r16)
    5344:	003fd306 	br	5294 <_gp+0xfffeaf28>
    5348:	04810004 	movi	r18,1024
    534c:	003fc306 	br	525c <_gp+0xfffeaef0>
    5350:	0027883a 	mov	r19,zero
    5354:	04810004 	movi	r18,1024
    5358:	003fc006 	br	525c <_gp+0xfffeaef0>

0000535c <_malloc_r>:
    535c:	defff504 	addi	sp,sp,-44
    5360:	dc800315 	stw	r18,12(sp)
    5364:	dfc00a15 	stw	ra,40(sp)
    5368:	df000915 	stw	fp,36(sp)
    536c:	ddc00815 	stw	r23,32(sp)
    5370:	dd800715 	stw	r22,28(sp)
    5374:	dd400615 	stw	r21,24(sp)
    5378:	dd000515 	stw	r20,20(sp)
    537c:	dcc00415 	stw	r19,16(sp)
    5380:	dc400215 	stw	r17,8(sp)
    5384:	dc000115 	stw	r16,4(sp)
    5388:	288002c4 	addi	r2,r5,11
    538c:	00c00584 	movi	r3,22
    5390:	2025883a 	mov	r18,r4
    5394:	18807f2e 	bgeu	r3,r2,5594 <_malloc_r+0x238>
    5398:	047ffe04 	movi	r17,-8
    539c:	1462703a 	and	r17,r2,r17
    53a0:	8800a316 	blt	r17,zero,5630 <_malloc_r+0x2d4>
    53a4:	8940a236 	bltu	r17,r5,5630 <_malloc_r+0x2d4>
    53a8:	000daa00 	call	daa0 <__malloc_lock>
    53ac:	00807dc4 	movi	r2,503
    53b0:	1441e92e 	bgeu	r2,r17,5b58 <_malloc_r+0x7fc>
    53b4:	8804d27a 	srli	r2,r17,9
    53b8:	1000a126 	beq	r2,zero,5640 <_malloc_r+0x2e4>
    53bc:	00c00104 	movi	r3,4
    53c0:	18811e36 	bltu	r3,r2,583c <_malloc_r+0x4e0>
    53c4:	8804d1ba 	srli	r2,r17,6
    53c8:	12000e44 	addi	r8,r2,57
    53cc:	11c00e04 	addi	r7,r2,56
    53d0:	4209883a 	add	r4,r8,r8
    53d4:	04c00074 	movhi	r19,1
    53d8:	2109883a 	add	r4,r4,r4
    53dc:	9cc35704 	addi	r19,r19,3420
    53e0:	2109883a 	add	r4,r4,r4
    53e4:	9909883a 	add	r4,r19,r4
    53e8:	24000117 	ldw	r16,4(r4)
    53ec:	213ffe04 	addi	r4,r4,-8
    53f0:	24009726 	beq	r4,r16,5650 <_malloc_r+0x2f4>
    53f4:	80800117 	ldw	r2,4(r16)
    53f8:	01bfff04 	movi	r6,-4
    53fc:	014003c4 	movi	r5,15
    5400:	1184703a 	and	r2,r2,r6
    5404:	1447c83a 	sub	r3,r2,r17
    5408:	28c00716 	blt	r5,r3,5428 <_malloc_r+0xcc>
    540c:	1800920e 	bge	r3,zero,5658 <_malloc_r+0x2fc>
    5410:	84000317 	ldw	r16,12(r16)
    5414:	24008e26 	beq	r4,r16,5650 <_malloc_r+0x2f4>
    5418:	80800117 	ldw	r2,4(r16)
    541c:	1184703a 	and	r2,r2,r6
    5420:	1447c83a 	sub	r3,r2,r17
    5424:	28fff90e 	bge	r5,r3,540c <_gp+0xfffeb0a0>
    5428:	3809883a 	mov	r4,r7
    542c:	01800074 	movhi	r6,1
    5430:	9c000417 	ldw	r16,16(r19)
    5434:	31835704 	addi	r6,r6,3420
    5438:	32000204 	addi	r8,r6,8
    543c:	82013426 	beq	r16,r8,5910 <_malloc_r+0x5b4>
    5440:	80c00117 	ldw	r3,4(r16)
    5444:	00bfff04 	movi	r2,-4
    5448:	188e703a 	and	r7,r3,r2
    544c:	3c45c83a 	sub	r2,r7,r17
    5450:	00c003c4 	movi	r3,15
    5454:	18811f16 	blt	r3,r2,58d4 <_malloc_r+0x578>
    5458:	32000515 	stw	r8,20(r6)
    545c:	32000415 	stw	r8,16(r6)
    5460:	10007f0e 	bge	r2,zero,5660 <_malloc_r+0x304>
    5464:	00807fc4 	movi	r2,511
    5468:	11c0fd36 	bltu	r2,r7,5860 <_malloc_r+0x504>
    546c:	3806d0fa 	srli	r3,r7,3
    5470:	01c00044 	movi	r7,1
    5474:	30800117 	ldw	r2,4(r6)
    5478:	19400044 	addi	r5,r3,1
    547c:	294b883a 	add	r5,r5,r5
    5480:	1807d0ba 	srai	r3,r3,2
    5484:	294b883a 	add	r5,r5,r5
    5488:	294b883a 	add	r5,r5,r5
    548c:	298b883a 	add	r5,r5,r6
    5490:	38c6983a 	sll	r3,r7,r3
    5494:	29c00017 	ldw	r7,0(r5)
    5498:	2a7ffe04 	addi	r9,r5,-8
    549c:	1886b03a 	or	r3,r3,r2
    54a0:	82400315 	stw	r9,12(r16)
    54a4:	81c00215 	stw	r7,8(r16)
    54a8:	30c00115 	stw	r3,4(r6)
    54ac:	2c000015 	stw	r16,0(r5)
    54b0:	3c000315 	stw	r16,12(r7)
    54b4:	2005d0ba 	srai	r2,r4,2
    54b8:	01400044 	movi	r5,1
    54bc:	288a983a 	sll	r5,r5,r2
    54c0:	19406f36 	bltu	r3,r5,5680 <_malloc_r+0x324>
    54c4:	28c4703a 	and	r2,r5,r3
    54c8:	10000a1e 	bne	r2,zero,54f4 <_malloc_r+0x198>
    54cc:	00bfff04 	movi	r2,-4
    54d0:	294b883a 	add	r5,r5,r5
    54d4:	2088703a 	and	r4,r4,r2
    54d8:	28c4703a 	and	r2,r5,r3
    54dc:	21000104 	addi	r4,r4,4
    54e0:	1000041e 	bne	r2,zero,54f4 <_malloc_r+0x198>
    54e4:	294b883a 	add	r5,r5,r5
    54e8:	28c4703a 	and	r2,r5,r3
    54ec:	21000104 	addi	r4,r4,4
    54f0:	103ffc26 	beq	r2,zero,54e4 <_gp+0xfffeb178>
    54f4:	02bfff04 	movi	r10,-4
    54f8:	024003c4 	movi	r9,15
    54fc:	21800044 	addi	r6,r4,1
    5500:	318d883a 	add	r6,r6,r6
    5504:	318d883a 	add	r6,r6,r6
    5508:	318d883a 	add	r6,r6,r6
    550c:	998d883a 	add	r6,r19,r6
    5510:	333ffe04 	addi	r12,r6,-8
    5514:	2017883a 	mov	r11,r4
    5518:	31800104 	addi	r6,r6,4
    551c:	34000017 	ldw	r16,0(r6)
    5520:	31fffd04 	addi	r7,r6,-12
    5524:	81c0041e 	bne	r16,r7,5538 <_malloc_r+0x1dc>
    5528:	0000fb06 	br	5918 <_malloc_r+0x5bc>
    552c:	1801030e 	bge	r3,zero,593c <_malloc_r+0x5e0>
    5530:	84000317 	ldw	r16,12(r16)
    5534:	81c0f826 	beq	r16,r7,5918 <_malloc_r+0x5bc>
    5538:	80800117 	ldw	r2,4(r16)
    553c:	1284703a 	and	r2,r2,r10
    5540:	1447c83a 	sub	r3,r2,r17
    5544:	48fff90e 	bge	r9,r3,552c <_gp+0xfffeb1c0>
    5548:	80800317 	ldw	r2,12(r16)
    554c:	81000217 	ldw	r4,8(r16)
    5550:	89400054 	ori	r5,r17,1
    5554:	81400115 	stw	r5,4(r16)
    5558:	20800315 	stw	r2,12(r4)
    555c:	11000215 	stw	r4,8(r2)
    5560:	8463883a 	add	r17,r16,r17
    5564:	9c400515 	stw	r17,20(r19)
    5568:	9c400415 	stw	r17,16(r19)
    556c:	18800054 	ori	r2,r3,1
    5570:	88800115 	stw	r2,4(r17)
    5574:	8a000315 	stw	r8,12(r17)
    5578:	8a000215 	stw	r8,8(r17)
    557c:	88e3883a 	add	r17,r17,r3
    5580:	88c00015 	stw	r3,0(r17)
    5584:	9009883a 	mov	r4,r18
    5588:	000dac40 	call	dac4 <__malloc_unlock>
    558c:	80800204 	addi	r2,r16,8
    5590:	00001b06 	br	5600 <_malloc_r+0x2a4>
    5594:	04400404 	movi	r17,16
    5598:	89402536 	bltu	r17,r5,5630 <_malloc_r+0x2d4>
    559c:	000daa00 	call	daa0 <__malloc_lock>
    55a0:	00800184 	movi	r2,6
    55a4:	01000084 	movi	r4,2
    55a8:	04c00074 	movhi	r19,1
    55ac:	1085883a 	add	r2,r2,r2
    55b0:	9cc35704 	addi	r19,r19,3420
    55b4:	1085883a 	add	r2,r2,r2
    55b8:	9885883a 	add	r2,r19,r2
    55bc:	14000117 	ldw	r16,4(r2)
    55c0:	10fffe04 	addi	r3,r2,-8
    55c4:	80c0d926 	beq	r16,r3,592c <_malloc_r+0x5d0>
    55c8:	80c00117 	ldw	r3,4(r16)
    55cc:	81000317 	ldw	r4,12(r16)
    55d0:	00bfff04 	movi	r2,-4
    55d4:	1884703a 	and	r2,r3,r2
    55d8:	81400217 	ldw	r5,8(r16)
    55dc:	8085883a 	add	r2,r16,r2
    55e0:	10c00117 	ldw	r3,4(r2)
    55e4:	29000315 	stw	r4,12(r5)
    55e8:	21400215 	stw	r5,8(r4)
    55ec:	18c00054 	ori	r3,r3,1
    55f0:	10c00115 	stw	r3,4(r2)
    55f4:	9009883a 	mov	r4,r18
    55f8:	000dac40 	call	dac4 <__malloc_unlock>
    55fc:	80800204 	addi	r2,r16,8
    5600:	dfc00a17 	ldw	ra,40(sp)
    5604:	df000917 	ldw	fp,36(sp)
    5608:	ddc00817 	ldw	r23,32(sp)
    560c:	dd800717 	ldw	r22,28(sp)
    5610:	dd400617 	ldw	r21,24(sp)
    5614:	dd000517 	ldw	r20,20(sp)
    5618:	dcc00417 	ldw	r19,16(sp)
    561c:	dc800317 	ldw	r18,12(sp)
    5620:	dc400217 	ldw	r17,8(sp)
    5624:	dc000117 	ldw	r16,4(sp)
    5628:	dec00b04 	addi	sp,sp,44
    562c:	f800283a 	ret
    5630:	00800304 	movi	r2,12
    5634:	90800015 	stw	r2,0(r18)
    5638:	0005883a 	mov	r2,zero
    563c:	003ff006 	br	5600 <_gp+0xfffeb294>
    5640:	01002004 	movi	r4,128
    5644:	02001004 	movi	r8,64
    5648:	01c00fc4 	movi	r7,63
    564c:	003f6106 	br	53d4 <_gp+0xfffeb068>
    5650:	4009883a 	mov	r4,r8
    5654:	003f7506 	br	542c <_gp+0xfffeb0c0>
    5658:	81000317 	ldw	r4,12(r16)
    565c:	003fde06 	br	55d8 <_gp+0xfffeb26c>
    5660:	81c5883a 	add	r2,r16,r7
    5664:	11400117 	ldw	r5,4(r2)
    5668:	9009883a 	mov	r4,r18
    566c:	29400054 	ori	r5,r5,1
    5670:	11400115 	stw	r5,4(r2)
    5674:	000dac40 	call	dac4 <__malloc_unlock>
    5678:	80800204 	addi	r2,r16,8
    567c:	003fe006 	br	5600 <_gp+0xfffeb294>
    5680:	9c000217 	ldw	r16,8(r19)
    5684:	00bfff04 	movi	r2,-4
    5688:	85800117 	ldw	r22,4(r16)
    568c:	b0ac703a 	and	r22,r22,r2
    5690:	b4400336 	bltu	r22,r17,56a0 <_malloc_r+0x344>
    5694:	b445c83a 	sub	r2,r22,r17
    5698:	00c003c4 	movi	r3,15
    569c:	18805d16 	blt	r3,r2,5814 <_malloc_r+0x4b8>
    56a0:	05c00074 	movhi	r23,1
    56a4:	00800074 	movhi	r2,1
    56a8:	108fab04 	addi	r2,r2,16044
    56ac:	bdc8de04 	addi	r23,r23,9080
    56b0:	15400017 	ldw	r21,0(r2)
    56b4:	b8c00017 	ldw	r3,0(r23)
    56b8:	00bfffc4 	movi	r2,-1
    56bc:	858d883a 	add	r6,r16,r22
    56c0:	8d6b883a 	add	r21,r17,r21
    56c4:	1880ea26 	beq	r3,r2,5a70 <_malloc_r+0x714>
    56c8:	ad4403c4 	addi	r21,r21,4111
    56cc:	00bc0004 	movi	r2,-4096
    56d0:	a8aa703a 	and	r21,r21,r2
    56d4:	a80b883a 	mov	r5,r21
    56d8:	9009883a 	mov	r4,r18
    56dc:	d9800015 	stw	r6,0(sp)
    56e0:	0006fe80 	call	6fe8 <_sbrk_r>
    56e4:	1029883a 	mov	r20,r2
    56e8:	00bfffc4 	movi	r2,-1
    56ec:	d9800017 	ldw	r6,0(sp)
    56f0:	a080e826 	beq	r20,r2,5a94 <_malloc_r+0x738>
    56f4:	a180a636 	bltu	r20,r6,5990 <_malloc_r+0x634>
    56f8:	07000074 	movhi	fp,1
    56fc:	e70fb404 	addi	fp,fp,16080
    5700:	e0800017 	ldw	r2,0(fp)
    5704:	a887883a 	add	r3,r21,r2
    5708:	e0c00015 	stw	r3,0(fp)
    570c:	3500e626 	beq	r6,r20,5aa8 <_malloc_r+0x74c>
    5710:	b9000017 	ldw	r4,0(r23)
    5714:	00bfffc4 	movi	r2,-1
    5718:	2080ee26 	beq	r4,r2,5ad4 <_malloc_r+0x778>
    571c:	a185c83a 	sub	r2,r20,r6
    5720:	10c5883a 	add	r2,r2,r3
    5724:	e0800015 	stw	r2,0(fp)
    5728:	a0c001cc 	andi	r3,r20,7
    572c:	1800bc26 	beq	r3,zero,5a20 <_malloc_r+0x6c4>
    5730:	a0e9c83a 	sub	r20,r20,r3
    5734:	00840204 	movi	r2,4104
    5738:	a5000204 	addi	r20,r20,8
    573c:	10c7c83a 	sub	r3,r2,r3
    5740:	a545883a 	add	r2,r20,r21
    5744:	1083ffcc 	andi	r2,r2,4095
    5748:	18abc83a 	sub	r21,r3,r2
    574c:	a80b883a 	mov	r5,r21
    5750:	9009883a 	mov	r4,r18
    5754:	0006fe80 	call	6fe8 <_sbrk_r>
    5758:	00ffffc4 	movi	r3,-1
    575c:	10c0e126 	beq	r2,r3,5ae4 <_malloc_r+0x788>
    5760:	1505c83a 	sub	r2,r2,r20
    5764:	1545883a 	add	r2,r2,r21
    5768:	10800054 	ori	r2,r2,1
    576c:	e0c00017 	ldw	r3,0(fp)
    5770:	9d000215 	stw	r20,8(r19)
    5774:	a0800115 	stw	r2,4(r20)
    5778:	a8c7883a 	add	r3,r21,r3
    577c:	e0c00015 	stw	r3,0(fp)
    5780:	84c00e26 	beq	r16,r19,57bc <_malloc_r+0x460>
    5784:	018003c4 	movi	r6,15
    5788:	3580a72e 	bgeu	r6,r22,5a28 <_malloc_r+0x6cc>
    578c:	81400117 	ldw	r5,4(r16)
    5790:	013ffe04 	movi	r4,-8
    5794:	b0bffd04 	addi	r2,r22,-12
    5798:	1104703a 	and	r2,r2,r4
    579c:	2900004c 	andi	r4,r5,1
    57a0:	2088b03a 	or	r4,r4,r2
    57a4:	81000115 	stw	r4,4(r16)
    57a8:	01400144 	movi	r5,5
    57ac:	8089883a 	add	r4,r16,r2
    57b0:	21400115 	stw	r5,4(r4)
    57b4:	21400215 	stw	r5,8(r4)
    57b8:	3080cd36 	bltu	r6,r2,5af0 <_malloc_r+0x794>
    57bc:	00800074 	movhi	r2,1
    57c0:	108faa04 	addi	r2,r2,16040
    57c4:	11000017 	ldw	r4,0(r2)
    57c8:	20c0012e 	bgeu	r4,r3,57d0 <_malloc_r+0x474>
    57cc:	10c00015 	stw	r3,0(r2)
    57d0:	00800074 	movhi	r2,1
    57d4:	108fa904 	addi	r2,r2,16036
    57d8:	11000017 	ldw	r4,0(r2)
    57dc:	9c000217 	ldw	r16,8(r19)
    57e0:	20c0012e 	bgeu	r4,r3,57e8 <_malloc_r+0x48c>
    57e4:	10c00015 	stw	r3,0(r2)
    57e8:	80c00117 	ldw	r3,4(r16)
    57ec:	00bfff04 	movi	r2,-4
    57f0:	1886703a 	and	r3,r3,r2
    57f4:	1c45c83a 	sub	r2,r3,r17
    57f8:	1c400236 	bltu	r3,r17,5804 <_malloc_r+0x4a8>
    57fc:	00c003c4 	movi	r3,15
    5800:	18800416 	blt	r3,r2,5814 <_malloc_r+0x4b8>
    5804:	9009883a 	mov	r4,r18
    5808:	000dac40 	call	dac4 <__malloc_unlock>
    580c:	0005883a 	mov	r2,zero
    5810:	003f7b06 	br	5600 <_gp+0xfffeb294>
    5814:	88c00054 	ori	r3,r17,1
    5818:	80c00115 	stw	r3,4(r16)
    581c:	8463883a 	add	r17,r16,r17
    5820:	10800054 	ori	r2,r2,1
    5824:	9c400215 	stw	r17,8(r19)
    5828:	88800115 	stw	r2,4(r17)
    582c:	9009883a 	mov	r4,r18
    5830:	000dac40 	call	dac4 <__malloc_unlock>
    5834:	80800204 	addi	r2,r16,8
    5838:	003f7106 	br	5600 <_gp+0xfffeb294>
    583c:	00c00504 	movi	r3,20
    5840:	18804a2e 	bgeu	r3,r2,596c <_malloc_r+0x610>
    5844:	00c01504 	movi	r3,84
    5848:	18806e36 	bltu	r3,r2,5a04 <_malloc_r+0x6a8>
    584c:	8804d33a 	srli	r2,r17,12
    5850:	12001bc4 	addi	r8,r2,111
    5854:	11c01b84 	addi	r7,r2,110
    5858:	4209883a 	add	r4,r8,r8
    585c:	003edd06 	br	53d4 <_gp+0xfffeb068>
    5860:	3804d27a 	srli	r2,r7,9
    5864:	00c00104 	movi	r3,4
    5868:	1880442e 	bgeu	r3,r2,597c <_malloc_r+0x620>
    586c:	00c00504 	movi	r3,20
    5870:	18808136 	bltu	r3,r2,5a78 <_malloc_r+0x71c>
    5874:	11401704 	addi	r5,r2,92
    5878:	10c016c4 	addi	r3,r2,91
    587c:	294b883a 	add	r5,r5,r5
    5880:	294b883a 	add	r5,r5,r5
    5884:	294b883a 	add	r5,r5,r5
    5888:	994b883a 	add	r5,r19,r5
    588c:	28800017 	ldw	r2,0(r5)
    5890:	01800074 	movhi	r6,1
    5894:	297ffe04 	addi	r5,r5,-8
    5898:	31835704 	addi	r6,r6,3420
    589c:	28806526 	beq	r5,r2,5a34 <_malloc_r+0x6d8>
    58a0:	01bfff04 	movi	r6,-4
    58a4:	10c00117 	ldw	r3,4(r2)
    58a8:	1986703a 	and	r3,r3,r6
    58ac:	38c0022e 	bgeu	r7,r3,58b8 <_malloc_r+0x55c>
    58b0:	10800217 	ldw	r2,8(r2)
    58b4:	28bffb1e 	bne	r5,r2,58a4 <_gp+0xfffeb538>
    58b8:	11400317 	ldw	r5,12(r2)
    58bc:	98c00117 	ldw	r3,4(r19)
    58c0:	81400315 	stw	r5,12(r16)
    58c4:	80800215 	stw	r2,8(r16)
    58c8:	2c000215 	stw	r16,8(r5)
    58cc:	14000315 	stw	r16,12(r2)
    58d0:	003ef806 	br	54b4 <_gp+0xfffeb148>
    58d4:	88c00054 	ori	r3,r17,1
    58d8:	80c00115 	stw	r3,4(r16)
    58dc:	8463883a 	add	r17,r16,r17
    58e0:	34400515 	stw	r17,20(r6)
    58e4:	34400415 	stw	r17,16(r6)
    58e8:	10c00054 	ori	r3,r2,1
    58ec:	8a000315 	stw	r8,12(r17)
    58f0:	8a000215 	stw	r8,8(r17)
    58f4:	88c00115 	stw	r3,4(r17)
    58f8:	88a3883a 	add	r17,r17,r2
    58fc:	88800015 	stw	r2,0(r17)
    5900:	9009883a 	mov	r4,r18
    5904:	000dac40 	call	dac4 <__malloc_unlock>
    5908:	80800204 	addi	r2,r16,8
    590c:	003f3c06 	br	5600 <_gp+0xfffeb294>
    5910:	30c00117 	ldw	r3,4(r6)
    5914:	003ee706 	br	54b4 <_gp+0xfffeb148>
    5918:	5ac00044 	addi	r11,r11,1
    591c:	588000cc 	andi	r2,r11,3
    5920:	31800204 	addi	r6,r6,8
    5924:	103efd1e 	bne	r2,zero,551c <_gp+0xfffeb1b0>
    5928:	00002406 	br	59bc <_malloc_r+0x660>
    592c:	14000317 	ldw	r16,12(r2)
    5930:	143f251e 	bne	r2,r16,55c8 <_gp+0xfffeb25c>
    5934:	21000084 	addi	r4,r4,2
    5938:	003ebc06 	br	542c <_gp+0xfffeb0c0>
    593c:	8085883a 	add	r2,r16,r2
    5940:	10c00117 	ldw	r3,4(r2)
    5944:	81000317 	ldw	r4,12(r16)
    5948:	81400217 	ldw	r5,8(r16)
    594c:	18c00054 	ori	r3,r3,1
    5950:	10c00115 	stw	r3,4(r2)
    5954:	29000315 	stw	r4,12(r5)
    5958:	21400215 	stw	r5,8(r4)
    595c:	9009883a 	mov	r4,r18
    5960:	000dac40 	call	dac4 <__malloc_unlock>
    5964:	80800204 	addi	r2,r16,8
    5968:	003f2506 	br	5600 <_gp+0xfffeb294>
    596c:	12001704 	addi	r8,r2,92
    5970:	11c016c4 	addi	r7,r2,91
    5974:	4209883a 	add	r4,r8,r8
    5978:	003e9606 	br	53d4 <_gp+0xfffeb068>
    597c:	3804d1ba 	srli	r2,r7,6
    5980:	11400e44 	addi	r5,r2,57
    5984:	10c00e04 	addi	r3,r2,56
    5988:	294b883a 	add	r5,r5,r5
    598c:	003fbc06 	br	5880 <_gp+0xfffeb514>
    5990:	84ff5926 	beq	r16,r19,56f8 <_gp+0xfffeb38c>
    5994:	00800074 	movhi	r2,1
    5998:	10835704 	addi	r2,r2,3420
    599c:	14000217 	ldw	r16,8(r2)
    59a0:	00bfff04 	movi	r2,-4
    59a4:	80c00117 	ldw	r3,4(r16)
    59a8:	1886703a 	and	r3,r3,r2
    59ac:	003f9106 	br	57f4 <_gp+0xfffeb488>
    59b0:	60800217 	ldw	r2,8(r12)
    59b4:	213fffc4 	addi	r4,r4,-1
    59b8:	1300651e 	bne	r2,r12,5b50 <_malloc_r+0x7f4>
    59bc:	208000cc 	andi	r2,r4,3
    59c0:	633ffe04 	addi	r12,r12,-8
    59c4:	103ffa1e 	bne	r2,zero,59b0 <_gp+0xfffeb644>
    59c8:	98800117 	ldw	r2,4(r19)
    59cc:	0146303a 	nor	r3,zero,r5
    59d0:	1884703a 	and	r2,r3,r2
    59d4:	98800115 	stw	r2,4(r19)
    59d8:	294b883a 	add	r5,r5,r5
    59dc:	117f2836 	bltu	r2,r5,5680 <_gp+0xfffeb314>
    59e0:	283f2726 	beq	r5,zero,5680 <_gp+0xfffeb314>
    59e4:	2886703a 	and	r3,r5,r2
    59e8:	5809883a 	mov	r4,r11
    59ec:	183ec31e 	bne	r3,zero,54fc <_gp+0xfffeb190>
    59f0:	294b883a 	add	r5,r5,r5
    59f4:	2886703a 	and	r3,r5,r2
    59f8:	21000104 	addi	r4,r4,4
    59fc:	183ffc26 	beq	r3,zero,59f0 <_gp+0xfffeb684>
    5a00:	003ebe06 	br	54fc <_gp+0xfffeb190>
    5a04:	00c05504 	movi	r3,340
    5a08:	18801236 	bltu	r3,r2,5a54 <_malloc_r+0x6f8>
    5a0c:	8804d3fa 	srli	r2,r17,15
    5a10:	12001e04 	addi	r8,r2,120
    5a14:	11c01dc4 	addi	r7,r2,119
    5a18:	4209883a 	add	r4,r8,r8
    5a1c:	003e6d06 	br	53d4 <_gp+0xfffeb068>
    5a20:	00c40004 	movi	r3,4096
    5a24:	003f4606 	br	5740 <_gp+0xfffeb3d4>
    5a28:	00800044 	movi	r2,1
    5a2c:	a0800115 	stw	r2,4(r20)
    5a30:	003f7406 	br	5804 <_gp+0xfffeb498>
    5a34:	1805d0ba 	srai	r2,r3,2
    5a38:	01c00044 	movi	r7,1
    5a3c:	30c00117 	ldw	r3,4(r6)
    5a40:	388e983a 	sll	r7,r7,r2
    5a44:	2805883a 	mov	r2,r5
    5a48:	38c6b03a 	or	r3,r7,r3
    5a4c:	30c00115 	stw	r3,4(r6)
    5a50:	003f9b06 	br	58c0 <_gp+0xfffeb554>
    5a54:	00c15504 	movi	r3,1364
    5a58:	18801a36 	bltu	r3,r2,5ac4 <_malloc_r+0x768>
    5a5c:	8804d4ba 	srli	r2,r17,18
    5a60:	12001f44 	addi	r8,r2,125
    5a64:	11c01f04 	addi	r7,r2,124
    5a68:	4209883a 	add	r4,r8,r8
    5a6c:	003e5906 	br	53d4 <_gp+0xfffeb068>
    5a70:	ad400404 	addi	r21,r21,16
    5a74:	003f1706 	br	56d4 <_gp+0xfffeb368>
    5a78:	00c01504 	movi	r3,84
    5a7c:	18802336 	bltu	r3,r2,5b0c <_malloc_r+0x7b0>
    5a80:	3804d33a 	srli	r2,r7,12
    5a84:	11401bc4 	addi	r5,r2,111
    5a88:	10c01b84 	addi	r3,r2,110
    5a8c:	294b883a 	add	r5,r5,r5
    5a90:	003f7b06 	br	5880 <_gp+0xfffeb514>
    5a94:	9c000217 	ldw	r16,8(r19)
    5a98:	00bfff04 	movi	r2,-4
    5a9c:	80c00117 	ldw	r3,4(r16)
    5aa0:	1886703a 	and	r3,r3,r2
    5aa4:	003f5306 	br	57f4 <_gp+0xfffeb488>
    5aa8:	3083ffcc 	andi	r2,r6,4095
    5aac:	103f181e 	bne	r2,zero,5710 <_gp+0xfffeb3a4>
    5ab0:	99000217 	ldw	r4,8(r19)
    5ab4:	b545883a 	add	r2,r22,r21
    5ab8:	10800054 	ori	r2,r2,1
    5abc:	20800115 	stw	r2,4(r4)
    5ac0:	003f3e06 	br	57bc <_gp+0xfffeb450>
    5ac4:	01003f84 	movi	r4,254
    5ac8:	02001fc4 	movi	r8,127
    5acc:	01c01f84 	movi	r7,126
    5ad0:	003e4006 	br	53d4 <_gp+0xfffeb068>
    5ad4:	00800074 	movhi	r2,1
    5ad8:	1088de04 	addi	r2,r2,9080
    5adc:	15000015 	stw	r20,0(r2)
    5ae0:	003f1106 	br	5728 <_gp+0xfffeb3bc>
    5ae4:	00800044 	movi	r2,1
    5ae8:	002b883a 	mov	r21,zero
    5aec:	003f1f06 	br	576c <_gp+0xfffeb400>
    5af0:	81400204 	addi	r5,r16,8
    5af4:	9009883a 	mov	r4,r18
    5af8:	0004c2c0 	call	4c2c <_free_r>
    5afc:	00800074 	movhi	r2,1
    5b00:	108fb404 	addi	r2,r2,16080
    5b04:	10c00017 	ldw	r3,0(r2)
    5b08:	003f2c06 	br	57bc <_gp+0xfffeb450>
    5b0c:	00c05504 	movi	r3,340
    5b10:	18800536 	bltu	r3,r2,5b28 <_malloc_r+0x7cc>
    5b14:	3804d3fa 	srli	r2,r7,15
    5b18:	11401e04 	addi	r5,r2,120
    5b1c:	10c01dc4 	addi	r3,r2,119
    5b20:	294b883a 	add	r5,r5,r5
    5b24:	003f5606 	br	5880 <_gp+0xfffeb514>
    5b28:	00c15504 	movi	r3,1364
    5b2c:	18800536 	bltu	r3,r2,5b44 <_malloc_r+0x7e8>
    5b30:	3804d4ba 	srli	r2,r7,18
    5b34:	11401f44 	addi	r5,r2,125
    5b38:	10c01f04 	addi	r3,r2,124
    5b3c:	294b883a 	add	r5,r5,r5
    5b40:	003f4f06 	br	5880 <_gp+0xfffeb514>
    5b44:	01403f84 	movi	r5,254
    5b48:	00c01f84 	movi	r3,126
    5b4c:	003f4c06 	br	5880 <_gp+0xfffeb514>
    5b50:	98800117 	ldw	r2,4(r19)
    5b54:	003fa006 	br	59d8 <_gp+0xfffeb66c>
    5b58:	8808d0fa 	srli	r4,r17,3
    5b5c:	20800044 	addi	r2,r4,1
    5b60:	1085883a 	add	r2,r2,r2
    5b64:	003e9006 	br	55a8 <_gp+0xfffeb23c>

00005b68 <memchr>:
    5b68:	208000cc 	andi	r2,r4,3
    5b6c:	280f883a 	mov	r7,r5
    5b70:	10003426 	beq	r2,zero,5c44 <memchr+0xdc>
    5b74:	30bfffc4 	addi	r2,r6,-1
    5b78:	30001a26 	beq	r6,zero,5be4 <memchr+0x7c>
    5b7c:	20c00003 	ldbu	r3,0(r4)
    5b80:	29803fcc 	andi	r6,r5,255
    5b84:	30c0051e 	bne	r6,r3,5b9c <memchr+0x34>
    5b88:	00001806 	br	5bec <memchr+0x84>
    5b8c:	10001526 	beq	r2,zero,5be4 <memchr+0x7c>
    5b90:	20c00003 	ldbu	r3,0(r4)
    5b94:	10bfffc4 	addi	r2,r2,-1
    5b98:	30c01426 	beq	r6,r3,5bec <memchr+0x84>
    5b9c:	21000044 	addi	r4,r4,1
    5ba0:	20c000cc 	andi	r3,r4,3
    5ba4:	183ff91e 	bne	r3,zero,5b8c <_gp+0xfffeb820>
    5ba8:	020000c4 	movi	r8,3
    5bac:	40801136 	bltu	r8,r2,5bf4 <memchr+0x8c>
    5bb0:	10000c26 	beq	r2,zero,5be4 <memchr+0x7c>
    5bb4:	20c00003 	ldbu	r3,0(r4)
    5bb8:	29403fcc 	andi	r5,r5,255
    5bbc:	28c00b26 	beq	r5,r3,5bec <memchr+0x84>
    5bc0:	20c00044 	addi	r3,r4,1
    5bc4:	39803fcc 	andi	r6,r7,255
    5bc8:	2089883a 	add	r4,r4,r2
    5bcc:	00000306 	br	5bdc <memchr+0x74>
    5bd0:	18c00044 	addi	r3,r3,1
    5bd4:	197fffc3 	ldbu	r5,-1(r3)
    5bd8:	31400526 	beq	r6,r5,5bf0 <memchr+0x88>
    5bdc:	1805883a 	mov	r2,r3
    5be0:	20fffb1e 	bne	r4,r3,5bd0 <_gp+0xfffeb864>
    5be4:	0005883a 	mov	r2,zero
    5be8:	f800283a 	ret
    5bec:	2005883a 	mov	r2,r4
    5bf0:	f800283a 	ret
    5bf4:	28c03fcc 	andi	r3,r5,255
    5bf8:	1812923a 	slli	r9,r3,8
    5bfc:	02ffbff4 	movhi	r11,65279
    5c00:	02a02074 	movhi	r10,32897
    5c04:	48d2b03a 	or	r9,r9,r3
    5c08:	4806943a 	slli	r3,r9,16
    5c0c:	5affbfc4 	addi	r11,r11,-257
    5c10:	52a02004 	addi	r10,r10,-32640
    5c14:	48d2b03a 	or	r9,r9,r3
    5c18:	20c00017 	ldw	r3,0(r4)
    5c1c:	48c6f03a 	xor	r3,r9,r3
    5c20:	1acd883a 	add	r6,r3,r11
    5c24:	00c6303a 	nor	r3,zero,r3
    5c28:	30c6703a 	and	r3,r6,r3
    5c2c:	1a86703a 	and	r3,r3,r10
    5c30:	183fe01e 	bne	r3,zero,5bb4 <_gp+0xfffeb848>
    5c34:	10bfff04 	addi	r2,r2,-4
    5c38:	21000104 	addi	r4,r4,4
    5c3c:	40bff636 	bltu	r8,r2,5c18 <_gp+0xfffeb8ac>
    5c40:	003fdb06 	br	5bb0 <_gp+0xfffeb844>
    5c44:	3005883a 	mov	r2,r6
    5c48:	003fd706 	br	5ba8 <_gp+0xfffeb83c>

00005c4c <memcpy>:
    5c4c:	defffd04 	addi	sp,sp,-12
    5c50:	dfc00215 	stw	ra,8(sp)
    5c54:	dc400115 	stw	r17,4(sp)
    5c58:	dc000015 	stw	r16,0(sp)
    5c5c:	00c003c4 	movi	r3,15
    5c60:	2005883a 	mov	r2,r4
    5c64:	1980452e 	bgeu	r3,r6,5d7c <memcpy+0x130>
    5c68:	2906b03a 	or	r3,r5,r4
    5c6c:	18c000cc 	andi	r3,r3,3
    5c70:	1800441e 	bne	r3,zero,5d84 <memcpy+0x138>
    5c74:	347ffc04 	addi	r17,r6,-16
    5c78:	8822d13a 	srli	r17,r17,4
    5c7c:	28c00104 	addi	r3,r5,4
    5c80:	23400104 	addi	r13,r4,4
    5c84:	8820913a 	slli	r16,r17,4
    5c88:	2b000204 	addi	r12,r5,8
    5c8c:	22c00204 	addi	r11,r4,8
    5c90:	84000504 	addi	r16,r16,20
    5c94:	2a800304 	addi	r10,r5,12
    5c98:	22400304 	addi	r9,r4,12
    5c9c:	2c21883a 	add	r16,r5,r16
    5ca0:	2811883a 	mov	r8,r5
    5ca4:	200f883a 	mov	r7,r4
    5ca8:	41000017 	ldw	r4,0(r8)
    5cac:	1fc00017 	ldw	ra,0(r3)
    5cb0:	63c00017 	ldw	r15,0(r12)
    5cb4:	39000015 	stw	r4,0(r7)
    5cb8:	53800017 	ldw	r14,0(r10)
    5cbc:	6fc00015 	stw	ra,0(r13)
    5cc0:	5bc00015 	stw	r15,0(r11)
    5cc4:	4b800015 	stw	r14,0(r9)
    5cc8:	18c00404 	addi	r3,r3,16
    5ccc:	39c00404 	addi	r7,r7,16
    5cd0:	42000404 	addi	r8,r8,16
    5cd4:	6b400404 	addi	r13,r13,16
    5cd8:	63000404 	addi	r12,r12,16
    5cdc:	5ac00404 	addi	r11,r11,16
    5ce0:	52800404 	addi	r10,r10,16
    5ce4:	4a400404 	addi	r9,r9,16
    5ce8:	1c3fef1e 	bne	r3,r16,5ca8 <_gp+0xfffeb93c>
    5cec:	89c00044 	addi	r7,r17,1
    5cf0:	380e913a 	slli	r7,r7,4
    5cf4:	310003cc 	andi	r4,r6,15
    5cf8:	02c000c4 	movi	r11,3
    5cfc:	11c7883a 	add	r3,r2,r7
    5d00:	29cb883a 	add	r5,r5,r7
    5d04:	5900212e 	bgeu	r11,r4,5d8c <memcpy+0x140>
    5d08:	1813883a 	mov	r9,r3
    5d0c:	2811883a 	mov	r8,r5
    5d10:	200f883a 	mov	r7,r4
    5d14:	42800017 	ldw	r10,0(r8)
    5d18:	4a400104 	addi	r9,r9,4
    5d1c:	39ffff04 	addi	r7,r7,-4
    5d20:	4abfff15 	stw	r10,-4(r9)
    5d24:	42000104 	addi	r8,r8,4
    5d28:	59fffa36 	bltu	r11,r7,5d14 <_gp+0xfffeb9a8>
    5d2c:	213fff04 	addi	r4,r4,-4
    5d30:	2008d0ba 	srli	r4,r4,2
    5d34:	318000cc 	andi	r6,r6,3
    5d38:	21000044 	addi	r4,r4,1
    5d3c:	2109883a 	add	r4,r4,r4
    5d40:	2109883a 	add	r4,r4,r4
    5d44:	1907883a 	add	r3,r3,r4
    5d48:	290b883a 	add	r5,r5,r4
    5d4c:	30000626 	beq	r6,zero,5d68 <memcpy+0x11c>
    5d50:	198d883a 	add	r6,r3,r6
    5d54:	29c00003 	ldbu	r7,0(r5)
    5d58:	18c00044 	addi	r3,r3,1
    5d5c:	29400044 	addi	r5,r5,1
    5d60:	19ffffc5 	stb	r7,-1(r3)
    5d64:	19bffb1e 	bne	r3,r6,5d54 <_gp+0xfffeb9e8>
    5d68:	dfc00217 	ldw	ra,8(sp)
    5d6c:	dc400117 	ldw	r17,4(sp)
    5d70:	dc000017 	ldw	r16,0(sp)
    5d74:	dec00304 	addi	sp,sp,12
    5d78:	f800283a 	ret
    5d7c:	2007883a 	mov	r3,r4
    5d80:	003ff206 	br	5d4c <_gp+0xfffeb9e0>
    5d84:	2007883a 	mov	r3,r4
    5d88:	003ff106 	br	5d50 <_gp+0xfffeb9e4>
    5d8c:	200d883a 	mov	r6,r4
    5d90:	003fee06 	br	5d4c <_gp+0xfffeb9e0>

00005d94 <memset>:
    5d94:	20c000cc 	andi	r3,r4,3
    5d98:	2005883a 	mov	r2,r4
    5d9c:	18004426 	beq	r3,zero,5eb0 <memset+0x11c>
    5da0:	31ffffc4 	addi	r7,r6,-1
    5da4:	30004026 	beq	r6,zero,5ea8 <memset+0x114>
    5da8:	2813883a 	mov	r9,r5
    5dac:	200d883a 	mov	r6,r4
    5db0:	2007883a 	mov	r3,r4
    5db4:	00000406 	br	5dc8 <memset+0x34>
    5db8:	3a3fffc4 	addi	r8,r7,-1
    5dbc:	31800044 	addi	r6,r6,1
    5dc0:	38003926 	beq	r7,zero,5ea8 <memset+0x114>
    5dc4:	400f883a 	mov	r7,r8
    5dc8:	18c00044 	addi	r3,r3,1
    5dcc:	32400005 	stb	r9,0(r6)
    5dd0:	1a0000cc 	andi	r8,r3,3
    5dd4:	403ff81e 	bne	r8,zero,5db8 <_gp+0xfffeba4c>
    5dd8:	010000c4 	movi	r4,3
    5ddc:	21c02d2e 	bgeu	r4,r7,5e94 <memset+0x100>
    5de0:	29003fcc 	andi	r4,r5,255
    5de4:	200c923a 	slli	r6,r4,8
    5de8:	3108b03a 	or	r4,r6,r4
    5dec:	200c943a 	slli	r6,r4,16
    5df0:	218cb03a 	or	r6,r4,r6
    5df4:	010003c4 	movi	r4,15
    5df8:	21c0182e 	bgeu	r4,r7,5e5c <memset+0xc8>
    5dfc:	3b3ffc04 	addi	r12,r7,-16
    5e00:	6018d13a 	srli	r12,r12,4
    5e04:	1a000104 	addi	r8,r3,4
    5e08:	1ac00204 	addi	r11,r3,8
    5e0c:	6008913a 	slli	r4,r12,4
    5e10:	1a800304 	addi	r10,r3,12
    5e14:	1813883a 	mov	r9,r3
    5e18:	21000504 	addi	r4,r4,20
    5e1c:	1909883a 	add	r4,r3,r4
    5e20:	49800015 	stw	r6,0(r9)
    5e24:	41800015 	stw	r6,0(r8)
    5e28:	59800015 	stw	r6,0(r11)
    5e2c:	51800015 	stw	r6,0(r10)
    5e30:	42000404 	addi	r8,r8,16
    5e34:	4a400404 	addi	r9,r9,16
    5e38:	5ac00404 	addi	r11,r11,16
    5e3c:	52800404 	addi	r10,r10,16
    5e40:	413ff71e 	bne	r8,r4,5e20 <_gp+0xfffebab4>
    5e44:	63000044 	addi	r12,r12,1
    5e48:	6018913a 	slli	r12,r12,4
    5e4c:	39c003cc 	andi	r7,r7,15
    5e50:	010000c4 	movi	r4,3
    5e54:	1b07883a 	add	r3,r3,r12
    5e58:	21c00e2e 	bgeu	r4,r7,5e94 <memset+0x100>
    5e5c:	1813883a 	mov	r9,r3
    5e60:	3811883a 	mov	r8,r7
    5e64:	010000c4 	movi	r4,3
    5e68:	49800015 	stw	r6,0(r9)
    5e6c:	423fff04 	addi	r8,r8,-4
    5e70:	4a400104 	addi	r9,r9,4
    5e74:	223ffc36 	bltu	r4,r8,5e68 <_gp+0xfffebafc>
    5e78:	393fff04 	addi	r4,r7,-4
    5e7c:	2008d0ba 	srli	r4,r4,2
    5e80:	39c000cc 	andi	r7,r7,3
    5e84:	21000044 	addi	r4,r4,1
    5e88:	2109883a 	add	r4,r4,r4
    5e8c:	2109883a 	add	r4,r4,r4
    5e90:	1907883a 	add	r3,r3,r4
    5e94:	38000526 	beq	r7,zero,5eac <memset+0x118>
    5e98:	19cf883a 	add	r7,r3,r7
    5e9c:	19400005 	stb	r5,0(r3)
    5ea0:	18c00044 	addi	r3,r3,1
    5ea4:	38fffd1e 	bne	r7,r3,5e9c <_gp+0xfffebb30>
    5ea8:	f800283a 	ret
    5eac:	f800283a 	ret
    5eb0:	2007883a 	mov	r3,r4
    5eb4:	300f883a 	mov	r7,r6
    5eb8:	003fc706 	br	5dd8 <_gp+0xfffeba6c>

00005ebc <_Balloc>:
    5ebc:	20801317 	ldw	r2,76(r4)
    5ec0:	defffc04 	addi	sp,sp,-16
    5ec4:	dc400115 	stw	r17,4(sp)
    5ec8:	dc000015 	stw	r16,0(sp)
    5ecc:	dfc00315 	stw	ra,12(sp)
    5ed0:	dc800215 	stw	r18,8(sp)
    5ed4:	2023883a 	mov	r17,r4
    5ed8:	2821883a 	mov	r16,r5
    5edc:	10000f26 	beq	r2,zero,5f1c <_Balloc+0x60>
    5ee0:	8407883a 	add	r3,r16,r16
    5ee4:	18c7883a 	add	r3,r3,r3
    5ee8:	10c7883a 	add	r3,r2,r3
    5eec:	18800017 	ldw	r2,0(r3)
    5ef0:	10001126 	beq	r2,zero,5f38 <_Balloc+0x7c>
    5ef4:	11000017 	ldw	r4,0(r2)
    5ef8:	19000015 	stw	r4,0(r3)
    5efc:	10000415 	stw	zero,16(r2)
    5f00:	10000315 	stw	zero,12(r2)
    5f04:	dfc00317 	ldw	ra,12(sp)
    5f08:	dc800217 	ldw	r18,8(sp)
    5f0c:	dc400117 	ldw	r17,4(sp)
    5f10:	dc000017 	ldw	r16,0(sp)
    5f14:	dec00404 	addi	sp,sp,16
    5f18:	f800283a 	ret
    5f1c:	01800844 	movi	r6,33
    5f20:	01400104 	movi	r5,4
    5f24:	0008a980 	call	8a98 <_calloc_r>
    5f28:	88801315 	stw	r2,76(r17)
    5f2c:	103fec1e 	bne	r2,zero,5ee0 <_gp+0xfffebb74>
    5f30:	0005883a 	mov	r2,zero
    5f34:	003ff306 	br	5f04 <_gp+0xfffebb98>
    5f38:	01400044 	movi	r5,1
    5f3c:	2c24983a 	sll	r18,r5,r16
    5f40:	8809883a 	mov	r4,r17
    5f44:	91800144 	addi	r6,r18,5
    5f48:	318d883a 	add	r6,r6,r6
    5f4c:	318d883a 	add	r6,r6,r6
    5f50:	0008a980 	call	8a98 <_calloc_r>
    5f54:	103ff626 	beq	r2,zero,5f30 <_gp+0xfffebbc4>
    5f58:	14000115 	stw	r16,4(r2)
    5f5c:	14800215 	stw	r18,8(r2)
    5f60:	003fe606 	br	5efc <_gp+0xfffebb90>

00005f64 <_Bfree>:
    5f64:	28000826 	beq	r5,zero,5f88 <_Bfree+0x24>
    5f68:	28c00117 	ldw	r3,4(r5)
    5f6c:	20801317 	ldw	r2,76(r4)
    5f70:	18c7883a 	add	r3,r3,r3
    5f74:	18c7883a 	add	r3,r3,r3
    5f78:	10c5883a 	add	r2,r2,r3
    5f7c:	10c00017 	ldw	r3,0(r2)
    5f80:	28c00015 	stw	r3,0(r5)
    5f84:	11400015 	stw	r5,0(r2)
    5f88:	f800283a 	ret

00005f8c <__multadd>:
    5f8c:	defff704 	addi	sp,sp,-36
    5f90:	dc800215 	stw	r18,8(sp)
    5f94:	2c800417 	ldw	r18,16(r5)
    5f98:	dd800615 	stw	r22,24(sp)
    5f9c:	dd400515 	stw	r21,20(sp)
    5fa0:	dd000415 	stw	r20,16(sp)
    5fa4:	dcc00315 	stw	r19,12(sp)
    5fa8:	dc400115 	stw	r17,4(sp)
    5fac:	dc000015 	stw	r16,0(sp)
    5fb0:	dfc00815 	stw	ra,32(sp)
    5fb4:	ddc00715 	stw	r23,28(sp)
    5fb8:	2827883a 	mov	r19,r5
    5fbc:	2029883a 	mov	r20,r4
    5fc0:	3023883a 	mov	r17,r6
    5fc4:	3821883a 	mov	r16,r7
    5fc8:	2d400504 	addi	r21,r5,20
    5fcc:	002d883a 	mov	r22,zero
    5fd0:	adc00017 	ldw	r23,0(r21)
    5fd4:	880b883a 	mov	r5,r17
    5fd8:	ad400104 	addi	r21,r21,4
    5fdc:	b93fffcc 	andi	r4,r23,65535
    5fe0:	000049c0 	call	49c <__mulsi3>
    5fe4:	b808d43a 	srli	r4,r23,16
    5fe8:	880b883a 	mov	r5,r17
    5fec:	1421883a 	add	r16,r2,r16
    5ff0:	000049c0 	call	49c <__mulsi3>
    5ff4:	800ed43a 	srli	r7,r16,16
    5ff8:	80ffffcc 	andi	r3,r16,65535
    5ffc:	b5800044 	addi	r22,r22,1
    6000:	11c5883a 	add	r2,r2,r7
    6004:	100e943a 	slli	r7,r2,16
    6008:	1020d43a 	srli	r16,r2,16
    600c:	38c7883a 	add	r3,r7,r3
    6010:	a8ffff15 	stw	r3,-4(r21)
    6014:	b4bfee16 	blt	r22,r18,5fd0 <_gp+0xfffebc64>
    6018:	80000926 	beq	r16,zero,6040 <__multadd+0xb4>
    601c:	98800217 	ldw	r2,8(r19)
    6020:	9080130e 	bge	r18,r2,6070 <__multadd+0xe4>
    6024:	90800144 	addi	r2,r18,5
    6028:	1085883a 	add	r2,r2,r2
    602c:	1085883a 	add	r2,r2,r2
    6030:	9885883a 	add	r2,r19,r2
    6034:	14000015 	stw	r16,0(r2)
    6038:	94800044 	addi	r18,r18,1
    603c:	9c800415 	stw	r18,16(r19)
    6040:	9805883a 	mov	r2,r19
    6044:	dfc00817 	ldw	ra,32(sp)
    6048:	ddc00717 	ldw	r23,28(sp)
    604c:	dd800617 	ldw	r22,24(sp)
    6050:	dd400517 	ldw	r21,20(sp)
    6054:	dd000417 	ldw	r20,16(sp)
    6058:	dcc00317 	ldw	r19,12(sp)
    605c:	dc800217 	ldw	r18,8(sp)
    6060:	dc400117 	ldw	r17,4(sp)
    6064:	dc000017 	ldw	r16,0(sp)
    6068:	dec00904 	addi	sp,sp,36
    606c:	f800283a 	ret
    6070:	99400117 	ldw	r5,4(r19)
    6074:	a009883a 	mov	r4,r20
    6078:	29400044 	addi	r5,r5,1
    607c:	0005ebc0 	call	5ebc <_Balloc>
    6080:	99800417 	ldw	r6,16(r19)
    6084:	99400304 	addi	r5,r19,12
    6088:	11000304 	addi	r4,r2,12
    608c:	31800084 	addi	r6,r6,2
    6090:	318d883a 	add	r6,r6,r6
    6094:	318d883a 	add	r6,r6,r6
    6098:	1023883a 	mov	r17,r2
    609c:	0005c4c0 	call	5c4c <memcpy>
    60a0:	98000a26 	beq	r19,zero,60cc <__multadd+0x140>
    60a4:	98c00117 	ldw	r3,4(r19)
    60a8:	a0801317 	ldw	r2,76(r20)
    60ac:	18c7883a 	add	r3,r3,r3
    60b0:	18c7883a 	add	r3,r3,r3
    60b4:	10c5883a 	add	r2,r2,r3
    60b8:	10c00017 	ldw	r3,0(r2)
    60bc:	98c00015 	stw	r3,0(r19)
    60c0:	14c00015 	stw	r19,0(r2)
    60c4:	8827883a 	mov	r19,r17
    60c8:	003fd606 	br	6024 <_gp+0xfffebcb8>
    60cc:	8827883a 	mov	r19,r17
    60d0:	003fd406 	br	6024 <_gp+0xfffebcb8>

000060d4 <__s2b>:
    60d4:	defff904 	addi	sp,sp,-28
    60d8:	dc400115 	stw	r17,4(sp)
    60dc:	dc000015 	stw	r16,0(sp)
    60e0:	2023883a 	mov	r17,r4
    60e4:	2821883a 	mov	r16,r5
    60e8:	39000204 	addi	r4,r7,8
    60ec:	01400244 	movi	r5,9
    60f0:	dcc00315 	stw	r19,12(sp)
    60f4:	dc800215 	stw	r18,8(sp)
    60f8:	dfc00615 	stw	ra,24(sp)
    60fc:	dd400515 	stw	r21,20(sp)
    6100:	dd000415 	stw	r20,16(sp)
    6104:	3825883a 	mov	r18,r7
    6108:	3027883a 	mov	r19,r6
    610c:	000aa780 	call	aa78 <__divsi3>
    6110:	00c00044 	movi	r3,1
    6114:	000b883a 	mov	r5,zero
    6118:	1880030e 	bge	r3,r2,6128 <__s2b+0x54>
    611c:	18c7883a 	add	r3,r3,r3
    6120:	29400044 	addi	r5,r5,1
    6124:	18bffd16 	blt	r3,r2,611c <_gp+0xfffebdb0>
    6128:	8809883a 	mov	r4,r17
    612c:	0005ebc0 	call	5ebc <_Balloc>
    6130:	d8c00717 	ldw	r3,28(sp)
    6134:	10c00515 	stw	r3,20(r2)
    6138:	00c00044 	movi	r3,1
    613c:	10c00415 	stw	r3,16(r2)
    6140:	00c00244 	movi	r3,9
    6144:	1cc0210e 	bge	r3,r19,61cc <__s2b+0xf8>
    6148:	80eb883a 	add	r21,r16,r3
    614c:	a829883a 	mov	r20,r21
    6150:	84e1883a 	add	r16,r16,r19
    6154:	a1c00007 	ldb	r7,0(r20)
    6158:	01800284 	movi	r6,10
    615c:	a5000044 	addi	r20,r20,1
    6160:	100b883a 	mov	r5,r2
    6164:	39fff404 	addi	r7,r7,-48
    6168:	8809883a 	mov	r4,r17
    616c:	0005f8c0 	call	5f8c <__multadd>
    6170:	a43ff81e 	bne	r20,r16,6154 <_gp+0xfffebde8>
    6174:	ace1883a 	add	r16,r21,r19
    6178:	843ffe04 	addi	r16,r16,-8
    617c:	9c800a0e 	bge	r19,r18,61a8 <__s2b+0xd4>
    6180:	94e5c83a 	sub	r18,r18,r19
    6184:	84a5883a 	add	r18,r16,r18
    6188:	81c00007 	ldb	r7,0(r16)
    618c:	01800284 	movi	r6,10
    6190:	84000044 	addi	r16,r16,1
    6194:	100b883a 	mov	r5,r2
    6198:	39fff404 	addi	r7,r7,-48
    619c:	8809883a 	mov	r4,r17
    61a0:	0005f8c0 	call	5f8c <__multadd>
    61a4:	84bff81e 	bne	r16,r18,6188 <_gp+0xfffebe1c>
    61a8:	dfc00617 	ldw	ra,24(sp)
    61ac:	dd400517 	ldw	r21,20(sp)
    61b0:	dd000417 	ldw	r20,16(sp)
    61b4:	dcc00317 	ldw	r19,12(sp)
    61b8:	dc800217 	ldw	r18,8(sp)
    61bc:	dc400117 	ldw	r17,4(sp)
    61c0:	dc000017 	ldw	r16,0(sp)
    61c4:	dec00704 	addi	sp,sp,28
    61c8:	f800283a 	ret
    61cc:	84000284 	addi	r16,r16,10
    61d0:	1827883a 	mov	r19,r3
    61d4:	003fe906 	br	617c <_gp+0xfffebe10>

000061d8 <__hi0bits>:
    61d8:	20bfffec 	andhi	r2,r4,65535
    61dc:	1000141e 	bne	r2,zero,6230 <__hi0bits+0x58>
    61e0:	2008943a 	slli	r4,r4,16
    61e4:	00800404 	movi	r2,16
    61e8:	20ffc02c 	andhi	r3,r4,65280
    61ec:	1800021e 	bne	r3,zero,61f8 <__hi0bits+0x20>
    61f0:	2008923a 	slli	r4,r4,8
    61f4:	10800204 	addi	r2,r2,8
    61f8:	20fc002c 	andhi	r3,r4,61440
    61fc:	1800021e 	bne	r3,zero,6208 <__hi0bits+0x30>
    6200:	2008913a 	slli	r4,r4,4
    6204:	10800104 	addi	r2,r2,4
    6208:	20f0002c 	andhi	r3,r4,49152
    620c:	1800031e 	bne	r3,zero,621c <__hi0bits+0x44>
    6210:	2109883a 	add	r4,r4,r4
    6214:	10800084 	addi	r2,r2,2
    6218:	2109883a 	add	r4,r4,r4
    621c:	20000316 	blt	r4,zero,622c <__hi0bits+0x54>
    6220:	2110002c 	andhi	r4,r4,16384
    6224:	2000041e 	bne	r4,zero,6238 <__hi0bits+0x60>
    6228:	00800804 	movi	r2,32
    622c:	f800283a 	ret
    6230:	0005883a 	mov	r2,zero
    6234:	003fec06 	br	61e8 <_gp+0xfffebe7c>
    6238:	10800044 	addi	r2,r2,1
    623c:	f800283a 	ret

00006240 <__lo0bits>:
    6240:	20c00017 	ldw	r3,0(r4)
    6244:	188001cc 	andi	r2,r3,7
    6248:	10000826 	beq	r2,zero,626c <__lo0bits+0x2c>
    624c:	1880004c 	andi	r2,r3,1
    6250:	1000211e 	bne	r2,zero,62d8 <__lo0bits+0x98>
    6254:	1880008c 	andi	r2,r3,2
    6258:	1000211e 	bne	r2,zero,62e0 <__lo0bits+0xa0>
    625c:	1806d0ba 	srli	r3,r3,2
    6260:	00800084 	movi	r2,2
    6264:	20c00015 	stw	r3,0(r4)
    6268:	f800283a 	ret
    626c:	18bfffcc 	andi	r2,r3,65535
    6270:	10001326 	beq	r2,zero,62c0 <__lo0bits+0x80>
    6274:	0005883a 	mov	r2,zero
    6278:	19403fcc 	andi	r5,r3,255
    627c:	2800021e 	bne	r5,zero,6288 <__lo0bits+0x48>
    6280:	1806d23a 	srli	r3,r3,8
    6284:	10800204 	addi	r2,r2,8
    6288:	194003cc 	andi	r5,r3,15
    628c:	2800021e 	bne	r5,zero,6298 <__lo0bits+0x58>
    6290:	1806d13a 	srli	r3,r3,4
    6294:	10800104 	addi	r2,r2,4
    6298:	194000cc 	andi	r5,r3,3
    629c:	2800021e 	bne	r5,zero,62a8 <__lo0bits+0x68>
    62a0:	1806d0ba 	srli	r3,r3,2
    62a4:	10800084 	addi	r2,r2,2
    62a8:	1940004c 	andi	r5,r3,1
    62ac:	2800081e 	bne	r5,zero,62d0 <__lo0bits+0x90>
    62b0:	1806d07a 	srli	r3,r3,1
    62b4:	1800051e 	bne	r3,zero,62cc <__lo0bits+0x8c>
    62b8:	00800804 	movi	r2,32
    62bc:	f800283a 	ret
    62c0:	1806d43a 	srli	r3,r3,16
    62c4:	00800404 	movi	r2,16
    62c8:	003feb06 	br	6278 <_gp+0xfffebf0c>
    62cc:	10800044 	addi	r2,r2,1
    62d0:	20c00015 	stw	r3,0(r4)
    62d4:	f800283a 	ret
    62d8:	0005883a 	mov	r2,zero
    62dc:	f800283a 	ret
    62e0:	1806d07a 	srli	r3,r3,1
    62e4:	00800044 	movi	r2,1
    62e8:	20c00015 	stw	r3,0(r4)
    62ec:	f800283a 	ret

000062f0 <__i2b>:
    62f0:	defffd04 	addi	sp,sp,-12
    62f4:	dc000015 	stw	r16,0(sp)
    62f8:	04000044 	movi	r16,1
    62fc:	dc400115 	stw	r17,4(sp)
    6300:	2823883a 	mov	r17,r5
    6304:	800b883a 	mov	r5,r16
    6308:	dfc00215 	stw	ra,8(sp)
    630c:	0005ebc0 	call	5ebc <_Balloc>
    6310:	14400515 	stw	r17,20(r2)
    6314:	14000415 	stw	r16,16(r2)
    6318:	dfc00217 	ldw	ra,8(sp)
    631c:	dc400117 	ldw	r17,4(sp)
    6320:	dc000017 	ldw	r16,0(sp)
    6324:	dec00304 	addi	sp,sp,12
    6328:	f800283a 	ret

0000632c <__multiply>:
    632c:	deffef04 	addi	sp,sp,-68
    6330:	dc400815 	stw	r17,32(sp)
    6334:	dc000715 	stw	r16,28(sp)
    6338:	34400417 	ldw	r17,16(r6)
    633c:	2c000417 	ldw	r16,16(r5)
    6340:	dd800d15 	stw	r22,52(sp)
    6344:	dc800915 	stw	r18,36(sp)
    6348:	dfc01015 	stw	ra,64(sp)
    634c:	df000f15 	stw	fp,60(sp)
    6350:	ddc00e15 	stw	r23,56(sp)
    6354:	dd400c15 	stw	r21,48(sp)
    6358:	dd000b15 	stw	r20,44(sp)
    635c:	dcc00a15 	stw	r19,40(sp)
    6360:	2825883a 	mov	r18,r5
    6364:	302d883a 	mov	r22,r6
    6368:	8440050e 	bge	r16,r17,6380 <__multiply+0x54>
    636c:	8007883a 	mov	r3,r16
    6370:	3025883a 	mov	r18,r6
    6374:	8821883a 	mov	r16,r17
    6378:	282d883a 	mov	r22,r5
    637c:	1823883a 	mov	r17,r3
    6380:	90800217 	ldw	r2,8(r18)
    6384:	8447883a 	add	r3,r16,r17
    6388:	d8c00215 	stw	r3,8(sp)
    638c:	91400117 	ldw	r5,4(r18)
    6390:	10c0010e 	bge	r2,r3,6398 <__multiply+0x6c>
    6394:	29400044 	addi	r5,r5,1
    6398:	0005ebc0 	call	5ebc <_Balloc>
    639c:	d8c00217 	ldw	r3,8(sp)
    63a0:	d8800615 	stw	r2,24(sp)
    63a4:	18eb883a 	add	r21,r3,r3
    63a8:	ad6b883a 	add	r21,r21,r21
    63ac:	10c00504 	addi	r3,r2,20
    63b0:	1d6b883a 	add	r21,r3,r21
    63b4:	d8c00115 	stw	r3,4(sp)
    63b8:	dd400315 	stw	r21,12(sp)
    63bc:	1805883a 	mov	r2,r3
    63c0:	1d40042e 	bgeu	r3,r21,63d4 <__multiply+0xa8>
    63c4:	d8c00317 	ldw	r3,12(sp)
    63c8:	10000015 	stw	zero,0(r2)
    63cc:	10800104 	addi	r2,r2,4
    63d0:	10fffc36 	bltu	r2,r3,63c4 <_gp+0xfffec058>
    63d4:	8c63883a 	add	r17,r17,r17
    63d8:	b5800504 	addi	r22,r22,20
    63dc:	8c63883a 	add	r17,r17,r17
    63e0:	94800504 	addi	r18,r18,20
    63e4:	8421883a 	add	r16,r16,r16
    63e8:	b463883a 	add	r17,r22,r17
    63ec:	8421883a 	add	r16,r16,r16
    63f0:	dd800015 	stw	r22,0(sp)
    63f4:	dc800415 	stw	r18,16(sp)
    63f8:	dc400515 	stw	r17,20(sp)
    63fc:	9429883a 	add	r20,r18,r16
    6400:	b4404f2e 	bgeu	r22,r17,6540 <__multiply+0x214>
    6404:	d8c00017 	ldw	r3,0(sp)
    6408:	1c800017 	ldw	r18,0(r3)
    640c:	947fffcc 	andi	r17,r18,65535
    6410:	88001e26 	beq	r17,zero,648c <__multiply+0x160>
    6414:	dd800117 	ldw	r22,4(sp)
    6418:	dd400417 	ldw	r21,16(sp)
    641c:	0027883a 	mov	r19,zero
    6420:	ac800017 	ldw	r18,0(r21)
    6424:	b4000017 	ldw	r16,0(r22)
    6428:	880b883a 	mov	r5,r17
    642c:	913fffcc 	andi	r4,r18,65535
    6430:	000049c0 	call	49c <__mulsi3>
    6434:	9008d43a 	srli	r4,r18,16
    6438:	84bfffcc 	andi	r18,r16,65535
    643c:	1485883a 	add	r2,r2,r18
    6440:	14e5883a 	add	r18,r2,r19
    6444:	8020d43a 	srli	r16,r16,16
    6448:	9026d43a 	srli	r19,r18,16
    644c:	880b883a 	mov	r5,r17
    6450:	000049c0 	call	49c <__mulsi3>
    6454:	1405883a 	add	r2,r2,r16
    6458:	14e1883a 	add	r16,r2,r19
    645c:	90ffffcc 	andi	r3,r18,65535
    6460:	8024943a 	slli	r18,r16,16
    6464:	ad400104 	addi	r21,r21,4
    6468:	b005883a 	mov	r2,r22
    646c:	90c6b03a 	or	r3,r18,r3
    6470:	b0c00015 	stw	r3,0(r22)
    6474:	8026d43a 	srli	r19,r16,16
    6478:	b5800104 	addi	r22,r22,4
    647c:	ad3fe836 	bltu	r21,r20,6420 <_gp+0xfffec0b4>
    6480:	d8c00017 	ldw	r3,0(sp)
    6484:	14c00115 	stw	r19,4(r2)
    6488:	1c800017 	ldw	r18,0(r3)
    648c:	9024d43a 	srli	r18,r18,16
    6490:	90002226 	beq	r18,zero,651c <__multiply+0x1f0>
    6494:	d8c00117 	ldw	r3,4(sp)
    6498:	dd800417 	ldw	r22,16(sp)
    649c:	002f883a 	mov	r23,zero
    64a0:	1f000017 	ldw	fp,0(r3)
    64a4:	1823883a 	mov	r17,r3
    64a8:	182b883a 	mov	r21,r3
    64ac:	e021883a 	mov	r16,fp
    64b0:	00000106 	br	64b8 <__multiply+0x18c>
    64b4:	982b883a 	mov	r21,r19
    64b8:	b100000b 	ldhu	r4,0(r22)
    64bc:	8020d43a 	srli	r16,r16,16
    64c0:	900b883a 	mov	r5,r18
    64c4:	000049c0 	call	49c <__mulsi3>
    64c8:	1405883a 	add	r2,r2,r16
    64cc:	15ef883a 	add	r23,r2,r23
    64d0:	b804943a 	slli	r2,r23,16
    64d4:	e0ffffcc 	andi	r3,fp,65535
    64d8:	8c400104 	addi	r17,r17,4
    64dc:	10c6b03a 	or	r3,r2,r3
    64e0:	88ffff15 	stw	r3,-4(r17)
    64e4:	b5800104 	addi	r22,r22,4
    64e8:	b13fff17 	ldw	r4,-4(r22)
    64ec:	acc00104 	addi	r19,r21,4
    64f0:	900b883a 	mov	r5,r18
    64f4:	2008d43a 	srli	r4,r4,16
    64f8:	9c000017 	ldw	r16,0(r19)
    64fc:	000049c0 	call	49c <__mulsi3>
    6500:	b806d43a 	srli	r3,r23,16
    6504:	813fffcc 	andi	r4,r16,65535
    6508:	1105883a 	add	r2,r2,r4
    650c:	10f9883a 	add	fp,r2,r3
    6510:	e02ed43a 	srli	r23,fp,16
    6514:	b53fe736 	bltu	r22,r20,64b4 <_gp+0xfffec148>
    6518:	af000115 	stw	fp,4(r21)
    651c:	d8c00017 	ldw	r3,0(sp)
    6520:	d9000517 	ldw	r4,20(sp)
    6524:	18c00104 	addi	r3,r3,4
    6528:	d8c00015 	stw	r3,0(sp)
    652c:	d8c00117 	ldw	r3,4(sp)
    6530:	18c00104 	addi	r3,r3,4
    6534:	d8c00115 	stw	r3,4(sp)
    6538:	d8c00017 	ldw	r3,0(sp)
    653c:	193fb136 	bltu	r3,r4,6404 <_gp+0xfffec098>
    6540:	d8c00217 	ldw	r3,8(sp)
    6544:	00c00c0e 	bge	zero,r3,6578 <__multiply+0x24c>
    6548:	d8c00317 	ldw	r3,12(sp)
    654c:	18bfff17 	ldw	r2,-4(r3)
    6550:	1d7fff04 	addi	r21,r3,-4
    6554:	10000326 	beq	r2,zero,6564 <__multiply+0x238>
    6558:	00000706 	br	6578 <__multiply+0x24c>
    655c:	a8800017 	ldw	r2,0(r21)
    6560:	1000051e 	bne	r2,zero,6578 <__multiply+0x24c>
    6564:	d8c00217 	ldw	r3,8(sp)
    6568:	ad7fff04 	addi	r21,r21,-4
    656c:	18ffffc4 	addi	r3,r3,-1
    6570:	d8c00215 	stw	r3,8(sp)
    6574:	183ff91e 	bne	r3,zero,655c <_gp+0xfffec1f0>
    6578:	d8c00617 	ldw	r3,24(sp)
    657c:	d9000217 	ldw	r4,8(sp)
    6580:	1805883a 	mov	r2,r3
    6584:	19000415 	stw	r4,16(r3)
    6588:	dfc01017 	ldw	ra,64(sp)
    658c:	df000f17 	ldw	fp,60(sp)
    6590:	ddc00e17 	ldw	r23,56(sp)
    6594:	dd800d17 	ldw	r22,52(sp)
    6598:	dd400c17 	ldw	r21,48(sp)
    659c:	dd000b17 	ldw	r20,44(sp)
    65a0:	dcc00a17 	ldw	r19,40(sp)
    65a4:	dc800917 	ldw	r18,36(sp)
    65a8:	dc400817 	ldw	r17,32(sp)
    65ac:	dc000717 	ldw	r16,28(sp)
    65b0:	dec01104 	addi	sp,sp,68
    65b4:	f800283a 	ret

000065b8 <__pow5mult>:
    65b8:	defffa04 	addi	sp,sp,-24
    65bc:	dcc00315 	stw	r19,12(sp)
    65c0:	dc000015 	stw	r16,0(sp)
    65c4:	dfc00515 	stw	ra,20(sp)
    65c8:	dd000415 	stw	r20,16(sp)
    65cc:	dc800215 	stw	r18,8(sp)
    65d0:	dc400115 	stw	r17,4(sp)
    65d4:	308000cc 	andi	r2,r6,3
    65d8:	3021883a 	mov	r16,r6
    65dc:	2027883a 	mov	r19,r4
    65e0:	10002f1e 	bne	r2,zero,66a0 <__pow5mult+0xe8>
    65e4:	2825883a 	mov	r18,r5
    65e8:	8021d0ba 	srai	r16,r16,2
    65ec:	80001a26 	beq	r16,zero,6658 <__pow5mult+0xa0>
    65f0:	9c401217 	ldw	r17,72(r19)
    65f4:	8800061e 	bne	r17,zero,6610 <__pow5mult+0x58>
    65f8:	00003406 	br	66cc <__pow5mult+0x114>
    65fc:	8021d07a 	srai	r16,r16,1
    6600:	80001526 	beq	r16,zero,6658 <__pow5mult+0xa0>
    6604:	88800017 	ldw	r2,0(r17)
    6608:	10001c26 	beq	r2,zero,667c <__pow5mult+0xc4>
    660c:	1023883a 	mov	r17,r2
    6610:	8080004c 	andi	r2,r16,1
    6614:	103ff926 	beq	r2,zero,65fc <_gp+0xfffec290>
    6618:	880d883a 	mov	r6,r17
    661c:	900b883a 	mov	r5,r18
    6620:	9809883a 	mov	r4,r19
    6624:	000632c0 	call	632c <__multiply>
    6628:	90001b26 	beq	r18,zero,6698 <__pow5mult+0xe0>
    662c:	91000117 	ldw	r4,4(r18)
    6630:	98c01317 	ldw	r3,76(r19)
    6634:	8021d07a 	srai	r16,r16,1
    6638:	2109883a 	add	r4,r4,r4
    663c:	2109883a 	add	r4,r4,r4
    6640:	1907883a 	add	r3,r3,r4
    6644:	19000017 	ldw	r4,0(r3)
    6648:	91000015 	stw	r4,0(r18)
    664c:	1c800015 	stw	r18,0(r3)
    6650:	1025883a 	mov	r18,r2
    6654:	803feb1e 	bne	r16,zero,6604 <_gp+0xfffec298>
    6658:	9005883a 	mov	r2,r18
    665c:	dfc00517 	ldw	ra,20(sp)
    6660:	dd000417 	ldw	r20,16(sp)
    6664:	dcc00317 	ldw	r19,12(sp)
    6668:	dc800217 	ldw	r18,8(sp)
    666c:	dc400117 	ldw	r17,4(sp)
    6670:	dc000017 	ldw	r16,0(sp)
    6674:	dec00604 	addi	sp,sp,24
    6678:	f800283a 	ret
    667c:	880d883a 	mov	r6,r17
    6680:	880b883a 	mov	r5,r17
    6684:	9809883a 	mov	r4,r19
    6688:	000632c0 	call	632c <__multiply>
    668c:	88800015 	stw	r2,0(r17)
    6690:	10000015 	stw	zero,0(r2)
    6694:	003fdd06 	br	660c <_gp+0xfffec2a0>
    6698:	1025883a 	mov	r18,r2
    669c:	003fd706 	br	65fc <_gp+0xfffec290>
    66a0:	10bfffc4 	addi	r2,r2,-1
    66a4:	1085883a 	add	r2,r2,r2
    66a8:	00c00074 	movhi	r3,1
    66ac:	18c19404 	addi	r3,r3,1616
    66b0:	1085883a 	add	r2,r2,r2
    66b4:	1885883a 	add	r2,r3,r2
    66b8:	11800017 	ldw	r6,0(r2)
    66bc:	000f883a 	mov	r7,zero
    66c0:	0005f8c0 	call	5f8c <__multadd>
    66c4:	1025883a 	mov	r18,r2
    66c8:	003fc706 	br	65e8 <_gp+0xfffec27c>
    66cc:	05000044 	movi	r20,1
    66d0:	a00b883a 	mov	r5,r20
    66d4:	9809883a 	mov	r4,r19
    66d8:	0005ebc0 	call	5ebc <_Balloc>
    66dc:	1023883a 	mov	r17,r2
    66e0:	00809c44 	movi	r2,625
    66e4:	88800515 	stw	r2,20(r17)
    66e8:	8d000415 	stw	r20,16(r17)
    66ec:	9c401215 	stw	r17,72(r19)
    66f0:	88000015 	stw	zero,0(r17)
    66f4:	003fc606 	br	6610 <_gp+0xfffec2a4>

000066f8 <__lshift>:
    66f8:	defff904 	addi	sp,sp,-28
    66fc:	dd400515 	stw	r21,20(sp)
    6700:	dcc00315 	stw	r19,12(sp)
    6704:	302bd17a 	srai	r21,r6,5
    6708:	2cc00417 	ldw	r19,16(r5)
    670c:	28800217 	ldw	r2,8(r5)
    6710:	dd000415 	stw	r20,16(sp)
    6714:	ace7883a 	add	r19,r21,r19
    6718:	dc800215 	stw	r18,8(sp)
    671c:	dc400115 	stw	r17,4(sp)
    6720:	dc000015 	stw	r16,0(sp)
    6724:	dfc00615 	stw	ra,24(sp)
    6728:	9c000044 	addi	r16,r19,1
    672c:	2823883a 	mov	r17,r5
    6730:	3029883a 	mov	r20,r6
    6734:	2025883a 	mov	r18,r4
    6738:	29400117 	ldw	r5,4(r5)
    673c:	1400030e 	bge	r2,r16,674c <__lshift+0x54>
    6740:	1085883a 	add	r2,r2,r2
    6744:	29400044 	addi	r5,r5,1
    6748:	143ffd16 	blt	r2,r16,6740 <_gp+0xfffec3d4>
    674c:	9009883a 	mov	r4,r18
    6750:	0005ebc0 	call	5ebc <_Balloc>
    6754:	10c00504 	addi	r3,r2,20
    6758:	0540070e 	bge	zero,r21,6778 <__lshift+0x80>
    675c:	ad6b883a 	add	r21,r21,r21
    6760:	ad6b883a 	add	r21,r21,r21
    6764:	1809883a 	mov	r4,r3
    6768:	1d47883a 	add	r3,r3,r21
    676c:	20000015 	stw	zero,0(r4)
    6770:	21000104 	addi	r4,r4,4
    6774:	193ffd1e 	bne	r3,r4,676c <_gp+0xfffec400>
    6778:	8a000417 	ldw	r8,16(r17)
    677c:	89000504 	addi	r4,r17,20
    6780:	a18007cc 	andi	r6,r20,31
    6784:	4211883a 	add	r8,r8,r8
    6788:	4211883a 	add	r8,r8,r8
    678c:	2211883a 	add	r8,r4,r8
    6790:	30002326 	beq	r6,zero,6820 <__lshift+0x128>
    6794:	02400804 	movi	r9,32
    6798:	4993c83a 	sub	r9,r9,r6
    679c:	000b883a 	mov	r5,zero
    67a0:	21c00017 	ldw	r7,0(r4)
    67a4:	1815883a 	mov	r10,r3
    67a8:	18c00104 	addi	r3,r3,4
    67ac:	398e983a 	sll	r7,r7,r6
    67b0:	21000104 	addi	r4,r4,4
    67b4:	394ab03a 	or	r5,r7,r5
    67b8:	197fff15 	stw	r5,-4(r3)
    67bc:	217fff17 	ldw	r5,-4(r4)
    67c0:	2a4ad83a 	srl	r5,r5,r9
    67c4:	223ff636 	bltu	r4,r8,67a0 <_gp+0xfffec434>
    67c8:	51400115 	stw	r5,4(r10)
    67cc:	28001a1e 	bne	r5,zero,6838 <__lshift+0x140>
    67d0:	843fffc4 	addi	r16,r16,-1
    67d4:	14000415 	stw	r16,16(r2)
    67d8:	88000826 	beq	r17,zero,67fc <__lshift+0x104>
    67dc:	89000117 	ldw	r4,4(r17)
    67e0:	90c01317 	ldw	r3,76(r18)
    67e4:	2109883a 	add	r4,r4,r4
    67e8:	2109883a 	add	r4,r4,r4
    67ec:	1907883a 	add	r3,r3,r4
    67f0:	19000017 	ldw	r4,0(r3)
    67f4:	89000015 	stw	r4,0(r17)
    67f8:	1c400015 	stw	r17,0(r3)
    67fc:	dfc00617 	ldw	ra,24(sp)
    6800:	dd400517 	ldw	r21,20(sp)
    6804:	dd000417 	ldw	r20,16(sp)
    6808:	dcc00317 	ldw	r19,12(sp)
    680c:	dc800217 	ldw	r18,8(sp)
    6810:	dc400117 	ldw	r17,4(sp)
    6814:	dc000017 	ldw	r16,0(sp)
    6818:	dec00704 	addi	sp,sp,28
    681c:	f800283a 	ret
    6820:	21400017 	ldw	r5,0(r4)
    6824:	18c00104 	addi	r3,r3,4
    6828:	21000104 	addi	r4,r4,4
    682c:	197fff15 	stw	r5,-4(r3)
    6830:	223ffb36 	bltu	r4,r8,6820 <_gp+0xfffec4b4>
    6834:	003fe606 	br	67d0 <_gp+0xfffec464>
    6838:	9c000084 	addi	r16,r19,2
    683c:	003fe406 	br	67d0 <_gp+0xfffec464>

00006840 <__mcmp>:
    6840:	20800417 	ldw	r2,16(r4)
    6844:	28c00417 	ldw	r3,16(r5)
    6848:	10c5c83a 	sub	r2,r2,r3
    684c:	1000111e 	bne	r2,zero,6894 <__mcmp+0x54>
    6850:	18c7883a 	add	r3,r3,r3
    6854:	18c7883a 	add	r3,r3,r3
    6858:	21000504 	addi	r4,r4,20
    685c:	29400504 	addi	r5,r5,20
    6860:	20c5883a 	add	r2,r4,r3
    6864:	28cb883a 	add	r5,r5,r3
    6868:	00000106 	br	6870 <__mcmp+0x30>
    686c:	20800a2e 	bgeu	r4,r2,6898 <__mcmp+0x58>
    6870:	10bfff04 	addi	r2,r2,-4
    6874:	297fff04 	addi	r5,r5,-4
    6878:	11800017 	ldw	r6,0(r2)
    687c:	28c00017 	ldw	r3,0(r5)
    6880:	30fffa26 	beq	r6,r3,686c <_gp+0xfffec500>
    6884:	30c00236 	bltu	r6,r3,6890 <__mcmp+0x50>
    6888:	00800044 	movi	r2,1
    688c:	f800283a 	ret
    6890:	00bfffc4 	movi	r2,-1
    6894:	f800283a 	ret
    6898:	0005883a 	mov	r2,zero
    689c:	f800283a 	ret

000068a0 <__mdiff>:
    68a0:	28c00417 	ldw	r3,16(r5)
    68a4:	30800417 	ldw	r2,16(r6)
    68a8:	defffa04 	addi	sp,sp,-24
    68ac:	dcc00315 	stw	r19,12(sp)
    68b0:	dc800215 	stw	r18,8(sp)
    68b4:	dfc00515 	stw	ra,20(sp)
    68b8:	dd000415 	stw	r20,16(sp)
    68bc:	dc400115 	stw	r17,4(sp)
    68c0:	dc000015 	stw	r16,0(sp)
    68c4:	1887c83a 	sub	r3,r3,r2
    68c8:	2825883a 	mov	r18,r5
    68cc:	3027883a 	mov	r19,r6
    68d0:	1800141e 	bne	r3,zero,6924 <__mdiff+0x84>
    68d4:	1085883a 	add	r2,r2,r2
    68d8:	1085883a 	add	r2,r2,r2
    68dc:	2a000504 	addi	r8,r5,20
    68e0:	34000504 	addi	r16,r6,20
    68e4:	4087883a 	add	r3,r8,r2
    68e8:	8085883a 	add	r2,r16,r2
    68ec:	00000106 	br	68f4 <__mdiff+0x54>
    68f0:	40c0592e 	bgeu	r8,r3,6a58 <__mdiff+0x1b8>
    68f4:	18ffff04 	addi	r3,r3,-4
    68f8:	10bfff04 	addi	r2,r2,-4
    68fc:	19c00017 	ldw	r7,0(r3)
    6900:	11400017 	ldw	r5,0(r2)
    6904:	397ffa26 	beq	r7,r5,68f0 <_gp+0xfffec584>
    6908:	3940592e 	bgeu	r7,r5,6a70 <__mdiff+0x1d0>
    690c:	9005883a 	mov	r2,r18
    6910:	4023883a 	mov	r17,r8
    6914:	9825883a 	mov	r18,r19
    6918:	05000044 	movi	r20,1
    691c:	1027883a 	mov	r19,r2
    6920:	00000406 	br	6934 <__mdiff+0x94>
    6924:	18005616 	blt	r3,zero,6a80 <__mdiff+0x1e0>
    6928:	34400504 	addi	r17,r6,20
    692c:	2c000504 	addi	r16,r5,20
    6930:	0029883a 	mov	r20,zero
    6934:	91400117 	ldw	r5,4(r18)
    6938:	0005ebc0 	call	5ebc <_Balloc>
    693c:	92400417 	ldw	r9,16(r18)
    6940:	9b000417 	ldw	r12,16(r19)
    6944:	12c00504 	addi	r11,r2,20
    6948:	4a51883a 	add	r8,r9,r9
    694c:	6319883a 	add	r12,r12,r12
    6950:	4211883a 	add	r8,r8,r8
    6954:	6319883a 	add	r12,r12,r12
    6958:	15000315 	stw	r20,12(r2)
    695c:	8211883a 	add	r8,r16,r8
    6960:	8b19883a 	add	r12,r17,r12
    6964:	0007883a 	mov	r3,zero
    6968:	81400017 	ldw	r5,0(r16)
    696c:	89c00017 	ldw	r7,0(r17)
    6970:	59800104 	addi	r6,r11,4
    6974:	293fffcc 	andi	r4,r5,65535
    6978:	20c7883a 	add	r3,r4,r3
    697c:	393fffcc 	andi	r4,r7,65535
    6980:	1909c83a 	sub	r4,r3,r4
    6984:	280ad43a 	srli	r5,r5,16
    6988:	380ed43a 	srli	r7,r7,16
    698c:	2007d43a 	srai	r3,r4,16
    6990:	213fffcc 	andi	r4,r4,65535
    6994:	29cbc83a 	sub	r5,r5,r7
    6998:	28c7883a 	add	r3,r5,r3
    699c:	180a943a 	slli	r5,r3,16
    69a0:	8c400104 	addi	r17,r17,4
    69a4:	84000104 	addi	r16,r16,4
    69a8:	2908b03a 	or	r4,r5,r4
    69ac:	59000015 	stw	r4,0(r11)
    69b0:	1807d43a 	srai	r3,r3,16
    69b4:	3015883a 	mov	r10,r6
    69b8:	3017883a 	mov	r11,r6
    69bc:	8b3fea36 	bltu	r17,r12,6968 <_gp+0xfffec5fc>
    69c0:	8200162e 	bgeu	r16,r8,6a1c <__mdiff+0x17c>
    69c4:	8017883a 	mov	r11,r16
    69c8:	59400017 	ldw	r5,0(r11)
    69cc:	31800104 	addi	r6,r6,4
    69d0:	5ac00104 	addi	r11,r11,4
    69d4:	293fffcc 	andi	r4,r5,65535
    69d8:	20c7883a 	add	r3,r4,r3
    69dc:	280ed43a 	srli	r7,r5,16
    69e0:	180bd43a 	srai	r5,r3,16
    69e4:	193fffcc 	andi	r4,r3,65535
    69e8:	3947883a 	add	r3,r7,r5
    69ec:	180a943a 	slli	r5,r3,16
    69f0:	1807d43a 	srai	r3,r3,16
    69f4:	2908b03a 	or	r4,r5,r4
    69f8:	313fff15 	stw	r4,-4(r6)
    69fc:	5a3ff236 	bltu	r11,r8,69c8 <_gp+0xfffec65c>
    6a00:	0406303a 	nor	r3,zero,r16
    6a04:	1a07883a 	add	r3,r3,r8
    6a08:	1806d0ba 	srli	r3,r3,2
    6a0c:	18c00044 	addi	r3,r3,1
    6a10:	18c7883a 	add	r3,r3,r3
    6a14:	18c7883a 	add	r3,r3,r3
    6a18:	50d5883a 	add	r10,r10,r3
    6a1c:	50ffff04 	addi	r3,r10,-4
    6a20:	2000041e 	bne	r4,zero,6a34 <__mdiff+0x194>
    6a24:	18ffff04 	addi	r3,r3,-4
    6a28:	19000017 	ldw	r4,0(r3)
    6a2c:	4a7fffc4 	addi	r9,r9,-1
    6a30:	203ffc26 	beq	r4,zero,6a24 <_gp+0xfffec6b8>
    6a34:	12400415 	stw	r9,16(r2)
    6a38:	dfc00517 	ldw	ra,20(sp)
    6a3c:	dd000417 	ldw	r20,16(sp)
    6a40:	dcc00317 	ldw	r19,12(sp)
    6a44:	dc800217 	ldw	r18,8(sp)
    6a48:	dc400117 	ldw	r17,4(sp)
    6a4c:	dc000017 	ldw	r16,0(sp)
    6a50:	dec00604 	addi	sp,sp,24
    6a54:	f800283a 	ret
    6a58:	000b883a 	mov	r5,zero
    6a5c:	0005ebc0 	call	5ebc <_Balloc>
    6a60:	00c00044 	movi	r3,1
    6a64:	10c00415 	stw	r3,16(r2)
    6a68:	10000515 	stw	zero,20(r2)
    6a6c:	003ff206 	br	6a38 <_gp+0xfffec6cc>
    6a70:	8023883a 	mov	r17,r16
    6a74:	0029883a 	mov	r20,zero
    6a78:	4021883a 	mov	r16,r8
    6a7c:	003fad06 	br	6934 <_gp+0xfffec5c8>
    6a80:	9005883a 	mov	r2,r18
    6a84:	94400504 	addi	r17,r18,20
    6a88:	9c000504 	addi	r16,r19,20
    6a8c:	9825883a 	mov	r18,r19
    6a90:	05000044 	movi	r20,1
    6a94:	1027883a 	mov	r19,r2
    6a98:	003fa606 	br	6934 <_gp+0xfffec5c8>

00006a9c <__ulp>:
    6a9c:	295ffc2c 	andhi	r5,r5,32752
    6aa0:	00bf3034 	movhi	r2,64704
    6aa4:	2887883a 	add	r3,r5,r2
    6aa8:	00c0020e 	bge	zero,r3,6ab4 <__ulp+0x18>
    6aac:	0005883a 	mov	r2,zero
    6ab0:	f800283a 	ret
    6ab4:	00c7c83a 	sub	r3,zero,r3
    6ab8:	1807d53a 	srai	r3,r3,20
    6abc:	008004c4 	movi	r2,19
    6ac0:	10c00b0e 	bge	r2,r3,6af0 <__ulp+0x54>
    6ac4:	18bffb04 	addi	r2,r3,-20
    6ac8:	01000784 	movi	r4,30
    6acc:	0007883a 	mov	r3,zero
    6ad0:	20800516 	blt	r4,r2,6ae8 <__ulp+0x4c>
    6ad4:	010007c4 	movi	r4,31
    6ad8:	2089c83a 	sub	r4,r4,r2
    6adc:	00800044 	movi	r2,1
    6ae0:	1104983a 	sll	r2,r2,r4
    6ae4:	f800283a 	ret
    6ae8:	00800044 	movi	r2,1
    6aec:	f800283a 	ret
    6af0:	01400234 	movhi	r5,8
    6af4:	28c7d83a 	sra	r3,r5,r3
    6af8:	0005883a 	mov	r2,zero
    6afc:	f800283a 	ret

00006b00 <__b2d>:
    6b00:	defffa04 	addi	sp,sp,-24
    6b04:	dc000015 	stw	r16,0(sp)
    6b08:	24000417 	ldw	r16,16(r4)
    6b0c:	dc400115 	stw	r17,4(sp)
    6b10:	24400504 	addi	r17,r4,20
    6b14:	8421883a 	add	r16,r16,r16
    6b18:	8421883a 	add	r16,r16,r16
    6b1c:	8c21883a 	add	r16,r17,r16
    6b20:	dc800215 	stw	r18,8(sp)
    6b24:	84bfff17 	ldw	r18,-4(r16)
    6b28:	dd000415 	stw	r20,16(sp)
    6b2c:	dcc00315 	stw	r19,12(sp)
    6b30:	9009883a 	mov	r4,r18
    6b34:	2829883a 	mov	r20,r5
    6b38:	dfc00515 	stw	ra,20(sp)
    6b3c:	00061d80 	call	61d8 <__hi0bits>
    6b40:	00c00804 	movi	r3,32
    6b44:	1889c83a 	sub	r4,r3,r2
    6b48:	a1000015 	stw	r4,0(r20)
    6b4c:	01000284 	movi	r4,10
    6b50:	84ffff04 	addi	r19,r16,-4
    6b54:	20801216 	blt	r4,r2,6ba0 <__b2d+0xa0>
    6b58:	018002c4 	movi	r6,11
    6b5c:	308dc83a 	sub	r6,r6,r2
    6b60:	9186d83a 	srl	r3,r18,r6
    6b64:	18cffc34 	orhi	r3,r3,16368
    6b68:	8cc0212e 	bgeu	r17,r19,6bf0 <__b2d+0xf0>
    6b6c:	813ffe17 	ldw	r4,-8(r16)
    6b70:	218cd83a 	srl	r6,r4,r6
    6b74:	10800544 	addi	r2,r2,21
    6b78:	9084983a 	sll	r2,r18,r2
    6b7c:	1184b03a 	or	r2,r2,r6
    6b80:	dfc00517 	ldw	ra,20(sp)
    6b84:	dd000417 	ldw	r20,16(sp)
    6b88:	dcc00317 	ldw	r19,12(sp)
    6b8c:	dc800217 	ldw	r18,8(sp)
    6b90:	dc400117 	ldw	r17,4(sp)
    6b94:	dc000017 	ldw	r16,0(sp)
    6b98:	dec00604 	addi	sp,sp,24
    6b9c:	f800283a 	ret
    6ba0:	8cc00f2e 	bgeu	r17,r19,6be0 <__b2d+0xe0>
    6ba4:	117ffd44 	addi	r5,r2,-11
    6ba8:	80bffe17 	ldw	r2,-8(r16)
    6bac:	28000e26 	beq	r5,zero,6be8 <__b2d+0xe8>
    6bb0:	1949c83a 	sub	r4,r3,r5
    6bb4:	9164983a 	sll	r18,r18,r5
    6bb8:	1106d83a 	srl	r3,r2,r4
    6bbc:	81bffe04 	addi	r6,r16,-8
    6bc0:	948ffc34 	orhi	r18,r18,16368
    6bc4:	90c6b03a 	or	r3,r18,r3
    6bc8:	89800e2e 	bgeu	r17,r6,6c04 <__b2d+0x104>
    6bcc:	81bffd17 	ldw	r6,-12(r16)
    6bd0:	1144983a 	sll	r2,r2,r5
    6bd4:	310ad83a 	srl	r5,r6,r4
    6bd8:	2884b03a 	or	r2,r5,r2
    6bdc:	003fe806 	br	6b80 <_gp+0xfffec814>
    6be0:	10bffd44 	addi	r2,r2,-11
    6be4:	1000041e 	bne	r2,zero,6bf8 <__b2d+0xf8>
    6be8:	90cffc34 	orhi	r3,r18,16368
    6bec:	003fe406 	br	6b80 <_gp+0xfffec814>
    6bf0:	000d883a 	mov	r6,zero
    6bf4:	003fdf06 	br	6b74 <_gp+0xfffec808>
    6bf8:	90a4983a 	sll	r18,r18,r2
    6bfc:	0005883a 	mov	r2,zero
    6c00:	003ff906 	br	6be8 <_gp+0xfffec87c>
    6c04:	1144983a 	sll	r2,r2,r5
    6c08:	003fdd06 	br	6b80 <_gp+0xfffec814>

00006c0c <__d2b>:
    6c0c:	defff804 	addi	sp,sp,-32
    6c10:	dc000215 	stw	r16,8(sp)
    6c14:	3021883a 	mov	r16,r6
    6c18:	dc400315 	stw	r17,12(sp)
    6c1c:	8022907a 	slli	r17,r16,1
    6c20:	dd000615 	stw	r20,24(sp)
    6c24:	2829883a 	mov	r20,r5
    6c28:	01400044 	movi	r5,1
    6c2c:	dcc00515 	stw	r19,20(sp)
    6c30:	dc800415 	stw	r18,16(sp)
    6c34:	dfc00715 	stw	ra,28(sp)
    6c38:	3825883a 	mov	r18,r7
    6c3c:	8822d57a 	srli	r17,r17,21
    6c40:	0005ebc0 	call	5ebc <_Balloc>
    6c44:	1027883a 	mov	r19,r2
    6c48:	00800434 	movhi	r2,16
    6c4c:	10bfffc4 	addi	r2,r2,-1
    6c50:	808c703a 	and	r6,r16,r2
    6c54:	88000126 	beq	r17,zero,6c5c <__d2b+0x50>
    6c58:	31800434 	orhi	r6,r6,16
    6c5c:	d9800015 	stw	r6,0(sp)
    6c60:	a0002426 	beq	r20,zero,6cf4 <__d2b+0xe8>
    6c64:	d9000104 	addi	r4,sp,4
    6c68:	dd000115 	stw	r20,4(sp)
    6c6c:	00062400 	call	6240 <__lo0bits>
    6c70:	d8c00017 	ldw	r3,0(sp)
    6c74:	10002f1e 	bne	r2,zero,6d34 <__d2b+0x128>
    6c78:	d9000117 	ldw	r4,4(sp)
    6c7c:	99000515 	stw	r4,20(r19)
    6c80:	1821003a 	cmpeq	r16,r3,zero
    6c84:	01000084 	movi	r4,2
    6c88:	2421c83a 	sub	r16,r4,r16
    6c8c:	98c00615 	stw	r3,24(r19)
    6c90:	9c000415 	stw	r16,16(r19)
    6c94:	88001f1e 	bne	r17,zero,6d14 <__d2b+0x108>
    6c98:	10bef384 	addi	r2,r2,-1074
    6c9c:	90800015 	stw	r2,0(r18)
    6ca0:	00900034 	movhi	r2,16384
    6ca4:	10bfffc4 	addi	r2,r2,-1
    6ca8:	8085883a 	add	r2,r16,r2
    6cac:	1085883a 	add	r2,r2,r2
    6cb0:	1085883a 	add	r2,r2,r2
    6cb4:	9885883a 	add	r2,r19,r2
    6cb8:	11000517 	ldw	r4,20(r2)
    6cbc:	8020917a 	slli	r16,r16,5
    6cc0:	00061d80 	call	61d8 <__hi0bits>
    6cc4:	d8c00817 	ldw	r3,32(sp)
    6cc8:	8085c83a 	sub	r2,r16,r2
    6ccc:	18800015 	stw	r2,0(r3)
    6cd0:	9805883a 	mov	r2,r19
    6cd4:	dfc00717 	ldw	ra,28(sp)
    6cd8:	dd000617 	ldw	r20,24(sp)
    6cdc:	dcc00517 	ldw	r19,20(sp)
    6ce0:	dc800417 	ldw	r18,16(sp)
    6ce4:	dc400317 	ldw	r17,12(sp)
    6ce8:	dc000217 	ldw	r16,8(sp)
    6cec:	dec00804 	addi	sp,sp,32
    6cf0:	f800283a 	ret
    6cf4:	d809883a 	mov	r4,sp
    6cf8:	00062400 	call	6240 <__lo0bits>
    6cfc:	d8c00017 	ldw	r3,0(sp)
    6d00:	04000044 	movi	r16,1
    6d04:	9c000415 	stw	r16,16(r19)
    6d08:	98c00515 	stw	r3,20(r19)
    6d0c:	10800804 	addi	r2,r2,32
    6d10:	883fe126 	beq	r17,zero,6c98 <_gp+0xfffec92c>
    6d14:	00c00d44 	movi	r3,53
    6d18:	8c7ef344 	addi	r17,r17,-1075
    6d1c:	88a3883a 	add	r17,r17,r2
    6d20:	1885c83a 	sub	r2,r3,r2
    6d24:	d8c00817 	ldw	r3,32(sp)
    6d28:	94400015 	stw	r17,0(r18)
    6d2c:	18800015 	stw	r2,0(r3)
    6d30:	003fe706 	br	6cd0 <_gp+0xfffec964>
    6d34:	01000804 	movi	r4,32
    6d38:	2089c83a 	sub	r4,r4,r2
    6d3c:	1908983a 	sll	r4,r3,r4
    6d40:	d9400117 	ldw	r5,4(sp)
    6d44:	1886d83a 	srl	r3,r3,r2
    6d48:	2148b03a 	or	r4,r4,r5
    6d4c:	99000515 	stw	r4,20(r19)
    6d50:	d8c00015 	stw	r3,0(sp)
    6d54:	003fca06 	br	6c80 <_gp+0xfffec914>

00006d58 <__ratio>:
    6d58:	defff904 	addi	sp,sp,-28
    6d5c:	dc400315 	stw	r17,12(sp)
    6d60:	2823883a 	mov	r17,r5
    6d64:	d9400104 	addi	r5,sp,4
    6d68:	dfc00615 	stw	ra,24(sp)
    6d6c:	dcc00515 	stw	r19,20(sp)
    6d70:	dc800415 	stw	r18,16(sp)
    6d74:	2027883a 	mov	r19,r4
    6d78:	dc000215 	stw	r16,8(sp)
    6d7c:	0006b000 	call	6b00 <__b2d>
    6d80:	d80b883a 	mov	r5,sp
    6d84:	8809883a 	mov	r4,r17
    6d88:	1025883a 	mov	r18,r2
    6d8c:	1821883a 	mov	r16,r3
    6d90:	0006b000 	call	6b00 <__b2d>
    6d94:	8a000417 	ldw	r8,16(r17)
    6d98:	99000417 	ldw	r4,16(r19)
    6d9c:	d9400117 	ldw	r5,4(sp)
    6da0:	2209c83a 	sub	r4,r4,r8
    6da4:	2010917a 	slli	r8,r4,5
    6da8:	d9000017 	ldw	r4,0(sp)
    6dac:	2909c83a 	sub	r4,r5,r4
    6db0:	4109883a 	add	r4,r8,r4
    6db4:	01000e0e 	bge	zero,r4,6df0 <__ratio+0x98>
    6db8:	2008953a 	slli	r4,r4,20
    6dbc:	2421883a 	add	r16,r4,r16
    6dc0:	100d883a 	mov	r6,r2
    6dc4:	180f883a 	mov	r7,r3
    6dc8:	9009883a 	mov	r4,r18
    6dcc:	800b883a 	mov	r5,r16
    6dd0:	000b4d80 	call	b4d8 <__divdf3>
    6dd4:	dfc00617 	ldw	ra,24(sp)
    6dd8:	dcc00517 	ldw	r19,20(sp)
    6ddc:	dc800417 	ldw	r18,16(sp)
    6de0:	dc400317 	ldw	r17,12(sp)
    6de4:	dc000217 	ldw	r16,8(sp)
    6de8:	dec00704 	addi	sp,sp,28
    6dec:	f800283a 	ret
    6df0:	2008953a 	slli	r4,r4,20
    6df4:	1907c83a 	sub	r3,r3,r4
    6df8:	003ff106 	br	6dc0 <_gp+0xfffeca54>

00006dfc <_mprec_log10>:
    6dfc:	defffe04 	addi	sp,sp,-8
    6e00:	dc000015 	stw	r16,0(sp)
    6e04:	dfc00115 	stw	ra,4(sp)
    6e08:	008005c4 	movi	r2,23
    6e0c:	2021883a 	mov	r16,r4
    6e10:	11000d0e 	bge	r2,r4,6e48 <_mprec_log10+0x4c>
    6e14:	0005883a 	mov	r2,zero
    6e18:	00cffc34 	movhi	r3,16368
    6e1c:	843fffc4 	addi	r16,r16,-1
    6e20:	000d883a 	mov	r6,zero
    6e24:	01d00934 	movhi	r7,16420
    6e28:	1009883a 	mov	r4,r2
    6e2c:	180b883a 	mov	r5,r3
    6e30:	000c1000 	call	c100 <__muldf3>
    6e34:	803ff91e 	bne	r16,zero,6e1c <_gp+0xfffecab0>
    6e38:	dfc00117 	ldw	ra,4(sp)
    6e3c:	dc000017 	ldw	r16,0(sp)
    6e40:	dec00204 	addi	sp,sp,8
    6e44:	f800283a 	ret
    6e48:	202090fa 	slli	r16,r4,3
    6e4c:	00800074 	movhi	r2,1
    6e50:	1081ab04 	addi	r2,r2,1708
    6e54:	1421883a 	add	r16,r2,r16
    6e58:	80800017 	ldw	r2,0(r16)
    6e5c:	80c00117 	ldw	r3,4(r16)
    6e60:	dfc00117 	ldw	ra,4(sp)
    6e64:	dc000017 	ldw	r16,0(sp)
    6e68:	dec00204 	addi	sp,sp,8
    6e6c:	f800283a 	ret

00006e70 <__copybits>:
    6e70:	297fffc4 	addi	r5,r5,-1
    6e74:	280fd17a 	srai	r7,r5,5
    6e78:	30c00417 	ldw	r3,16(r6)
    6e7c:	30800504 	addi	r2,r6,20
    6e80:	39c00044 	addi	r7,r7,1
    6e84:	18c7883a 	add	r3,r3,r3
    6e88:	39cf883a 	add	r7,r7,r7
    6e8c:	18c7883a 	add	r3,r3,r3
    6e90:	39cf883a 	add	r7,r7,r7
    6e94:	10c7883a 	add	r3,r2,r3
    6e98:	21cf883a 	add	r7,r4,r7
    6e9c:	10c00d2e 	bgeu	r2,r3,6ed4 <__copybits+0x64>
    6ea0:	200b883a 	mov	r5,r4
    6ea4:	12000017 	ldw	r8,0(r2)
    6ea8:	29400104 	addi	r5,r5,4
    6eac:	10800104 	addi	r2,r2,4
    6eb0:	2a3fff15 	stw	r8,-4(r5)
    6eb4:	10fffb36 	bltu	r2,r3,6ea4 <_gp+0xfffecb38>
    6eb8:	1985c83a 	sub	r2,r3,r6
    6ebc:	10bffac4 	addi	r2,r2,-21
    6ec0:	1004d0ba 	srli	r2,r2,2
    6ec4:	10800044 	addi	r2,r2,1
    6ec8:	1085883a 	add	r2,r2,r2
    6ecc:	1085883a 	add	r2,r2,r2
    6ed0:	2089883a 	add	r4,r4,r2
    6ed4:	21c0032e 	bgeu	r4,r7,6ee4 <__copybits+0x74>
    6ed8:	20000015 	stw	zero,0(r4)
    6edc:	21000104 	addi	r4,r4,4
    6ee0:	21fffd36 	bltu	r4,r7,6ed8 <_gp+0xfffecb6c>
    6ee4:	f800283a 	ret

00006ee8 <__any_on>:
    6ee8:	20c00417 	ldw	r3,16(r4)
    6eec:	2805d17a 	srai	r2,r5,5
    6ef0:	21000504 	addi	r4,r4,20
    6ef4:	18800d0e 	bge	r3,r2,6f2c <__any_on+0x44>
    6ef8:	18c7883a 	add	r3,r3,r3
    6efc:	18c7883a 	add	r3,r3,r3
    6f00:	20c7883a 	add	r3,r4,r3
    6f04:	20c0192e 	bgeu	r4,r3,6f6c <__any_on+0x84>
    6f08:	18bfff17 	ldw	r2,-4(r3)
    6f0c:	18ffff04 	addi	r3,r3,-4
    6f10:	1000041e 	bne	r2,zero,6f24 <__any_on+0x3c>
    6f14:	20c0142e 	bgeu	r4,r3,6f68 <__any_on+0x80>
    6f18:	18ffff04 	addi	r3,r3,-4
    6f1c:	19400017 	ldw	r5,0(r3)
    6f20:	283ffc26 	beq	r5,zero,6f14 <_gp+0xfffecba8>
    6f24:	00800044 	movi	r2,1
    6f28:	f800283a 	ret
    6f2c:	10c00a0e 	bge	r2,r3,6f58 <__any_on+0x70>
    6f30:	1085883a 	add	r2,r2,r2
    6f34:	1085883a 	add	r2,r2,r2
    6f38:	294007cc 	andi	r5,r5,31
    6f3c:	2087883a 	add	r3,r4,r2
    6f40:	283ff026 	beq	r5,zero,6f04 <_gp+0xfffecb98>
    6f44:	19800017 	ldw	r6,0(r3)
    6f48:	3144d83a 	srl	r2,r6,r5
    6f4c:	114a983a 	sll	r5,r2,r5
    6f50:	317ff41e 	bne	r6,r5,6f24 <_gp+0xfffecbb8>
    6f54:	003feb06 	br	6f04 <_gp+0xfffecb98>
    6f58:	1085883a 	add	r2,r2,r2
    6f5c:	1085883a 	add	r2,r2,r2
    6f60:	2087883a 	add	r3,r4,r2
    6f64:	003fe706 	br	6f04 <_gp+0xfffecb98>
    6f68:	f800283a 	ret
    6f6c:	0005883a 	mov	r2,zero
    6f70:	f800283a 	ret

00006f74 <__fpclassifyd>:
    6f74:	00a00034 	movhi	r2,32768
    6f78:	10bfffc4 	addi	r2,r2,-1
    6f7c:	2884703a 	and	r2,r5,r2
    6f80:	10000726 	beq	r2,zero,6fa0 <__fpclassifyd+0x2c>
    6f84:	00fffc34 	movhi	r3,65520
    6f88:	019ff834 	movhi	r6,32736
    6f8c:	28c7883a 	add	r3,r5,r3
    6f90:	31bfffc4 	addi	r6,r6,-1
    6f94:	30c00536 	bltu	r6,r3,6fac <__fpclassifyd+0x38>
    6f98:	00800104 	movi	r2,4
    6f9c:	f800283a 	ret
    6fa0:	2000021e 	bne	r4,zero,6fac <__fpclassifyd+0x38>
    6fa4:	00800084 	movi	r2,2
    6fa8:	f800283a 	ret
    6fac:	00dffc34 	movhi	r3,32752
    6fb0:	019ff834 	movhi	r6,32736
    6fb4:	28cb883a 	add	r5,r5,r3
    6fb8:	31bfffc4 	addi	r6,r6,-1
    6fbc:	317ff62e 	bgeu	r6,r5,6f98 <_gp+0xfffecc2c>
    6fc0:	01400434 	movhi	r5,16
    6fc4:	297fffc4 	addi	r5,r5,-1
    6fc8:	28800236 	bltu	r5,r2,6fd4 <__fpclassifyd+0x60>
    6fcc:	008000c4 	movi	r2,3
    6fd0:	f800283a 	ret
    6fd4:	10c00226 	beq	r2,r3,6fe0 <__fpclassifyd+0x6c>
    6fd8:	0005883a 	mov	r2,zero
    6fdc:	f800283a 	ret
    6fe0:	2005003a 	cmpeq	r2,r4,zero
    6fe4:	f800283a 	ret

00006fe8 <_sbrk_r>:
    6fe8:	defffd04 	addi	sp,sp,-12
    6fec:	dc000015 	stw	r16,0(sp)
    6ff0:	04000074 	movhi	r16,1
    6ff4:	dc400115 	stw	r17,4(sp)
    6ff8:	840fac04 	addi	r16,r16,16048
    6ffc:	2023883a 	mov	r17,r4
    7000:	2809883a 	mov	r4,r5
    7004:	dfc00215 	stw	ra,8(sp)
    7008:	80000015 	stw	zero,0(r16)
    700c:	000df500 	call	df50 <sbrk>
    7010:	00ffffc4 	movi	r3,-1
    7014:	10c00526 	beq	r2,r3,702c <_sbrk_r+0x44>
    7018:	dfc00217 	ldw	ra,8(sp)
    701c:	dc400117 	ldw	r17,4(sp)
    7020:	dc000017 	ldw	r16,0(sp)
    7024:	dec00304 	addi	sp,sp,12
    7028:	f800283a 	ret
    702c:	80c00017 	ldw	r3,0(r16)
    7030:	183ff926 	beq	r3,zero,7018 <_gp+0xfffeccac>
    7034:	88c00015 	stw	r3,0(r17)
    7038:	003ff706 	br	7018 <_gp+0xfffeccac>

0000703c <__sread>:
    703c:	defffe04 	addi	sp,sp,-8
    7040:	dc000015 	stw	r16,0(sp)
    7044:	2821883a 	mov	r16,r5
    7048:	2940038f 	ldh	r5,14(r5)
    704c:	dfc00115 	stw	ra,4(sp)
    7050:	00095b40 	call	95b4 <_read_r>
    7054:	10000716 	blt	r2,zero,7074 <__sread+0x38>
    7058:	80c01417 	ldw	r3,80(r16)
    705c:	1887883a 	add	r3,r3,r2
    7060:	80c01415 	stw	r3,80(r16)
    7064:	dfc00117 	ldw	ra,4(sp)
    7068:	dc000017 	ldw	r16,0(sp)
    706c:	dec00204 	addi	sp,sp,8
    7070:	f800283a 	ret
    7074:	80c0030b 	ldhu	r3,12(r16)
    7078:	18fbffcc 	andi	r3,r3,61439
    707c:	80c0030d 	sth	r3,12(r16)
    7080:	dfc00117 	ldw	ra,4(sp)
    7084:	dc000017 	ldw	r16,0(sp)
    7088:	dec00204 	addi	sp,sp,8
    708c:	f800283a 	ret

00007090 <__seofread>:
    7090:	0005883a 	mov	r2,zero
    7094:	f800283a 	ret

00007098 <__swrite>:
    7098:	2880030b 	ldhu	r2,12(r5)
    709c:	defffb04 	addi	sp,sp,-20
    70a0:	dcc00315 	stw	r19,12(sp)
    70a4:	dc800215 	stw	r18,8(sp)
    70a8:	dc400115 	stw	r17,4(sp)
    70ac:	dc000015 	stw	r16,0(sp)
    70b0:	dfc00415 	stw	ra,16(sp)
    70b4:	10c0400c 	andi	r3,r2,256
    70b8:	2821883a 	mov	r16,r5
    70bc:	2023883a 	mov	r17,r4
    70c0:	3025883a 	mov	r18,r6
    70c4:	3827883a 	mov	r19,r7
    70c8:	18000526 	beq	r3,zero,70e0 <__swrite+0x48>
    70cc:	2940038f 	ldh	r5,14(r5)
    70d0:	01c00084 	movi	r7,2
    70d4:	000d883a 	mov	r6,zero
    70d8:	00093f80 	call	93f8 <_lseek_r>
    70dc:	8080030b 	ldhu	r2,12(r16)
    70e0:	8140038f 	ldh	r5,14(r16)
    70e4:	10bbffcc 	andi	r2,r2,61439
    70e8:	980f883a 	mov	r7,r19
    70ec:	900d883a 	mov	r6,r18
    70f0:	8809883a 	mov	r4,r17
    70f4:	8080030d 	sth	r2,12(r16)
    70f8:	dfc00417 	ldw	ra,16(sp)
    70fc:	dcc00317 	ldw	r19,12(sp)
    7100:	dc800217 	ldw	r18,8(sp)
    7104:	dc400117 	ldw	r17,4(sp)
    7108:	dc000017 	ldw	r16,0(sp)
    710c:	dec00504 	addi	sp,sp,20
    7110:	00089e41 	jmpi	89e4 <_write_r>

00007114 <__sseek>:
    7114:	defffe04 	addi	sp,sp,-8
    7118:	dc000015 	stw	r16,0(sp)
    711c:	2821883a 	mov	r16,r5
    7120:	2940038f 	ldh	r5,14(r5)
    7124:	dfc00115 	stw	ra,4(sp)
    7128:	00093f80 	call	93f8 <_lseek_r>
    712c:	00ffffc4 	movi	r3,-1
    7130:	10c00826 	beq	r2,r3,7154 <__sseek+0x40>
    7134:	80c0030b 	ldhu	r3,12(r16)
    7138:	80801415 	stw	r2,80(r16)
    713c:	18c40014 	ori	r3,r3,4096
    7140:	80c0030d 	sth	r3,12(r16)
    7144:	dfc00117 	ldw	ra,4(sp)
    7148:	dc000017 	ldw	r16,0(sp)
    714c:	dec00204 	addi	sp,sp,8
    7150:	f800283a 	ret
    7154:	80c0030b 	ldhu	r3,12(r16)
    7158:	18fbffcc 	andi	r3,r3,61439
    715c:	80c0030d 	sth	r3,12(r16)
    7160:	dfc00117 	ldw	ra,4(sp)
    7164:	dc000017 	ldw	r16,0(sp)
    7168:	dec00204 	addi	sp,sp,8
    716c:	f800283a 	ret

00007170 <__sclose>:
    7170:	2940038f 	ldh	r5,14(r5)
    7174:	0008a441 	jmpi	8a44 <_close_r>

00007178 <strcmp>:
    7178:	2144b03a 	or	r2,r4,r5
    717c:	108000cc 	andi	r2,r2,3
    7180:	1000171e 	bne	r2,zero,71e0 <strcmp+0x68>
    7184:	20800017 	ldw	r2,0(r4)
    7188:	28c00017 	ldw	r3,0(r5)
    718c:	10c0141e 	bne	r2,r3,71e0 <strcmp+0x68>
    7190:	027fbff4 	movhi	r9,65279
    7194:	4a7fbfc4 	addi	r9,r9,-257
    7198:	0086303a 	nor	r3,zero,r2
    719c:	02202074 	movhi	r8,32897
    71a0:	1245883a 	add	r2,r2,r9
    71a4:	42202004 	addi	r8,r8,-32640
    71a8:	10c4703a 	and	r2,r2,r3
    71ac:	1204703a 	and	r2,r2,r8
    71b0:	10000226 	beq	r2,zero,71bc <strcmp+0x44>
    71b4:	00002306 	br	7244 <strcmp+0xcc>
    71b8:	1000221e 	bne	r2,zero,7244 <strcmp+0xcc>
    71bc:	21000104 	addi	r4,r4,4
    71c0:	20c00017 	ldw	r3,0(r4)
    71c4:	29400104 	addi	r5,r5,4
    71c8:	29800017 	ldw	r6,0(r5)
    71cc:	1a4f883a 	add	r7,r3,r9
    71d0:	00c4303a 	nor	r2,zero,r3
    71d4:	3884703a 	and	r2,r7,r2
    71d8:	1204703a 	and	r2,r2,r8
    71dc:	19bff626 	beq	r3,r6,71b8 <_gp+0xfffece4c>
    71e0:	20800003 	ldbu	r2,0(r4)
    71e4:	10c03fcc 	andi	r3,r2,255
    71e8:	18c0201c 	xori	r3,r3,128
    71ec:	18ffe004 	addi	r3,r3,-128
    71f0:	18000c26 	beq	r3,zero,7224 <strcmp+0xac>
    71f4:	29800007 	ldb	r6,0(r5)
    71f8:	19800326 	beq	r3,r6,7208 <strcmp+0x90>
    71fc:	00001306 	br	724c <strcmp+0xd4>
    7200:	29800007 	ldb	r6,0(r5)
    7204:	11800b1e 	bne	r2,r6,7234 <strcmp+0xbc>
    7208:	21000044 	addi	r4,r4,1
    720c:	20c00003 	ldbu	r3,0(r4)
    7210:	29400044 	addi	r5,r5,1
    7214:	18803fcc 	andi	r2,r3,255
    7218:	1080201c 	xori	r2,r2,128
    721c:	10bfe004 	addi	r2,r2,-128
    7220:	103ff71e 	bne	r2,zero,7200 <_gp+0xfffece94>
    7224:	0007883a 	mov	r3,zero
    7228:	28800003 	ldbu	r2,0(r5)
    722c:	1885c83a 	sub	r2,r3,r2
    7230:	f800283a 	ret
    7234:	28800003 	ldbu	r2,0(r5)
    7238:	18c03fcc 	andi	r3,r3,255
    723c:	1885c83a 	sub	r2,r3,r2
    7240:	f800283a 	ret
    7244:	0005883a 	mov	r2,zero
    7248:	f800283a 	ret
    724c:	10c03fcc 	andi	r3,r2,255
    7250:	003ff506 	br	7228 <_gp+0xfffecebc>

00007254 <strlen>:
    7254:	208000cc 	andi	r2,r4,3
    7258:	10002026 	beq	r2,zero,72dc <strlen+0x88>
    725c:	20800007 	ldb	r2,0(r4)
    7260:	10002026 	beq	r2,zero,72e4 <strlen+0x90>
    7264:	2005883a 	mov	r2,r4
    7268:	00000206 	br	7274 <strlen+0x20>
    726c:	10c00007 	ldb	r3,0(r2)
    7270:	18001826 	beq	r3,zero,72d4 <strlen+0x80>
    7274:	10800044 	addi	r2,r2,1
    7278:	10c000cc 	andi	r3,r2,3
    727c:	183ffb1e 	bne	r3,zero,726c <_gp+0xfffecf00>
    7280:	10c00017 	ldw	r3,0(r2)
    7284:	01ffbff4 	movhi	r7,65279
    7288:	39ffbfc4 	addi	r7,r7,-257
    728c:	00ca303a 	nor	r5,zero,r3
    7290:	01a02074 	movhi	r6,32897
    7294:	19c7883a 	add	r3,r3,r7
    7298:	31a02004 	addi	r6,r6,-32640
    729c:	1946703a 	and	r3,r3,r5
    72a0:	1986703a 	and	r3,r3,r6
    72a4:	1800091e 	bne	r3,zero,72cc <strlen+0x78>
    72a8:	10800104 	addi	r2,r2,4
    72ac:	10c00017 	ldw	r3,0(r2)
    72b0:	19cb883a 	add	r5,r3,r7
    72b4:	00c6303a 	nor	r3,zero,r3
    72b8:	28c6703a 	and	r3,r5,r3
    72bc:	1986703a 	and	r3,r3,r6
    72c0:	183ff926 	beq	r3,zero,72a8 <_gp+0xfffecf3c>
    72c4:	00000106 	br	72cc <strlen+0x78>
    72c8:	10800044 	addi	r2,r2,1
    72cc:	10c00007 	ldb	r3,0(r2)
    72d0:	183ffd1e 	bne	r3,zero,72c8 <_gp+0xfffecf5c>
    72d4:	1105c83a 	sub	r2,r2,r4
    72d8:	f800283a 	ret
    72dc:	2005883a 	mov	r2,r4
    72e0:	003fe706 	br	7280 <_gp+0xfffecf14>
    72e4:	0005883a 	mov	r2,zero
    72e8:	f800283a 	ret

000072ec <__sprint_r.part.0>:
    72ec:	28801917 	ldw	r2,100(r5)
    72f0:	defff604 	addi	sp,sp,-40
    72f4:	dd400515 	stw	r21,20(sp)
    72f8:	dfc00915 	stw	ra,36(sp)
    72fc:	df000815 	stw	fp,32(sp)
    7300:	ddc00715 	stw	r23,28(sp)
    7304:	dd800615 	stw	r22,24(sp)
    7308:	dd000415 	stw	r20,16(sp)
    730c:	dcc00315 	stw	r19,12(sp)
    7310:	dc800215 	stw	r18,8(sp)
    7314:	dc400115 	stw	r17,4(sp)
    7318:	dc000015 	stw	r16,0(sp)
    731c:	1088000c 	andi	r2,r2,8192
    7320:	302b883a 	mov	r21,r6
    7324:	10002e26 	beq	r2,zero,73e0 <__sprint_r.part.0+0xf4>
    7328:	30800217 	ldw	r2,8(r6)
    732c:	35800017 	ldw	r22,0(r6)
    7330:	10002926 	beq	r2,zero,73d8 <__sprint_r.part.0+0xec>
    7334:	2827883a 	mov	r19,r5
    7338:	2029883a 	mov	r20,r4
    733c:	b5c00104 	addi	r23,r22,4
    7340:	04bfffc4 	movi	r18,-1
    7344:	bc400017 	ldw	r17,0(r23)
    7348:	b4000017 	ldw	r16,0(r22)
    734c:	0039883a 	mov	fp,zero
    7350:	8822d0ba 	srli	r17,r17,2
    7354:	8800031e 	bne	r17,zero,7364 <__sprint_r.part.0+0x78>
    7358:	00001806 	br	73bc <__sprint_r.part.0+0xd0>
    735c:	84000104 	addi	r16,r16,4
    7360:	8f001526 	beq	r17,fp,73b8 <__sprint_r.part.0+0xcc>
    7364:	81400017 	ldw	r5,0(r16)
    7368:	980d883a 	mov	r6,r19
    736c:	a009883a 	mov	r4,r20
    7370:	0008ddc0 	call	8ddc <_fputwc_r>
    7374:	e7000044 	addi	fp,fp,1
    7378:	14bff81e 	bne	r2,r18,735c <_gp+0xfffecff0>
    737c:	9005883a 	mov	r2,r18
    7380:	a8000215 	stw	zero,8(r21)
    7384:	a8000115 	stw	zero,4(r21)
    7388:	dfc00917 	ldw	ra,36(sp)
    738c:	df000817 	ldw	fp,32(sp)
    7390:	ddc00717 	ldw	r23,28(sp)
    7394:	dd800617 	ldw	r22,24(sp)
    7398:	dd400517 	ldw	r21,20(sp)
    739c:	dd000417 	ldw	r20,16(sp)
    73a0:	dcc00317 	ldw	r19,12(sp)
    73a4:	dc800217 	ldw	r18,8(sp)
    73a8:	dc400117 	ldw	r17,4(sp)
    73ac:	dc000017 	ldw	r16,0(sp)
    73b0:	dec00a04 	addi	sp,sp,40
    73b4:	f800283a 	ret
    73b8:	a8800217 	ldw	r2,8(r21)
    73bc:	8c63883a 	add	r17,r17,r17
    73c0:	8c63883a 	add	r17,r17,r17
    73c4:	1445c83a 	sub	r2,r2,r17
    73c8:	a8800215 	stw	r2,8(r21)
    73cc:	b5800204 	addi	r22,r22,8
    73d0:	bdc00204 	addi	r23,r23,8
    73d4:	103fdb1e 	bne	r2,zero,7344 <_gp+0xfffecfd8>
    73d8:	0005883a 	mov	r2,zero
    73dc:	003fe806 	br	7380 <_gp+0xfffed014>
    73e0:	0008edc0 	call	8edc <__sfvwrite_r>
    73e4:	003fe606 	br	7380 <_gp+0xfffed014>

000073e8 <__sprint_r>:
    73e8:	30c00217 	ldw	r3,8(r6)
    73ec:	18000126 	beq	r3,zero,73f4 <__sprint_r+0xc>
    73f0:	00072ec1 	jmpi	72ec <__sprint_r.part.0>
    73f4:	30000115 	stw	zero,4(r6)
    73f8:	0005883a 	mov	r2,zero
    73fc:	f800283a 	ret

00007400 <___vfiprintf_internal_r>:
    7400:	deffca04 	addi	sp,sp,-216
    7404:	dd403115 	stw	r21,196(sp)
    7408:	dfc03515 	stw	ra,212(sp)
    740c:	df003415 	stw	fp,208(sp)
    7410:	ddc03315 	stw	r23,204(sp)
    7414:	dd803215 	stw	r22,200(sp)
    7418:	dd003015 	stw	r20,192(sp)
    741c:	dcc02f15 	stw	r19,188(sp)
    7420:	dc802e15 	stw	r18,184(sp)
    7424:	dc402d15 	stw	r17,180(sp)
    7428:	dc002c15 	stw	r16,176(sp)
    742c:	d9002115 	stw	r4,132(sp)
    7430:	d9402015 	stw	r5,128(sp)
    7434:	d9c02215 	stw	r7,136(sp)
    7438:	302b883a 	mov	r21,r6
    743c:	20000226 	beq	r4,zero,7448 <___vfiprintf_internal_r+0x48>
    7440:	20800e17 	ldw	r2,56(r4)
    7444:	1000cf26 	beq	r2,zero,7784 <___vfiprintf_internal_r+0x384>
    7448:	d8c02017 	ldw	r3,128(sp)
    744c:	1880030b 	ldhu	r2,12(r3)
    7450:	10c8000c 	andi	r3,r2,8192
    7454:	1800071e 	bne	r3,zero,7474 <___vfiprintf_internal_r+0x74>
    7458:	d9402017 	ldw	r5,128(sp)
    745c:	00f7ffc4 	movi	r3,-8193
    7460:	10880014 	ori	r2,r2,8192
    7464:	29001917 	ldw	r4,100(r5)
    7468:	2880030d 	sth	r2,12(r5)
    746c:	20c6703a 	and	r3,r4,r3
    7470:	28c01915 	stw	r3,100(r5)
    7474:	10c0020c 	andi	r3,r2,8
    7478:	1800a526 	beq	r3,zero,7710 <___vfiprintf_internal_r+0x310>
    747c:	d9002017 	ldw	r4,128(sp)
    7480:	20c00417 	ldw	r3,16(r4)
    7484:	1800a226 	beq	r3,zero,7710 <___vfiprintf_internal_r+0x310>
    7488:	1080068c 	andi	r2,r2,26
    748c:	00c00284 	movi	r3,10
    7490:	10c0a826 	beq	r2,r3,7734 <___vfiprintf_internal_r+0x334>
    7494:	d9001a04 	addi	r4,sp,104
    7498:	d94019c4 	addi	r5,sp,103
    749c:	04800074 	movhi	r18,1
    74a0:	2145c83a 	sub	r2,r4,r5
    74a4:	9481dd04 	addi	r18,r18,1908
    74a8:	d9001e15 	stw	r4,120(sp)
    74ac:	d9401f15 	stw	r5,124(sp)
    74b0:	dec01a15 	stw	sp,104(sp)
    74b4:	d8001c15 	stw	zero,112(sp)
    74b8:	d8001b15 	stw	zero,108(sp)
    74bc:	d811883a 	mov	r8,sp
    74c0:	d8002615 	stw	zero,152(sp)
    74c4:	d8002415 	stw	zero,144(sp)
    74c8:	d8802815 	stw	r2,160(sp)
    74cc:	a82d883a 	mov	r22,r21
    74d0:	b0800007 	ldb	r2,0(r22)
    74d4:	10040d26 	beq	r2,zero,850c <___vfiprintf_internal_r+0x110c>
    74d8:	00c00944 	movi	r3,37
    74dc:	b029883a 	mov	r20,r22
    74e0:	10c0021e 	bne	r2,r3,74ec <___vfiprintf_internal_r+0xec>
    74e4:	00001606 	br	7540 <___vfiprintf_internal_r+0x140>
    74e8:	10c00326 	beq	r2,r3,74f8 <___vfiprintf_internal_r+0xf8>
    74ec:	a5000044 	addi	r20,r20,1
    74f0:	a0800007 	ldb	r2,0(r20)
    74f4:	103ffc1e 	bne	r2,zero,74e8 <_gp+0xfffed17c>
    74f8:	a5a1c83a 	sub	r16,r20,r22
    74fc:	80001026 	beq	r16,zero,7540 <___vfiprintf_internal_r+0x140>
    7500:	d8c01c17 	ldw	r3,112(sp)
    7504:	d8801b17 	ldw	r2,108(sp)
    7508:	45800015 	stw	r22,0(r8)
    750c:	80c7883a 	add	r3,r16,r3
    7510:	10800044 	addi	r2,r2,1
    7514:	44000115 	stw	r16,4(r8)
    7518:	d8c01c15 	stw	r3,112(sp)
    751c:	d8801b15 	stw	r2,108(sp)
    7520:	010001c4 	movi	r4,7
    7524:	2080750e 	bge	r4,r2,76fc <___vfiprintf_internal_r+0x2fc>
    7528:	1803951e 	bne	r3,zero,8380 <___vfiprintf_internal_r+0xf80>
    752c:	d8c02417 	ldw	r3,144(sp)
    7530:	d8001b15 	stw	zero,108(sp)
    7534:	d811883a 	mov	r8,sp
    7538:	1c07883a 	add	r3,r3,r16
    753c:	d8c02415 	stw	r3,144(sp)
    7540:	a0800007 	ldb	r2,0(r20)
    7544:	1002e026 	beq	r2,zero,80c8 <___vfiprintf_internal_r+0xcc8>
    7548:	a5800044 	addi	r22,r20,1
    754c:	a0c00047 	ldb	r3,1(r20)
    7550:	d8001d85 	stb	zero,118(sp)
    7554:	0027883a 	mov	r19,zero
    7558:	d8002305 	stb	zero,140(sp)
    755c:	043fffc4 	movi	r16,-1
    7560:	d8002515 	stw	zero,148(sp)
    7564:	0023883a 	mov	r17,zero
    7568:	05001604 	movi	r20,88
    756c:	05400244 	movi	r21,9
    7570:	402f883a 	mov	r23,r8
    7574:	b5800044 	addi	r22,r22,1
    7578:	18bff804 	addi	r2,r3,-32
    757c:	a0827736 	bltu	r20,r2,7f5c <___vfiprintf_internal_r+0xb5c>
    7580:	100490ba 	slli	r2,r2,2
    7584:	01000034 	movhi	r4,0
    7588:	211d6604 	addi	r4,r4,30104
    758c:	1105883a 	add	r2,r2,r4
    7590:	10800017 	ldw	r2,0(r2)
    7594:	1000683a 	jmp	r2
    7598:	00007c5c 	xori	zero,zero,497
    759c:	00007f5c 	xori	zero,zero,509
    75a0:	00007f5c 	xori	zero,zero,509
    75a4:	00007c78 	rdprs	zero,zero,497
    75a8:	00007f5c 	xori	zero,zero,509
    75ac:	00007f5c 	xori	zero,zero,509
    75b0:	00007f5c 	xori	zero,zero,509
    75b4:	00007f5c 	xori	zero,zero,509
    75b8:	00007f5c 	xori	zero,zero,509
    75bc:	00007f5c 	xori	zero,zero,509
    75c0:	00007e80 	call	7e8 <___vfprintf_internal_r+0xf0>
    75c4:	00007ea4 	muli	zero,zero,506
    75c8:	00007f5c 	xori	zero,zero,509
    75cc:	0000779c 	xori	zero,zero,478
    75d0:	00007eb8 	rdprs	zero,zero,506
    75d4:	00007f5c 	xori	zero,zero,509
    75d8:	00007c84 	movi	zero,498
    75dc:	00007c90 	cmplti	zero,zero,498
    75e0:	00007c90 	cmplti	zero,zero,498
    75e4:	00007c90 	cmplti	zero,zero,498
    75e8:	00007c90 	cmplti	zero,zero,498
    75ec:	00007c90 	cmplti	zero,zero,498
    75f0:	00007c90 	cmplti	zero,zero,498
    75f4:	00007c90 	cmplti	zero,zero,498
    75f8:	00007c90 	cmplti	zero,zero,498
    75fc:	00007c90 	cmplti	zero,zero,498
    7600:	00007f5c 	xori	zero,zero,509
    7604:	00007f5c 	xori	zero,zero,509
    7608:	00007f5c 	xori	zero,zero,509
    760c:	00007f5c 	xori	zero,zero,509
    7610:	00007f5c 	xori	zero,zero,509
    7614:	00007f5c 	xori	zero,zero,509
    7618:	00007f5c 	xori	zero,zero,509
    761c:	00007f5c 	xori	zero,zero,509
    7620:	00007f5c 	xori	zero,zero,509
    7624:	00007f5c 	xori	zero,zero,509
    7628:	00007cd0 	cmplti	zero,zero,499
    762c:	00007f5c 	xori	zero,zero,509
    7630:	00007f5c 	xori	zero,zero,509
    7634:	00007f5c 	xori	zero,zero,509
    7638:	00007f5c 	xori	zero,zero,509
    763c:	00007f5c 	xori	zero,zero,509
    7640:	00007f5c 	xori	zero,zero,509
    7644:	00007f5c 	xori	zero,zero,509
    7648:	00007f5c 	xori	zero,zero,509
    764c:	00007f5c 	xori	zero,zero,509
    7650:	00007f5c 	xori	zero,zero,509
    7654:	00007d0c 	andi	zero,zero,500
    7658:	00007f5c 	xori	zero,zero,509
    765c:	00007f5c 	xori	zero,zero,509
    7660:	00007f5c 	xori	zero,zero,509
    7664:	00007f5c 	xori	zero,zero,509
    7668:	00007f5c 	xori	zero,zero,509
    766c:	00007d68 	cmpgeui	zero,zero,501
    7670:	00007f5c 	xori	zero,zero,509
    7674:	00007f5c 	xori	zero,zero,509
    7678:	00007ddc 	xori	zero,zero,503
    767c:	00007f5c 	xori	zero,zero,509
    7680:	00007f5c 	xori	zero,zero,509
    7684:	00007f5c 	xori	zero,zero,509
    7688:	00007f5c 	xori	zero,zero,509
    768c:	00007f5c 	xori	zero,zero,509
    7690:	00007f5c 	xori	zero,zero,509
    7694:	00007f5c 	xori	zero,zero,509
    7698:	00007f5c 	xori	zero,zero,509
    769c:	00007f5c 	xori	zero,zero,509
    76a0:	00007f5c 	xori	zero,zero,509
    76a4:	00007b84 	movi	zero,494
    76a8:	00007bb4 	movhi	zero,494
    76ac:	00007f5c 	xori	zero,zero,509
    76b0:	00007f5c 	xori	zero,zero,509
    76b4:	00007f5c 	xori	zero,zero,509
    76b8:	00007f04 	movi	zero,508
    76bc:	00007bb4 	movhi	zero,494
    76c0:	00007f5c 	xori	zero,zero,509
    76c4:	00007f5c 	xori	zero,zero,509
    76c8:	00007a5c 	xori	zero,zero,489
    76cc:	00007f5c 	xori	zero,zero,509
    76d0:	00007a70 	cmpltui	zero,zero,489
    76d4:	00007aa8 	cmpgeui	zero,zero,490
    76d8:	000077a8 	cmpgeui	zero,zero,478
    76dc:	00007a50 	cmplti	zero,zero,489
    76e0:	00007f5c 	xori	zero,zero,509
    76e4:	00007e1c 	xori	zero,zero,504
    76e8:	00007f5c 	xori	zero,zero,509
    76ec:	00007e68 	cmpgeui	zero,zero,505
    76f0:	00007f5c 	xori	zero,zero,509
    76f4:	00007f5c 	xori	zero,zero,509
    76f8:	00007b2c 	andhi	zero,zero,492
    76fc:	42000204 	addi	r8,r8,8
    7700:	d8c02417 	ldw	r3,144(sp)
    7704:	1c07883a 	add	r3,r3,r16
    7708:	d8c02415 	stw	r3,144(sp)
    770c:	003f8c06 	br	7540 <_gp+0xfffed1d4>
    7710:	d9402017 	ldw	r5,128(sp)
    7714:	d9002117 	ldw	r4,132(sp)
    7718:	0002aac0 	call	2aac <__swsetup_r>
    771c:	1003c11e 	bne	r2,zero,8624 <___vfiprintf_internal_r+0x1224>
    7720:	d9402017 	ldw	r5,128(sp)
    7724:	00c00284 	movi	r3,10
    7728:	2880030b 	ldhu	r2,12(r5)
    772c:	1080068c 	andi	r2,r2,26
    7730:	10ff581e 	bne	r2,r3,7494 <_gp+0xfffed128>
    7734:	d8c02017 	ldw	r3,128(sp)
    7738:	1880038f 	ldh	r2,14(r3)
    773c:	103f5516 	blt	r2,zero,7494 <_gp+0xfffed128>
    7740:	d9c02217 	ldw	r7,136(sp)
    7744:	d9002117 	ldw	r4,132(sp)
    7748:	a80d883a 	mov	r6,r21
    774c:	180b883a 	mov	r5,r3
    7750:	00089280 	call	8928 <__sbprintf>
    7754:	dfc03517 	ldw	ra,212(sp)
    7758:	df003417 	ldw	fp,208(sp)
    775c:	ddc03317 	ldw	r23,204(sp)
    7760:	dd803217 	ldw	r22,200(sp)
    7764:	dd403117 	ldw	r21,196(sp)
    7768:	dd003017 	ldw	r20,192(sp)
    776c:	dcc02f17 	ldw	r19,188(sp)
    7770:	dc802e17 	ldw	r18,184(sp)
    7774:	dc402d17 	ldw	r17,180(sp)
    7778:	dc002c17 	ldw	r16,176(sp)
    777c:	dec03604 	addi	sp,sp,216
    7780:	f800283a 	ret
    7784:	0004ab80 	call	4ab8 <__sinit>
    7788:	003f2f06 	br	7448 <_gp+0xfffed0dc>
    778c:	d8c02517 	ldw	r3,148(sp)
    7790:	d8802215 	stw	r2,136(sp)
    7794:	00c7c83a 	sub	r3,zero,r3
    7798:	d8c02515 	stw	r3,148(sp)
    779c:	8c400114 	ori	r17,r17,4
    77a0:	b0c00007 	ldb	r3,0(r22)
    77a4:	003f7306 	br	7574 <_gp+0xfffed208>
    77a8:	00800c04 	movi	r2,48
    77ac:	d9402217 	ldw	r5,136(sp)
    77b0:	d8801d05 	stb	r2,116(sp)
    77b4:	00801e04 	movi	r2,120
    77b8:	d8801d45 	stb	r2,117(sp)
    77bc:	d8001d85 	stb	zero,118(sp)
    77c0:	b811883a 	mov	r8,r23
    77c4:	28c00104 	addi	r3,r5,4
    77c8:	2cc00017 	ldw	r19,0(r5)
    77cc:	0029883a 	mov	r20,zero
    77d0:	88800094 	ori	r2,r17,2
    77d4:	80032516 	blt	r16,zero,846c <___vfiprintf_internal_r+0x106c>
    77d8:	00bfdfc4 	movi	r2,-129
    77dc:	88a2703a 	and	r17,r17,r2
    77e0:	d8c02215 	stw	r3,136(sp)
    77e4:	8c400094 	ori	r17,r17,2
    77e8:	98032a1e 	bne	r19,zero,8494 <___vfiprintf_internal_r+0x1094>
    77ec:	00800074 	movhi	r2,1
    77f0:	10817c04 	addi	r2,r2,1520
    77f4:	d8802615 	stw	r2,152(sp)
    77f8:	002b883a 	mov	r21,zero
    77fc:	8001741e 	bne	r16,zero,7dd0 <___vfiprintf_internal_r+0x9d0>
    7800:	0021883a 	mov	r16,zero
    7804:	0029883a 	mov	r20,zero
    7808:	ddc01a04 	addi	r23,sp,104
    780c:	8027883a 	mov	r19,r16
    7810:	8500010e 	bge	r16,r20,7818 <___vfiprintf_internal_r+0x418>
    7814:	a027883a 	mov	r19,r20
    7818:	ad403fcc 	andi	r21,r21,255
    781c:	ad40201c 	xori	r21,r21,128
    7820:	ad7fe004 	addi	r21,r21,-128
    7824:	a8000126 	beq	r21,zero,782c <___vfiprintf_internal_r+0x42c>
    7828:	9cc00044 	addi	r19,r19,1
    782c:	89c0008c 	andi	r7,r17,2
    7830:	38000126 	beq	r7,zero,7838 <___vfiprintf_internal_r+0x438>
    7834:	9cc00084 	addi	r19,r19,2
    7838:	88c0210c 	andi	r3,r17,132
    783c:	1801dd1e 	bne	r3,zero,7fb4 <___vfiprintf_internal_r+0xbb4>
    7840:	d9402517 	ldw	r5,148(sp)
    7844:	2cebc83a 	sub	r21,r5,r19
    7848:	0541da0e 	bge	zero,r21,7fb4 <___vfiprintf_internal_r+0xbb4>
    784c:	07000404 	movi	fp,16
    7850:	d8801c17 	ldw	r2,112(sp)
    7854:	e543be0e 	bge	fp,r21,8750 <___vfiprintf_internal_r+0x1350>
    7858:	01400074 	movhi	r5,1
    785c:	2941e104 	addi	r5,r5,1924
    7860:	dc002715 	stw	r16,156(sp)
    7864:	d9801b17 	ldw	r6,108(sp)
    7868:	a821883a 	mov	r16,r21
    786c:	d9402315 	stw	r5,140(sp)
    7870:	028001c4 	movi	r10,7
    7874:	d9c02915 	stw	r7,164(sp)
    7878:	182b883a 	mov	r21,r3
    787c:	00000506 	br	7894 <___vfiprintf_internal_r+0x494>
    7880:	31000084 	addi	r4,r6,2
    7884:	42000204 	addi	r8,r8,8
    7888:	180d883a 	mov	r6,r3
    788c:	843ffc04 	addi	r16,r16,-16
    7890:	e4000f0e 	bge	fp,r16,78d0 <___vfiprintf_internal_r+0x4d0>
    7894:	01000074 	movhi	r4,1
    7898:	10800404 	addi	r2,r2,16
    789c:	30c00044 	addi	r3,r6,1
    78a0:	2101e104 	addi	r4,r4,1924
    78a4:	41000015 	stw	r4,0(r8)
    78a8:	47000115 	stw	fp,4(r8)
    78ac:	d8801c15 	stw	r2,112(sp)
    78b0:	d8c01b15 	stw	r3,108(sp)
    78b4:	50fff20e 	bge	r10,r3,7880 <_gp+0xfffed514>
    78b8:	1001b21e 	bne	r2,zero,7f84 <___vfiprintf_internal_r+0xb84>
    78bc:	843ffc04 	addi	r16,r16,-16
    78c0:	000d883a 	mov	r6,zero
    78c4:	01000044 	movi	r4,1
    78c8:	d811883a 	mov	r8,sp
    78cc:	e43ff116 	blt	fp,r16,7894 <_gp+0xfffed528>
    78d0:	a807883a 	mov	r3,r21
    78d4:	d9c02917 	ldw	r7,164(sp)
    78d8:	802b883a 	mov	r21,r16
    78dc:	dc002717 	ldw	r16,156(sp)
    78e0:	d9402317 	ldw	r5,140(sp)
    78e4:	a885883a 	add	r2,r21,r2
    78e8:	45400115 	stw	r21,4(r8)
    78ec:	41400015 	stw	r5,0(r8)
    78f0:	d8801c15 	stw	r2,112(sp)
    78f4:	d9001b15 	stw	r4,108(sp)
    78f8:	014001c4 	movi	r5,7
    78fc:	29026216 	blt	r5,r4,8288 <___vfiprintf_internal_r+0xe88>
    7900:	d9801d87 	ldb	r6,118(sp)
    7904:	42000204 	addi	r8,r8,8
    7908:	21400044 	addi	r5,r4,1
    790c:	3001ae1e 	bne	r6,zero,7fc8 <___vfiprintf_internal_r+0xbc8>
    7910:	3801bb26 	beq	r7,zero,8000 <___vfiprintf_internal_r+0xc00>
    7914:	d9001d04 	addi	r4,sp,116
    7918:	10800084 	addi	r2,r2,2
    791c:	41000015 	stw	r4,0(r8)
    7920:	01000084 	movi	r4,2
    7924:	41000115 	stw	r4,4(r8)
    7928:	d8801c15 	stw	r2,112(sp)
    792c:	d9401b15 	stw	r5,108(sp)
    7930:	010001c4 	movi	r4,7
    7934:	2142680e 	bge	r4,r5,82d8 <___vfiprintf_internal_r+0xed8>
    7938:	1002b11e 	bne	r2,zero,8400 <___vfiprintf_internal_r+0x1000>
    793c:	01802004 	movi	r6,128
    7940:	01400044 	movi	r5,1
    7944:	0009883a 	mov	r4,zero
    7948:	d811883a 	mov	r8,sp
    794c:	1981ae1e 	bne	r3,r6,8008 <___vfiprintf_internal_r+0xc08>
    7950:	d8c02517 	ldw	r3,148(sp)
    7954:	1cf9c83a 	sub	fp,r3,r19
    7958:	0701ab0e 	bge	zero,fp,8008 <___vfiprintf_internal_r+0xc08>
    795c:	05400404 	movi	r21,16
    7960:	af03a90e 	bge	r21,fp,8808 <___vfiprintf_internal_r+0x1408>
    7964:	01400074 	movhi	r5,1
    7968:	2941dd04 	addi	r5,r5,1908
    796c:	d9402315 	stw	r5,140(sp)
    7970:	01c001c4 	movi	r7,7
    7974:	00000506 	br	798c <___vfiprintf_internal_r+0x58c>
    7978:	21800084 	addi	r6,r4,2
    797c:	42000204 	addi	r8,r8,8
    7980:	1809883a 	mov	r4,r3
    7984:	e73ffc04 	addi	fp,fp,-16
    7988:	af000d0e 	bge	r21,fp,79c0 <___vfiprintf_internal_r+0x5c0>
    798c:	10800404 	addi	r2,r2,16
    7990:	20c00044 	addi	r3,r4,1
    7994:	44800015 	stw	r18,0(r8)
    7998:	45400115 	stw	r21,4(r8)
    799c:	d8801c15 	stw	r2,112(sp)
    79a0:	d8c01b15 	stw	r3,108(sp)
    79a4:	38fff40e 	bge	r7,r3,7978 <_gp+0xfffed60c>
    79a8:	10022b1e 	bne	r2,zero,8258 <___vfiprintf_internal_r+0xe58>
    79ac:	e73ffc04 	addi	fp,fp,-16
    79b0:	01800044 	movi	r6,1
    79b4:	0009883a 	mov	r4,zero
    79b8:	d811883a 	mov	r8,sp
    79bc:	af3ff316 	blt	r21,fp,798c <_gp+0xfffed620>
    79c0:	d8c02317 	ldw	r3,140(sp)
    79c4:	1705883a 	add	r2,r2,fp
    79c8:	47000115 	stw	fp,4(r8)
    79cc:	40c00015 	stw	r3,0(r8)
    79d0:	d8801c15 	stw	r2,112(sp)
    79d4:	d9801b15 	stw	r6,108(sp)
    79d8:	00c001c4 	movi	r3,7
    79dc:	19829416 	blt	r3,r6,8430 <___vfiprintf_internal_r+0x1030>
    79e0:	8521c83a 	sub	r16,r16,r20
    79e4:	42000204 	addi	r8,r8,8
    79e8:	31400044 	addi	r5,r6,1
    79ec:	3009883a 	mov	r4,r6
    79f0:	04018716 	blt	zero,r16,8010 <___vfiprintf_internal_r+0xc10>
    79f4:	a085883a 	add	r2,r20,r2
    79f8:	45c00015 	stw	r23,0(r8)
    79fc:	45000115 	stw	r20,4(r8)
    7a00:	d8801c15 	stw	r2,112(sp)
    7a04:	d9401b15 	stw	r5,108(sp)
    7a08:	00c001c4 	movi	r3,7
    7a0c:	1941c20e 	bge	r3,r5,8118 <___vfiprintf_internal_r+0xd18>
    7a10:	1002531e 	bne	r2,zero,8360 <___vfiprintf_internal_r+0xf60>
    7a14:	d8001b15 	stw	zero,108(sp)
    7a18:	8c40010c 	andi	r17,r17,4
    7a1c:	88023226 	beq	r17,zero,82e8 <___vfiprintf_internal_r+0xee8>
    7a20:	d9002517 	ldw	r4,148(sp)
    7a24:	24e3c83a 	sub	r17,r4,r19
    7a28:	04432916 	blt	zero,r17,86d0 <___vfiprintf_internal_r+0x12d0>
    7a2c:	d8802517 	ldw	r2,148(sp)
    7a30:	14c0010e 	bge	r2,r19,7a38 <___vfiprintf_internal_r+0x638>
    7a34:	9805883a 	mov	r2,r19
    7a38:	d8c02417 	ldw	r3,144(sp)
    7a3c:	1887883a 	add	r3,r3,r2
    7a40:	d8c02415 	stw	r3,144(sp)
    7a44:	d8001b15 	stw	zero,108(sp)
    7a48:	d811883a 	mov	r8,sp
    7a4c:	003ea006 	br	74d0 <_gp+0xfffed164>
    7a50:	8c400814 	ori	r17,r17,32
    7a54:	b0c00007 	ldb	r3,0(r22)
    7a58:	003ec606 	br	7574 <_gp+0xfffed208>
    7a5c:	b0c00007 	ldb	r3,0(r22)
    7a60:	00801b04 	movi	r2,108
    7a64:	18832026 	beq	r3,r2,86e8 <___vfiprintf_internal_r+0x12e8>
    7a68:	8c400414 	ori	r17,r17,16
    7a6c:	003ec106 	br	7574 <_gp+0xfffed208>
    7a70:	9cc03fcc 	andi	r19,r19,255
    7a74:	b811883a 	mov	r8,r23
    7a78:	9803981e 	bne	r19,zero,88dc <___vfiprintf_internal_r+0x14dc>
    7a7c:	8880080c 	andi	r2,r17,32
    7a80:	1002be26 	beq	r2,zero,857c <___vfiprintf_internal_r+0x117c>
    7a84:	d9002217 	ldw	r4,136(sp)
    7a88:	d9402417 	ldw	r5,144(sp)
    7a8c:	20800017 	ldw	r2,0(r4)
    7a90:	2807d7fa 	srai	r3,r5,31
    7a94:	21000104 	addi	r4,r4,4
    7a98:	d9002215 	stw	r4,136(sp)
    7a9c:	11400015 	stw	r5,0(r2)
    7aa0:	10c00115 	stw	r3,4(r2)
    7aa4:	003e8a06 	br	74d0 <_gp+0xfffed164>
    7aa8:	9cc03fcc 	andi	r19,r19,255
    7aac:	b811883a 	mov	r8,r23
    7ab0:	9803871e 	bne	r19,zero,88d0 <___vfiprintf_internal_r+0x14d0>
    7ab4:	8880080c 	andi	r2,r17,32
    7ab8:	10009a26 	beq	r2,zero,7d24 <___vfiprintf_internal_r+0x924>
    7abc:	d9002217 	ldw	r4,136(sp)
    7ac0:	d8001d85 	stb	zero,118(sp)
    7ac4:	20800204 	addi	r2,r4,8
    7ac8:	24c00017 	ldw	r19,0(r4)
    7acc:	25000117 	ldw	r20,4(r4)
    7ad0:	8002a416 	blt	r16,zero,8564 <___vfiprintf_internal_r+0x1164>
    7ad4:	013fdfc4 	movi	r4,-129
    7ad8:	9d06b03a 	or	r3,r19,r20
    7adc:	d8802215 	stw	r2,136(sp)
    7ae0:	8922703a 	and	r17,r17,r4
    7ae4:	18009b26 	beq	r3,zero,7d54 <___vfiprintf_internal_r+0x954>
    7ae8:	002b883a 	mov	r21,zero
    7aec:	ddc01a04 	addi	r23,sp,104
    7af0:	9806d0fa 	srli	r3,r19,3
    7af4:	a008977a 	slli	r4,r20,29
    7af8:	a028d0fa 	srli	r20,r20,3
    7afc:	9cc001cc 	andi	r19,r19,7
    7b00:	98800c04 	addi	r2,r19,48
    7b04:	bdffffc4 	addi	r23,r23,-1
    7b08:	20e6b03a 	or	r19,r4,r3
    7b0c:	b8800005 	stb	r2,0(r23)
    7b10:	9d06b03a 	or	r3,r19,r20
    7b14:	183ff61e 	bne	r3,zero,7af0 <_gp+0xfffed784>
    7b18:	88c0004c 	andi	r3,r17,1
    7b1c:	18021f1e 	bne	r3,zero,839c <___vfiprintf_internal_r+0xf9c>
    7b20:	d9401e17 	ldw	r5,120(sp)
    7b24:	2de9c83a 	sub	r20,r5,r23
    7b28:	003f3806 	br	780c <_gp+0xfffed4a0>
    7b2c:	9cc03fcc 	andi	r19,r19,255
    7b30:	b811883a 	mov	r8,r23
    7b34:	98034f1e 	bne	r19,zero,8874 <___vfiprintf_internal_r+0x1474>
    7b38:	00800074 	movhi	r2,1
    7b3c:	10817c04 	addi	r2,r2,1520
    7b40:	d8802615 	stw	r2,152(sp)
    7b44:	8880080c 	andi	r2,r17,32
    7b48:	1000ac26 	beq	r2,zero,7dfc <___vfiprintf_internal_r+0x9fc>
    7b4c:	d9002217 	ldw	r4,136(sp)
    7b50:	24c00017 	ldw	r19,0(r4)
    7b54:	25000117 	ldw	r20,4(r4)
    7b58:	21000204 	addi	r4,r4,8
    7b5c:	d9002215 	stw	r4,136(sp)
    7b60:	8880004c 	andi	r2,r17,1
    7b64:	1001e726 	beq	r2,zero,8304 <___vfiprintf_internal_r+0xf04>
    7b68:	9d04b03a 	or	r2,r19,r20
    7b6c:	10025c1e 	bne	r2,zero,84e0 <___vfiprintf_internal_r+0x10e0>
    7b70:	d8001d85 	stb	zero,118(sp)
    7b74:	80024416 	blt	r16,zero,8488 <___vfiprintf_internal_r+0x1088>
    7b78:	00bfdfc4 	movi	r2,-129
    7b7c:	88a2703a 	and	r17,r17,r2
    7b80:	003f1d06 	br	77f8 <_gp+0xfffed48c>
    7b84:	d8c02217 	ldw	r3,136(sp)
    7b88:	04c00044 	movi	r19,1
    7b8c:	b811883a 	mov	r8,r23
    7b90:	18800017 	ldw	r2,0(r3)
    7b94:	18c00104 	addi	r3,r3,4
    7b98:	d8001d85 	stb	zero,118(sp)
    7b9c:	d8801005 	stb	r2,64(sp)
    7ba0:	d8c02215 	stw	r3,136(sp)
    7ba4:	9829883a 	mov	r20,r19
    7ba8:	ddc01004 	addi	r23,sp,64
    7bac:	0021883a 	mov	r16,zero
    7bb0:	003f1e06 	br	782c <_gp+0xfffed4c0>
    7bb4:	9cc03fcc 	andi	r19,r19,255
    7bb8:	b811883a 	mov	r8,r23
    7bbc:	9803331e 	bne	r19,zero,888c <___vfiprintf_internal_r+0x148c>
    7bc0:	8880080c 	andi	r2,r17,32
    7bc4:	10004826 	beq	r2,zero,7ce8 <___vfiprintf_internal_r+0x8e8>
    7bc8:	d9002217 	ldw	r4,136(sp)
    7bcc:	20800117 	ldw	r2,4(r4)
    7bd0:	24c00017 	ldw	r19,0(r4)
    7bd4:	21000204 	addi	r4,r4,8
    7bd8:	d9002215 	stw	r4,136(sp)
    7bdc:	1029883a 	mov	r20,r2
    7be0:	10024c16 	blt	r2,zero,8514 <___vfiprintf_internal_r+0x1114>
    7be4:	dd401d83 	ldbu	r21,118(sp)
    7be8:	80007116 	blt	r16,zero,7db0 <___vfiprintf_internal_r+0x9b0>
    7bec:	00ffdfc4 	movi	r3,-129
    7bf0:	9d04b03a 	or	r2,r19,r20
    7bf4:	88e2703a 	and	r17,r17,r3
    7bf8:	1000d126 	beq	r2,zero,7f40 <___vfiprintf_internal_r+0xb40>
    7bfc:	a0023526 	beq	r20,zero,84d4 <___vfiprintf_internal_r+0x10d4>
    7c00:	ddc01a04 	addi	r23,sp,104
    7c04:	4039883a 	mov	fp,r8
    7c08:	9809883a 	mov	r4,r19
    7c0c:	a00b883a 	mov	r5,r20
    7c10:	01800284 	movi	r6,10
    7c14:	000f883a 	mov	r7,zero
    7c18:	000a4b40 	call	a4b4 <__umoddi3>
    7c1c:	10800c04 	addi	r2,r2,48
    7c20:	bdffffc4 	addi	r23,r23,-1
    7c24:	9809883a 	mov	r4,r19
    7c28:	a00b883a 	mov	r5,r20
    7c2c:	b8800005 	stb	r2,0(r23)
    7c30:	01800284 	movi	r6,10
    7c34:	000f883a 	mov	r7,zero
    7c38:	0009eb80 	call	9eb8 <__udivdi3>
    7c3c:	1027883a 	mov	r19,r2
    7c40:	10c4b03a 	or	r2,r2,r3
    7c44:	1829883a 	mov	r20,r3
    7c48:	103fef1e 	bne	r2,zero,7c08 <_gp+0xfffed89c>
    7c4c:	d9001e17 	ldw	r4,120(sp)
    7c50:	e011883a 	mov	r8,fp
    7c54:	25e9c83a 	sub	r20,r4,r23
    7c58:	003eec06 	br	780c <_gp+0xfffed4a0>
    7c5c:	d8802307 	ldb	r2,140(sp)
    7c60:	1002361e 	bne	r2,zero,853c <___vfiprintf_internal_r+0x113c>
    7c64:	00c00804 	movi	r3,32
    7c68:	d8c02305 	stb	r3,140(sp)
    7c6c:	04c00044 	movi	r19,1
    7c70:	b0c00007 	ldb	r3,0(r22)
    7c74:	003e3f06 	br	7574 <_gp+0xfffed208>
    7c78:	8c400054 	ori	r17,r17,1
    7c7c:	b0c00007 	ldb	r3,0(r22)
    7c80:	003e3c06 	br	7574 <_gp+0xfffed208>
    7c84:	8c402014 	ori	r17,r17,128
    7c88:	b0c00007 	ldb	r3,0(r22)
    7c8c:	003e3906 	br	7574 <_gp+0xfffed208>
    7c90:	dc002715 	stw	r16,156(sp)
    7c94:	d8002515 	stw	zero,148(sp)
    7c98:	1f3ff404 	addi	fp,r3,-48
    7c9c:	0009883a 	mov	r4,zero
    7ca0:	b021883a 	mov	r16,r22
    7ca4:	01400284 	movi	r5,10
    7ca8:	000049c0 	call	49c <__mulsi3>
    7cac:	80c00007 	ldb	r3,0(r16)
    7cb0:	e089883a 	add	r4,fp,r2
    7cb4:	b5800044 	addi	r22,r22,1
    7cb8:	1f3ff404 	addi	fp,r3,-48
    7cbc:	b021883a 	mov	r16,r22
    7cc0:	af3ff82e 	bgeu	r21,fp,7ca4 <_gp+0xfffed938>
    7cc4:	d9002515 	stw	r4,148(sp)
    7cc8:	dc002717 	ldw	r16,156(sp)
    7ccc:	003e2a06 	br	7578 <_gp+0xfffed20c>
    7cd0:	9cc03fcc 	andi	r19,r19,255
    7cd4:	b811883a 	mov	r8,r23
    7cd8:	9802e91e 	bne	r19,zero,8880 <___vfiprintf_internal_r+0x1480>
    7cdc:	8c400414 	ori	r17,r17,16
    7ce0:	8880080c 	andi	r2,r17,32
    7ce4:	103fb81e 	bne	r2,zero,7bc8 <_gp+0xfffed85c>
    7ce8:	8880040c 	andi	r2,r17,16
    7cec:	10022e26 	beq	r2,zero,85a8 <___vfiprintf_internal_r+0x11a8>
    7cf0:	d9402217 	ldw	r5,136(sp)
    7cf4:	2cc00017 	ldw	r19,0(r5)
    7cf8:	29400104 	addi	r5,r5,4
    7cfc:	d9402215 	stw	r5,136(sp)
    7d00:	9829d7fa 	srai	r20,r19,31
    7d04:	a005883a 	mov	r2,r20
    7d08:	003fb506 	br	7be0 <_gp+0xfffed874>
    7d0c:	9cc03fcc 	andi	r19,r19,255
    7d10:	b811883a 	mov	r8,r23
    7d14:	9802fa1e 	bne	r19,zero,8900 <___vfiprintf_internal_r+0x1500>
    7d18:	8c400414 	ori	r17,r17,16
    7d1c:	8880080c 	andi	r2,r17,32
    7d20:	103f661e 	bne	r2,zero,7abc <_gp+0xfffed750>
    7d24:	8880040c 	andi	r2,r17,16
    7d28:	10020626 	beq	r2,zero,8544 <___vfiprintf_internal_r+0x1144>
    7d2c:	d9402217 	ldw	r5,136(sp)
    7d30:	d8001d85 	stb	zero,118(sp)
    7d34:	0029883a 	mov	r20,zero
    7d38:	28800104 	addi	r2,r5,4
    7d3c:	2cc00017 	ldw	r19,0(r5)
    7d40:	80020816 	blt	r16,zero,8564 <___vfiprintf_internal_r+0x1164>
    7d44:	00ffdfc4 	movi	r3,-129
    7d48:	d8802215 	stw	r2,136(sp)
    7d4c:	88e2703a 	and	r17,r17,r3
    7d50:	983f651e 	bne	r19,zero,7ae8 <_gp+0xfffed77c>
    7d54:	002b883a 	mov	r21,zero
    7d58:	8002cf26 	beq	r16,zero,8898 <___vfiprintf_internal_r+0x1498>
    7d5c:	0027883a 	mov	r19,zero
    7d60:	0029883a 	mov	r20,zero
    7d64:	003f6106 	br	7aec <_gp+0xfffed780>
    7d68:	9cc03fcc 	andi	r19,r19,255
    7d6c:	b811883a 	mov	r8,r23
    7d70:	9802e01e 	bne	r19,zero,88f4 <___vfiprintf_internal_r+0x14f4>
    7d74:	8c400414 	ori	r17,r17,16
    7d78:	8880080c 	andi	r2,r17,32
    7d7c:	1000641e 	bne	r2,zero,7f10 <___vfiprintf_internal_r+0xb10>
    7d80:	8880040c 	andi	r2,r17,16
    7d84:	1001c81e 	bne	r2,zero,84a8 <___vfiprintf_internal_r+0x10a8>
    7d88:	8880100c 	andi	r2,r17,64
    7d8c:	d8001d85 	stb	zero,118(sp)
    7d90:	1002281e 	bne	r2,zero,8634 <___vfiprintf_internal_r+0x1234>
    7d94:	d9002217 	ldw	r4,136(sp)
    7d98:	0029883a 	mov	r20,zero
    7d9c:	20800104 	addi	r2,r4,4
    7da0:	24c00017 	ldw	r19,0(r4)
    7da4:	8001c60e 	bge	r16,zero,84c0 <___vfiprintf_internal_r+0x10c0>
    7da8:	d8802215 	stw	r2,136(sp)
    7dac:	002b883a 	mov	r21,zero
    7db0:	9d04b03a 	or	r2,r19,r20
    7db4:	103f911e 	bne	r2,zero,7bfc <_gp+0xfffed890>
    7db8:	00800044 	movi	r2,1
    7dbc:	10803fcc 	andi	r2,r2,255
    7dc0:	00c00044 	movi	r3,1
    7dc4:	10c05f26 	beq	r2,r3,7f44 <___vfiprintf_internal_r+0xb44>
    7dc8:	00c00084 	movi	r3,2
    7dcc:	10ffe31e 	bne	r2,r3,7d5c <_gp+0xfffed9f0>
    7dd0:	0027883a 	mov	r19,zero
    7dd4:	0029883a 	mov	r20,zero
    7dd8:	00015106 	br	8320 <___vfiprintf_internal_r+0xf20>
    7ddc:	9cc03fcc 	andi	r19,r19,255
    7de0:	b811883a 	mov	r8,r23
    7de4:	9802c01e 	bne	r19,zero,88e8 <___vfiprintf_internal_r+0x14e8>
    7de8:	01400074 	movhi	r5,1
    7dec:	29417704 	addi	r5,r5,1500
    7df0:	d9402615 	stw	r5,152(sp)
    7df4:	8880080c 	andi	r2,r17,32
    7df8:	103f541e 	bne	r2,zero,7b4c <_gp+0xfffed7e0>
    7dfc:	8880040c 	andi	r2,r17,16
    7e00:	1001f226 	beq	r2,zero,85cc <___vfiprintf_internal_r+0x11cc>
    7e04:	d9402217 	ldw	r5,136(sp)
    7e08:	0029883a 	mov	r20,zero
    7e0c:	2cc00017 	ldw	r19,0(r5)
    7e10:	29400104 	addi	r5,r5,4
    7e14:	d9402215 	stw	r5,136(sp)
    7e18:	003f5106 	br	7b60 <_gp+0xfffed7f4>
    7e1c:	d8c02217 	ldw	r3,136(sp)
    7e20:	b811883a 	mov	r8,r23
    7e24:	d8001d85 	stb	zero,118(sp)
    7e28:	1dc00017 	ldw	r23,0(r3)
    7e2c:	1f000104 	addi	fp,r3,4
    7e30:	b8025926 	beq	r23,zero,8798 <___vfiprintf_internal_r+0x1398>
    7e34:	80023316 	blt	r16,zero,8704 <___vfiprintf_internal_r+0x1304>
    7e38:	800d883a 	mov	r6,r16
    7e3c:	000b883a 	mov	r5,zero
    7e40:	b809883a 	mov	r4,r23
    7e44:	da002a15 	stw	r8,168(sp)
    7e48:	0005b680 	call	5b68 <memchr>
    7e4c:	da002a17 	ldw	r8,168(sp)
    7e50:	10026826 	beq	r2,zero,87f4 <___vfiprintf_internal_r+0x13f4>
    7e54:	15e9c83a 	sub	r20,r2,r23
    7e58:	dd401d83 	ldbu	r21,118(sp)
    7e5c:	df002215 	stw	fp,136(sp)
    7e60:	0021883a 	mov	r16,zero
    7e64:	003e6906 	br	780c <_gp+0xfffed4a0>
    7e68:	9cc03fcc 	andi	r19,r19,255
    7e6c:	b811883a 	mov	r8,r23
    7e70:	983fc126 	beq	r19,zero,7d78 <_gp+0xfffeda0c>
    7e74:	d8c02303 	ldbu	r3,140(sp)
    7e78:	d8c01d85 	stb	r3,118(sp)
    7e7c:	003fbe06 	br	7d78 <_gp+0xfffeda0c>
    7e80:	d9002217 	ldw	r4,136(sp)
    7e84:	d9402217 	ldw	r5,136(sp)
    7e88:	21000017 	ldw	r4,0(r4)
    7e8c:	28800104 	addi	r2,r5,4
    7e90:	d9002515 	stw	r4,148(sp)
    7e94:	203e3d16 	blt	r4,zero,778c <_gp+0xfffed420>
    7e98:	d8802215 	stw	r2,136(sp)
    7e9c:	b0c00007 	ldb	r3,0(r22)
    7ea0:	003db406 	br	7574 <_gp+0xfffed208>
    7ea4:	00c00ac4 	movi	r3,43
    7ea8:	d8c02305 	stb	r3,140(sp)
    7eac:	04c00044 	movi	r19,1
    7eb0:	b0c00007 	ldb	r3,0(r22)
    7eb4:	003daf06 	br	7574 <_gp+0xfffed208>
    7eb8:	b0c00007 	ldb	r3,0(r22)
    7ebc:	01000a84 	movi	r4,42
    7ec0:	b4000044 	addi	r16,r22,1
    7ec4:	19025e26 	beq	r3,r4,8840 <___vfiprintf_internal_r+0x1440>
    7ec8:	1f3ff404 	addi	fp,r3,-48
    7ecc:	0009883a 	mov	r4,zero
    7ed0:	af025236 	bltu	r21,fp,881c <___vfiprintf_internal_r+0x141c>
    7ed4:	01400284 	movi	r5,10
    7ed8:	000049c0 	call	49c <__mulsi3>
    7edc:	80c00007 	ldb	r3,0(r16)
    7ee0:	1709883a 	add	r4,r2,fp
    7ee4:	85800044 	addi	r22,r16,1
    7ee8:	1f3ff404 	addi	fp,r3,-48
    7eec:	b021883a 	mov	r16,r22
    7ef0:	af3ff82e 	bgeu	r21,fp,7ed4 <_gp+0xfffedb68>
    7ef4:	2021883a 	mov	r16,r4
    7ef8:	203d9f0e 	bge	r4,zero,7578 <_gp+0xfffed20c>
    7efc:	043fffc4 	movi	r16,-1
    7f00:	003d9d06 	br	7578 <_gp+0xfffed20c>
    7f04:	8c401014 	ori	r17,r17,64
    7f08:	b0c00007 	ldb	r3,0(r22)
    7f0c:	003d9906 	br	7574 <_gp+0xfffed208>
    7f10:	d9002217 	ldw	r4,136(sp)
    7f14:	d8001d85 	stb	zero,118(sp)
    7f18:	20c00204 	addi	r3,r4,8
    7f1c:	24c00017 	ldw	r19,0(r4)
    7f20:	25000117 	ldw	r20,4(r4)
    7f24:	8001e716 	blt	r16,zero,86c4 <___vfiprintf_internal_r+0x12c4>
    7f28:	013fdfc4 	movi	r4,-129
    7f2c:	9d04b03a 	or	r2,r19,r20
    7f30:	d8c02215 	stw	r3,136(sp)
    7f34:	8922703a 	and	r17,r17,r4
    7f38:	002b883a 	mov	r21,zero
    7f3c:	103f2f1e 	bne	r2,zero,7bfc <_gp+0xfffed890>
    7f40:	803e2f26 	beq	r16,zero,7800 <_gp+0xfffed494>
    7f44:	0027883a 	mov	r19,zero
    7f48:	9cc00c04 	addi	r19,r19,48
    7f4c:	dcc019c5 	stb	r19,103(sp)
    7f50:	dd002817 	ldw	r20,160(sp)
    7f54:	ddc019c4 	addi	r23,sp,103
    7f58:	003e2c06 	br	780c <_gp+0xfffed4a0>
    7f5c:	9cc03fcc 	andi	r19,r19,255
    7f60:	b811883a 	mov	r8,r23
    7f64:	9802571e 	bne	r19,zero,88c4 <___vfiprintf_internal_r+0x14c4>
    7f68:	18005726 	beq	r3,zero,80c8 <___vfiprintf_internal_r+0xcc8>
    7f6c:	04c00044 	movi	r19,1
    7f70:	d8c01005 	stb	r3,64(sp)
    7f74:	d8001d85 	stb	zero,118(sp)
    7f78:	9829883a 	mov	r20,r19
    7f7c:	ddc01004 	addi	r23,sp,64
    7f80:	003f0a06 	br	7bac <_gp+0xfffed840>
    7f84:	d9402017 	ldw	r5,128(sp)
    7f88:	d9002117 	ldw	r4,132(sp)
    7f8c:	d9801a04 	addi	r6,sp,104
    7f90:	da802a15 	stw	r10,168(sp)
    7f94:	00072ec0 	call	72ec <__sprint_r.part.0>
    7f98:	da802a17 	ldw	r10,168(sp)
    7f9c:	1000501e 	bne	r2,zero,80e0 <___vfiprintf_internal_r+0xce0>
    7fa0:	d9801b17 	ldw	r6,108(sp)
    7fa4:	d8801c17 	ldw	r2,112(sp)
    7fa8:	d811883a 	mov	r8,sp
    7fac:	31000044 	addi	r4,r6,1
    7fb0:	003e3606 	br	788c <_gp+0xfffed520>
    7fb4:	d9001b17 	ldw	r4,108(sp)
    7fb8:	d8801c17 	ldw	r2,112(sp)
    7fbc:	21400044 	addi	r5,r4,1
    7fc0:	d9801d87 	ldb	r6,118(sp)
    7fc4:	303e5226 	beq	r6,zero,7910 <_gp+0xfffed5a4>
    7fc8:	01800044 	movi	r6,1
    7fcc:	d9001d84 	addi	r4,sp,118
    7fd0:	1185883a 	add	r2,r2,r6
    7fd4:	41000015 	stw	r4,0(r8)
    7fd8:	41800115 	stw	r6,4(r8)
    7fdc:	d8801c15 	stw	r2,112(sp)
    7fe0:	d9401b15 	stw	r5,108(sp)
    7fe4:	010001c4 	movi	r4,7
    7fe8:	2140b00e 	bge	r4,r5,82ac <___vfiprintf_internal_r+0xeac>
    7fec:	1000f61e 	bne	r2,zero,83c8 <___vfiprintf_internal_r+0xfc8>
    7ff0:	3800b31e 	bne	r7,zero,82c0 <___vfiprintf_internal_r+0xec0>
    7ff4:	0009883a 	mov	r4,zero
    7ff8:	300b883a 	mov	r5,r6
    7ffc:	d811883a 	mov	r8,sp
    8000:	01802004 	movi	r6,128
    8004:	19be5226 	beq	r3,r6,7950 <_gp+0xfffed5e4>
    8008:	8521c83a 	sub	r16,r16,r20
    800c:	043e790e 	bge	zero,r16,79f4 <_gp+0xfffed688>
    8010:	05400404 	movi	r21,16
    8014:	ac01b00e 	bge	r21,r16,86d8 <___vfiprintf_internal_r+0x12d8>
    8018:	01400074 	movhi	r5,1
    801c:	2941dd04 	addi	r5,r5,1908
    8020:	d9402315 	stw	r5,140(sp)
    8024:	070001c4 	movi	fp,7
    8028:	00000506 	br	8040 <___vfiprintf_internal_r+0xc40>
    802c:	21400084 	addi	r5,r4,2
    8030:	42000204 	addi	r8,r8,8
    8034:	1809883a 	mov	r4,r3
    8038:	843ffc04 	addi	r16,r16,-16
    803c:	ac000d0e 	bge	r21,r16,8074 <___vfiprintf_internal_r+0xc74>
    8040:	10800404 	addi	r2,r2,16
    8044:	20c00044 	addi	r3,r4,1
    8048:	44800015 	stw	r18,0(r8)
    804c:	45400115 	stw	r21,4(r8)
    8050:	d8801c15 	stw	r2,112(sp)
    8054:	d8c01b15 	stw	r3,108(sp)
    8058:	e0fff40e 	bge	fp,r3,802c <_gp+0xfffedcc0>
    805c:	1000101e 	bne	r2,zero,80a0 <___vfiprintf_internal_r+0xca0>
    8060:	843ffc04 	addi	r16,r16,-16
    8064:	01400044 	movi	r5,1
    8068:	0009883a 	mov	r4,zero
    806c:	d811883a 	mov	r8,sp
    8070:	ac3ff316 	blt	r21,r16,8040 <_gp+0xfffedcd4>
    8074:	d8c02317 	ldw	r3,140(sp)
    8078:	1405883a 	add	r2,r2,r16
    807c:	44000115 	stw	r16,4(r8)
    8080:	40c00015 	stw	r3,0(r8)
    8084:	d8801c15 	stw	r2,112(sp)
    8088:	d9401b15 	stw	r5,108(sp)
    808c:	00c001c4 	movi	r3,7
    8090:	19401916 	blt	r3,r5,80f8 <___vfiprintf_internal_r+0xcf8>
    8094:	42000204 	addi	r8,r8,8
    8098:	29400044 	addi	r5,r5,1
    809c:	003e5506 	br	79f4 <_gp+0xfffed688>
    80a0:	d9402017 	ldw	r5,128(sp)
    80a4:	d9002117 	ldw	r4,132(sp)
    80a8:	d9801a04 	addi	r6,sp,104
    80ac:	00072ec0 	call	72ec <__sprint_r.part.0>
    80b0:	10000b1e 	bne	r2,zero,80e0 <___vfiprintf_internal_r+0xce0>
    80b4:	d9001b17 	ldw	r4,108(sp)
    80b8:	d8801c17 	ldw	r2,112(sp)
    80bc:	d811883a 	mov	r8,sp
    80c0:	21400044 	addi	r5,r4,1
    80c4:	003fdc06 	br	8038 <_gp+0xfffedccc>
    80c8:	d8801c17 	ldw	r2,112(sp)
    80cc:	10000426 	beq	r2,zero,80e0 <___vfiprintf_internal_r+0xce0>
    80d0:	d9402017 	ldw	r5,128(sp)
    80d4:	d9002117 	ldw	r4,132(sp)
    80d8:	d9801a04 	addi	r6,sp,104
    80dc:	00072ec0 	call	72ec <__sprint_r.part.0>
    80e0:	d9402017 	ldw	r5,128(sp)
    80e4:	2880030b 	ldhu	r2,12(r5)
    80e8:	1080100c 	andi	r2,r2,64
    80ec:	10014d1e 	bne	r2,zero,8624 <___vfiprintf_internal_r+0x1224>
    80f0:	d8802417 	ldw	r2,144(sp)
    80f4:	003d9706 	br	7754 <_gp+0xfffed3e8>
    80f8:	1000d21e 	bne	r2,zero,8444 <___vfiprintf_internal_r+0x1044>
    80fc:	00c00044 	movi	r3,1
    8100:	a005883a 	mov	r2,r20
    8104:	ddc00015 	stw	r23,0(sp)
    8108:	dd000115 	stw	r20,4(sp)
    810c:	dd001c15 	stw	r20,112(sp)
    8110:	d8c01b15 	stw	r3,108(sp)
    8114:	d811883a 	mov	r8,sp
    8118:	42000204 	addi	r8,r8,8
    811c:	8c40010c 	andi	r17,r17,4
    8120:	88004026 	beq	r17,zero,8224 <___vfiprintf_internal_r+0xe24>
    8124:	d9002517 	ldw	r4,148(sp)
    8128:	24e3c83a 	sub	r17,r4,r19
    812c:	04403d0e 	bge	zero,r17,8224 <___vfiprintf_internal_r+0xe24>
    8130:	04000404 	movi	r16,16
    8134:	8441a90e 	bge	r16,r17,87dc <___vfiprintf_internal_r+0x13dc>
    8138:	00c00074 	movhi	r3,1
    813c:	18c1e104 	addi	r3,r3,1924
    8140:	d9001b17 	ldw	r4,108(sp)
    8144:	d8c02315 	stw	r3,140(sp)
    8148:	050001c4 	movi	r20,7
    814c:	dd402117 	ldw	r21,132(sp)
    8150:	ddc02017 	ldw	r23,128(sp)
    8154:	00000506 	br	816c <___vfiprintf_internal_r+0xd6c>
    8158:	21400084 	addi	r5,r4,2
    815c:	42000204 	addi	r8,r8,8
    8160:	1809883a 	mov	r4,r3
    8164:	8c7ffc04 	addi	r17,r17,-16
    8168:	84400f0e 	bge	r16,r17,81a8 <___vfiprintf_internal_r+0xda8>
    816c:	01400074 	movhi	r5,1
    8170:	10800404 	addi	r2,r2,16
    8174:	20c00044 	addi	r3,r4,1
    8178:	2941e104 	addi	r5,r5,1924
    817c:	41400015 	stw	r5,0(r8)
    8180:	44000115 	stw	r16,4(r8)
    8184:	d8801c15 	stw	r2,112(sp)
    8188:	d8c01b15 	stw	r3,108(sp)
    818c:	a0fff20e 	bge	r20,r3,8158 <_gp+0xfffeddec>
    8190:	1000141e 	bne	r2,zero,81e4 <___vfiprintf_internal_r+0xde4>
    8194:	8c7ffc04 	addi	r17,r17,-16
    8198:	01400044 	movi	r5,1
    819c:	0009883a 	mov	r4,zero
    81a0:	d811883a 	mov	r8,sp
    81a4:	847ff116 	blt	r16,r17,816c <_gp+0xfffede00>
    81a8:	d8c02317 	ldw	r3,140(sp)
    81ac:	1445883a 	add	r2,r2,r17
    81b0:	44400115 	stw	r17,4(r8)
    81b4:	40c00015 	stw	r3,0(r8)
    81b8:	d8801c15 	stw	r2,112(sp)
    81bc:	d9401b15 	stw	r5,108(sp)
    81c0:	00c001c4 	movi	r3,7
    81c4:	1940170e 	bge	r3,r5,8224 <___vfiprintf_internal_r+0xe24>
    81c8:	1000101e 	bne	r2,zero,820c <___vfiprintf_internal_r+0xe0c>
    81cc:	d8802517 	ldw	r2,148(sp)
    81d0:	14c11616 	blt	r2,r19,862c <___vfiprintf_internal_r+0x122c>
    81d4:	d9002417 	ldw	r4,144(sp)
    81d8:	2089883a 	add	r4,r4,r2
    81dc:	d9002415 	stw	r4,144(sp)
    81e0:	003e1806 	br	7a44 <_gp+0xfffed6d8>
    81e4:	d9801a04 	addi	r6,sp,104
    81e8:	b80b883a 	mov	r5,r23
    81ec:	a809883a 	mov	r4,r21
    81f0:	00072ec0 	call	72ec <__sprint_r.part.0>
    81f4:	103fba1e 	bne	r2,zero,80e0 <_gp+0xfffedd74>
    81f8:	d9001b17 	ldw	r4,108(sp)
    81fc:	d8801c17 	ldw	r2,112(sp)
    8200:	d811883a 	mov	r8,sp
    8204:	21400044 	addi	r5,r4,1
    8208:	003fd606 	br	8164 <_gp+0xfffeddf8>
    820c:	d9402017 	ldw	r5,128(sp)
    8210:	d9002117 	ldw	r4,132(sp)
    8214:	d9801a04 	addi	r6,sp,104
    8218:	00072ec0 	call	72ec <__sprint_r.part.0>
    821c:	103fb01e 	bne	r2,zero,80e0 <_gp+0xfffedd74>
    8220:	d8801c17 	ldw	r2,112(sp)
    8224:	d8c02517 	ldw	r3,148(sp)
    8228:	1cc0010e 	bge	r3,r19,8230 <___vfiprintf_internal_r+0xe30>
    822c:	9807883a 	mov	r3,r19
    8230:	d9002417 	ldw	r4,144(sp)
    8234:	20c9883a 	add	r4,r4,r3
    8238:	d9002415 	stw	r4,144(sp)
    823c:	103e0126 	beq	r2,zero,7a44 <_gp+0xfffed6d8>
    8240:	d9402017 	ldw	r5,128(sp)
    8244:	d9002117 	ldw	r4,132(sp)
    8248:	d9801a04 	addi	r6,sp,104
    824c:	00072ec0 	call	72ec <__sprint_r.part.0>
    8250:	103dfc26 	beq	r2,zero,7a44 <_gp+0xfffed6d8>
    8254:	003fa206 	br	80e0 <_gp+0xfffedd74>
    8258:	d9402017 	ldw	r5,128(sp)
    825c:	d9002117 	ldw	r4,132(sp)
    8260:	d9801a04 	addi	r6,sp,104
    8264:	d9c02b15 	stw	r7,172(sp)
    8268:	00072ec0 	call	72ec <__sprint_r.part.0>
    826c:	d9c02b17 	ldw	r7,172(sp)
    8270:	103f9b1e 	bne	r2,zero,80e0 <_gp+0xfffedd74>
    8274:	d9001b17 	ldw	r4,108(sp)
    8278:	d8801c17 	ldw	r2,112(sp)
    827c:	d811883a 	mov	r8,sp
    8280:	21800044 	addi	r6,r4,1
    8284:	003dbf06 	br	7984 <_gp+0xfffed618>
    8288:	1000d81e 	bne	r2,zero,85ec <___vfiprintf_internal_r+0x11ec>
    828c:	d9001d87 	ldb	r4,118(sp)
    8290:	20000a26 	beq	r4,zero,82bc <___vfiprintf_internal_r+0xebc>
    8294:	00800044 	movi	r2,1
    8298:	d9001d84 	addi	r4,sp,118
    829c:	100b883a 	mov	r5,r2
    82a0:	d9000015 	stw	r4,0(sp)
    82a4:	d8800115 	stw	r2,4(sp)
    82a8:	d811883a 	mov	r8,sp
    82ac:	2809883a 	mov	r4,r5
    82b0:	42000204 	addi	r8,r8,8
    82b4:	29400044 	addi	r5,r5,1
    82b8:	003d9506 	br	7910 <_gp+0xfffed5a4>
    82bc:	3800fd26 	beq	r7,zero,86b4 <___vfiprintf_internal_r+0x12b4>
    82c0:	00800084 	movi	r2,2
    82c4:	d9001d04 	addi	r4,sp,116
    82c8:	d9000015 	stw	r4,0(sp)
    82cc:	d8800115 	stw	r2,4(sp)
    82d0:	01400044 	movi	r5,1
    82d4:	d811883a 	mov	r8,sp
    82d8:	2809883a 	mov	r4,r5
    82dc:	42000204 	addi	r8,r8,8
    82e0:	29400044 	addi	r5,r5,1
    82e4:	003f4606 	br	8000 <_gp+0xfffedc94>
    82e8:	d8802517 	ldw	r2,148(sp)
    82ec:	14c0010e 	bge	r2,r19,82f4 <___vfiprintf_internal_r+0xef4>
    82f0:	9805883a 	mov	r2,r19
    82f4:	d9402417 	ldw	r5,144(sp)
    82f8:	288b883a 	add	r5,r5,r2
    82fc:	d9402415 	stw	r5,144(sp)
    8300:	003dd006 	br	7a44 <_gp+0xfffed6d8>
    8304:	d8001d85 	stb	zero,118(sp)
    8308:	80005d16 	blt	r16,zero,8480 <___vfiprintf_internal_r+0x1080>
    830c:	00ffdfc4 	movi	r3,-129
    8310:	9d04b03a 	or	r2,r19,r20
    8314:	88e2703a 	and	r17,r17,r3
    8318:	103d3726 	beq	r2,zero,77f8 <_gp+0xfffed48c>
    831c:	002b883a 	mov	r21,zero
    8320:	d9002617 	ldw	r4,152(sp)
    8324:	ddc01a04 	addi	r23,sp,104
    8328:	988003cc 	andi	r2,r19,15
    832c:	a006973a 	slli	r3,r20,28
    8330:	2085883a 	add	r2,r4,r2
    8334:	9826d13a 	srli	r19,r19,4
    8338:	10800003 	ldbu	r2,0(r2)
    833c:	a028d13a 	srli	r20,r20,4
    8340:	bdffffc4 	addi	r23,r23,-1
    8344:	1ce6b03a 	or	r19,r3,r19
    8348:	b8800005 	stb	r2,0(r23)
    834c:	9d04b03a 	or	r2,r19,r20
    8350:	103ff51e 	bne	r2,zero,8328 <_gp+0xfffedfbc>
    8354:	d8801e17 	ldw	r2,120(sp)
    8358:	15e9c83a 	sub	r20,r2,r23
    835c:	003d2b06 	br	780c <_gp+0xfffed4a0>
    8360:	d9402017 	ldw	r5,128(sp)
    8364:	d9002117 	ldw	r4,132(sp)
    8368:	d9801a04 	addi	r6,sp,104
    836c:	00072ec0 	call	72ec <__sprint_r.part.0>
    8370:	103f5b1e 	bne	r2,zero,80e0 <_gp+0xfffedd74>
    8374:	d8801c17 	ldw	r2,112(sp)
    8378:	d811883a 	mov	r8,sp
    837c:	003f6706 	br	811c <_gp+0xfffeddb0>
    8380:	d9402017 	ldw	r5,128(sp)
    8384:	d9002117 	ldw	r4,132(sp)
    8388:	d9801a04 	addi	r6,sp,104
    838c:	00072ec0 	call	72ec <__sprint_r.part.0>
    8390:	103f531e 	bne	r2,zero,80e0 <_gp+0xfffedd74>
    8394:	d811883a 	mov	r8,sp
    8398:	003cd906 	br	7700 <_gp+0xfffed394>
    839c:	10803fcc 	andi	r2,r2,255
    83a0:	1080201c 	xori	r2,r2,128
    83a4:	10bfe004 	addi	r2,r2,-128
    83a8:	00c00c04 	movi	r3,48
    83ac:	10ffe926 	beq	r2,r3,8354 <_gp+0xfffedfe8>
    83b0:	b8ffffc5 	stb	r3,-1(r23)
    83b4:	d8c01e17 	ldw	r3,120(sp)
    83b8:	b8bfffc4 	addi	r2,r23,-1
    83bc:	102f883a 	mov	r23,r2
    83c0:	18a9c83a 	sub	r20,r3,r2
    83c4:	003d1106 	br	780c <_gp+0xfffed4a0>
    83c8:	d9402017 	ldw	r5,128(sp)
    83cc:	d9002117 	ldw	r4,132(sp)
    83d0:	d9801a04 	addi	r6,sp,104
    83d4:	d8c02a15 	stw	r3,168(sp)
    83d8:	d9c02b15 	stw	r7,172(sp)
    83dc:	00072ec0 	call	72ec <__sprint_r.part.0>
    83e0:	d8c02a17 	ldw	r3,168(sp)
    83e4:	d9c02b17 	ldw	r7,172(sp)
    83e8:	103f3d1e 	bne	r2,zero,80e0 <_gp+0xfffedd74>
    83ec:	d9001b17 	ldw	r4,108(sp)
    83f0:	d8801c17 	ldw	r2,112(sp)
    83f4:	d811883a 	mov	r8,sp
    83f8:	21400044 	addi	r5,r4,1
    83fc:	003d4406 	br	7910 <_gp+0xfffed5a4>
    8400:	d9402017 	ldw	r5,128(sp)
    8404:	d9002117 	ldw	r4,132(sp)
    8408:	d9801a04 	addi	r6,sp,104
    840c:	d8c02a15 	stw	r3,168(sp)
    8410:	00072ec0 	call	72ec <__sprint_r.part.0>
    8414:	d8c02a17 	ldw	r3,168(sp)
    8418:	103f311e 	bne	r2,zero,80e0 <_gp+0xfffedd74>
    841c:	d9001b17 	ldw	r4,108(sp)
    8420:	d8801c17 	ldw	r2,112(sp)
    8424:	d811883a 	mov	r8,sp
    8428:	21400044 	addi	r5,r4,1
    842c:	003ef406 	br	8000 <_gp+0xfffedc94>
    8430:	1000bd1e 	bne	r2,zero,8728 <___vfiprintf_internal_r+0x1328>
    8434:	01400044 	movi	r5,1
    8438:	0009883a 	mov	r4,zero
    843c:	d811883a 	mov	r8,sp
    8440:	003ef106 	br	8008 <_gp+0xfffedc9c>
    8444:	d9402017 	ldw	r5,128(sp)
    8448:	d9002117 	ldw	r4,132(sp)
    844c:	d9801a04 	addi	r6,sp,104
    8450:	00072ec0 	call	72ec <__sprint_r.part.0>
    8454:	103f221e 	bne	r2,zero,80e0 <_gp+0xfffedd74>
    8458:	d9401b17 	ldw	r5,108(sp)
    845c:	d8801c17 	ldw	r2,112(sp)
    8460:	d811883a 	mov	r8,sp
    8464:	29400044 	addi	r5,r5,1
    8468:	003d6206 	br	79f4 <_gp+0xfffed688>
    846c:	01400074 	movhi	r5,1
    8470:	29417c04 	addi	r5,r5,1520
    8474:	d9402615 	stw	r5,152(sp)
    8478:	d8c02215 	stw	r3,136(sp)
    847c:	1023883a 	mov	r17,r2
    8480:	9d04b03a 	or	r2,r19,r20
    8484:	103fa51e 	bne	r2,zero,831c <_gp+0xfffedfb0>
    8488:	002b883a 	mov	r21,zero
    848c:	00800084 	movi	r2,2
    8490:	003e4a06 	br	7dbc <_gp+0xfffeda50>
    8494:	01400074 	movhi	r5,1
    8498:	29417c04 	addi	r5,r5,1520
    849c:	002b883a 	mov	r21,zero
    84a0:	d9402615 	stw	r5,152(sp)
    84a4:	003f9e06 	br	8320 <_gp+0xfffedfb4>
    84a8:	d9402217 	ldw	r5,136(sp)
    84ac:	d8001d85 	stb	zero,118(sp)
    84b0:	0029883a 	mov	r20,zero
    84b4:	28800104 	addi	r2,r5,4
    84b8:	2cc00017 	ldw	r19,0(r5)
    84bc:	803e3a16 	blt	r16,zero,7da8 <_gp+0xfffeda3c>
    84c0:	00ffdfc4 	movi	r3,-129
    84c4:	d8802215 	stw	r2,136(sp)
    84c8:	88e2703a 	and	r17,r17,r3
    84cc:	002b883a 	mov	r21,zero
    84d0:	983e9b26 	beq	r19,zero,7f40 <_gp+0xfffedbd4>
    84d4:	00800244 	movi	r2,9
    84d8:	14fdc936 	bltu	r2,r19,7c00 <_gp+0xfffed894>
    84dc:	003e9a06 	br	7f48 <_gp+0xfffedbdc>
    84e0:	00800c04 	movi	r2,48
    84e4:	d8c01d45 	stb	r3,117(sp)
    84e8:	d8801d05 	stb	r2,116(sp)
    84ec:	d8001d85 	stb	zero,118(sp)
    84f0:	88c00094 	ori	r3,r17,2
    84f4:	80009c16 	blt	r16,zero,8768 <___vfiprintf_internal_r+0x1368>
    84f8:	00bfdfc4 	movi	r2,-129
    84fc:	88a2703a 	and	r17,r17,r2
    8500:	8c400094 	ori	r17,r17,2
    8504:	002b883a 	mov	r21,zero
    8508:	003f8506 	br	8320 <_gp+0xfffedfb4>
    850c:	b029883a 	mov	r20,r22
    8510:	003c0b06 	br	7540 <_gp+0xfffed1d4>
    8514:	04e7c83a 	sub	r19,zero,r19
    8518:	05400b44 	movi	r21,45
    851c:	9804c03a 	cmpne	r2,r19,zero
    8520:	0529c83a 	sub	r20,zero,r20
    8524:	dd401d85 	stb	r21,118(sp)
    8528:	a0a9c83a 	sub	r20,r20,r2
    852c:	80009716 	blt	r16,zero,878c <___vfiprintf_internal_r+0x138c>
    8530:	00bfdfc4 	movi	r2,-129
    8534:	88a2703a 	and	r17,r17,r2
    8538:	003db006 	br	7bfc <_gp+0xfffed890>
    853c:	b0c00007 	ldb	r3,0(r22)
    8540:	003c0c06 	br	7574 <_gp+0xfffed208>
    8544:	8880100c 	andi	r2,r17,64
    8548:	d8001d85 	stb	zero,118(sp)
    854c:	1000461e 	bne	r2,zero,8668 <___vfiprintf_internal_r+0x1268>
    8550:	d9002217 	ldw	r4,136(sp)
    8554:	0029883a 	mov	r20,zero
    8558:	20800104 	addi	r2,r4,4
    855c:	24c00017 	ldw	r19,0(r4)
    8560:	803df80e 	bge	r16,zero,7d44 <_gp+0xfffed9d8>
    8564:	9d06b03a 	or	r3,r19,r20
    8568:	d8802215 	stw	r2,136(sp)
    856c:	183d5e1e 	bne	r3,zero,7ae8 <_gp+0xfffed77c>
    8570:	002b883a 	mov	r21,zero
    8574:	0005883a 	mov	r2,zero
    8578:	003e1006 	br	7dbc <_gp+0xfffeda50>
    857c:	8880040c 	andi	r2,r17,16
    8580:	1000321e 	bne	r2,zero,864c <___vfiprintf_internal_r+0x124c>
    8584:	8c40100c 	andi	r17,r17,64
    8588:	88008d26 	beq	r17,zero,87c0 <___vfiprintf_internal_r+0x13c0>
    858c:	d9402217 	ldw	r5,136(sp)
    8590:	d8c02417 	ldw	r3,144(sp)
    8594:	28800017 	ldw	r2,0(r5)
    8598:	29400104 	addi	r5,r5,4
    859c:	d9402215 	stw	r5,136(sp)
    85a0:	10c0000d 	sth	r3,0(r2)
    85a4:	003bca06 	br	74d0 <_gp+0xfffed164>
    85a8:	8880100c 	andi	r2,r17,64
    85ac:	10003a26 	beq	r2,zero,8698 <___vfiprintf_internal_r+0x1298>
    85b0:	d8802217 	ldw	r2,136(sp)
    85b4:	14c0000f 	ldh	r19,0(r2)
    85b8:	10800104 	addi	r2,r2,4
    85bc:	d8802215 	stw	r2,136(sp)
    85c0:	9829d7fa 	srai	r20,r19,31
    85c4:	a005883a 	mov	r2,r20
    85c8:	003d8506 	br	7be0 <_gp+0xfffed874>
    85cc:	8880100c 	andi	r2,r17,64
    85d0:	10002b26 	beq	r2,zero,8680 <___vfiprintf_internal_r+0x1280>
    85d4:	d8802217 	ldw	r2,136(sp)
    85d8:	0029883a 	mov	r20,zero
    85dc:	14c0000b 	ldhu	r19,0(r2)
    85e0:	10800104 	addi	r2,r2,4
    85e4:	d8802215 	stw	r2,136(sp)
    85e8:	003d5d06 	br	7b60 <_gp+0xfffed7f4>
    85ec:	d9402017 	ldw	r5,128(sp)
    85f0:	d9002117 	ldw	r4,132(sp)
    85f4:	d9801a04 	addi	r6,sp,104
    85f8:	d8c02a15 	stw	r3,168(sp)
    85fc:	d9c02b15 	stw	r7,172(sp)
    8600:	00072ec0 	call	72ec <__sprint_r.part.0>
    8604:	d8c02a17 	ldw	r3,168(sp)
    8608:	d9c02b17 	ldw	r7,172(sp)
    860c:	103eb41e 	bne	r2,zero,80e0 <_gp+0xfffedd74>
    8610:	d9001b17 	ldw	r4,108(sp)
    8614:	d8801c17 	ldw	r2,112(sp)
    8618:	d811883a 	mov	r8,sp
    861c:	21400044 	addi	r5,r4,1
    8620:	003e6706 	br	7fc0 <_gp+0xfffedc54>
    8624:	00bfffc4 	movi	r2,-1
    8628:	003c4a06 	br	7754 <_gp+0xfffed3e8>
    862c:	9805883a 	mov	r2,r19
    8630:	003ee806 	br	81d4 <_gp+0xfffede68>
    8634:	d8c02217 	ldw	r3,136(sp)
    8638:	0029883a 	mov	r20,zero
    863c:	18800104 	addi	r2,r3,4
    8640:	1cc0000b 	ldhu	r19,0(r3)
    8644:	803f9e0e 	bge	r16,zero,84c0 <_gp+0xfffee154>
    8648:	003dd706 	br	7da8 <_gp+0xfffeda3c>
    864c:	d8c02217 	ldw	r3,136(sp)
    8650:	d9002417 	ldw	r4,144(sp)
    8654:	18800017 	ldw	r2,0(r3)
    8658:	18c00104 	addi	r3,r3,4
    865c:	d8c02215 	stw	r3,136(sp)
    8660:	11000015 	stw	r4,0(r2)
    8664:	003b9a06 	br	74d0 <_gp+0xfffed164>
    8668:	d8c02217 	ldw	r3,136(sp)
    866c:	0029883a 	mov	r20,zero
    8670:	18800104 	addi	r2,r3,4
    8674:	1cc0000b 	ldhu	r19,0(r3)
    8678:	803db20e 	bge	r16,zero,7d44 <_gp+0xfffed9d8>
    867c:	003fb906 	br	8564 <_gp+0xfffee1f8>
    8680:	d9002217 	ldw	r4,136(sp)
    8684:	0029883a 	mov	r20,zero
    8688:	24c00017 	ldw	r19,0(r4)
    868c:	21000104 	addi	r4,r4,4
    8690:	d9002215 	stw	r4,136(sp)
    8694:	003d3206 	br	7b60 <_gp+0xfffed7f4>
    8698:	d8c02217 	ldw	r3,136(sp)
    869c:	1cc00017 	ldw	r19,0(r3)
    86a0:	18c00104 	addi	r3,r3,4
    86a4:	d8c02215 	stw	r3,136(sp)
    86a8:	9829d7fa 	srai	r20,r19,31
    86ac:	a005883a 	mov	r2,r20
    86b0:	003d4b06 	br	7be0 <_gp+0xfffed874>
    86b4:	0009883a 	mov	r4,zero
    86b8:	01400044 	movi	r5,1
    86bc:	d811883a 	mov	r8,sp
    86c0:	003e4f06 	br	8000 <_gp+0xfffedc94>
    86c4:	d8c02215 	stw	r3,136(sp)
    86c8:	002b883a 	mov	r21,zero
    86cc:	003db806 	br	7db0 <_gp+0xfffeda44>
    86d0:	d811883a 	mov	r8,sp
    86d4:	003e9606 	br	8130 <_gp+0xfffeddc4>
    86d8:	01000074 	movhi	r4,1
    86dc:	2101dd04 	addi	r4,r4,1908
    86e0:	d9002315 	stw	r4,140(sp)
    86e4:	003e6306 	br	8074 <_gp+0xfffedd08>
    86e8:	b0c00043 	ldbu	r3,1(r22)
    86ec:	8c400814 	ori	r17,r17,32
    86f0:	b5800044 	addi	r22,r22,1
    86f4:	18c03fcc 	andi	r3,r3,255
    86f8:	18c0201c 	xori	r3,r3,128
    86fc:	18ffe004 	addi	r3,r3,-128
    8700:	003b9c06 	br	7574 <_gp+0xfffed208>
    8704:	b809883a 	mov	r4,r23
    8708:	da002a15 	stw	r8,168(sp)
    870c:	00072540 	call	7254 <strlen>
    8710:	1029883a 	mov	r20,r2
    8714:	dd401d83 	ldbu	r21,118(sp)
    8718:	df002215 	stw	fp,136(sp)
    871c:	0021883a 	mov	r16,zero
    8720:	da002a17 	ldw	r8,168(sp)
    8724:	003c3906 	br	780c <_gp+0xfffed4a0>
    8728:	d9402017 	ldw	r5,128(sp)
    872c:	d9002117 	ldw	r4,132(sp)
    8730:	d9801a04 	addi	r6,sp,104
    8734:	00072ec0 	call	72ec <__sprint_r.part.0>
    8738:	103e691e 	bne	r2,zero,80e0 <_gp+0xfffedd74>
    873c:	d9001b17 	ldw	r4,108(sp)
    8740:	d8801c17 	ldw	r2,112(sp)
    8744:	d811883a 	mov	r8,sp
    8748:	21400044 	addi	r5,r4,1
    874c:	003e2e06 	br	8008 <_gp+0xfffedc9c>
    8750:	01000074 	movhi	r4,1
    8754:	2101e104 	addi	r4,r4,1924
    8758:	d9002315 	stw	r4,140(sp)
    875c:	d9001b17 	ldw	r4,108(sp)
    8760:	21000044 	addi	r4,r4,1
    8764:	003c5e06 	br	78e0 <_gp+0xfffed574>
    8768:	002b883a 	mov	r21,zero
    876c:	00800084 	movi	r2,2
    8770:	10803fcc 	andi	r2,r2,255
    8774:	01000044 	movi	r4,1
    8778:	11002b26 	beq	r2,r4,8828 <___vfiprintf_internal_r+0x1428>
    877c:	01000084 	movi	r4,2
    8780:	11002b1e 	bne	r2,r4,8830 <___vfiprintf_internal_r+0x1430>
    8784:	1823883a 	mov	r17,r3
    8788:	003ee506 	br	8320 <_gp+0xfffedfb4>
    878c:	8807883a 	mov	r3,r17
    8790:	00800044 	movi	r2,1
    8794:	003ff606 	br	8770 <_gp+0xfffee404>
    8798:	00800184 	movi	r2,6
    879c:	1400012e 	bgeu	r2,r16,87a4 <___vfiprintf_internal_r+0x13a4>
    87a0:	1021883a 	mov	r16,r2
    87a4:	8029883a 	mov	r20,r16
    87a8:	8027883a 	mov	r19,r16
    87ac:	80002216 	blt	r16,zero,8838 <___vfiprintf_internal_r+0x1438>
    87b0:	05c00074 	movhi	r23,1
    87b4:	df002215 	stw	fp,136(sp)
    87b8:	bdc18104 	addi	r23,r23,1540
    87bc:	003cfb06 	br	7bac <_gp+0xfffed840>
    87c0:	d9002217 	ldw	r4,136(sp)
    87c4:	d9402417 	ldw	r5,144(sp)
    87c8:	20800017 	ldw	r2,0(r4)
    87cc:	21000104 	addi	r4,r4,4
    87d0:	d9002215 	stw	r4,136(sp)
    87d4:	11400015 	stw	r5,0(r2)
    87d8:	003b3d06 	br	74d0 <_gp+0xfffed164>
    87dc:	01400074 	movhi	r5,1
    87e0:	2941e104 	addi	r5,r5,1924
    87e4:	d9402315 	stw	r5,140(sp)
    87e8:	d9401b17 	ldw	r5,108(sp)
    87ec:	29400044 	addi	r5,r5,1
    87f0:	003e6d06 	br	81a8 <_gp+0xfffede3c>
    87f4:	8029883a 	mov	r20,r16
    87f8:	dd401d83 	ldbu	r21,118(sp)
    87fc:	df002215 	stw	fp,136(sp)
    8800:	0021883a 	mov	r16,zero
    8804:	003c0106 	br	780c <_gp+0xfffed4a0>
    8808:	00c00074 	movhi	r3,1
    880c:	18c1dd04 	addi	r3,r3,1908
    8810:	d8c02315 	stw	r3,140(sp)
    8814:	280d883a 	mov	r6,r5
    8818:	003c6906 	br	79c0 <_gp+0xfffed654>
    881c:	802d883a 	mov	r22,r16
    8820:	0021883a 	mov	r16,zero
    8824:	003b5406 	br	7578 <_gp+0xfffed20c>
    8828:	1823883a 	mov	r17,r3
    882c:	003cf306 	br	7bfc <_gp+0xfffed890>
    8830:	1823883a 	mov	r17,r3
    8834:	003cad06 	br	7aec <_gp+0xfffed780>
    8838:	0027883a 	mov	r19,zero
    883c:	003fdc06 	br	87b0 <_gp+0xfffee444>
    8840:	d9402217 	ldw	r5,136(sp)
    8844:	8005883a 	mov	r2,r16
    8848:	b0c00043 	ldbu	r3,1(r22)
    884c:	2c000017 	ldw	r16,0(r5)
    8850:	29000104 	addi	r4,r5,4
    8854:	d9002215 	stw	r4,136(sp)
    8858:	102d883a 	mov	r22,r2
    885c:	803fa50e 	bge	r16,zero,86f4 <_gp+0xfffee388>
    8860:	18c03fcc 	andi	r3,r3,255
    8864:	18c0201c 	xori	r3,r3,128
    8868:	043fffc4 	movi	r16,-1
    886c:	18ffe004 	addi	r3,r3,-128
    8870:	003b4006 	br	7574 <_gp+0xfffed208>
    8874:	d9402303 	ldbu	r5,140(sp)
    8878:	d9401d85 	stb	r5,118(sp)
    887c:	003cae06 	br	7b38 <_gp+0xfffed7cc>
    8880:	d8c02303 	ldbu	r3,140(sp)
    8884:	d8c01d85 	stb	r3,118(sp)
    8888:	003d1406 	br	7cdc <_gp+0xfffed970>
    888c:	d8c02303 	ldbu	r3,140(sp)
    8890:	d8c01d85 	stb	r3,118(sp)
    8894:	003cca06 	br	7bc0 <_gp+0xfffed854>
    8898:	8880004c 	andi	r2,r17,1
    889c:	002b883a 	mov	r21,zero
    88a0:	10000526 	beq	r2,zero,88b8 <___vfiprintf_internal_r+0x14b8>
    88a4:	00800c04 	movi	r2,48
    88a8:	d88019c5 	stb	r2,103(sp)
    88ac:	dd002817 	ldw	r20,160(sp)
    88b0:	ddc019c4 	addi	r23,sp,103
    88b4:	003bd506 	br	780c <_gp+0xfffed4a0>
    88b8:	0029883a 	mov	r20,zero
    88bc:	ddc01a04 	addi	r23,sp,104
    88c0:	003bd206 	br	780c <_gp+0xfffed4a0>
    88c4:	d9002303 	ldbu	r4,140(sp)
    88c8:	d9001d85 	stb	r4,118(sp)
    88cc:	003da606 	br	7f68 <_gp+0xfffedbfc>
    88d0:	d8c02303 	ldbu	r3,140(sp)
    88d4:	d8c01d85 	stb	r3,118(sp)
    88d8:	003c7606 	br	7ab4 <_gp+0xfffed748>
    88dc:	d8c02303 	ldbu	r3,140(sp)
    88e0:	d8c01d85 	stb	r3,118(sp)
    88e4:	003c6506 	br	7a7c <_gp+0xfffed710>
    88e8:	d9002303 	ldbu	r4,140(sp)
    88ec:	d9001d85 	stb	r4,118(sp)
    88f0:	003d3d06 	br	7de8 <_gp+0xfffeda7c>
    88f4:	d8c02303 	ldbu	r3,140(sp)
    88f8:	d8c01d85 	stb	r3,118(sp)
    88fc:	003d1d06 	br	7d74 <_gp+0xfffeda08>
    8900:	d8c02303 	ldbu	r3,140(sp)
    8904:	d8c01d85 	stb	r3,118(sp)
    8908:	003d0306 	br	7d18 <_gp+0xfffed9ac>

0000890c <__vfiprintf_internal>:
    890c:	00800074 	movhi	r2,1
    8910:	1088dc04 	addi	r2,r2,9072
    8914:	300f883a 	mov	r7,r6
    8918:	280d883a 	mov	r6,r5
    891c:	200b883a 	mov	r5,r4
    8920:	11000017 	ldw	r4,0(r2)
    8924:	00074001 	jmpi	7400 <___vfiprintf_internal_r>

00008928 <__sbprintf>:
    8928:	2880030b 	ldhu	r2,12(r5)
    892c:	2ac01917 	ldw	r11,100(r5)
    8930:	2a80038b 	ldhu	r10,14(r5)
    8934:	2a400717 	ldw	r9,28(r5)
    8938:	2a000917 	ldw	r8,36(r5)
    893c:	defee204 	addi	sp,sp,-1144
    8940:	00c10004 	movi	r3,1024
    8944:	dc011a15 	stw	r16,1128(sp)
    8948:	10bfff4c 	andi	r2,r2,65533
    894c:	2821883a 	mov	r16,r5
    8950:	d8cb883a 	add	r5,sp,r3
    8954:	dc811c15 	stw	r18,1136(sp)
    8958:	dc411b15 	stw	r17,1132(sp)
    895c:	dfc11d15 	stw	ra,1140(sp)
    8960:	2025883a 	mov	r18,r4
    8964:	d881030d 	sth	r2,1036(sp)
    8968:	dac11915 	stw	r11,1124(sp)
    896c:	da81038d 	sth	r10,1038(sp)
    8970:	da410715 	stw	r9,1052(sp)
    8974:	da010915 	stw	r8,1060(sp)
    8978:	dec10015 	stw	sp,1024(sp)
    897c:	dec10415 	stw	sp,1040(sp)
    8980:	d8c10215 	stw	r3,1032(sp)
    8984:	d8c10515 	stw	r3,1044(sp)
    8988:	d8010615 	stw	zero,1048(sp)
    898c:	00074000 	call	7400 <___vfiprintf_internal_r>
    8990:	1023883a 	mov	r17,r2
    8994:	10000416 	blt	r2,zero,89a8 <__sbprintf+0x80>
    8998:	d9410004 	addi	r5,sp,1024
    899c:	9009883a 	mov	r4,r18
    89a0:	00046cc0 	call	46cc <_fflush_r>
    89a4:	10000d1e 	bne	r2,zero,89dc <__sbprintf+0xb4>
    89a8:	d881030b 	ldhu	r2,1036(sp)
    89ac:	1080100c 	andi	r2,r2,64
    89b0:	10000326 	beq	r2,zero,89c0 <__sbprintf+0x98>
    89b4:	8080030b 	ldhu	r2,12(r16)
    89b8:	10801014 	ori	r2,r2,64
    89bc:	8080030d 	sth	r2,12(r16)
    89c0:	8805883a 	mov	r2,r17
    89c4:	dfc11d17 	ldw	ra,1140(sp)
    89c8:	dc811c17 	ldw	r18,1136(sp)
    89cc:	dc411b17 	ldw	r17,1132(sp)
    89d0:	dc011a17 	ldw	r16,1128(sp)
    89d4:	dec11e04 	addi	sp,sp,1144
    89d8:	f800283a 	ret
    89dc:	047fffc4 	movi	r17,-1
    89e0:	003ff106 	br	89a8 <_gp+0xfffee63c>

000089e4 <_write_r>:
    89e4:	defffd04 	addi	sp,sp,-12
    89e8:	2805883a 	mov	r2,r5
    89ec:	dc000015 	stw	r16,0(sp)
    89f0:	04000074 	movhi	r16,1
    89f4:	dc400115 	stw	r17,4(sp)
    89f8:	300b883a 	mov	r5,r6
    89fc:	840fac04 	addi	r16,r16,16048
    8a00:	2023883a 	mov	r17,r4
    8a04:	380d883a 	mov	r6,r7
    8a08:	1009883a 	mov	r4,r2
    8a0c:	dfc00215 	stw	ra,8(sp)
    8a10:	80000015 	stw	zero,0(r16)
    8a14:	000e06c0 	call	e06c <write>
    8a18:	00ffffc4 	movi	r3,-1
    8a1c:	10c00526 	beq	r2,r3,8a34 <_write_r+0x50>
    8a20:	dfc00217 	ldw	ra,8(sp)
    8a24:	dc400117 	ldw	r17,4(sp)
    8a28:	dc000017 	ldw	r16,0(sp)
    8a2c:	dec00304 	addi	sp,sp,12
    8a30:	f800283a 	ret
    8a34:	80c00017 	ldw	r3,0(r16)
    8a38:	183ff926 	beq	r3,zero,8a20 <_gp+0xfffee6b4>
    8a3c:	88c00015 	stw	r3,0(r17)
    8a40:	003ff706 	br	8a20 <_gp+0xfffee6b4>

00008a44 <_close_r>:
    8a44:	defffd04 	addi	sp,sp,-12
    8a48:	dc000015 	stw	r16,0(sp)
    8a4c:	04000074 	movhi	r16,1
    8a50:	dc400115 	stw	r17,4(sp)
    8a54:	840fac04 	addi	r16,r16,16048
    8a58:	2023883a 	mov	r17,r4
    8a5c:	2809883a 	mov	r4,r5
    8a60:	dfc00215 	stw	ra,8(sp)
    8a64:	80000015 	stw	zero,0(r16)
    8a68:	000d50c0 	call	d50c <close>
    8a6c:	00ffffc4 	movi	r3,-1
    8a70:	10c00526 	beq	r2,r3,8a88 <_close_r+0x44>
    8a74:	dfc00217 	ldw	ra,8(sp)
    8a78:	dc400117 	ldw	r17,4(sp)
    8a7c:	dc000017 	ldw	r16,0(sp)
    8a80:	dec00304 	addi	sp,sp,12
    8a84:	f800283a 	ret
    8a88:	80c00017 	ldw	r3,0(r16)
    8a8c:	183ff926 	beq	r3,zero,8a74 <_gp+0xfffee708>
    8a90:	88c00015 	stw	r3,0(r17)
    8a94:	003ff706 	br	8a74 <_gp+0xfffee708>

00008a98 <_calloc_r>:
    8a98:	defffe04 	addi	sp,sp,-8
    8a9c:	2805883a 	mov	r2,r5
    8aa0:	dc000015 	stw	r16,0(sp)
    8aa4:	300b883a 	mov	r5,r6
    8aa8:	2021883a 	mov	r16,r4
    8aac:	1009883a 	mov	r4,r2
    8ab0:	dfc00115 	stw	ra,4(sp)
    8ab4:	000049c0 	call	49c <__mulsi3>
    8ab8:	100b883a 	mov	r5,r2
    8abc:	8009883a 	mov	r4,r16
    8ac0:	000535c0 	call	535c <_malloc_r>
    8ac4:	10002926 	beq	r2,zero,8b6c <_calloc_r+0xd4>
    8ac8:	11bfff17 	ldw	r6,-4(r2)
    8acc:	1021883a 	mov	r16,r2
    8ad0:	00bfff04 	movi	r2,-4
    8ad4:	308c703a 	and	r6,r6,r2
    8ad8:	00c00904 	movi	r3,36
    8adc:	308d883a 	add	r6,r6,r2
    8ae0:	19801636 	bltu	r3,r6,8b3c <_calloc_r+0xa4>
    8ae4:	008004c4 	movi	r2,19
    8ae8:	11800b2e 	bgeu	r2,r6,8b18 <_calloc_r+0x80>
    8aec:	80000015 	stw	zero,0(r16)
    8af0:	80000115 	stw	zero,4(r16)
    8af4:	008006c4 	movi	r2,27
    8af8:	11801a2e 	bgeu	r2,r6,8b64 <_calloc_r+0xcc>
    8afc:	80000215 	stw	zero,8(r16)
    8b00:	80000315 	stw	zero,12(r16)
    8b04:	30c0151e 	bne	r6,r3,8b5c <_calloc_r+0xc4>
    8b08:	80000415 	stw	zero,16(r16)
    8b0c:	80800604 	addi	r2,r16,24
    8b10:	80000515 	stw	zero,20(r16)
    8b14:	00000106 	br	8b1c <_calloc_r+0x84>
    8b18:	8005883a 	mov	r2,r16
    8b1c:	10000015 	stw	zero,0(r2)
    8b20:	10000115 	stw	zero,4(r2)
    8b24:	10000215 	stw	zero,8(r2)
    8b28:	8005883a 	mov	r2,r16
    8b2c:	dfc00117 	ldw	ra,4(sp)
    8b30:	dc000017 	ldw	r16,0(sp)
    8b34:	dec00204 	addi	sp,sp,8
    8b38:	f800283a 	ret
    8b3c:	000b883a 	mov	r5,zero
    8b40:	8009883a 	mov	r4,r16
    8b44:	0005d940 	call	5d94 <memset>
    8b48:	8005883a 	mov	r2,r16
    8b4c:	dfc00117 	ldw	ra,4(sp)
    8b50:	dc000017 	ldw	r16,0(sp)
    8b54:	dec00204 	addi	sp,sp,8
    8b58:	f800283a 	ret
    8b5c:	80800404 	addi	r2,r16,16
    8b60:	003fee06 	br	8b1c <_gp+0xfffee7b0>
    8b64:	80800204 	addi	r2,r16,8
    8b68:	003fec06 	br	8b1c <_gp+0xfffee7b0>
    8b6c:	0005883a 	mov	r2,zero
    8b70:	003fee06 	br	8b2c <_gp+0xfffee7c0>

00008b74 <_fclose_r>:
    8b74:	28003926 	beq	r5,zero,8c5c <_fclose_r+0xe8>
    8b78:	defffc04 	addi	sp,sp,-16
    8b7c:	dc400115 	stw	r17,4(sp)
    8b80:	dc000015 	stw	r16,0(sp)
    8b84:	dfc00315 	stw	ra,12(sp)
    8b88:	dc800215 	stw	r18,8(sp)
    8b8c:	2023883a 	mov	r17,r4
    8b90:	2821883a 	mov	r16,r5
    8b94:	20000226 	beq	r4,zero,8ba0 <_fclose_r+0x2c>
    8b98:	20800e17 	ldw	r2,56(r4)
    8b9c:	10002726 	beq	r2,zero,8c3c <_fclose_r+0xc8>
    8ba0:	8080030f 	ldh	r2,12(r16)
    8ba4:	1000071e 	bne	r2,zero,8bc4 <_fclose_r+0x50>
    8ba8:	0005883a 	mov	r2,zero
    8bac:	dfc00317 	ldw	ra,12(sp)
    8bb0:	dc800217 	ldw	r18,8(sp)
    8bb4:	dc400117 	ldw	r17,4(sp)
    8bb8:	dc000017 	ldw	r16,0(sp)
    8bbc:	dec00404 	addi	sp,sp,16
    8bc0:	f800283a 	ret
    8bc4:	800b883a 	mov	r5,r16
    8bc8:	8809883a 	mov	r4,r17
    8bcc:	00044b00 	call	44b0 <__sflush_r>
    8bd0:	1025883a 	mov	r18,r2
    8bd4:	80800b17 	ldw	r2,44(r16)
    8bd8:	10000426 	beq	r2,zero,8bec <_fclose_r+0x78>
    8bdc:	81400717 	ldw	r5,28(r16)
    8be0:	8809883a 	mov	r4,r17
    8be4:	103ee83a 	callr	r2
    8be8:	10001616 	blt	r2,zero,8c44 <_fclose_r+0xd0>
    8bec:	8080030b 	ldhu	r2,12(r16)
    8bf0:	1080200c 	andi	r2,r2,128
    8bf4:	1000151e 	bne	r2,zero,8c4c <_fclose_r+0xd8>
    8bf8:	81400c17 	ldw	r5,48(r16)
    8bfc:	28000526 	beq	r5,zero,8c14 <_fclose_r+0xa0>
    8c00:	80801004 	addi	r2,r16,64
    8c04:	28800226 	beq	r5,r2,8c10 <_fclose_r+0x9c>
    8c08:	8809883a 	mov	r4,r17
    8c0c:	0004c2c0 	call	4c2c <_free_r>
    8c10:	80000c15 	stw	zero,48(r16)
    8c14:	81401117 	ldw	r5,68(r16)
    8c18:	28000326 	beq	r5,zero,8c28 <_fclose_r+0xb4>
    8c1c:	8809883a 	mov	r4,r17
    8c20:	0004c2c0 	call	4c2c <_free_r>
    8c24:	80001115 	stw	zero,68(r16)
    8c28:	0004ac80 	call	4ac8 <__sfp_lock_acquire>
    8c2c:	8000030d 	sth	zero,12(r16)
    8c30:	0004acc0 	call	4acc <__sfp_lock_release>
    8c34:	9005883a 	mov	r2,r18
    8c38:	003fdc06 	br	8bac <_gp+0xfffee840>
    8c3c:	0004ab80 	call	4ab8 <__sinit>
    8c40:	003fd706 	br	8ba0 <_gp+0xfffee834>
    8c44:	04bfffc4 	movi	r18,-1
    8c48:	003fe806 	br	8bec <_gp+0xfffee880>
    8c4c:	81400417 	ldw	r5,16(r16)
    8c50:	8809883a 	mov	r4,r17
    8c54:	0004c2c0 	call	4c2c <_free_r>
    8c58:	003fe706 	br	8bf8 <_gp+0xfffee88c>
    8c5c:	0005883a 	mov	r2,zero
    8c60:	f800283a 	ret

00008c64 <fclose>:
    8c64:	00800074 	movhi	r2,1
    8c68:	1088dc04 	addi	r2,r2,9072
    8c6c:	200b883a 	mov	r5,r4
    8c70:	11000017 	ldw	r4,0(r2)
    8c74:	0008b741 	jmpi	8b74 <_fclose_r>

00008c78 <__fputwc>:
    8c78:	defff804 	addi	sp,sp,-32
    8c7c:	dcc00415 	stw	r19,16(sp)
    8c80:	dc800315 	stw	r18,12(sp)
    8c84:	dc000115 	stw	r16,4(sp)
    8c88:	dfc00715 	stw	ra,28(sp)
    8c8c:	dd400615 	stw	r21,24(sp)
    8c90:	dd000515 	stw	r20,20(sp)
    8c94:	dc400215 	stw	r17,8(sp)
    8c98:	2027883a 	mov	r19,r4
    8c9c:	2825883a 	mov	r18,r5
    8ca0:	3021883a 	mov	r16,r6
    8ca4:	000514c0 	call	514c <__locale_mb_cur_max>
    8ca8:	00c00044 	movi	r3,1
    8cac:	10c03e26 	beq	r2,r3,8da8 <__fputwc+0x130>
    8cb0:	81c01704 	addi	r7,r16,92
    8cb4:	900d883a 	mov	r6,r18
    8cb8:	d80b883a 	mov	r5,sp
    8cbc:	9809883a 	mov	r4,r19
    8cc0:	0009cd00 	call	9cd0 <_wcrtomb_r>
    8cc4:	1029883a 	mov	r20,r2
    8cc8:	00bfffc4 	movi	r2,-1
    8ccc:	a0802026 	beq	r20,r2,8d50 <__fputwc+0xd8>
    8cd0:	d9400003 	ldbu	r5,0(sp)
    8cd4:	a0001c26 	beq	r20,zero,8d48 <__fputwc+0xd0>
    8cd8:	0023883a 	mov	r17,zero
    8cdc:	05400284 	movi	r21,10
    8ce0:	00000906 	br	8d08 <__fputwc+0x90>
    8ce4:	80800017 	ldw	r2,0(r16)
    8ce8:	11400005 	stb	r5,0(r2)
    8cec:	80c00017 	ldw	r3,0(r16)
    8cf0:	18c00044 	addi	r3,r3,1
    8cf4:	80c00015 	stw	r3,0(r16)
    8cf8:	8c400044 	addi	r17,r17,1
    8cfc:	dc45883a 	add	r2,sp,r17
    8d00:	8d00112e 	bgeu	r17,r20,8d48 <__fputwc+0xd0>
    8d04:	11400003 	ldbu	r5,0(r2)
    8d08:	80c00217 	ldw	r3,8(r16)
    8d0c:	18ffffc4 	addi	r3,r3,-1
    8d10:	80c00215 	stw	r3,8(r16)
    8d14:	183ff30e 	bge	r3,zero,8ce4 <_gp+0xfffee978>
    8d18:	80800617 	ldw	r2,24(r16)
    8d1c:	18801916 	blt	r3,r2,8d84 <__fputwc+0x10c>
    8d20:	80800017 	ldw	r2,0(r16)
    8d24:	11400005 	stb	r5,0(r2)
    8d28:	80800017 	ldw	r2,0(r16)
    8d2c:	10c00003 	ldbu	r3,0(r2)
    8d30:	10800044 	addi	r2,r2,1
    8d34:	1d402326 	beq	r3,r21,8dc4 <__fputwc+0x14c>
    8d38:	80800015 	stw	r2,0(r16)
    8d3c:	8c400044 	addi	r17,r17,1
    8d40:	dc45883a 	add	r2,sp,r17
    8d44:	8d3fef36 	bltu	r17,r20,8d04 <_gp+0xfffee998>
    8d48:	9005883a 	mov	r2,r18
    8d4c:	00000406 	br	8d60 <__fputwc+0xe8>
    8d50:	80c0030b 	ldhu	r3,12(r16)
    8d54:	a005883a 	mov	r2,r20
    8d58:	18c01014 	ori	r3,r3,64
    8d5c:	80c0030d 	sth	r3,12(r16)
    8d60:	dfc00717 	ldw	ra,28(sp)
    8d64:	dd400617 	ldw	r21,24(sp)
    8d68:	dd000517 	ldw	r20,20(sp)
    8d6c:	dcc00417 	ldw	r19,16(sp)
    8d70:	dc800317 	ldw	r18,12(sp)
    8d74:	dc400217 	ldw	r17,8(sp)
    8d78:	dc000117 	ldw	r16,4(sp)
    8d7c:	dec00804 	addi	sp,sp,32
    8d80:	f800283a 	ret
    8d84:	800d883a 	mov	r6,r16
    8d88:	29403fcc 	andi	r5,r5,255
    8d8c:	9809883a 	mov	r4,r19
    8d90:	0009b780 	call	9b78 <__swbuf_r>
    8d94:	10bfffe0 	cmpeqi	r2,r2,-1
    8d98:	10803fcc 	andi	r2,r2,255
    8d9c:	103fd626 	beq	r2,zero,8cf8 <_gp+0xfffee98c>
    8da0:	00bfffc4 	movi	r2,-1
    8da4:	003fee06 	br	8d60 <_gp+0xfffee9f4>
    8da8:	90ffffc4 	addi	r3,r18,-1
    8dac:	01003f84 	movi	r4,254
    8db0:	20ffbf36 	bltu	r4,r3,8cb0 <_gp+0xfffee944>
    8db4:	900b883a 	mov	r5,r18
    8db8:	dc800005 	stb	r18,0(sp)
    8dbc:	1029883a 	mov	r20,r2
    8dc0:	003fc506 	br	8cd8 <_gp+0xfffee96c>
    8dc4:	800d883a 	mov	r6,r16
    8dc8:	a80b883a 	mov	r5,r21
    8dcc:	9809883a 	mov	r4,r19
    8dd0:	0009b780 	call	9b78 <__swbuf_r>
    8dd4:	10bfffe0 	cmpeqi	r2,r2,-1
    8dd8:	003fef06 	br	8d98 <_gp+0xfffeea2c>

00008ddc <_fputwc_r>:
    8ddc:	3080030b 	ldhu	r2,12(r6)
    8de0:	10c8000c 	andi	r3,r2,8192
    8de4:	1800051e 	bne	r3,zero,8dfc <_fputwc_r+0x20>
    8de8:	30c01917 	ldw	r3,100(r6)
    8dec:	10880014 	ori	r2,r2,8192
    8df0:	3080030d 	sth	r2,12(r6)
    8df4:	18880014 	ori	r2,r3,8192
    8df8:	30801915 	stw	r2,100(r6)
    8dfc:	0008c781 	jmpi	8c78 <__fputwc>

00008e00 <fputwc>:
    8e00:	00800074 	movhi	r2,1
    8e04:	defffc04 	addi	sp,sp,-16
    8e08:	1088dc04 	addi	r2,r2,9072
    8e0c:	dc000115 	stw	r16,4(sp)
    8e10:	14000017 	ldw	r16,0(r2)
    8e14:	dc400215 	stw	r17,8(sp)
    8e18:	dfc00315 	stw	ra,12(sp)
    8e1c:	2023883a 	mov	r17,r4
    8e20:	80000226 	beq	r16,zero,8e2c <fputwc+0x2c>
    8e24:	80800e17 	ldw	r2,56(r16)
    8e28:	10001026 	beq	r2,zero,8e6c <fputwc+0x6c>
    8e2c:	2880030b 	ldhu	r2,12(r5)
    8e30:	10c8000c 	andi	r3,r2,8192
    8e34:	1800051e 	bne	r3,zero,8e4c <fputwc+0x4c>
    8e38:	28c01917 	ldw	r3,100(r5)
    8e3c:	10880014 	ori	r2,r2,8192
    8e40:	2880030d 	sth	r2,12(r5)
    8e44:	18880014 	ori	r2,r3,8192
    8e48:	28801915 	stw	r2,100(r5)
    8e4c:	280d883a 	mov	r6,r5
    8e50:	8009883a 	mov	r4,r16
    8e54:	880b883a 	mov	r5,r17
    8e58:	dfc00317 	ldw	ra,12(sp)
    8e5c:	dc400217 	ldw	r17,8(sp)
    8e60:	dc000117 	ldw	r16,4(sp)
    8e64:	dec00404 	addi	sp,sp,16
    8e68:	0008c781 	jmpi	8c78 <__fputwc>
    8e6c:	8009883a 	mov	r4,r16
    8e70:	d9400015 	stw	r5,0(sp)
    8e74:	0004ab80 	call	4ab8 <__sinit>
    8e78:	d9400017 	ldw	r5,0(sp)
    8e7c:	003feb06 	br	8e2c <_gp+0xfffeeac0>

00008e80 <_fstat_r>:
    8e80:	defffd04 	addi	sp,sp,-12
    8e84:	2805883a 	mov	r2,r5
    8e88:	dc000015 	stw	r16,0(sp)
    8e8c:	04000074 	movhi	r16,1
    8e90:	dc400115 	stw	r17,4(sp)
    8e94:	840fac04 	addi	r16,r16,16048
    8e98:	2023883a 	mov	r17,r4
    8e9c:	300b883a 	mov	r5,r6
    8ea0:	1009883a 	mov	r4,r2
    8ea4:	dfc00215 	stw	ra,8(sp)
    8ea8:	80000015 	stw	zero,0(r16)
    8eac:	000d64c0 	call	d64c <fstat>
    8eb0:	00ffffc4 	movi	r3,-1
    8eb4:	10c00526 	beq	r2,r3,8ecc <_fstat_r+0x4c>
    8eb8:	dfc00217 	ldw	ra,8(sp)
    8ebc:	dc400117 	ldw	r17,4(sp)
    8ec0:	dc000017 	ldw	r16,0(sp)
    8ec4:	dec00304 	addi	sp,sp,12
    8ec8:	f800283a 	ret
    8ecc:	80c00017 	ldw	r3,0(r16)
    8ed0:	183ff926 	beq	r3,zero,8eb8 <_gp+0xfffeeb4c>
    8ed4:	88c00015 	stw	r3,0(r17)
    8ed8:	003ff706 	br	8eb8 <_gp+0xfffeeb4c>

00008edc <__sfvwrite_r>:
    8edc:	30800217 	ldw	r2,8(r6)
    8ee0:	10006726 	beq	r2,zero,9080 <__sfvwrite_r+0x1a4>
    8ee4:	28c0030b 	ldhu	r3,12(r5)
    8ee8:	defff404 	addi	sp,sp,-48
    8eec:	dd400715 	stw	r21,28(sp)
    8ef0:	dd000615 	stw	r20,24(sp)
    8ef4:	dc000215 	stw	r16,8(sp)
    8ef8:	dfc00b15 	stw	ra,44(sp)
    8efc:	df000a15 	stw	fp,40(sp)
    8f00:	ddc00915 	stw	r23,36(sp)
    8f04:	dd800815 	stw	r22,32(sp)
    8f08:	dcc00515 	stw	r19,20(sp)
    8f0c:	dc800415 	stw	r18,16(sp)
    8f10:	dc400315 	stw	r17,12(sp)
    8f14:	1880020c 	andi	r2,r3,8
    8f18:	2821883a 	mov	r16,r5
    8f1c:	202b883a 	mov	r21,r4
    8f20:	3029883a 	mov	r20,r6
    8f24:	10002726 	beq	r2,zero,8fc4 <__sfvwrite_r+0xe8>
    8f28:	28800417 	ldw	r2,16(r5)
    8f2c:	10002526 	beq	r2,zero,8fc4 <__sfvwrite_r+0xe8>
    8f30:	1880008c 	andi	r2,r3,2
    8f34:	a4400017 	ldw	r17,0(r20)
    8f38:	10002a26 	beq	r2,zero,8fe4 <__sfvwrite_r+0x108>
    8f3c:	05a00034 	movhi	r22,32768
    8f40:	0027883a 	mov	r19,zero
    8f44:	0025883a 	mov	r18,zero
    8f48:	b5bf0004 	addi	r22,r22,-1024
    8f4c:	980d883a 	mov	r6,r19
    8f50:	a809883a 	mov	r4,r21
    8f54:	90004626 	beq	r18,zero,9070 <__sfvwrite_r+0x194>
    8f58:	900f883a 	mov	r7,r18
    8f5c:	b480022e 	bgeu	r22,r18,8f68 <__sfvwrite_r+0x8c>
    8f60:	01e00034 	movhi	r7,32768
    8f64:	39ff0004 	addi	r7,r7,-1024
    8f68:	80800917 	ldw	r2,36(r16)
    8f6c:	81400717 	ldw	r5,28(r16)
    8f70:	103ee83a 	callr	r2
    8f74:	00805a0e 	bge	zero,r2,90e0 <__sfvwrite_r+0x204>
    8f78:	a0c00217 	ldw	r3,8(r20)
    8f7c:	98a7883a 	add	r19,r19,r2
    8f80:	90a5c83a 	sub	r18,r18,r2
    8f84:	1885c83a 	sub	r2,r3,r2
    8f88:	a0800215 	stw	r2,8(r20)
    8f8c:	103fef1e 	bne	r2,zero,8f4c <_gp+0xfffeebe0>
    8f90:	0005883a 	mov	r2,zero
    8f94:	dfc00b17 	ldw	ra,44(sp)
    8f98:	df000a17 	ldw	fp,40(sp)
    8f9c:	ddc00917 	ldw	r23,36(sp)
    8fa0:	dd800817 	ldw	r22,32(sp)
    8fa4:	dd400717 	ldw	r21,28(sp)
    8fa8:	dd000617 	ldw	r20,24(sp)
    8fac:	dcc00517 	ldw	r19,20(sp)
    8fb0:	dc800417 	ldw	r18,16(sp)
    8fb4:	dc400317 	ldw	r17,12(sp)
    8fb8:	dc000217 	ldw	r16,8(sp)
    8fbc:	dec00c04 	addi	sp,sp,48
    8fc0:	f800283a 	ret
    8fc4:	800b883a 	mov	r5,r16
    8fc8:	a809883a 	mov	r4,r21
    8fcc:	0002aac0 	call	2aac <__swsetup_r>
    8fd0:	1000ee1e 	bne	r2,zero,938c <__sfvwrite_r+0x4b0>
    8fd4:	80c0030b 	ldhu	r3,12(r16)
    8fd8:	a4400017 	ldw	r17,0(r20)
    8fdc:	1880008c 	andi	r2,r3,2
    8fe0:	103fd61e 	bne	r2,zero,8f3c <_gp+0xfffeebd0>
    8fe4:	1880004c 	andi	r2,r3,1
    8fe8:	1000421e 	bne	r2,zero,90f4 <__sfvwrite_r+0x218>
    8fec:	0039883a 	mov	fp,zero
    8ff0:	0025883a 	mov	r18,zero
    8ff4:	90001a26 	beq	r18,zero,9060 <__sfvwrite_r+0x184>
    8ff8:	1880800c 	andi	r2,r3,512
    8ffc:	84c00217 	ldw	r19,8(r16)
    9000:	10002126 	beq	r2,zero,9088 <__sfvwrite_r+0x1ac>
    9004:	982f883a 	mov	r23,r19
    9008:	94c09636 	bltu	r18,r19,9264 <__sfvwrite_r+0x388>
    900c:	1881200c 	andi	r2,r3,1152
    9010:	1000a11e 	bne	r2,zero,9298 <__sfvwrite_r+0x3bc>
    9014:	81000017 	ldw	r4,0(r16)
    9018:	b80d883a 	mov	r6,r23
    901c:	e00b883a 	mov	r5,fp
    9020:	00094580 	call	9458 <memmove>
    9024:	80c00217 	ldw	r3,8(r16)
    9028:	81000017 	ldw	r4,0(r16)
    902c:	9005883a 	mov	r2,r18
    9030:	1ce7c83a 	sub	r19,r3,r19
    9034:	25cf883a 	add	r7,r4,r23
    9038:	84c00215 	stw	r19,8(r16)
    903c:	81c00015 	stw	r7,0(r16)
    9040:	a0c00217 	ldw	r3,8(r20)
    9044:	e0b9883a 	add	fp,fp,r2
    9048:	90a5c83a 	sub	r18,r18,r2
    904c:	18a7c83a 	sub	r19,r3,r2
    9050:	a4c00215 	stw	r19,8(r20)
    9054:	983fce26 	beq	r19,zero,8f90 <_gp+0xfffeec24>
    9058:	80c0030b 	ldhu	r3,12(r16)
    905c:	903fe61e 	bne	r18,zero,8ff8 <_gp+0xfffeec8c>
    9060:	8f000017 	ldw	fp,0(r17)
    9064:	8c800117 	ldw	r18,4(r17)
    9068:	8c400204 	addi	r17,r17,8
    906c:	003fe106 	br	8ff4 <_gp+0xfffeec88>
    9070:	8cc00017 	ldw	r19,0(r17)
    9074:	8c800117 	ldw	r18,4(r17)
    9078:	8c400204 	addi	r17,r17,8
    907c:	003fb306 	br	8f4c <_gp+0xfffeebe0>
    9080:	0005883a 	mov	r2,zero
    9084:	f800283a 	ret
    9088:	81000017 	ldw	r4,0(r16)
    908c:	80800417 	ldw	r2,16(r16)
    9090:	11005a36 	bltu	r2,r4,91fc <__sfvwrite_r+0x320>
    9094:	85c00517 	ldw	r23,20(r16)
    9098:	95c05836 	bltu	r18,r23,91fc <__sfvwrite_r+0x320>
    909c:	00a00034 	movhi	r2,32768
    90a0:	10bfffc4 	addi	r2,r2,-1
    90a4:	9009883a 	mov	r4,r18
    90a8:	1480012e 	bgeu	r2,r18,90b0 <__sfvwrite_r+0x1d4>
    90ac:	1009883a 	mov	r4,r2
    90b0:	b80b883a 	mov	r5,r23
    90b4:	000aa780 	call	aa78 <__divsi3>
    90b8:	b80b883a 	mov	r5,r23
    90bc:	1009883a 	mov	r4,r2
    90c0:	000049c0 	call	49c <__mulsi3>
    90c4:	81400717 	ldw	r5,28(r16)
    90c8:	80c00917 	ldw	r3,36(r16)
    90cc:	100f883a 	mov	r7,r2
    90d0:	e00d883a 	mov	r6,fp
    90d4:	a809883a 	mov	r4,r21
    90d8:	183ee83a 	callr	r3
    90dc:	00bfd816 	blt	zero,r2,9040 <_gp+0xfffeecd4>
    90e0:	8080030b 	ldhu	r2,12(r16)
    90e4:	10801014 	ori	r2,r2,64
    90e8:	8080030d 	sth	r2,12(r16)
    90ec:	00bfffc4 	movi	r2,-1
    90f0:	003fa806 	br	8f94 <_gp+0xfffeec28>
    90f4:	0027883a 	mov	r19,zero
    90f8:	0011883a 	mov	r8,zero
    90fc:	0039883a 	mov	fp,zero
    9100:	0025883a 	mov	r18,zero
    9104:	90001f26 	beq	r18,zero,9184 <__sfvwrite_r+0x2a8>
    9108:	40005a26 	beq	r8,zero,9274 <__sfvwrite_r+0x398>
    910c:	982d883a 	mov	r22,r19
    9110:	94c0012e 	bgeu	r18,r19,9118 <__sfvwrite_r+0x23c>
    9114:	902d883a 	mov	r22,r18
    9118:	81000017 	ldw	r4,0(r16)
    911c:	80800417 	ldw	r2,16(r16)
    9120:	b02f883a 	mov	r23,r22
    9124:	81c00517 	ldw	r7,20(r16)
    9128:	1100032e 	bgeu	r2,r4,9138 <__sfvwrite_r+0x25c>
    912c:	80c00217 	ldw	r3,8(r16)
    9130:	38c7883a 	add	r3,r7,r3
    9134:	1d801816 	blt	r3,r22,9198 <__sfvwrite_r+0x2bc>
    9138:	b1c03e16 	blt	r22,r7,9234 <__sfvwrite_r+0x358>
    913c:	80800917 	ldw	r2,36(r16)
    9140:	81400717 	ldw	r5,28(r16)
    9144:	e00d883a 	mov	r6,fp
    9148:	da000115 	stw	r8,4(sp)
    914c:	a809883a 	mov	r4,r21
    9150:	103ee83a 	callr	r2
    9154:	102f883a 	mov	r23,r2
    9158:	da000117 	ldw	r8,4(sp)
    915c:	00bfe00e 	bge	zero,r2,90e0 <_gp+0xfffeed74>
    9160:	9de7c83a 	sub	r19,r19,r23
    9164:	98001f26 	beq	r19,zero,91e4 <__sfvwrite_r+0x308>
    9168:	a0800217 	ldw	r2,8(r20)
    916c:	e5f9883a 	add	fp,fp,r23
    9170:	95e5c83a 	sub	r18,r18,r23
    9174:	15efc83a 	sub	r23,r2,r23
    9178:	a5c00215 	stw	r23,8(r20)
    917c:	b83f8426 	beq	r23,zero,8f90 <_gp+0xfffeec24>
    9180:	903fe11e 	bne	r18,zero,9108 <_gp+0xfffeed9c>
    9184:	8f000017 	ldw	fp,0(r17)
    9188:	8c800117 	ldw	r18,4(r17)
    918c:	0011883a 	mov	r8,zero
    9190:	8c400204 	addi	r17,r17,8
    9194:	003fdb06 	br	9104 <_gp+0xfffeed98>
    9198:	180d883a 	mov	r6,r3
    919c:	e00b883a 	mov	r5,fp
    91a0:	da000115 	stw	r8,4(sp)
    91a4:	d8c00015 	stw	r3,0(sp)
    91a8:	00094580 	call	9458 <memmove>
    91ac:	d8c00017 	ldw	r3,0(sp)
    91b0:	80800017 	ldw	r2,0(r16)
    91b4:	800b883a 	mov	r5,r16
    91b8:	a809883a 	mov	r4,r21
    91bc:	10c5883a 	add	r2,r2,r3
    91c0:	80800015 	stw	r2,0(r16)
    91c4:	d8c00015 	stw	r3,0(sp)
    91c8:	00046cc0 	call	46cc <_fflush_r>
    91cc:	d8c00017 	ldw	r3,0(sp)
    91d0:	da000117 	ldw	r8,4(sp)
    91d4:	103fc21e 	bne	r2,zero,90e0 <_gp+0xfffeed74>
    91d8:	182f883a 	mov	r23,r3
    91dc:	9de7c83a 	sub	r19,r19,r23
    91e0:	983fe11e 	bne	r19,zero,9168 <_gp+0xfffeedfc>
    91e4:	800b883a 	mov	r5,r16
    91e8:	a809883a 	mov	r4,r21
    91ec:	00046cc0 	call	46cc <_fflush_r>
    91f0:	103fbb1e 	bne	r2,zero,90e0 <_gp+0xfffeed74>
    91f4:	0011883a 	mov	r8,zero
    91f8:	003fdb06 	br	9168 <_gp+0xfffeedfc>
    91fc:	94c0012e 	bgeu	r18,r19,9204 <__sfvwrite_r+0x328>
    9200:	9027883a 	mov	r19,r18
    9204:	980d883a 	mov	r6,r19
    9208:	e00b883a 	mov	r5,fp
    920c:	00094580 	call	9458 <memmove>
    9210:	80800217 	ldw	r2,8(r16)
    9214:	80c00017 	ldw	r3,0(r16)
    9218:	14c5c83a 	sub	r2,r2,r19
    921c:	1cc7883a 	add	r3,r3,r19
    9220:	80800215 	stw	r2,8(r16)
    9224:	80c00015 	stw	r3,0(r16)
    9228:	10004326 	beq	r2,zero,9338 <__sfvwrite_r+0x45c>
    922c:	9805883a 	mov	r2,r19
    9230:	003f8306 	br	9040 <_gp+0xfffeecd4>
    9234:	b00d883a 	mov	r6,r22
    9238:	e00b883a 	mov	r5,fp
    923c:	da000115 	stw	r8,4(sp)
    9240:	00094580 	call	9458 <memmove>
    9244:	80800217 	ldw	r2,8(r16)
    9248:	80c00017 	ldw	r3,0(r16)
    924c:	da000117 	ldw	r8,4(sp)
    9250:	1585c83a 	sub	r2,r2,r22
    9254:	1dad883a 	add	r22,r3,r22
    9258:	80800215 	stw	r2,8(r16)
    925c:	85800015 	stw	r22,0(r16)
    9260:	003fbf06 	br	9160 <_gp+0xfffeedf4>
    9264:	81000017 	ldw	r4,0(r16)
    9268:	9027883a 	mov	r19,r18
    926c:	902f883a 	mov	r23,r18
    9270:	003f6906 	br	9018 <_gp+0xfffeecac>
    9274:	900d883a 	mov	r6,r18
    9278:	01400284 	movi	r5,10
    927c:	e009883a 	mov	r4,fp
    9280:	0005b680 	call	5b68 <memchr>
    9284:	10003e26 	beq	r2,zero,9380 <__sfvwrite_r+0x4a4>
    9288:	10800044 	addi	r2,r2,1
    928c:	1727c83a 	sub	r19,r2,fp
    9290:	02000044 	movi	r8,1
    9294:	003f9d06 	br	910c <_gp+0xfffeeda0>
    9298:	80800517 	ldw	r2,20(r16)
    929c:	81400417 	ldw	r5,16(r16)
    92a0:	81c00017 	ldw	r7,0(r16)
    92a4:	10a7883a 	add	r19,r2,r2
    92a8:	9885883a 	add	r2,r19,r2
    92ac:	1026d7fa 	srli	r19,r2,31
    92b0:	396dc83a 	sub	r22,r7,r5
    92b4:	b1000044 	addi	r4,r22,1
    92b8:	9885883a 	add	r2,r19,r2
    92bc:	1027d07a 	srai	r19,r2,1
    92c0:	2485883a 	add	r2,r4,r18
    92c4:	980d883a 	mov	r6,r19
    92c8:	9880022e 	bgeu	r19,r2,92d4 <__sfvwrite_r+0x3f8>
    92cc:	1027883a 	mov	r19,r2
    92d0:	100d883a 	mov	r6,r2
    92d4:	18c1000c 	andi	r3,r3,1024
    92d8:	18001c26 	beq	r3,zero,934c <__sfvwrite_r+0x470>
    92dc:	300b883a 	mov	r5,r6
    92e0:	a809883a 	mov	r4,r21
    92e4:	000535c0 	call	535c <_malloc_r>
    92e8:	102f883a 	mov	r23,r2
    92ec:	10002926 	beq	r2,zero,9394 <__sfvwrite_r+0x4b8>
    92f0:	81400417 	ldw	r5,16(r16)
    92f4:	b00d883a 	mov	r6,r22
    92f8:	1009883a 	mov	r4,r2
    92fc:	0005c4c0 	call	5c4c <memcpy>
    9300:	8080030b 	ldhu	r2,12(r16)
    9304:	00fedfc4 	movi	r3,-1153
    9308:	10c4703a 	and	r2,r2,r3
    930c:	10802014 	ori	r2,r2,128
    9310:	8080030d 	sth	r2,12(r16)
    9314:	bd89883a 	add	r4,r23,r22
    9318:	9d8fc83a 	sub	r7,r19,r22
    931c:	85c00415 	stw	r23,16(r16)
    9320:	84c00515 	stw	r19,20(r16)
    9324:	81000015 	stw	r4,0(r16)
    9328:	9027883a 	mov	r19,r18
    932c:	81c00215 	stw	r7,8(r16)
    9330:	902f883a 	mov	r23,r18
    9334:	003f3806 	br	9018 <_gp+0xfffeecac>
    9338:	800b883a 	mov	r5,r16
    933c:	a809883a 	mov	r4,r21
    9340:	00046cc0 	call	46cc <_fflush_r>
    9344:	103fb926 	beq	r2,zero,922c <_gp+0xfffeeec0>
    9348:	003f6506 	br	90e0 <_gp+0xfffeed74>
    934c:	a809883a 	mov	r4,r21
    9350:	00096140 	call	9614 <_realloc_r>
    9354:	102f883a 	mov	r23,r2
    9358:	103fee1e 	bne	r2,zero,9314 <_gp+0xfffeefa8>
    935c:	81400417 	ldw	r5,16(r16)
    9360:	a809883a 	mov	r4,r21
    9364:	0004c2c0 	call	4c2c <_free_r>
    9368:	8080030b 	ldhu	r2,12(r16)
    936c:	00ffdfc4 	movi	r3,-129
    9370:	1884703a 	and	r2,r3,r2
    9374:	00c00304 	movi	r3,12
    9378:	a8c00015 	stw	r3,0(r21)
    937c:	003f5906 	br	90e4 <_gp+0xfffeed78>
    9380:	94c00044 	addi	r19,r18,1
    9384:	02000044 	movi	r8,1
    9388:	003f6006 	br	910c <_gp+0xfffeeda0>
    938c:	00bfffc4 	movi	r2,-1
    9390:	003f0006 	br	8f94 <_gp+0xfffeec28>
    9394:	00800304 	movi	r2,12
    9398:	a8800015 	stw	r2,0(r21)
    939c:	8080030b 	ldhu	r2,12(r16)
    93a0:	003f5006 	br	90e4 <_gp+0xfffeed78>

000093a4 <_isatty_r>:
    93a4:	defffd04 	addi	sp,sp,-12
    93a8:	dc000015 	stw	r16,0(sp)
    93ac:	04000074 	movhi	r16,1
    93b0:	dc400115 	stw	r17,4(sp)
    93b4:	840fac04 	addi	r16,r16,16048
    93b8:	2023883a 	mov	r17,r4
    93bc:	2809883a 	mov	r4,r5
    93c0:	dfc00215 	stw	ra,8(sp)
    93c4:	80000015 	stw	zero,0(r16)
    93c8:	000d7740 	call	d774 <isatty>
    93cc:	00ffffc4 	movi	r3,-1
    93d0:	10c00526 	beq	r2,r3,93e8 <_isatty_r+0x44>
    93d4:	dfc00217 	ldw	ra,8(sp)
    93d8:	dc400117 	ldw	r17,4(sp)
    93dc:	dc000017 	ldw	r16,0(sp)
    93e0:	dec00304 	addi	sp,sp,12
    93e4:	f800283a 	ret
    93e8:	80c00017 	ldw	r3,0(r16)
    93ec:	183ff926 	beq	r3,zero,93d4 <_gp+0xfffef068>
    93f0:	88c00015 	stw	r3,0(r17)
    93f4:	003ff706 	br	93d4 <_gp+0xfffef068>

000093f8 <_lseek_r>:
    93f8:	defffd04 	addi	sp,sp,-12
    93fc:	2805883a 	mov	r2,r5
    9400:	dc000015 	stw	r16,0(sp)
    9404:	04000074 	movhi	r16,1
    9408:	dc400115 	stw	r17,4(sp)
    940c:	300b883a 	mov	r5,r6
    9410:	840fac04 	addi	r16,r16,16048
    9414:	2023883a 	mov	r17,r4
    9418:	380d883a 	mov	r6,r7
    941c:	1009883a 	mov	r4,r2
    9420:	dfc00215 	stw	ra,8(sp)
    9424:	80000015 	stw	zero,0(r16)
    9428:	000d9480 	call	d948 <lseek>
    942c:	00ffffc4 	movi	r3,-1
    9430:	10c00526 	beq	r2,r3,9448 <_lseek_r+0x50>
    9434:	dfc00217 	ldw	ra,8(sp)
    9438:	dc400117 	ldw	r17,4(sp)
    943c:	dc000017 	ldw	r16,0(sp)
    9440:	dec00304 	addi	sp,sp,12
    9444:	f800283a 	ret
    9448:	80c00017 	ldw	r3,0(r16)
    944c:	183ff926 	beq	r3,zero,9434 <_gp+0xfffef0c8>
    9450:	88c00015 	stw	r3,0(r17)
    9454:	003ff706 	br	9434 <_gp+0xfffef0c8>

00009458 <memmove>:
    9458:	2005883a 	mov	r2,r4
    945c:	29000b2e 	bgeu	r5,r4,948c <memmove+0x34>
    9460:	298f883a 	add	r7,r5,r6
    9464:	21c0092e 	bgeu	r4,r7,948c <memmove+0x34>
    9468:	2187883a 	add	r3,r4,r6
    946c:	198bc83a 	sub	r5,r3,r6
    9470:	30004826 	beq	r6,zero,9594 <memmove+0x13c>
    9474:	39ffffc4 	addi	r7,r7,-1
    9478:	39000003 	ldbu	r4,0(r7)
    947c:	18ffffc4 	addi	r3,r3,-1
    9480:	19000005 	stb	r4,0(r3)
    9484:	28fffb1e 	bne	r5,r3,9474 <_gp+0xfffef108>
    9488:	f800283a 	ret
    948c:	00c003c4 	movi	r3,15
    9490:	1980412e 	bgeu	r3,r6,9598 <memmove+0x140>
    9494:	2886b03a 	or	r3,r5,r2
    9498:	18c000cc 	andi	r3,r3,3
    949c:	1800401e 	bne	r3,zero,95a0 <memmove+0x148>
    94a0:	33fffc04 	addi	r15,r6,-16
    94a4:	781ed13a 	srli	r15,r15,4
    94a8:	28c00104 	addi	r3,r5,4
    94ac:	13400104 	addi	r13,r2,4
    94b0:	781c913a 	slli	r14,r15,4
    94b4:	2b000204 	addi	r12,r5,8
    94b8:	12c00204 	addi	r11,r2,8
    94bc:	73800504 	addi	r14,r14,20
    94c0:	2a800304 	addi	r10,r5,12
    94c4:	12400304 	addi	r9,r2,12
    94c8:	2b9d883a 	add	r14,r5,r14
    94cc:	2811883a 	mov	r8,r5
    94d0:	100f883a 	mov	r7,r2
    94d4:	41000017 	ldw	r4,0(r8)
    94d8:	39c00404 	addi	r7,r7,16
    94dc:	18c00404 	addi	r3,r3,16
    94e0:	393ffc15 	stw	r4,-16(r7)
    94e4:	193ffc17 	ldw	r4,-16(r3)
    94e8:	6b400404 	addi	r13,r13,16
    94ec:	5ac00404 	addi	r11,r11,16
    94f0:	693ffc15 	stw	r4,-16(r13)
    94f4:	61000017 	ldw	r4,0(r12)
    94f8:	4a400404 	addi	r9,r9,16
    94fc:	42000404 	addi	r8,r8,16
    9500:	593ffc15 	stw	r4,-16(r11)
    9504:	51000017 	ldw	r4,0(r10)
    9508:	63000404 	addi	r12,r12,16
    950c:	52800404 	addi	r10,r10,16
    9510:	493ffc15 	stw	r4,-16(r9)
    9514:	1bbfef1e 	bne	r3,r14,94d4 <_gp+0xfffef168>
    9518:	79000044 	addi	r4,r15,1
    951c:	2008913a 	slli	r4,r4,4
    9520:	328003cc 	andi	r10,r6,15
    9524:	02c000c4 	movi	r11,3
    9528:	1107883a 	add	r3,r2,r4
    952c:	290b883a 	add	r5,r5,r4
    9530:	5a801e2e 	bgeu	r11,r10,95ac <memmove+0x154>
    9534:	1813883a 	mov	r9,r3
    9538:	2811883a 	mov	r8,r5
    953c:	500f883a 	mov	r7,r10
    9540:	41000017 	ldw	r4,0(r8)
    9544:	4a400104 	addi	r9,r9,4
    9548:	39ffff04 	addi	r7,r7,-4
    954c:	493fff15 	stw	r4,-4(r9)
    9550:	42000104 	addi	r8,r8,4
    9554:	59fffa36 	bltu	r11,r7,9540 <_gp+0xfffef1d4>
    9558:	513fff04 	addi	r4,r10,-4
    955c:	2008d0ba 	srli	r4,r4,2
    9560:	318000cc 	andi	r6,r6,3
    9564:	21000044 	addi	r4,r4,1
    9568:	2109883a 	add	r4,r4,r4
    956c:	2109883a 	add	r4,r4,r4
    9570:	1907883a 	add	r3,r3,r4
    9574:	290b883a 	add	r5,r5,r4
    9578:	30000b26 	beq	r6,zero,95a8 <memmove+0x150>
    957c:	198d883a 	add	r6,r3,r6
    9580:	29c00003 	ldbu	r7,0(r5)
    9584:	18c00044 	addi	r3,r3,1
    9588:	29400044 	addi	r5,r5,1
    958c:	19ffffc5 	stb	r7,-1(r3)
    9590:	19bffb1e 	bne	r3,r6,9580 <_gp+0xfffef214>
    9594:	f800283a 	ret
    9598:	1007883a 	mov	r3,r2
    959c:	003ff606 	br	9578 <_gp+0xfffef20c>
    95a0:	1007883a 	mov	r3,r2
    95a4:	003ff506 	br	957c <_gp+0xfffef210>
    95a8:	f800283a 	ret
    95ac:	500d883a 	mov	r6,r10
    95b0:	003ff106 	br	9578 <_gp+0xfffef20c>

000095b4 <_read_r>:
    95b4:	defffd04 	addi	sp,sp,-12
    95b8:	2805883a 	mov	r2,r5
    95bc:	dc000015 	stw	r16,0(sp)
    95c0:	04000074 	movhi	r16,1
    95c4:	dc400115 	stw	r17,4(sp)
    95c8:	300b883a 	mov	r5,r6
    95cc:	840fac04 	addi	r16,r16,16048
    95d0:	2023883a 	mov	r17,r4
    95d4:	380d883a 	mov	r6,r7
    95d8:	1009883a 	mov	r4,r2
    95dc:	dfc00215 	stw	ra,8(sp)
    95e0:	80000015 	stw	zero,0(r16)
    95e4:	000ddc80 	call	ddc8 <read>
    95e8:	00ffffc4 	movi	r3,-1
    95ec:	10c00526 	beq	r2,r3,9604 <_read_r+0x50>
    95f0:	dfc00217 	ldw	ra,8(sp)
    95f4:	dc400117 	ldw	r17,4(sp)
    95f8:	dc000017 	ldw	r16,0(sp)
    95fc:	dec00304 	addi	sp,sp,12
    9600:	f800283a 	ret
    9604:	80c00017 	ldw	r3,0(r16)
    9608:	183ff926 	beq	r3,zero,95f0 <_gp+0xfffef284>
    960c:	88c00015 	stw	r3,0(r17)
    9610:	003ff706 	br	95f0 <_gp+0xfffef284>

00009614 <_realloc_r>:
    9614:	defff604 	addi	sp,sp,-40
    9618:	dc800215 	stw	r18,8(sp)
    961c:	dfc00915 	stw	ra,36(sp)
    9620:	df000815 	stw	fp,32(sp)
    9624:	ddc00715 	stw	r23,28(sp)
    9628:	dd800615 	stw	r22,24(sp)
    962c:	dd400515 	stw	r21,20(sp)
    9630:	dd000415 	stw	r20,16(sp)
    9634:	dcc00315 	stw	r19,12(sp)
    9638:	dc400115 	stw	r17,4(sp)
    963c:	dc000015 	stw	r16,0(sp)
    9640:	3025883a 	mov	r18,r6
    9644:	2800b726 	beq	r5,zero,9924 <_realloc_r+0x310>
    9648:	282b883a 	mov	r21,r5
    964c:	2029883a 	mov	r20,r4
    9650:	000daa00 	call	daa0 <__malloc_lock>
    9654:	a8bfff17 	ldw	r2,-4(r21)
    9658:	043fff04 	movi	r16,-4
    965c:	90c002c4 	addi	r3,r18,11
    9660:	01000584 	movi	r4,22
    9664:	acfffe04 	addi	r19,r21,-8
    9668:	1420703a 	and	r16,r2,r16
    966c:	20c0332e 	bgeu	r4,r3,973c <_realloc_r+0x128>
    9670:	047ffe04 	movi	r17,-8
    9674:	1c62703a 	and	r17,r3,r17
    9678:	8807883a 	mov	r3,r17
    967c:	88005816 	blt	r17,zero,97e0 <_realloc_r+0x1cc>
    9680:	8c805736 	bltu	r17,r18,97e0 <_realloc_r+0x1cc>
    9684:	80c0300e 	bge	r16,r3,9748 <_realloc_r+0x134>
    9688:	07000074 	movhi	fp,1
    968c:	e7035704 	addi	fp,fp,3420
    9690:	e1c00217 	ldw	r7,8(fp)
    9694:	9c09883a 	add	r4,r19,r16
    9698:	22000117 	ldw	r8,4(r4)
    969c:	21c06326 	beq	r4,r7,982c <_realloc_r+0x218>
    96a0:	017fff84 	movi	r5,-2
    96a4:	414a703a 	and	r5,r8,r5
    96a8:	214b883a 	add	r5,r4,r5
    96ac:	29800117 	ldw	r6,4(r5)
    96b0:	3180004c 	andi	r6,r6,1
    96b4:	30003f26 	beq	r6,zero,97b4 <_realloc_r+0x1a0>
    96b8:	1080004c 	andi	r2,r2,1
    96bc:	10008326 	beq	r2,zero,98cc <_realloc_r+0x2b8>
    96c0:	900b883a 	mov	r5,r18
    96c4:	a009883a 	mov	r4,r20
    96c8:	000535c0 	call	535c <_malloc_r>
    96cc:	1025883a 	mov	r18,r2
    96d0:	10011e26 	beq	r2,zero,9b4c <_realloc_r+0x538>
    96d4:	a93fff17 	ldw	r4,-4(r21)
    96d8:	10fffe04 	addi	r3,r2,-8
    96dc:	00bfff84 	movi	r2,-2
    96e0:	2084703a 	and	r2,r4,r2
    96e4:	9885883a 	add	r2,r19,r2
    96e8:	1880ee26 	beq	r3,r2,9aa4 <_realloc_r+0x490>
    96ec:	81bfff04 	addi	r6,r16,-4
    96f0:	00800904 	movi	r2,36
    96f4:	1180b836 	bltu	r2,r6,99d8 <_realloc_r+0x3c4>
    96f8:	00c004c4 	movi	r3,19
    96fc:	19809636 	bltu	r3,r6,9958 <_realloc_r+0x344>
    9700:	9005883a 	mov	r2,r18
    9704:	a807883a 	mov	r3,r21
    9708:	19000017 	ldw	r4,0(r3)
    970c:	11000015 	stw	r4,0(r2)
    9710:	19000117 	ldw	r4,4(r3)
    9714:	11000115 	stw	r4,4(r2)
    9718:	18c00217 	ldw	r3,8(r3)
    971c:	10c00215 	stw	r3,8(r2)
    9720:	a80b883a 	mov	r5,r21
    9724:	a009883a 	mov	r4,r20
    9728:	0004c2c0 	call	4c2c <_free_r>
    972c:	a009883a 	mov	r4,r20
    9730:	000dac40 	call	dac4 <__malloc_unlock>
    9734:	9005883a 	mov	r2,r18
    9738:	00001206 	br	9784 <_realloc_r+0x170>
    973c:	00c00404 	movi	r3,16
    9740:	1823883a 	mov	r17,r3
    9744:	003fce06 	br	9680 <_gp+0xfffef314>
    9748:	a825883a 	mov	r18,r21
    974c:	8445c83a 	sub	r2,r16,r17
    9750:	00c003c4 	movi	r3,15
    9754:	18802636 	bltu	r3,r2,97f0 <_realloc_r+0x1dc>
    9758:	99800117 	ldw	r6,4(r19)
    975c:	9c07883a 	add	r3,r19,r16
    9760:	3180004c 	andi	r6,r6,1
    9764:	3420b03a 	or	r16,r6,r16
    9768:	9c000115 	stw	r16,4(r19)
    976c:	18800117 	ldw	r2,4(r3)
    9770:	10800054 	ori	r2,r2,1
    9774:	18800115 	stw	r2,4(r3)
    9778:	a009883a 	mov	r4,r20
    977c:	000dac40 	call	dac4 <__malloc_unlock>
    9780:	9005883a 	mov	r2,r18
    9784:	dfc00917 	ldw	ra,36(sp)
    9788:	df000817 	ldw	fp,32(sp)
    978c:	ddc00717 	ldw	r23,28(sp)
    9790:	dd800617 	ldw	r22,24(sp)
    9794:	dd400517 	ldw	r21,20(sp)
    9798:	dd000417 	ldw	r20,16(sp)
    979c:	dcc00317 	ldw	r19,12(sp)
    97a0:	dc800217 	ldw	r18,8(sp)
    97a4:	dc400117 	ldw	r17,4(sp)
    97a8:	dc000017 	ldw	r16,0(sp)
    97ac:	dec00a04 	addi	sp,sp,40
    97b0:	f800283a 	ret
    97b4:	017fff04 	movi	r5,-4
    97b8:	414a703a 	and	r5,r8,r5
    97bc:	814d883a 	add	r6,r16,r5
    97c0:	30c01f16 	blt	r6,r3,9840 <_realloc_r+0x22c>
    97c4:	20800317 	ldw	r2,12(r4)
    97c8:	20c00217 	ldw	r3,8(r4)
    97cc:	a825883a 	mov	r18,r21
    97d0:	3021883a 	mov	r16,r6
    97d4:	18800315 	stw	r2,12(r3)
    97d8:	10c00215 	stw	r3,8(r2)
    97dc:	003fdb06 	br	974c <_gp+0xfffef3e0>
    97e0:	00800304 	movi	r2,12
    97e4:	a0800015 	stw	r2,0(r20)
    97e8:	0005883a 	mov	r2,zero
    97ec:	003fe506 	br	9784 <_gp+0xfffef418>
    97f0:	98c00117 	ldw	r3,4(r19)
    97f4:	9c4b883a 	add	r5,r19,r17
    97f8:	11000054 	ori	r4,r2,1
    97fc:	18c0004c 	andi	r3,r3,1
    9800:	1c62b03a 	or	r17,r3,r17
    9804:	9c400115 	stw	r17,4(r19)
    9808:	29000115 	stw	r4,4(r5)
    980c:	2885883a 	add	r2,r5,r2
    9810:	10c00117 	ldw	r3,4(r2)
    9814:	29400204 	addi	r5,r5,8
    9818:	a009883a 	mov	r4,r20
    981c:	18c00054 	ori	r3,r3,1
    9820:	10c00115 	stw	r3,4(r2)
    9824:	0004c2c0 	call	4c2c <_free_r>
    9828:	003fd306 	br	9778 <_gp+0xfffef40c>
    982c:	017fff04 	movi	r5,-4
    9830:	414a703a 	and	r5,r8,r5
    9834:	89800404 	addi	r6,r17,16
    9838:	8151883a 	add	r8,r16,r5
    983c:	4180590e 	bge	r8,r6,99a4 <_realloc_r+0x390>
    9840:	1080004c 	andi	r2,r2,1
    9844:	103f9e1e 	bne	r2,zero,96c0 <_gp+0xfffef354>
    9848:	adbffe17 	ldw	r22,-8(r21)
    984c:	00bfff04 	movi	r2,-4
    9850:	9dadc83a 	sub	r22,r19,r22
    9854:	b1800117 	ldw	r6,4(r22)
    9858:	3084703a 	and	r2,r6,r2
    985c:	20002026 	beq	r4,zero,98e0 <_realloc_r+0x2cc>
    9860:	80af883a 	add	r23,r16,r2
    9864:	b96f883a 	add	r23,r23,r5
    9868:	21c05f26 	beq	r4,r7,99e8 <_realloc_r+0x3d4>
    986c:	b8c01c16 	blt	r23,r3,98e0 <_realloc_r+0x2cc>
    9870:	20800317 	ldw	r2,12(r4)
    9874:	20c00217 	ldw	r3,8(r4)
    9878:	81bfff04 	addi	r6,r16,-4
    987c:	01000904 	movi	r4,36
    9880:	18800315 	stw	r2,12(r3)
    9884:	10c00215 	stw	r3,8(r2)
    9888:	b0c00217 	ldw	r3,8(r22)
    988c:	b0800317 	ldw	r2,12(r22)
    9890:	b4800204 	addi	r18,r22,8
    9894:	18800315 	stw	r2,12(r3)
    9898:	10c00215 	stw	r3,8(r2)
    989c:	21801b36 	bltu	r4,r6,990c <_realloc_r+0x2f8>
    98a0:	008004c4 	movi	r2,19
    98a4:	1180352e 	bgeu	r2,r6,997c <_realloc_r+0x368>
    98a8:	a8800017 	ldw	r2,0(r21)
    98ac:	b0800215 	stw	r2,8(r22)
    98b0:	a8800117 	ldw	r2,4(r21)
    98b4:	b0800315 	stw	r2,12(r22)
    98b8:	008006c4 	movi	r2,27
    98bc:	11807f36 	bltu	r2,r6,9abc <_realloc_r+0x4a8>
    98c0:	b0800404 	addi	r2,r22,16
    98c4:	ad400204 	addi	r21,r21,8
    98c8:	00002d06 	br	9980 <_realloc_r+0x36c>
    98cc:	adbffe17 	ldw	r22,-8(r21)
    98d0:	00bfff04 	movi	r2,-4
    98d4:	9dadc83a 	sub	r22,r19,r22
    98d8:	b1000117 	ldw	r4,4(r22)
    98dc:	2084703a 	and	r2,r4,r2
    98e0:	b03f7726 	beq	r22,zero,96c0 <_gp+0xfffef354>
    98e4:	80af883a 	add	r23,r16,r2
    98e8:	b8ff7516 	blt	r23,r3,96c0 <_gp+0xfffef354>
    98ec:	b0800317 	ldw	r2,12(r22)
    98f0:	b0c00217 	ldw	r3,8(r22)
    98f4:	81bfff04 	addi	r6,r16,-4
    98f8:	01000904 	movi	r4,36
    98fc:	18800315 	stw	r2,12(r3)
    9900:	10c00215 	stw	r3,8(r2)
    9904:	b4800204 	addi	r18,r22,8
    9908:	21bfe52e 	bgeu	r4,r6,98a0 <_gp+0xfffef534>
    990c:	a80b883a 	mov	r5,r21
    9910:	9009883a 	mov	r4,r18
    9914:	00094580 	call	9458 <memmove>
    9918:	b821883a 	mov	r16,r23
    991c:	b027883a 	mov	r19,r22
    9920:	003f8a06 	br	974c <_gp+0xfffef3e0>
    9924:	300b883a 	mov	r5,r6
    9928:	dfc00917 	ldw	ra,36(sp)
    992c:	df000817 	ldw	fp,32(sp)
    9930:	ddc00717 	ldw	r23,28(sp)
    9934:	dd800617 	ldw	r22,24(sp)
    9938:	dd400517 	ldw	r21,20(sp)
    993c:	dd000417 	ldw	r20,16(sp)
    9940:	dcc00317 	ldw	r19,12(sp)
    9944:	dc800217 	ldw	r18,8(sp)
    9948:	dc400117 	ldw	r17,4(sp)
    994c:	dc000017 	ldw	r16,0(sp)
    9950:	dec00a04 	addi	sp,sp,40
    9954:	000535c1 	jmpi	535c <_malloc_r>
    9958:	a8c00017 	ldw	r3,0(r21)
    995c:	90c00015 	stw	r3,0(r18)
    9960:	a8c00117 	ldw	r3,4(r21)
    9964:	90c00115 	stw	r3,4(r18)
    9968:	00c006c4 	movi	r3,27
    996c:	19804536 	bltu	r3,r6,9a84 <_realloc_r+0x470>
    9970:	90800204 	addi	r2,r18,8
    9974:	a8c00204 	addi	r3,r21,8
    9978:	003f6306 	br	9708 <_gp+0xfffef39c>
    997c:	9005883a 	mov	r2,r18
    9980:	a8c00017 	ldw	r3,0(r21)
    9984:	b821883a 	mov	r16,r23
    9988:	b027883a 	mov	r19,r22
    998c:	10c00015 	stw	r3,0(r2)
    9990:	a8c00117 	ldw	r3,4(r21)
    9994:	10c00115 	stw	r3,4(r2)
    9998:	a8c00217 	ldw	r3,8(r21)
    999c:	10c00215 	stw	r3,8(r2)
    99a0:	003f6a06 	br	974c <_gp+0xfffef3e0>
    99a4:	9c67883a 	add	r19,r19,r17
    99a8:	4445c83a 	sub	r2,r8,r17
    99ac:	e4c00215 	stw	r19,8(fp)
    99b0:	10800054 	ori	r2,r2,1
    99b4:	98800115 	stw	r2,4(r19)
    99b8:	a8bfff17 	ldw	r2,-4(r21)
    99bc:	a009883a 	mov	r4,r20
    99c0:	1080004c 	andi	r2,r2,1
    99c4:	1462b03a 	or	r17,r2,r17
    99c8:	ac7fff15 	stw	r17,-4(r21)
    99cc:	000dac40 	call	dac4 <__malloc_unlock>
    99d0:	a805883a 	mov	r2,r21
    99d4:	003f6b06 	br	9784 <_gp+0xfffef418>
    99d8:	a80b883a 	mov	r5,r21
    99dc:	9009883a 	mov	r4,r18
    99e0:	00094580 	call	9458 <memmove>
    99e4:	003f4e06 	br	9720 <_gp+0xfffef3b4>
    99e8:	89000404 	addi	r4,r17,16
    99ec:	b93fbc16 	blt	r23,r4,98e0 <_gp+0xfffef574>
    99f0:	b0800317 	ldw	r2,12(r22)
    99f4:	b0c00217 	ldw	r3,8(r22)
    99f8:	81bfff04 	addi	r6,r16,-4
    99fc:	01000904 	movi	r4,36
    9a00:	18800315 	stw	r2,12(r3)
    9a04:	10c00215 	stw	r3,8(r2)
    9a08:	b4800204 	addi	r18,r22,8
    9a0c:	21804336 	bltu	r4,r6,9b1c <_realloc_r+0x508>
    9a10:	008004c4 	movi	r2,19
    9a14:	11803f2e 	bgeu	r2,r6,9b14 <_realloc_r+0x500>
    9a18:	a8800017 	ldw	r2,0(r21)
    9a1c:	b0800215 	stw	r2,8(r22)
    9a20:	a8800117 	ldw	r2,4(r21)
    9a24:	b0800315 	stw	r2,12(r22)
    9a28:	008006c4 	movi	r2,27
    9a2c:	11803f36 	bltu	r2,r6,9b2c <_realloc_r+0x518>
    9a30:	b0800404 	addi	r2,r22,16
    9a34:	ad400204 	addi	r21,r21,8
    9a38:	a8c00017 	ldw	r3,0(r21)
    9a3c:	10c00015 	stw	r3,0(r2)
    9a40:	a8c00117 	ldw	r3,4(r21)
    9a44:	10c00115 	stw	r3,4(r2)
    9a48:	a8c00217 	ldw	r3,8(r21)
    9a4c:	10c00215 	stw	r3,8(r2)
    9a50:	b447883a 	add	r3,r22,r17
    9a54:	bc45c83a 	sub	r2,r23,r17
    9a58:	e0c00215 	stw	r3,8(fp)
    9a5c:	10800054 	ori	r2,r2,1
    9a60:	18800115 	stw	r2,4(r3)
    9a64:	b0800117 	ldw	r2,4(r22)
    9a68:	a009883a 	mov	r4,r20
    9a6c:	1080004c 	andi	r2,r2,1
    9a70:	1462b03a 	or	r17,r2,r17
    9a74:	b4400115 	stw	r17,4(r22)
    9a78:	000dac40 	call	dac4 <__malloc_unlock>
    9a7c:	9005883a 	mov	r2,r18
    9a80:	003f4006 	br	9784 <_gp+0xfffef418>
    9a84:	a8c00217 	ldw	r3,8(r21)
    9a88:	90c00215 	stw	r3,8(r18)
    9a8c:	a8c00317 	ldw	r3,12(r21)
    9a90:	90c00315 	stw	r3,12(r18)
    9a94:	30801126 	beq	r6,r2,9adc <_realloc_r+0x4c8>
    9a98:	90800404 	addi	r2,r18,16
    9a9c:	a8c00404 	addi	r3,r21,16
    9aa0:	003f1906 	br	9708 <_gp+0xfffef39c>
    9aa4:	90ffff17 	ldw	r3,-4(r18)
    9aa8:	00bfff04 	movi	r2,-4
    9aac:	a825883a 	mov	r18,r21
    9ab0:	1884703a 	and	r2,r3,r2
    9ab4:	80a1883a 	add	r16,r16,r2
    9ab8:	003f2406 	br	974c <_gp+0xfffef3e0>
    9abc:	a8800217 	ldw	r2,8(r21)
    9ac0:	b0800415 	stw	r2,16(r22)
    9ac4:	a8800317 	ldw	r2,12(r21)
    9ac8:	b0800515 	stw	r2,20(r22)
    9acc:	31000a26 	beq	r6,r4,9af8 <_realloc_r+0x4e4>
    9ad0:	b0800604 	addi	r2,r22,24
    9ad4:	ad400404 	addi	r21,r21,16
    9ad8:	003fa906 	br	9980 <_gp+0xfffef614>
    9adc:	a9000417 	ldw	r4,16(r21)
    9ae0:	90800604 	addi	r2,r18,24
    9ae4:	a8c00604 	addi	r3,r21,24
    9ae8:	91000415 	stw	r4,16(r18)
    9aec:	a9000517 	ldw	r4,20(r21)
    9af0:	91000515 	stw	r4,20(r18)
    9af4:	003f0406 	br	9708 <_gp+0xfffef39c>
    9af8:	a8c00417 	ldw	r3,16(r21)
    9afc:	ad400604 	addi	r21,r21,24
    9b00:	b0800804 	addi	r2,r22,32
    9b04:	b0c00615 	stw	r3,24(r22)
    9b08:	a8ffff17 	ldw	r3,-4(r21)
    9b0c:	b0c00715 	stw	r3,28(r22)
    9b10:	003f9b06 	br	9980 <_gp+0xfffef614>
    9b14:	9005883a 	mov	r2,r18
    9b18:	003fc706 	br	9a38 <_gp+0xfffef6cc>
    9b1c:	a80b883a 	mov	r5,r21
    9b20:	9009883a 	mov	r4,r18
    9b24:	00094580 	call	9458 <memmove>
    9b28:	003fc906 	br	9a50 <_gp+0xfffef6e4>
    9b2c:	a8800217 	ldw	r2,8(r21)
    9b30:	b0800415 	stw	r2,16(r22)
    9b34:	a8800317 	ldw	r2,12(r21)
    9b38:	b0800515 	stw	r2,20(r22)
    9b3c:	31000726 	beq	r6,r4,9b5c <_realloc_r+0x548>
    9b40:	b0800604 	addi	r2,r22,24
    9b44:	ad400404 	addi	r21,r21,16
    9b48:	003fbb06 	br	9a38 <_gp+0xfffef6cc>
    9b4c:	a009883a 	mov	r4,r20
    9b50:	000dac40 	call	dac4 <__malloc_unlock>
    9b54:	0005883a 	mov	r2,zero
    9b58:	003f0a06 	br	9784 <_gp+0xfffef418>
    9b5c:	a8c00417 	ldw	r3,16(r21)
    9b60:	ad400604 	addi	r21,r21,24
    9b64:	b0800804 	addi	r2,r22,32
    9b68:	b0c00615 	stw	r3,24(r22)
    9b6c:	a8ffff17 	ldw	r3,-4(r21)
    9b70:	b0c00715 	stw	r3,28(r22)
    9b74:	003fb006 	br	9a38 <_gp+0xfffef6cc>

00009b78 <__swbuf_r>:
    9b78:	defffb04 	addi	sp,sp,-20
    9b7c:	dcc00315 	stw	r19,12(sp)
    9b80:	dc800215 	stw	r18,8(sp)
    9b84:	dc000015 	stw	r16,0(sp)
    9b88:	dfc00415 	stw	ra,16(sp)
    9b8c:	dc400115 	stw	r17,4(sp)
    9b90:	2025883a 	mov	r18,r4
    9b94:	2827883a 	mov	r19,r5
    9b98:	3021883a 	mov	r16,r6
    9b9c:	20000226 	beq	r4,zero,9ba8 <__swbuf_r+0x30>
    9ba0:	20800e17 	ldw	r2,56(r4)
    9ba4:	10004226 	beq	r2,zero,9cb0 <__swbuf_r+0x138>
    9ba8:	80800617 	ldw	r2,24(r16)
    9bac:	8100030b 	ldhu	r4,12(r16)
    9bb0:	80800215 	stw	r2,8(r16)
    9bb4:	2080020c 	andi	r2,r4,8
    9bb8:	10003626 	beq	r2,zero,9c94 <__swbuf_r+0x11c>
    9bbc:	80c00417 	ldw	r3,16(r16)
    9bc0:	18003426 	beq	r3,zero,9c94 <__swbuf_r+0x11c>
    9bc4:	2088000c 	andi	r2,r4,8192
    9bc8:	9c403fcc 	andi	r17,r19,255
    9bcc:	10001a26 	beq	r2,zero,9c38 <__swbuf_r+0xc0>
    9bd0:	80800017 	ldw	r2,0(r16)
    9bd4:	81000517 	ldw	r4,20(r16)
    9bd8:	10c7c83a 	sub	r3,r2,r3
    9bdc:	1900200e 	bge	r3,r4,9c60 <__swbuf_r+0xe8>
    9be0:	18c00044 	addi	r3,r3,1
    9be4:	81000217 	ldw	r4,8(r16)
    9be8:	11400044 	addi	r5,r2,1
    9bec:	81400015 	stw	r5,0(r16)
    9bf0:	213fffc4 	addi	r4,r4,-1
    9bf4:	81000215 	stw	r4,8(r16)
    9bf8:	14c00005 	stb	r19,0(r2)
    9bfc:	80800517 	ldw	r2,20(r16)
    9c00:	10c01e26 	beq	r2,r3,9c7c <__swbuf_r+0x104>
    9c04:	8080030b 	ldhu	r2,12(r16)
    9c08:	1080004c 	andi	r2,r2,1
    9c0c:	10000226 	beq	r2,zero,9c18 <__swbuf_r+0xa0>
    9c10:	00800284 	movi	r2,10
    9c14:	88801926 	beq	r17,r2,9c7c <__swbuf_r+0x104>
    9c18:	8805883a 	mov	r2,r17
    9c1c:	dfc00417 	ldw	ra,16(sp)
    9c20:	dcc00317 	ldw	r19,12(sp)
    9c24:	dc800217 	ldw	r18,8(sp)
    9c28:	dc400117 	ldw	r17,4(sp)
    9c2c:	dc000017 	ldw	r16,0(sp)
    9c30:	dec00504 	addi	sp,sp,20
    9c34:	f800283a 	ret
    9c38:	81401917 	ldw	r5,100(r16)
    9c3c:	00b7ffc4 	movi	r2,-8193
    9c40:	21080014 	ori	r4,r4,8192
    9c44:	2884703a 	and	r2,r5,r2
    9c48:	80801915 	stw	r2,100(r16)
    9c4c:	80800017 	ldw	r2,0(r16)
    9c50:	8100030d 	sth	r4,12(r16)
    9c54:	81000517 	ldw	r4,20(r16)
    9c58:	10c7c83a 	sub	r3,r2,r3
    9c5c:	193fe016 	blt	r3,r4,9be0 <_gp+0xfffef874>
    9c60:	800b883a 	mov	r5,r16
    9c64:	9009883a 	mov	r4,r18
    9c68:	00046cc0 	call	46cc <_fflush_r>
    9c6c:	1000071e 	bne	r2,zero,9c8c <__swbuf_r+0x114>
    9c70:	80800017 	ldw	r2,0(r16)
    9c74:	00c00044 	movi	r3,1
    9c78:	003fda06 	br	9be4 <_gp+0xfffef878>
    9c7c:	800b883a 	mov	r5,r16
    9c80:	9009883a 	mov	r4,r18
    9c84:	00046cc0 	call	46cc <_fflush_r>
    9c88:	103fe326 	beq	r2,zero,9c18 <_gp+0xfffef8ac>
    9c8c:	00bfffc4 	movi	r2,-1
    9c90:	003fe206 	br	9c1c <_gp+0xfffef8b0>
    9c94:	800b883a 	mov	r5,r16
    9c98:	9009883a 	mov	r4,r18
    9c9c:	0002aac0 	call	2aac <__swsetup_r>
    9ca0:	103ffa1e 	bne	r2,zero,9c8c <_gp+0xfffef920>
    9ca4:	8100030b 	ldhu	r4,12(r16)
    9ca8:	80c00417 	ldw	r3,16(r16)
    9cac:	003fc506 	br	9bc4 <_gp+0xfffef858>
    9cb0:	0004ab80 	call	4ab8 <__sinit>
    9cb4:	003fbc06 	br	9ba8 <_gp+0xfffef83c>

00009cb8 <__swbuf>:
    9cb8:	00800074 	movhi	r2,1
    9cbc:	1088dc04 	addi	r2,r2,9072
    9cc0:	280d883a 	mov	r6,r5
    9cc4:	200b883a 	mov	r5,r4
    9cc8:	11000017 	ldw	r4,0(r2)
    9ccc:	0009b781 	jmpi	9b78 <__swbuf_r>

00009cd0 <_wcrtomb_r>:
    9cd0:	defff604 	addi	sp,sp,-40
    9cd4:	00800074 	movhi	r2,1
    9cd8:	dc800815 	stw	r18,32(sp)
    9cdc:	dc400715 	stw	r17,28(sp)
    9ce0:	dc000615 	stw	r16,24(sp)
    9ce4:	1088e004 	addi	r2,r2,9088
    9ce8:	dfc00915 	stw	ra,36(sp)
    9cec:	2021883a 	mov	r16,r4
    9cf0:	3823883a 	mov	r17,r7
    9cf4:	14800017 	ldw	r18,0(r2)
    9cf8:	28001426 	beq	r5,zero,9d4c <_wcrtomb_r+0x7c>
    9cfc:	d9400415 	stw	r5,16(sp)
    9d00:	d9800515 	stw	r6,20(sp)
    9d04:	00051400 	call	5140 <__locale_charset>
    9d08:	d9800517 	ldw	r6,20(sp)
    9d0c:	d9400417 	ldw	r5,16(sp)
    9d10:	100f883a 	mov	r7,r2
    9d14:	dc400015 	stw	r17,0(sp)
    9d18:	8009883a 	mov	r4,r16
    9d1c:	903ee83a 	callr	r18
    9d20:	00ffffc4 	movi	r3,-1
    9d24:	10c0031e 	bne	r2,r3,9d34 <_wcrtomb_r+0x64>
    9d28:	88000015 	stw	zero,0(r17)
    9d2c:	00c02284 	movi	r3,138
    9d30:	80c00015 	stw	r3,0(r16)
    9d34:	dfc00917 	ldw	ra,36(sp)
    9d38:	dc800817 	ldw	r18,32(sp)
    9d3c:	dc400717 	ldw	r17,28(sp)
    9d40:	dc000617 	ldw	r16,24(sp)
    9d44:	dec00a04 	addi	sp,sp,40
    9d48:	f800283a 	ret
    9d4c:	00051400 	call	5140 <__locale_charset>
    9d50:	100f883a 	mov	r7,r2
    9d54:	dc400015 	stw	r17,0(sp)
    9d58:	000d883a 	mov	r6,zero
    9d5c:	d9400104 	addi	r5,sp,4
    9d60:	8009883a 	mov	r4,r16
    9d64:	903ee83a 	callr	r18
    9d68:	003fed06 	br	9d20 <_gp+0xfffef9b4>

00009d6c <wcrtomb>:
    9d6c:	defff604 	addi	sp,sp,-40
    9d70:	00800074 	movhi	r2,1
    9d74:	dc800615 	stw	r18,24(sp)
    9d78:	dc400515 	stw	r17,20(sp)
    9d7c:	1088dc04 	addi	r2,r2,9072
    9d80:	dfc00915 	stw	ra,36(sp)
    9d84:	dd000815 	stw	r20,32(sp)
    9d88:	dcc00715 	stw	r19,28(sp)
    9d8c:	dc000415 	stw	r16,16(sp)
    9d90:	3025883a 	mov	r18,r6
    9d94:	14400017 	ldw	r17,0(r2)
    9d98:	20001926 	beq	r4,zero,9e00 <wcrtomb+0x94>
    9d9c:	00800074 	movhi	r2,1
    9da0:	1088e004 	addi	r2,r2,9088
    9da4:	15000017 	ldw	r20,0(r2)
    9da8:	2021883a 	mov	r16,r4
    9dac:	2827883a 	mov	r19,r5
    9db0:	00051400 	call	5140 <__locale_charset>
    9db4:	100f883a 	mov	r7,r2
    9db8:	dc800015 	stw	r18,0(sp)
    9dbc:	980d883a 	mov	r6,r19
    9dc0:	800b883a 	mov	r5,r16
    9dc4:	8809883a 	mov	r4,r17
    9dc8:	a03ee83a 	callr	r20
    9dcc:	00ffffc4 	movi	r3,-1
    9dd0:	10c0031e 	bne	r2,r3,9de0 <wcrtomb+0x74>
    9dd4:	90000015 	stw	zero,0(r18)
    9dd8:	00c02284 	movi	r3,138
    9ddc:	88c00015 	stw	r3,0(r17)
    9de0:	dfc00917 	ldw	ra,36(sp)
    9de4:	dd000817 	ldw	r20,32(sp)
    9de8:	dcc00717 	ldw	r19,28(sp)
    9dec:	dc800617 	ldw	r18,24(sp)
    9df0:	dc400517 	ldw	r17,20(sp)
    9df4:	dc000417 	ldw	r16,16(sp)
    9df8:	dec00a04 	addi	sp,sp,40
    9dfc:	f800283a 	ret
    9e00:	00800074 	movhi	r2,1
    9e04:	1088e004 	addi	r2,r2,9088
    9e08:	14000017 	ldw	r16,0(r2)
    9e0c:	00051400 	call	5140 <__locale_charset>
    9e10:	100f883a 	mov	r7,r2
    9e14:	dc800015 	stw	r18,0(sp)
    9e18:	000d883a 	mov	r6,zero
    9e1c:	d9400104 	addi	r5,sp,4
    9e20:	8809883a 	mov	r4,r17
    9e24:	803ee83a 	callr	r16
    9e28:	003fe806 	br	9dcc <_gp+0xfffefa60>

00009e2c <__ascii_wctomb>:
    9e2c:	28000526 	beq	r5,zero,9e44 <__ascii_wctomb+0x18>
    9e30:	00803fc4 	movi	r2,255
    9e34:	11800536 	bltu	r2,r6,9e4c <__ascii_wctomb+0x20>
    9e38:	29800005 	stb	r6,0(r5)
    9e3c:	00800044 	movi	r2,1
    9e40:	f800283a 	ret
    9e44:	0005883a 	mov	r2,zero
    9e48:	f800283a 	ret
    9e4c:	00802284 	movi	r2,138
    9e50:	20800015 	stw	r2,0(r4)
    9e54:	00bfffc4 	movi	r2,-1
    9e58:	f800283a 	ret

00009e5c <_wctomb_r>:
    9e5c:	00800074 	movhi	r2,1
    9e60:	defff904 	addi	sp,sp,-28
    9e64:	1088e004 	addi	r2,r2,9088
    9e68:	dfc00615 	stw	ra,24(sp)
    9e6c:	dc400515 	stw	r17,20(sp)
    9e70:	dc000415 	stw	r16,16(sp)
    9e74:	3823883a 	mov	r17,r7
    9e78:	14000017 	ldw	r16,0(r2)
    9e7c:	d9000115 	stw	r4,4(sp)
    9e80:	d9400215 	stw	r5,8(sp)
    9e84:	d9800315 	stw	r6,12(sp)
    9e88:	00051400 	call	5140 <__locale_charset>
    9e8c:	d9800317 	ldw	r6,12(sp)
    9e90:	d9400217 	ldw	r5,8(sp)
    9e94:	d9000117 	ldw	r4,4(sp)
    9e98:	100f883a 	mov	r7,r2
    9e9c:	dc400015 	stw	r17,0(sp)
    9ea0:	803ee83a 	callr	r16
    9ea4:	dfc00617 	ldw	ra,24(sp)
    9ea8:	dc400517 	ldw	r17,20(sp)
    9eac:	dc000417 	ldw	r16,16(sp)
    9eb0:	dec00704 	addi	sp,sp,28
    9eb4:	f800283a 	ret

00009eb8 <__udivdi3>:
    9eb8:	defff404 	addi	sp,sp,-48
    9ebc:	dcc00515 	stw	r19,20(sp)
    9ec0:	dc000215 	stw	r16,8(sp)
    9ec4:	dfc00b15 	stw	ra,44(sp)
    9ec8:	df000a15 	stw	fp,40(sp)
    9ecc:	ddc00915 	stw	r23,36(sp)
    9ed0:	dd800815 	stw	r22,32(sp)
    9ed4:	dd400715 	stw	r21,28(sp)
    9ed8:	dd000615 	stw	r20,24(sp)
    9edc:	dc800415 	stw	r18,16(sp)
    9ee0:	dc400315 	stw	r17,12(sp)
    9ee4:	2027883a 	mov	r19,r4
    9ee8:	2821883a 	mov	r16,r5
    9eec:	3800461e 	bne	r7,zero,a008 <__udivdi3+0x150>
    9ef0:	3023883a 	mov	r17,r6
    9ef4:	2025883a 	mov	r18,r4
    9ef8:	2980572e 	bgeu	r5,r6,a058 <__udivdi3+0x1a0>
    9efc:	00bfffd4 	movui	r2,65535
    9f00:	282d883a 	mov	r22,r5
    9f04:	1180b236 	bltu	r2,r6,a1d0 <__udivdi3+0x318>
    9f08:	00803fc4 	movi	r2,255
    9f0c:	1185803a 	cmpltu	r2,r2,r6
    9f10:	100490fa 	slli	r2,r2,3
    9f14:	3086d83a 	srl	r3,r6,r2
    9f18:	01000074 	movhi	r4,1
    9f1c:	2101e504 	addi	r4,r4,1940
    9f20:	20c7883a 	add	r3,r4,r3
    9f24:	18c00003 	ldbu	r3,0(r3)
    9f28:	1885883a 	add	r2,r3,r2
    9f2c:	00c00804 	movi	r3,32
    9f30:	1887c83a 	sub	r3,r3,r2
    9f34:	18000526 	beq	r3,zero,9f4c <__udivdi3+0x94>
    9f38:	80e0983a 	sll	r16,r16,r3
    9f3c:	9884d83a 	srl	r2,r19,r2
    9f40:	30e2983a 	sll	r17,r6,r3
    9f44:	98e4983a 	sll	r18,r19,r3
    9f48:	142cb03a 	or	r22,r2,r16
    9f4c:	882ad43a 	srli	r21,r17,16
    9f50:	b009883a 	mov	r4,r22
    9f54:	8d3fffcc 	andi	r20,r17,65535
    9f58:	a80b883a 	mov	r5,r21
    9f5c:	000abd40 	call	abd4 <__umodsi3>
    9f60:	b009883a 	mov	r4,r22
    9f64:	a80b883a 	mov	r5,r21
    9f68:	1027883a 	mov	r19,r2
    9f6c:	000ab700 	call	ab70 <__udivsi3>
    9f70:	100b883a 	mov	r5,r2
    9f74:	a009883a 	mov	r4,r20
    9f78:	102d883a 	mov	r22,r2
    9f7c:	000049c0 	call	49c <__mulsi3>
    9f80:	9826943a 	slli	r19,r19,16
    9f84:	9006d43a 	srli	r3,r18,16
    9f88:	1cc6b03a 	or	r3,r3,r19
    9f8c:	1880052e 	bgeu	r3,r2,9fa4 <__udivdi3+0xec>
    9f90:	1c47883a 	add	r3,r3,r17
    9f94:	b13fffc4 	addi	r4,r22,-1
    9f98:	1c400136 	bltu	r3,r17,9fa0 <__udivdi3+0xe8>
    9f9c:	18814236 	bltu	r3,r2,a4a8 <__udivdi3+0x5f0>
    9fa0:	202d883a 	mov	r22,r4
    9fa4:	18a1c83a 	sub	r16,r3,r2
    9fa8:	8009883a 	mov	r4,r16
    9fac:	a80b883a 	mov	r5,r21
    9fb0:	000abd40 	call	abd4 <__umodsi3>
    9fb4:	1027883a 	mov	r19,r2
    9fb8:	8009883a 	mov	r4,r16
    9fbc:	a80b883a 	mov	r5,r21
    9fc0:	9826943a 	slli	r19,r19,16
    9fc4:	000ab700 	call	ab70 <__udivsi3>
    9fc8:	100b883a 	mov	r5,r2
    9fcc:	a009883a 	mov	r4,r20
    9fd0:	94bfffcc 	andi	r18,r18,65535
    9fd4:	1021883a 	mov	r16,r2
    9fd8:	94e4b03a 	or	r18,r18,r19
    9fdc:	000049c0 	call	49c <__mulsi3>
    9fe0:	9080052e 	bgeu	r18,r2,9ff8 <__udivdi3+0x140>
    9fe4:	8ca5883a 	add	r18,r17,r18
    9fe8:	80ffffc4 	addi	r3,r16,-1
    9fec:	94410c36 	bltu	r18,r17,a420 <__udivdi3+0x568>
    9ff0:	90810b2e 	bgeu	r18,r2,a420 <__udivdi3+0x568>
    9ff4:	843fff84 	addi	r16,r16,-2
    9ff8:	b004943a 	slli	r2,r22,16
    9ffc:	0007883a 	mov	r3,zero
    a000:	1404b03a 	or	r2,r2,r16
    a004:	00005e06 	br	a180 <__udivdi3+0x2c8>
    a008:	29c05b36 	bltu	r5,r7,a178 <__udivdi3+0x2c0>
    a00c:	00bfffd4 	movui	r2,65535
    a010:	11c0672e 	bgeu	r2,r7,a1b0 <__udivdi3+0x2f8>
    a014:	00804034 	movhi	r2,256
    a018:	10bfffc4 	addi	r2,r2,-1
    a01c:	11c10a36 	bltu	r2,r7,a448 <__udivdi3+0x590>
    a020:	00800404 	movi	r2,16
    a024:	3886d83a 	srl	r3,r7,r2
    a028:	01000074 	movhi	r4,1
    a02c:	2101e504 	addi	r4,r4,1940
    a030:	20c7883a 	add	r3,r4,r3
    a034:	18c00003 	ldbu	r3,0(r3)
    a038:	05c00804 	movi	r23,32
    a03c:	1885883a 	add	r2,r3,r2
    a040:	b8afc83a 	sub	r23,r23,r2
    a044:	b800671e 	bne	r23,zero,a1e4 <__udivdi3+0x32c>
    a048:	3c010536 	bltu	r7,r16,a460 <__udivdi3+0x5a8>
    a04c:	9985403a 	cmpgeu	r2,r19,r6
    a050:	0007883a 	mov	r3,zero
    a054:	00004a06 	br	a180 <__udivdi3+0x2c8>
    a058:	3000041e 	bne	r6,zero,a06c <__udivdi3+0x1b4>
    a05c:	000b883a 	mov	r5,zero
    a060:	01000044 	movi	r4,1
    a064:	000ab700 	call	ab70 <__udivsi3>
    a068:	1023883a 	mov	r17,r2
    a06c:	00bfffd4 	movui	r2,65535
    a070:	1440532e 	bgeu	r2,r17,a1c0 <__udivdi3+0x308>
    a074:	00804034 	movhi	r2,256
    a078:	10bfffc4 	addi	r2,r2,-1
    a07c:	1440f436 	bltu	r2,r17,a450 <__udivdi3+0x598>
    a080:	00800404 	movi	r2,16
    a084:	8886d83a 	srl	r3,r17,r2
    a088:	01000074 	movhi	r4,1
    a08c:	2101e504 	addi	r4,r4,1940
    a090:	20c7883a 	add	r3,r4,r3
    a094:	18c00003 	ldbu	r3,0(r3)
    a098:	1885883a 	add	r2,r3,r2
    a09c:	00c00804 	movi	r3,32
    a0a0:	1887c83a 	sub	r3,r3,r2
    a0a4:	1800a51e 	bne	r3,zero,a33c <__udivdi3+0x484>
    a0a8:	882ad43a 	srli	r21,r17,16
    a0ac:	8461c83a 	sub	r16,r16,r17
    a0b0:	8d3fffcc 	andi	r20,r17,65535
    a0b4:	00c00044 	movi	r3,1
    a0b8:	a80b883a 	mov	r5,r21
    a0bc:	8009883a 	mov	r4,r16
    a0c0:	d8c00115 	stw	r3,4(sp)
    a0c4:	000abd40 	call	abd4 <__umodsi3>
    a0c8:	a80b883a 	mov	r5,r21
    a0cc:	8009883a 	mov	r4,r16
    a0d0:	1027883a 	mov	r19,r2
    a0d4:	000ab700 	call	ab70 <__udivsi3>
    a0d8:	a00b883a 	mov	r5,r20
    a0dc:	1009883a 	mov	r4,r2
    a0e0:	102d883a 	mov	r22,r2
    a0e4:	000049c0 	call	49c <__mulsi3>
    a0e8:	9826943a 	slli	r19,r19,16
    a0ec:	900ed43a 	srli	r7,r18,16
    a0f0:	d8c00117 	ldw	r3,4(sp)
    a0f4:	3cceb03a 	or	r7,r7,r19
    a0f8:	3880052e 	bgeu	r7,r2,a110 <__udivdi3+0x258>
    a0fc:	3c4f883a 	add	r7,r7,r17
    a100:	b13fffc4 	addi	r4,r22,-1
    a104:	3c400136 	bltu	r7,r17,a10c <__udivdi3+0x254>
    a108:	3880e436 	bltu	r7,r2,a49c <__udivdi3+0x5e4>
    a10c:	202d883a 	mov	r22,r4
    a110:	38a1c83a 	sub	r16,r7,r2
    a114:	8009883a 	mov	r4,r16
    a118:	a80b883a 	mov	r5,r21
    a11c:	d8c00115 	stw	r3,4(sp)
    a120:	000abd40 	call	abd4 <__umodsi3>
    a124:	1027883a 	mov	r19,r2
    a128:	8009883a 	mov	r4,r16
    a12c:	a80b883a 	mov	r5,r21
    a130:	9826943a 	slli	r19,r19,16
    a134:	000ab700 	call	ab70 <__udivsi3>
    a138:	a00b883a 	mov	r5,r20
    a13c:	1009883a 	mov	r4,r2
    a140:	94bfffcc 	andi	r18,r18,65535
    a144:	1021883a 	mov	r16,r2
    a148:	94e4b03a 	or	r18,r18,r19
    a14c:	000049c0 	call	49c <__mulsi3>
    a150:	d8c00117 	ldw	r3,4(sp)
    a154:	9080052e 	bgeu	r18,r2,a16c <__udivdi3+0x2b4>
    a158:	8ca5883a 	add	r18,r17,r18
    a15c:	813fffc4 	addi	r4,r16,-1
    a160:	9440ad36 	bltu	r18,r17,a418 <__udivdi3+0x560>
    a164:	9080ac2e 	bgeu	r18,r2,a418 <__udivdi3+0x560>
    a168:	843fff84 	addi	r16,r16,-2
    a16c:	b004943a 	slli	r2,r22,16
    a170:	1404b03a 	or	r2,r2,r16
    a174:	00000206 	br	a180 <__udivdi3+0x2c8>
    a178:	0007883a 	mov	r3,zero
    a17c:	0005883a 	mov	r2,zero
    a180:	dfc00b17 	ldw	ra,44(sp)
    a184:	df000a17 	ldw	fp,40(sp)
    a188:	ddc00917 	ldw	r23,36(sp)
    a18c:	dd800817 	ldw	r22,32(sp)
    a190:	dd400717 	ldw	r21,28(sp)
    a194:	dd000617 	ldw	r20,24(sp)
    a198:	dcc00517 	ldw	r19,20(sp)
    a19c:	dc800417 	ldw	r18,16(sp)
    a1a0:	dc400317 	ldw	r17,12(sp)
    a1a4:	dc000217 	ldw	r16,8(sp)
    a1a8:	dec00c04 	addi	sp,sp,48
    a1ac:	f800283a 	ret
    a1b0:	00803fc4 	movi	r2,255
    a1b4:	11c5803a 	cmpltu	r2,r2,r7
    a1b8:	100490fa 	slli	r2,r2,3
    a1bc:	003f9906 	br	a024 <_gp+0xfffefcb8>
    a1c0:	00803fc4 	movi	r2,255
    a1c4:	1445803a 	cmpltu	r2,r2,r17
    a1c8:	100490fa 	slli	r2,r2,3
    a1cc:	003fad06 	br	a084 <_gp+0xfffefd18>
    a1d0:	00804034 	movhi	r2,256
    a1d4:	10bfffc4 	addi	r2,r2,-1
    a1d8:	11809f36 	bltu	r2,r6,a458 <__udivdi3+0x5a0>
    a1dc:	00800404 	movi	r2,16
    a1e0:	003f4c06 	br	9f14 <_gp+0xfffefba8>
    a1e4:	3dce983a 	sll	r7,r7,r23
    a1e8:	30b8d83a 	srl	fp,r6,r2
    a1ec:	80a2d83a 	srl	r17,r16,r2
    a1f0:	35cc983a 	sll	r6,r6,r23
    a1f4:	3f38b03a 	or	fp,r7,fp
    a1f8:	e024d43a 	srli	r18,fp,16
    a1fc:	9884d83a 	srl	r2,r19,r2
    a200:	85e0983a 	sll	r16,r16,r23
    a204:	8809883a 	mov	r4,r17
    a208:	900b883a 	mov	r5,r18
    a20c:	d9800015 	stw	r6,0(sp)
    a210:	1420b03a 	or	r16,r2,r16
    a214:	000abd40 	call	abd4 <__umodsi3>
    a218:	900b883a 	mov	r5,r18
    a21c:	8809883a 	mov	r4,r17
    a220:	1029883a 	mov	r20,r2
    a224:	e5bfffcc 	andi	r22,fp,65535
    a228:	000ab700 	call	ab70 <__udivsi3>
    a22c:	100b883a 	mov	r5,r2
    a230:	b009883a 	mov	r4,r22
    a234:	102b883a 	mov	r21,r2
    a238:	000049c0 	call	49c <__mulsi3>
    a23c:	a028943a 	slli	r20,r20,16
    a240:	8006d43a 	srli	r3,r16,16
    a244:	1d06b03a 	or	r3,r3,r20
    a248:	1880042e 	bgeu	r3,r2,a25c <__udivdi3+0x3a4>
    a24c:	1f07883a 	add	r3,r3,fp
    a250:	a93fffc4 	addi	r4,r21,-1
    a254:	1f00892e 	bgeu	r3,fp,a47c <__udivdi3+0x5c4>
    a258:	202b883a 	mov	r21,r4
    a25c:	18a3c83a 	sub	r17,r3,r2
    a260:	8809883a 	mov	r4,r17
    a264:	900b883a 	mov	r5,r18
    a268:	000abd40 	call	abd4 <__umodsi3>
    a26c:	1029883a 	mov	r20,r2
    a270:	8809883a 	mov	r4,r17
    a274:	900b883a 	mov	r5,r18
    a278:	a028943a 	slli	r20,r20,16
    a27c:	000ab700 	call	ab70 <__udivsi3>
    a280:	100b883a 	mov	r5,r2
    a284:	b009883a 	mov	r4,r22
    a288:	843fffcc 	andi	r16,r16,65535
    a28c:	1023883a 	mov	r17,r2
    a290:	8520b03a 	or	r16,r16,r20
    a294:	000049c0 	call	49c <__mulsi3>
    a298:	8080042e 	bgeu	r16,r2,a2ac <__udivdi3+0x3f4>
    a29c:	8721883a 	add	r16,r16,fp
    a2a0:	88ffffc4 	addi	r3,r17,-1
    a2a4:	8700712e 	bgeu	r16,fp,a46c <__udivdi3+0x5b4>
    a2a8:	1823883a 	mov	r17,r3
    a2ac:	a80e943a 	slli	r7,r21,16
    a2b0:	d8c00017 	ldw	r3,0(sp)
    a2b4:	80a1c83a 	sub	r16,r16,r2
    a2b8:	3c64b03a 	or	r18,r7,r17
    a2bc:	1d3fffcc 	andi	r20,r3,65535
    a2c0:	9022d43a 	srli	r17,r18,16
    a2c4:	95bfffcc 	andi	r22,r18,65535
    a2c8:	a00b883a 	mov	r5,r20
    a2cc:	b009883a 	mov	r4,r22
    a2d0:	182ad43a 	srli	r21,r3,16
    a2d4:	000049c0 	call	49c <__mulsi3>
    a2d8:	a00b883a 	mov	r5,r20
    a2dc:	8809883a 	mov	r4,r17
    a2e0:	1039883a 	mov	fp,r2
    a2e4:	000049c0 	call	49c <__mulsi3>
    a2e8:	8809883a 	mov	r4,r17
    a2ec:	a80b883a 	mov	r5,r21
    a2f0:	1029883a 	mov	r20,r2
    a2f4:	000049c0 	call	49c <__mulsi3>
    a2f8:	a80b883a 	mov	r5,r21
    a2fc:	b009883a 	mov	r4,r22
    a300:	1023883a 	mov	r17,r2
    a304:	000049c0 	call	49c <__mulsi3>
    a308:	e006d43a 	srli	r3,fp,16
    a30c:	1505883a 	add	r2,r2,r20
    a310:	1887883a 	add	r3,r3,r2
    a314:	1d00022e 	bgeu	r3,r20,a320 <__udivdi3+0x468>
    a318:	00800074 	movhi	r2,1
    a31c:	88a3883a 	add	r17,r17,r2
    a320:	1804d43a 	srli	r2,r3,16
    a324:	1463883a 	add	r17,r2,r17
    a328:	84404436 	bltu	r16,r17,a43c <__udivdi3+0x584>
    a32c:	84403e26 	beq	r16,r17,a428 <__udivdi3+0x570>
    a330:	9005883a 	mov	r2,r18
    a334:	0007883a 	mov	r3,zero
    a338:	003f9106 	br	a180 <_gp+0xfffefe14>
    a33c:	88e2983a 	sll	r17,r17,r3
    a340:	80aed83a 	srl	r23,r16,r2
    a344:	80e0983a 	sll	r16,r16,r3
    a348:	882ad43a 	srli	r21,r17,16
    a34c:	9884d83a 	srl	r2,r19,r2
    a350:	b809883a 	mov	r4,r23
    a354:	a80b883a 	mov	r5,r21
    a358:	98e4983a 	sll	r18,r19,r3
    a35c:	142cb03a 	or	r22,r2,r16
    a360:	000abd40 	call	abd4 <__umodsi3>
    a364:	b809883a 	mov	r4,r23
    a368:	a80b883a 	mov	r5,r21
    a36c:	1027883a 	mov	r19,r2
    a370:	8d3fffcc 	andi	r20,r17,65535
    a374:	000ab700 	call	ab70 <__udivsi3>
    a378:	a009883a 	mov	r4,r20
    a37c:	100b883a 	mov	r5,r2
    a380:	102f883a 	mov	r23,r2
    a384:	000049c0 	call	49c <__mulsi3>
    a388:	9826943a 	slli	r19,r19,16
    a38c:	b008d43a 	srli	r4,r22,16
    a390:	24c8b03a 	or	r4,r4,r19
    a394:	2080062e 	bgeu	r4,r2,a3b0 <__udivdi3+0x4f8>
    a398:	2449883a 	add	r4,r4,r17
    a39c:	b8ffffc4 	addi	r3,r23,-1
    a3a0:	24403c36 	bltu	r4,r17,a494 <__udivdi3+0x5dc>
    a3a4:	20803b2e 	bgeu	r4,r2,a494 <__udivdi3+0x5dc>
    a3a8:	bdffff84 	addi	r23,r23,-2
    a3ac:	2449883a 	add	r4,r4,r17
    a3b0:	20a1c83a 	sub	r16,r4,r2
    a3b4:	a80b883a 	mov	r5,r21
    a3b8:	8009883a 	mov	r4,r16
    a3bc:	000abd40 	call	abd4 <__umodsi3>
    a3c0:	a80b883a 	mov	r5,r21
    a3c4:	8009883a 	mov	r4,r16
    a3c8:	1027883a 	mov	r19,r2
    a3cc:	000ab700 	call	ab70 <__udivsi3>
    a3d0:	a009883a 	mov	r4,r20
    a3d4:	100b883a 	mov	r5,r2
    a3d8:	9826943a 	slli	r19,r19,16
    a3dc:	1039883a 	mov	fp,r2
    a3e0:	000049c0 	call	49c <__mulsi3>
    a3e4:	b13fffcc 	andi	r4,r22,65535
    a3e8:	24c8b03a 	or	r4,r4,r19
    a3ec:	2080062e 	bgeu	r4,r2,a408 <__udivdi3+0x550>
    a3f0:	2449883a 	add	r4,r4,r17
    a3f4:	e0ffffc4 	addi	r3,fp,-1
    a3f8:	24402436 	bltu	r4,r17,a48c <__udivdi3+0x5d4>
    a3fc:	2080232e 	bgeu	r4,r2,a48c <__udivdi3+0x5d4>
    a400:	e73fff84 	addi	fp,fp,-2
    a404:	2449883a 	add	r4,r4,r17
    a408:	b82e943a 	slli	r23,r23,16
    a40c:	20a1c83a 	sub	r16,r4,r2
    a410:	bf06b03a 	or	r3,r23,fp
    a414:	003f2806 	br	a0b8 <_gp+0xfffefd4c>
    a418:	2021883a 	mov	r16,r4
    a41c:	003f5306 	br	a16c <_gp+0xfffefe00>
    a420:	1821883a 	mov	r16,r3
    a424:	003ef406 	br	9ff8 <_gp+0xfffefc8c>
    a428:	1806943a 	slli	r3,r3,16
    a42c:	9de6983a 	sll	r19,r19,r23
    a430:	e73fffcc 	andi	fp,fp,65535
    a434:	1f07883a 	add	r3,r3,fp
    a438:	98ffbd2e 	bgeu	r19,r3,a330 <_gp+0xfffeffc4>
    a43c:	90bfffc4 	addi	r2,r18,-1
    a440:	0007883a 	mov	r3,zero
    a444:	003f4e06 	br	a180 <_gp+0xfffefe14>
    a448:	00800604 	movi	r2,24
    a44c:	003ef506 	br	a024 <_gp+0xfffefcb8>
    a450:	00800604 	movi	r2,24
    a454:	003f0b06 	br	a084 <_gp+0xfffefd18>
    a458:	00800604 	movi	r2,24
    a45c:	003ead06 	br	9f14 <_gp+0xfffefba8>
    a460:	0007883a 	mov	r3,zero
    a464:	00800044 	movi	r2,1
    a468:	003f4506 	br	a180 <_gp+0xfffefe14>
    a46c:	80bf8e2e 	bgeu	r16,r2,a2a8 <_gp+0xfffeff3c>
    a470:	8c7fff84 	addi	r17,r17,-2
    a474:	8721883a 	add	r16,r16,fp
    a478:	003f8c06 	br	a2ac <_gp+0xfffeff40>
    a47c:	18bf762e 	bgeu	r3,r2,a258 <_gp+0xfffefeec>
    a480:	ad7fff84 	addi	r21,r21,-2
    a484:	1f07883a 	add	r3,r3,fp
    a488:	003f7406 	br	a25c <_gp+0xfffefef0>
    a48c:	1839883a 	mov	fp,r3
    a490:	003fdd06 	br	a408 <_gp+0xffff009c>
    a494:	182f883a 	mov	r23,r3
    a498:	003fc506 	br	a3b0 <_gp+0xffff0044>
    a49c:	b5bfff84 	addi	r22,r22,-2
    a4a0:	3c4f883a 	add	r7,r7,r17
    a4a4:	003f1a06 	br	a110 <_gp+0xfffefda4>
    a4a8:	b5bfff84 	addi	r22,r22,-2
    a4ac:	1c47883a 	add	r3,r3,r17
    a4b0:	003ebc06 	br	9fa4 <_gp+0xfffefc38>

0000a4b4 <__umoddi3>:
    a4b4:	defff304 	addi	sp,sp,-52
    a4b8:	df000b15 	stw	fp,44(sp)
    a4bc:	dc400415 	stw	r17,16(sp)
    a4c0:	dc000315 	stw	r16,12(sp)
    a4c4:	dfc00c15 	stw	ra,48(sp)
    a4c8:	ddc00a15 	stw	r23,40(sp)
    a4cc:	dd800915 	stw	r22,36(sp)
    a4d0:	dd400815 	stw	r21,32(sp)
    a4d4:	dd000715 	stw	r20,28(sp)
    a4d8:	dcc00615 	stw	r19,24(sp)
    a4dc:	dc800515 	stw	r18,20(sp)
    a4e0:	2021883a 	mov	r16,r4
    a4e4:	2823883a 	mov	r17,r5
    a4e8:	2839883a 	mov	fp,r5
    a4ec:	3800401e 	bne	r7,zero,a5f0 <__umoddi3+0x13c>
    a4f0:	3027883a 	mov	r19,r6
    a4f4:	2029883a 	mov	r20,r4
    a4f8:	2980552e 	bgeu	r5,r6,a650 <__umoddi3+0x19c>
    a4fc:	00bfffd4 	movui	r2,65535
    a500:	1180a236 	bltu	r2,r6,a78c <__umoddi3+0x2d8>
    a504:	01003fc4 	movi	r4,255
    a508:	2189803a 	cmpltu	r4,r4,r6
    a50c:	200890fa 	slli	r4,r4,3
    a510:	3104d83a 	srl	r2,r6,r4
    a514:	00c00074 	movhi	r3,1
    a518:	18c1e504 	addi	r3,r3,1940
    a51c:	1885883a 	add	r2,r3,r2
    a520:	10c00003 	ldbu	r3,0(r2)
    a524:	00800804 	movi	r2,32
    a528:	1909883a 	add	r4,r3,r4
    a52c:	1125c83a 	sub	r18,r2,r4
    a530:	90000526 	beq	r18,zero,a548 <__umoddi3+0x94>
    a534:	8ca2983a 	sll	r17,r17,r18
    a538:	8108d83a 	srl	r4,r16,r4
    a53c:	34a6983a 	sll	r19,r6,r18
    a540:	84a8983a 	sll	r20,r16,r18
    a544:	2478b03a 	or	fp,r4,r17
    a548:	982cd43a 	srli	r22,r19,16
    a54c:	e009883a 	mov	r4,fp
    a550:	9dffffcc 	andi	r23,r19,65535
    a554:	b00b883a 	mov	r5,r22
    a558:	000abd40 	call	abd4 <__umodsi3>
    a55c:	b00b883a 	mov	r5,r22
    a560:	e009883a 	mov	r4,fp
    a564:	102b883a 	mov	r21,r2
    a568:	000ab700 	call	ab70 <__udivsi3>
    a56c:	100b883a 	mov	r5,r2
    a570:	b809883a 	mov	r4,r23
    a574:	000049c0 	call	49c <__mulsi3>
    a578:	a82a943a 	slli	r21,r21,16
    a57c:	a006d43a 	srli	r3,r20,16
    a580:	1d46b03a 	or	r3,r3,r21
    a584:	1880032e 	bgeu	r3,r2,a594 <__umoddi3+0xe0>
    a588:	1cc7883a 	add	r3,r3,r19
    a58c:	1cc00136 	bltu	r3,r19,a594 <__umoddi3+0xe0>
    a590:	18813136 	bltu	r3,r2,aa58 <__umoddi3+0x5a4>
    a594:	18a1c83a 	sub	r16,r3,r2
    a598:	b00b883a 	mov	r5,r22
    a59c:	8009883a 	mov	r4,r16
    a5a0:	000abd40 	call	abd4 <__umodsi3>
    a5a4:	b00b883a 	mov	r5,r22
    a5a8:	8009883a 	mov	r4,r16
    a5ac:	1023883a 	mov	r17,r2
    a5b0:	000ab700 	call	ab70 <__udivsi3>
    a5b4:	100b883a 	mov	r5,r2
    a5b8:	b809883a 	mov	r4,r23
    a5bc:	8822943a 	slli	r17,r17,16
    a5c0:	000049c0 	call	49c <__mulsi3>
    a5c4:	a0ffffcc 	andi	r3,r20,65535
    a5c8:	1c46b03a 	or	r3,r3,r17
    a5cc:	1880042e 	bgeu	r3,r2,a5e0 <__umoddi3+0x12c>
    a5d0:	1cc7883a 	add	r3,r3,r19
    a5d4:	1cc00236 	bltu	r3,r19,a5e0 <__umoddi3+0x12c>
    a5d8:	1880012e 	bgeu	r3,r2,a5e0 <__umoddi3+0x12c>
    a5dc:	1cc7883a 	add	r3,r3,r19
    a5e0:	1885c83a 	sub	r2,r3,r2
    a5e4:	1484d83a 	srl	r2,r2,r18
    a5e8:	0007883a 	mov	r3,zero
    a5ec:	00005306 	br	a73c <__umoddi3+0x288>
    a5f0:	29c05036 	bltu	r5,r7,a734 <__umoddi3+0x280>
    a5f4:	00bfffd4 	movui	r2,65535
    a5f8:	11c05c2e 	bgeu	r2,r7,a76c <__umoddi3+0x2b8>
    a5fc:	00804034 	movhi	r2,256
    a600:	10bfffc4 	addi	r2,r2,-1
    a604:	11c10636 	bltu	r2,r7,aa20 <__umoddi3+0x56c>
    a608:	01000404 	movi	r4,16
    a60c:	3904d83a 	srl	r2,r7,r4
    a610:	00c00074 	movhi	r3,1
    a614:	18c1e504 	addi	r3,r3,1940
    a618:	1885883a 	add	r2,r3,r2
    a61c:	14c00003 	ldbu	r19,0(r2)
    a620:	00c00804 	movi	r3,32
    a624:	9927883a 	add	r19,r19,r4
    a628:	1ce9c83a 	sub	r20,r3,r19
    a62c:	a0005c1e 	bne	r20,zero,a7a0 <__umoddi3+0x2ec>
    a630:	3c400136 	bltu	r7,r17,a638 <__umoddi3+0x184>
    a634:	81810a36 	bltu	r16,r6,aa60 <__umoddi3+0x5ac>
    a638:	8185c83a 	sub	r2,r16,r6
    a63c:	89e3c83a 	sub	r17,r17,r7
    a640:	8089803a 	cmpltu	r4,r16,r2
    a644:	8939c83a 	sub	fp,r17,r4
    a648:	e007883a 	mov	r3,fp
    a64c:	00003b06 	br	a73c <__umoddi3+0x288>
    a650:	3000041e 	bne	r6,zero,a664 <__umoddi3+0x1b0>
    a654:	000b883a 	mov	r5,zero
    a658:	01000044 	movi	r4,1
    a65c:	000ab700 	call	ab70 <__udivsi3>
    a660:	1027883a 	mov	r19,r2
    a664:	00bfffd4 	movui	r2,65535
    a668:	14c0442e 	bgeu	r2,r19,a77c <__umoddi3+0x2c8>
    a66c:	00804034 	movhi	r2,256
    a670:	10bfffc4 	addi	r2,r2,-1
    a674:	14c0ec36 	bltu	r2,r19,aa28 <__umoddi3+0x574>
    a678:	00800404 	movi	r2,16
    a67c:	9886d83a 	srl	r3,r19,r2
    a680:	01000074 	movhi	r4,1
    a684:	2101e504 	addi	r4,r4,1940
    a688:	20c7883a 	add	r3,r4,r3
    a68c:	18c00003 	ldbu	r3,0(r3)
    a690:	1887883a 	add	r3,r3,r2
    a694:	00800804 	movi	r2,32
    a698:	10e5c83a 	sub	r18,r2,r3
    a69c:	9000ab1e 	bne	r18,zero,a94c <__umoddi3+0x498>
    a6a0:	982cd43a 	srli	r22,r19,16
    a6a4:	8ce3c83a 	sub	r17,r17,r19
    a6a8:	9dffffcc 	andi	r23,r19,65535
    a6ac:	b00b883a 	mov	r5,r22
    a6b0:	8809883a 	mov	r4,r17
    a6b4:	000abd40 	call	abd4 <__umodsi3>
    a6b8:	b00b883a 	mov	r5,r22
    a6bc:	8809883a 	mov	r4,r17
    a6c0:	102b883a 	mov	r21,r2
    a6c4:	000ab700 	call	ab70 <__udivsi3>
    a6c8:	b80b883a 	mov	r5,r23
    a6cc:	1009883a 	mov	r4,r2
    a6d0:	000049c0 	call	49c <__mulsi3>
    a6d4:	a82a943a 	slli	r21,r21,16
    a6d8:	a006d43a 	srli	r3,r20,16
    a6dc:	1d46b03a 	or	r3,r3,r21
    a6e0:	1880042e 	bgeu	r3,r2,a6f4 <__umoddi3+0x240>
    a6e4:	1cc7883a 	add	r3,r3,r19
    a6e8:	1cc00236 	bltu	r3,r19,a6f4 <__umoddi3+0x240>
    a6ec:	1880012e 	bgeu	r3,r2,a6f4 <__umoddi3+0x240>
    a6f0:	1cc7883a 	add	r3,r3,r19
    a6f4:	18a1c83a 	sub	r16,r3,r2
    a6f8:	b00b883a 	mov	r5,r22
    a6fc:	8009883a 	mov	r4,r16
    a700:	000abd40 	call	abd4 <__umodsi3>
    a704:	1023883a 	mov	r17,r2
    a708:	b00b883a 	mov	r5,r22
    a70c:	8009883a 	mov	r4,r16
    a710:	000ab700 	call	ab70 <__udivsi3>
    a714:	8822943a 	slli	r17,r17,16
    a718:	b80b883a 	mov	r5,r23
    a71c:	1009883a 	mov	r4,r2
    a720:	000049c0 	call	49c <__mulsi3>
    a724:	a53fffcc 	andi	r20,r20,65535
    a728:	a446b03a 	or	r3,r20,r17
    a72c:	18bfac2e 	bgeu	r3,r2,a5e0 <_gp+0xffff0274>
    a730:	003fa706 	br	a5d0 <_gp+0xffff0264>
    a734:	2005883a 	mov	r2,r4
    a738:	2807883a 	mov	r3,r5
    a73c:	dfc00c17 	ldw	ra,48(sp)
    a740:	df000b17 	ldw	fp,44(sp)
    a744:	ddc00a17 	ldw	r23,40(sp)
    a748:	dd800917 	ldw	r22,36(sp)
    a74c:	dd400817 	ldw	r21,32(sp)
    a750:	dd000717 	ldw	r20,28(sp)
    a754:	dcc00617 	ldw	r19,24(sp)
    a758:	dc800517 	ldw	r18,20(sp)
    a75c:	dc400417 	ldw	r17,16(sp)
    a760:	dc000317 	ldw	r16,12(sp)
    a764:	dec00d04 	addi	sp,sp,52
    a768:	f800283a 	ret
    a76c:	04c03fc4 	movi	r19,255
    a770:	99c9803a 	cmpltu	r4,r19,r7
    a774:	200890fa 	slli	r4,r4,3
    a778:	003fa406 	br	a60c <_gp+0xffff02a0>
    a77c:	00803fc4 	movi	r2,255
    a780:	14c5803a 	cmpltu	r2,r2,r19
    a784:	100490fa 	slli	r2,r2,3
    a788:	003fbc06 	br	a67c <_gp+0xffff0310>
    a78c:	00804034 	movhi	r2,256
    a790:	10bfffc4 	addi	r2,r2,-1
    a794:	1180a636 	bltu	r2,r6,aa30 <__umoddi3+0x57c>
    a798:	01000404 	movi	r4,16
    a79c:	003f5c06 	br	a510 <_gp+0xffff01a4>
    a7a0:	3d0e983a 	sll	r7,r7,r20
    a7a4:	34ead83a 	srl	r21,r6,r19
    a7a8:	8cc6d83a 	srl	r3,r17,r19
    a7ac:	8d10983a 	sll	r8,r17,r20
    a7b0:	3d6ab03a 	or	r21,r7,r21
    a7b4:	a82cd43a 	srli	r22,r21,16
    a7b8:	84e2d83a 	srl	r17,r16,r19
    a7bc:	1809883a 	mov	r4,r3
    a7c0:	b00b883a 	mov	r5,r22
    a7c4:	8a22b03a 	or	r17,r17,r8
    a7c8:	3524983a 	sll	r18,r6,r20
    a7cc:	dc400015 	stw	r17,0(sp)
    a7d0:	d8c00115 	stw	r3,4(sp)
    a7d4:	000abd40 	call	abd4 <__umodsi3>
    a7d8:	d8c00117 	ldw	r3,4(sp)
    a7dc:	b00b883a 	mov	r5,r22
    a7e0:	1039883a 	mov	fp,r2
    a7e4:	1809883a 	mov	r4,r3
    a7e8:	000ab700 	call	ab70 <__udivsi3>
    a7ec:	adffffcc 	andi	r23,r21,65535
    a7f0:	100b883a 	mov	r5,r2
    a7f4:	b809883a 	mov	r4,r23
    a7f8:	1023883a 	mov	r17,r2
    a7fc:	000049c0 	call	49c <__mulsi3>
    a800:	d9400017 	ldw	r5,0(sp)
    a804:	e008943a 	slli	r4,fp,16
    a808:	8520983a 	sll	r16,r16,r20
    a80c:	2806d43a 	srli	r3,r5,16
    a810:	1906b03a 	or	r3,r3,r4
    a814:	1880042e 	bgeu	r3,r2,a828 <__umoddi3+0x374>
    a818:	1d47883a 	add	r3,r3,r21
    a81c:	893fffc4 	addi	r4,r17,-1
    a820:	1d40892e 	bgeu	r3,r21,aa48 <__umoddi3+0x594>
    a824:	2023883a 	mov	r17,r4
    a828:	18b9c83a 	sub	fp,r3,r2
    a82c:	b00b883a 	mov	r5,r22
    a830:	e009883a 	mov	r4,fp
    a834:	000abd40 	call	abd4 <__umodsi3>
    a838:	b00b883a 	mov	r5,r22
    a83c:	e009883a 	mov	r4,fp
    a840:	d8800215 	stw	r2,8(sp)
    a844:	000ab700 	call	ab70 <__udivsi3>
    a848:	100b883a 	mov	r5,r2
    a84c:	b809883a 	mov	r4,r23
    a850:	102d883a 	mov	r22,r2
    a854:	000049c0 	call	49c <__mulsi3>
    a858:	d9800217 	ldw	r6,8(sp)
    a85c:	d8c00017 	ldw	r3,0(sp)
    a860:	300c943a 	slli	r6,r6,16
    a864:	1a3fffcc 	andi	r8,r3,65535
    a868:	4190b03a 	or	r8,r8,r6
    a86c:	4080042e 	bgeu	r8,r2,a880 <__umoddi3+0x3cc>
    a870:	4551883a 	add	r8,r8,r21
    a874:	b0ffffc4 	addi	r3,r22,-1
    a878:	45406f2e 	bgeu	r8,r21,aa38 <__umoddi3+0x584>
    a87c:	182d883a 	mov	r22,r3
    a880:	880e943a 	slli	r7,r17,16
    a884:	9006d43a 	srli	r3,r18,16
    a888:	91bfffcc 	andi	r6,r18,65535
    a88c:	3dacb03a 	or	r22,r7,r22
    a890:	b02ed43a 	srli	r23,r22,16
    a894:	b5bfffcc 	andi	r22,r22,65535
    a898:	300b883a 	mov	r5,r6
    a89c:	b009883a 	mov	r4,r22
    a8a0:	40a3c83a 	sub	r17,r8,r2
    a8a4:	d8c00115 	stw	r3,4(sp)
    a8a8:	d9800215 	stw	r6,8(sp)
    a8ac:	000049c0 	call	49c <__mulsi3>
    a8b0:	d9800217 	ldw	r6,8(sp)
    a8b4:	b809883a 	mov	r4,r23
    a8b8:	1039883a 	mov	fp,r2
    a8bc:	300b883a 	mov	r5,r6
    a8c0:	000049c0 	call	49c <__mulsi3>
    a8c4:	d8c00117 	ldw	r3,4(sp)
    a8c8:	b809883a 	mov	r4,r23
    a8cc:	d8800215 	stw	r2,8(sp)
    a8d0:	180b883a 	mov	r5,r3
    a8d4:	000049c0 	call	49c <__mulsi3>
    a8d8:	d8c00117 	ldw	r3,4(sp)
    a8dc:	b009883a 	mov	r4,r22
    a8e0:	102f883a 	mov	r23,r2
    a8e4:	180b883a 	mov	r5,r3
    a8e8:	000049c0 	call	49c <__mulsi3>
    a8ec:	d9800217 	ldw	r6,8(sp)
    a8f0:	e006d43a 	srli	r3,fp,16
    a8f4:	1185883a 	add	r2,r2,r6
    a8f8:	1885883a 	add	r2,r3,r2
    a8fc:	1180022e 	bgeu	r2,r6,a908 <__umoddi3+0x454>
    a900:	00c00074 	movhi	r3,1
    a904:	b8ef883a 	add	r23,r23,r3
    a908:	1006d43a 	srli	r3,r2,16
    a90c:	1004943a 	slli	r2,r2,16
    a910:	e73fffcc 	andi	fp,fp,65535
    a914:	1dc7883a 	add	r3,r3,r23
    a918:	1739883a 	add	fp,r2,fp
    a91c:	88c03a36 	bltu	r17,r3,aa08 <__umoddi3+0x554>
    a920:	88c05126 	beq	r17,r3,aa68 <__umoddi3+0x5b4>
    a924:	88c9c83a 	sub	r4,r17,r3
    a928:	e00f883a 	mov	r7,fp
    a92c:	81cfc83a 	sub	r7,r16,r7
    a930:	81c7803a 	cmpltu	r3,r16,r7
    a934:	20c7c83a 	sub	r3,r4,r3
    a938:	1cc4983a 	sll	r2,r3,r19
    a93c:	3d0ed83a 	srl	r7,r7,r20
    a940:	1d06d83a 	srl	r3,r3,r20
    a944:	11c4b03a 	or	r2,r2,r7
    a948:	003f7c06 	br	a73c <_gp+0xffff03d0>
    a94c:	9ca6983a 	sll	r19,r19,r18
    a950:	88f8d83a 	srl	fp,r17,r3
    a954:	80c4d83a 	srl	r2,r16,r3
    a958:	982cd43a 	srli	r22,r19,16
    a95c:	8ca2983a 	sll	r17,r17,r18
    a960:	e009883a 	mov	r4,fp
    a964:	b00b883a 	mov	r5,r22
    a968:	146ab03a 	or	r21,r2,r17
    a96c:	000abd40 	call	abd4 <__umodsi3>
    a970:	b00b883a 	mov	r5,r22
    a974:	e009883a 	mov	r4,fp
    a978:	1029883a 	mov	r20,r2
    a97c:	9dffffcc 	andi	r23,r19,65535
    a980:	000ab700 	call	ab70 <__udivsi3>
    a984:	b809883a 	mov	r4,r23
    a988:	100b883a 	mov	r5,r2
    a98c:	000049c0 	call	49c <__mulsi3>
    a990:	a008943a 	slli	r4,r20,16
    a994:	a806d43a 	srli	r3,r21,16
    a998:	84a8983a 	sll	r20,r16,r18
    a99c:	1906b03a 	or	r3,r3,r4
    a9a0:	1880042e 	bgeu	r3,r2,a9b4 <__umoddi3+0x500>
    a9a4:	1cc7883a 	add	r3,r3,r19
    a9a8:	1cc00236 	bltu	r3,r19,a9b4 <__umoddi3+0x500>
    a9ac:	1880012e 	bgeu	r3,r2,a9b4 <__umoddi3+0x500>
    a9b0:	1cc7883a 	add	r3,r3,r19
    a9b4:	18a3c83a 	sub	r17,r3,r2
    a9b8:	b00b883a 	mov	r5,r22
    a9bc:	8809883a 	mov	r4,r17
    a9c0:	000abd40 	call	abd4 <__umodsi3>
    a9c4:	b00b883a 	mov	r5,r22
    a9c8:	8809883a 	mov	r4,r17
    a9cc:	1021883a 	mov	r16,r2
    a9d0:	000ab700 	call	ab70 <__udivsi3>
    a9d4:	100b883a 	mov	r5,r2
    a9d8:	b809883a 	mov	r4,r23
    a9dc:	8020943a 	slli	r16,r16,16
    a9e0:	000049c0 	call	49c <__mulsi3>
    a9e4:	a8ffffcc 	andi	r3,r21,65535
    a9e8:	1c06b03a 	or	r3,r3,r16
    a9ec:	1880042e 	bgeu	r3,r2,aa00 <__umoddi3+0x54c>
    a9f0:	1cc7883a 	add	r3,r3,r19
    a9f4:	1cc00236 	bltu	r3,r19,aa00 <__umoddi3+0x54c>
    a9f8:	1880012e 	bgeu	r3,r2,aa00 <__umoddi3+0x54c>
    a9fc:	1cc7883a 	add	r3,r3,r19
    aa00:	18a3c83a 	sub	r17,r3,r2
    aa04:	003f2906 	br	a6ac <_gp+0xffff0340>
    aa08:	e48fc83a 	sub	r7,fp,r18
    aa0c:	1d49c83a 	sub	r4,r3,r21
    aa10:	e1f9803a 	cmpltu	fp,fp,r7
    aa14:	2739c83a 	sub	fp,r4,fp
    aa18:	8f09c83a 	sub	r4,r17,fp
    aa1c:	003fc306 	br	a92c <_gp+0xffff05c0>
    aa20:	01000604 	movi	r4,24
    aa24:	003ef906 	br	a60c <_gp+0xffff02a0>
    aa28:	00800604 	movi	r2,24
    aa2c:	003f1306 	br	a67c <_gp+0xffff0310>
    aa30:	01000604 	movi	r4,24
    aa34:	003eb606 	br	a510 <_gp+0xffff01a4>
    aa38:	40bf902e 	bgeu	r8,r2,a87c <_gp+0xffff0510>
    aa3c:	b5bfff84 	addi	r22,r22,-2
    aa40:	4551883a 	add	r8,r8,r21
    aa44:	003f8e06 	br	a880 <_gp+0xffff0514>
    aa48:	18bf762e 	bgeu	r3,r2,a824 <_gp+0xffff04b8>
    aa4c:	8c7fff84 	addi	r17,r17,-2
    aa50:	1d47883a 	add	r3,r3,r21
    aa54:	003f7406 	br	a828 <_gp+0xffff04bc>
    aa58:	1cc7883a 	add	r3,r3,r19
    aa5c:	003ecd06 	br	a594 <_gp+0xffff0228>
    aa60:	8005883a 	mov	r2,r16
    aa64:	003ef806 	br	a648 <_gp+0xffff02dc>
    aa68:	873fe736 	bltu	r16,fp,aa08 <_gp+0xffff069c>
    aa6c:	e00f883a 	mov	r7,fp
    aa70:	0009883a 	mov	r4,zero
    aa74:	003fad06 	br	a92c <_gp+0xffff05c0>

0000aa78 <__divsi3>:
    aa78:	20001b16 	blt	r4,zero,aae8 <__divsi3+0x70>
    aa7c:	000f883a 	mov	r7,zero
    aa80:	28001616 	blt	r5,zero,aadc <__divsi3+0x64>
    aa84:	200d883a 	mov	r6,r4
    aa88:	29001a2e 	bgeu	r5,r4,aaf4 <__divsi3+0x7c>
    aa8c:	00800804 	movi	r2,32
    aa90:	00c00044 	movi	r3,1
    aa94:	00000106 	br	aa9c <__divsi3+0x24>
    aa98:	10000d26 	beq	r2,zero,aad0 <__divsi3+0x58>
    aa9c:	294b883a 	add	r5,r5,r5
    aaa0:	10bfffc4 	addi	r2,r2,-1
    aaa4:	18c7883a 	add	r3,r3,r3
    aaa8:	293ffb36 	bltu	r5,r4,aa98 <_gp+0xffff072c>
    aaac:	0005883a 	mov	r2,zero
    aab0:	18000726 	beq	r3,zero,aad0 <__divsi3+0x58>
    aab4:	0005883a 	mov	r2,zero
    aab8:	31400236 	bltu	r6,r5,aac4 <__divsi3+0x4c>
    aabc:	314dc83a 	sub	r6,r6,r5
    aac0:	10c4b03a 	or	r2,r2,r3
    aac4:	1806d07a 	srli	r3,r3,1
    aac8:	280ad07a 	srli	r5,r5,1
    aacc:	183ffa1e 	bne	r3,zero,aab8 <_gp+0xffff074c>
    aad0:	38000126 	beq	r7,zero,aad8 <__divsi3+0x60>
    aad4:	0085c83a 	sub	r2,zero,r2
    aad8:	f800283a 	ret
    aadc:	014bc83a 	sub	r5,zero,r5
    aae0:	39c0005c 	xori	r7,r7,1
    aae4:	003fe706 	br	aa84 <_gp+0xffff0718>
    aae8:	0109c83a 	sub	r4,zero,r4
    aaec:	01c00044 	movi	r7,1
    aaf0:	003fe306 	br	aa80 <_gp+0xffff0714>
    aaf4:	00c00044 	movi	r3,1
    aaf8:	003fee06 	br	aab4 <_gp+0xffff0748>

0000aafc <__modsi3>:
    aafc:	20001716 	blt	r4,zero,ab5c <__modsi3+0x60>
    ab00:	000f883a 	mov	r7,zero
    ab04:	2005883a 	mov	r2,r4
    ab08:	28001216 	blt	r5,zero,ab54 <__modsi3+0x58>
    ab0c:	2900162e 	bgeu	r5,r4,ab68 <__modsi3+0x6c>
    ab10:	01800804 	movi	r6,32
    ab14:	00c00044 	movi	r3,1
    ab18:	00000106 	br	ab20 <__modsi3+0x24>
    ab1c:	30000a26 	beq	r6,zero,ab48 <__modsi3+0x4c>
    ab20:	294b883a 	add	r5,r5,r5
    ab24:	31bfffc4 	addi	r6,r6,-1
    ab28:	18c7883a 	add	r3,r3,r3
    ab2c:	293ffb36 	bltu	r5,r4,ab1c <_gp+0xffff07b0>
    ab30:	18000526 	beq	r3,zero,ab48 <__modsi3+0x4c>
    ab34:	1806d07a 	srli	r3,r3,1
    ab38:	11400136 	bltu	r2,r5,ab40 <__modsi3+0x44>
    ab3c:	1145c83a 	sub	r2,r2,r5
    ab40:	280ad07a 	srli	r5,r5,1
    ab44:	183ffb1e 	bne	r3,zero,ab34 <_gp+0xffff07c8>
    ab48:	38000126 	beq	r7,zero,ab50 <__modsi3+0x54>
    ab4c:	0085c83a 	sub	r2,zero,r2
    ab50:	f800283a 	ret
    ab54:	014bc83a 	sub	r5,zero,r5
    ab58:	003fec06 	br	ab0c <_gp+0xffff07a0>
    ab5c:	0109c83a 	sub	r4,zero,r4
    ab60:	01c00044 	movi	r7,1
    ab64:	003fe706 	br	ab04 <_gp+0xffff0798>
    ab68:	00c00044 	movi	r3,1
    ab6c:	003ff106 	br	ab34 <_gp+0xffff07c8>

0000ab70 <__udivsi3>:
    ab70:	200d883a 	mov	r6,r4
    ab74:	2900152e 	bgeu	r5,r4,abcc <__udivsi3+0x5c>
    ab78:	28001416 	blt	r5,zero,abcc <__udivsi3+0x5c>
    ab7c:	00800804 	movi	r2,32
    ab80:	00c00044 	movi	r3,1
    ab84:	00000206 	br	ab90 <__udivsi3+0x20>
    ab88:	10000e26 	beq	r2,zero,abc4 <__udivsi3+0x54>
    ab8c:	28000516 	blt	r5,zero,aba4 <__udivsi3+0x34>
    ab90:	294b883a 	add	r5,r5,r5
    ab94:	10bfffc4 	addi	r2,r2,-1
    ab98:	18c7883a 	add	r3,r3,r3
    ab9c:	293ffa36 	bltu	r5,r4,ab88 <_gp+0xffff081c>
    aba0:	18000826 	beq	r3,zero,abc4 <__udivsi3+0x54>
    aba4:	0005883a 	mov	r2,zero
    aba8:	31400236 	bltu	r6,r5,abb4 <__udivsi3+0x44>
    abac:	314dc83a 	sub	r6,r6,r5
    abb0:	10c4b03a 	or	r2,r2,r3
    abb4:	1806d07a 	srli	r3,r3,1
    abb8:	280ad07a 	srli	r5,r5,1
    abbc:	183ffa1e 	bne	r3,zero,aba8 <_gp+0xffff083c>
    abc0:	f800283a 	ret
    abc4:	0005883a 	mov	r2,zero
    abc8:	f800283a 	ret
    abcc:	00c00044 	movi	r3,1
    abd0:	003ff406 	br	aba4 <_gp+0xffff0838>

0000abd4 <__umodsi3>:
    abd4:	2005883a 	mov	r2,r4
    abd8:	2900122e 	bgeu	r5,r4,ac24 <__umodsi3+0x50>
    abdc:	28001116 	blt	r5,zero,ac24 <__umodsi3+0x50>
    abe0:	01800804 	movi	r6,32
    abe4:	00c00044 	movi	r3,1
    abe8:	00000206 	br	abf4 <__umodsi3+0x20>
    abec:	30000c26 	beq	r6,zero,ac20 <__umodsi3+0x4c>
    abf0:	28000516 	blt	r5,zero,ac08 <__umodsi3+0x34>
    abf4:	294b883a 	add	r5,r5,r5
    abf8:	31bfffc4 	addi	r6,r6,-1
    abfc:	18c7883a 	add	r3,r3,r3
    ac00:	293ffa36 	bltu	r5,r4,abec <_gp+0xffff0880>
    ac04:	18000626 	beq	r3,zero,ac20 <__umodsi3+0x4c>
    ac08:	1806d07a 	srli	r3,r3,1
    ac0c:	11400136 	bltu	r2,r5,ac14 <__umodsi3+0x40>
    ac10:	1145c83a 	sub	r2,r2,r5
    ac14:	280ad07a 	srli	r5,r5,1
    ac18:	183ffb1e 	bne	r3,zero,ac08 <_gp+0xffff089c>
    ac1c:	f800283a 	ret
    ac20:	f800283a 	ret
    ac24:	00c00044 	movi	r3,1
    ac28:	003ff706 	br	ac08 <_gp+0xffff089c>

0000ac2c <__adddf3>:
    ac2c:	02c00434 	movhi	r11,16
    ac30:	5affffc4 	addi	r11,r11,-1
    ac34:	2806d7fa 	srli	r3,r5,31
    ac38:	2ad4703a 	and	r10,r5,r11
    ac3c:	3ad2703a 	and	r9,r7,r11
    ac40:	3804d53a 	srli	r2,r7,20
    ac44:	3018d77a 	srli	r12,r6,29
    ac48:	280ad53a 	srli	r5,r5,20
    ac4c:	501490fa 	slli	r10,r10,3
    ac50:	2010d77a 	srli	r8,r4,29
    ac54:	481290fa 	slli	r9,r9,3
    ac58:	380ed7fa 	srli	r7,r7,31
    ac5c:	defffb04 	addi	sp,sp,-20
    ac60:	dc800215 	stw	r18,8(sp)
    ac64:	dc400115 	stw	r17,4(sp)
    ac68:	dc000015 	stw	r16,0(sp)
    ac6c:	dfc00415 	stw	ra,16(sp)
    ac70:	dcc00315 	stw	r19,12(sp)
    ac74:	1c803fcc 	andi	r18,r3,255
    ac78:	2c01ffcc 	andi	r16,r5,2047
    ac7c:	5210b03a 	or	r8,r10,r8
    ac80:	202290fa 	slli	r17,r4,3
    ac84:	1081ffcc 	andi	r2,r2,2047
    ac88:	4b12b03a 	or	r9,r9,r12
    ac8c:	300c90fa 	slli	r6,r6,3
    ac90:	91c07526 	beq	r18,r7,ae68 <__adddf3+0x23c>
    ac94:	8087c83a 	sub	r3,r16,r2
    ac98:	00c0ab0e 	bge	zero,r3,af48 <__adddf3+0x31c>
    ac9c:	10002a1e 	bne	r2,zero,ad48 <__adddf3+0x11c>
    aca0:	4984b03a 	or	r2,r9,r6
    aca4:	1000961e 	bne	r2,zero,af00 <__adddf3+0x2d4>
    aca8:	888001cc 	andi	r2,r17,7
    acac:	10000726 	beq	r2,zero,accc <__adddf3+0xa0>
    acb0:	888003cc 	andi	r2,r17,15
    acb4:	00c00104 	movi	r3,4
    acb8:	10c00426 	beq	r2,r3,accc <__adddf3+0xa0>
    acbc:	88c7883a 	add	r3,r17,r3
    acc0:	1c63803a 	cmpltu	r17,r3,r17
    acc4:	4451883a 	add	r8,r8,r17
    acc8:	1823883a 	mov	r17,r3
    accc:	4080202c 	andhi	r2,r8,128
    acd0:	10005926 	beq	r2,zero,ae38 <__adddf3+0x20c>
    acd4:	84000044 	addi	r16,r16,1
    acd8:	0081ffc4 	movi	r2,2047
    acdc:	8080ba26 	beq	r16,r2,afc8 <__adddf3+0x39c>
    ace0:	00bfe034 	movhi	r2,65408
    ace4:	10bfffc4 	addi	r2,r2,-1
    ace8:	4090703a 	and	r8,r8,r2
    acec:	4004977a 	slli	r2,r8,29
    acf0:	4010927a 	slli	r8,r8,9
    acf4:	8822d0fa 	srli	r17,r17,3
    acf8:	8401ffcc 	andi	r16,r16,2047
    acfc:	4010d33a 	srli	r8,r8,12
    ad00:	9007883a 	mov	r3,r18
    ad04:	1444b03a 	or	r2,r2,r17
    ad08:	8401ffcc 	andi	r16,r16,2047
    ad0c:	8020953a 	slli	r16,r16,20
    ad10:	18c03fcc 	andi	r3,r3,255
    ad14:	01000434 	movhi	r4,16
    ad18:	213fffc4 	addi	r4,r4,-1
    ad1c:	180697fa 	slli	r3,r3,31
    ad20:	4110703a 	and	r8,r8,r4
    ad24:	4410b03a 	or	r8,r8,r16
    ad28:	40c6b03a 	or	r3,r8,r3
    ad2c:	dfc00417 	ldw	ra,16(sp)
    ad30:	dcc00317 	ldw	r19,12(sp)
    ad34:	dc800217 	ldw	r18,8(sp)
    ad38:	dc400117 	ldw	r17,4(sp)
    ad3c:	dc000017 	ldw	r16,0(sp)
    ad40:	dec00504 	addi	sp,sp,20
    ad44:	f800283a 	ret
    ad48:	0081ffc4 	movi	r2,2047
    ad4c:	80bfd626 	beq	r16,r2,aca8 <_gp+0xffff093c>
    ad50:	4a402034 	orhi	r9,r9,128
    ad54:	00800e04 	movi	r2,56
    ad58:	10c09f16 	blt	r2,r3,afd8 <__adddf3+0x3ac>
    ad5c:	008007c4 	movi	r2,31
    ad60:	10c0c216 	blt	r2,r3,b06c <__adddf3+0x440>
    ad64:	00800804 	movi	r2,32
    ad68:	10c5c83a 	sub	r2,r2,r3
    ad6c:	488a983a 	sll	r5,r9,r2
    ad70:	30c8d83a 	srl	r4,r6,r3
    ad74:	3084983a 	sll	r2,r6,r2
    ad78:	48c6d83a 	srl	r3,r9,r3
    ad7c:	290cb03a 	or	r6,r5,r4
    ad80:	1004c03a 	cmpne	r2,r2,zero
    ad84:	308cb03a 	or	r6,r6,r2
    ad88:	898dc83a 	sub	r6,r17,r6
    ad8c:	89a3803a 	cmpltu	r17,r17,r6
    ad90:	40d1c83a 	sub	r8,r8,r3
    ad94:	4451c83a 	sub	r8,r8,r17
    ad98:	3023883a 	mov	r17,r6
    ad9c:	4080202c 	andhi	r2,r8,128
    ada0:	10002326 	beq	r2,zero,ae30 <__adddf3+0x204>
    ada4:	04c02034 	movhi	r19,128
    ada8:	9cffffc4 	addi	r19,r19,-1
    adac:	44e6703a 	and	r19,r8,r19
    adb0:	98007626 	beq	r19,zero,af8c <__adddf3+0x360>
    adb4:	9809883a 	mov	r4,r19
    adb8:	000d46c0 	call	d46c <__clzsi2>
    adbc:	10fffe04 	addi	r3,r2,-8
    adc0:	010007c4 	movi	r4,31
    adc4:	20c07716 	blt	r4,r3,afa4 <__adddf3+0x378>
    adc8:	00800804 	movi	r2,32
    adcc:	10c5c83a 	sub	r2,r2,r3
    add0:	8884d83a 	srl	r2,r17,r2
    add4:	98d0983a 	sll	r8,r19,r3
    add8:	88e2983a 	sll	r17,r17,r3
    addc:	1204b03a 	or	r2,r2,r8
    ade0:	1c007416 	blt	r3,r16,afb4 <__adddf3+0x388>
    ade4:	1c21c83a 	sub	r16,r3,r16
    ade8:	82000044 	addi	r8,r16,1
    adec:	00c007c4 	movi	r3,31
    adf0:	1a009116 	blt	r3,r8,b038 <__adddf3+0x40c>
    adf4:	00c00804 	movi	r3,32
    adf8:	1a07c83a 	sub	r3,r3,r8
    adfc:	8a08d83a 	srl	r4,r17,r8
    ae00:	88e2983a 	sll	r17,r17,r3
    ae04:	10c6983a 	sll	r3,r2,r3
    ae08:	1210d83a 	srl	r8,r2,r8
    ae0c:	8804c03a 	cmpne	r2,r17,zero
    ae10:	1906b03a 	or	r3,r3,r4
    ae14:	18a2b03a 	or	r17,r3,r2
    ae18:	0021883a 	mov	r16,zero
    ae1c:	003fa206 	br	aca8 <_gp+0xffff093c>
    ae20:	1890b03a 	or	r8,r3,r2
    ae24:	40017d26 	beq	r8,zero,b41c <__adddf3+0x7f0>
    ae28:	1011883a 	mov	r8,r2
    ae2c:	1823883a 	mov	r17,r3
    ae30:	888001cc 	andi	r2,r17,7
    ae34:	103f9e1e 	bne	r2,zero,acb0 <_gp+0xffff0944>
    ae38:	4004977a 	slli	r2,r8,29
    ae3c:	8822d0fa 	srli	r17,r17,3
    ae40:	4010d0fa 	srli	r8,r8,3
    ae44:	9007883a 	mov	r3,r18
    ae48:	1444b03a 	or	r2,r2,r17
    ae4c:	0101ffc4 	movi	r4,2047
    ae50:	81002426 	beq	r16,r4,aee4 <__adddf3+0x2b8>
    ae54:	8120703a 	and	r16,r16,r4
    ae58:	01000434 	movhi	r4,16
    ae5c:	213fffc4 	addi	r4,r4,-1
    ae60:	4110703a 	and	r8,r8,r4
    ae64:	003fa806 	br	ad08 <_gp+0xffff099c>
    ae68:	8089c83a 	sub	r4,r16,r2
    ae6c:	01005e0e 	bge	zero,r4,afe8 <__adddf3+0x3bc>
    ae70:	10002b26 	beq	r2,zero,af20 <__adddf3+0x2f4>
    ae74:	0081ffc4 	movi	r2,2047
    ae78:	80bf8b26 	beq	r16,r2,aca8 <_gp+0xffff093c>
    ae7c:	4a402034 	orhi	r9,r9,128
    ae80:	00800e04 	movi	r2,56
    ae84:	1100a40e 	bge	r2,r4,b118 <__adddf3+0x4ec>
    ae88:	498cb03a 	or	r6,r9,r6
    ae8c:	300ac03a 	cmpne	r5,r6,zero
    ae90:	0013883a 	mov	r9,zero
    ae94:	2c4b883a 	add	r5,r5,r17
    ae98:	2c63803a 	cmpltu	r17,r5,r17
    ae9c:	4a11883a 	add	r8,r9,r8
    aea0:	8a11883a 	add	r8,r17,r8
    aea4:	2823883a 	mov	r17,r5
    aea8:	4080202c 	andhi	r2,r8,128
    aeac:	103fe026 	beq	r2,zero,ae30 <_gp+0xffff0ac4>
    aeb0:	84000044 	addi	r16,r16,1
    aeb4:	0081ffc4 	movi	r2,2047
    aeb8:	8080d226 	beq	r16,r2,b204 <__adddf3+0x5d8>
    aebc:	00bfe034 	movhi	r2,65408
    aec0:	10bfffc4 	addi	r2,r2,-1
    aec4:	4090703a 	and	r8,r8,r2
    aec8:	880ad07a 	srli	r5,r17,1
    aecc:	400897fa 	slli	r4,r8,31
    aed0:	88c0004c 	andi	r3,r17,1
    aed4:	28e2b03a 	or	r17,r5,r3
    aed8:	4010d07a 	srli	r8,r8,1
    aedc:	2462b03a 	or	r17,r4,r17
    aee0:	003f7106 	br	aca8 <_gp+0xffff093c>
    aee4:	4088b03a 	or	r4,r8,r2
    aee8:	20014526 	beq	r4,zero,b400 <__adddf3+0x7d4>
    aeec:	01000434 	movhi	r4,16
    aef0:	42000234 	orhi	r8,r8,8
    aef4:	213fffc4 	addi	r4,r4,-1
    aef8:	4110703a 	and	r8,r8,r4
    aefc:	003f8206 	br	ad08 <_gp+0xffff099c>
    af00:	18ffffc4 	addi	r3,r3,-1
    af04:	1800491e 	bne	r3,zero,b02c <__adddf3+0x400>
    af08:	898bc83a 	sub	r5,r17,r6
    af0c:	8963803a 	cmpltu	r17,r17,r5
    af10:	4251c83a 	sub	r8,r8,r9
    af14:	4451c83a 	sub	r8,r8,r17
    af18:	2823883a 	mov	r17,r5
    af1c:	003f9f06 	br	ad9c <_gp+0xffff0a30>
    af20:	4984b03a 	or	r2,r9,r6
    af24:	103f6026 	beq	r2,zero,aca8 <_gp+0xffff093c>
    af28:	213fffc4 	addi	r4,r4,-1
    af2c:	2000931e 	bne	r4,zero,b17c <__adddf3+0x550>
    af30:	898d883a 	add	r6,r17,r6
    af34:	3463803a 	cmpltu	r17,r6,r17
    af38:	4251883a 	add	r8,r8,r9
    af3c:	8a11883a 	add	r8,r17,r8
    af40:	3023883a 	mov	r17,r6
    af44:	003fd806 	br	aea8 <_gp+0xffff0b3c>
    af48:	1800541e 	bne	r3,zero,b09c <__adddf3+0x470>
    af4c:	80800044 	addi	r2,r16,1
    af50:	1081ffcc 	andi	r2,r2,2047
    af54:	00c00044 	movi	r3,1
    af58:	1880a00e 	bge	r3,r2,b1dc <__adddf3+0x5b0>
    af5c:	8989c83a 	sub	r4,r17,r6
    af60:	8905803a 	cmpltu	r2,r17,r4
    af64:	4267c83a 	sub	r19,r8,r9
    af68:	98a7c83a 	sub	r19,r19,r2
    af6c:	9880202c 	andhi	r2,r19,128
    af70:	10006326 	beq	r2,zero,b100 <__adddf3+0x4d4>
    af74:	3463c83a 	sub	r17,r6,r17
    af78:	4a07c83a 	sub	r3,r9,r8
    af7c:	344d803a 	cmpltu	r6,r6,r17
    af80:	19a7c83a 	sub	r19,r3,r6
    af84:	3825883a 	mov	r18,r7
    af88:	983f8a1e 	bne	r19,zero,adb4 <_gp+0xffff0a48>
    af8c:	8809883a 	mov	r4,r17
    af90:	000d46c0 	call	d46c <__clzsi2>
    af94:	10800804 	addi	r2,r2,32
    af98:	10fffe04 	addi	r3,r2,-8
    af9c:	010007c4 	movi	r4,31
    afa0:	20ff890e 	bge	r4,r3,adc8 <_gp+0xffff0a5c>
    afa4:	10bff604 	addi	r2,r2,-40
    afa8:	8884983a 	sll	r2,r17,r2
    afac:	0023883a 	mov	r17,zero
    afb0:	1c3f8c0e 	bge	r3,r16,ade4 <_gp+0xffff0a78>
    afb4:	023fe034 	movhi	r8,65408
    afb8:	423fffc4 	addi	r8,r8,-1
    afbc:	80e1c83a 	sub	r16,r16,r3
    afc0:	1210703a 	and	r8,r2,r8
    afc4:	003f3806 	br	aca8 <_gp+0xffff093c>
    afc8:	9007883a 	mov	r3,r18
    afcc:	0011883a 	mov	r8,zero
    afd0:	0005883a 	mov	r2,zero
    afd4:	003f4c06 	br	ad08 <_gp+0xffff099c>
    afd8:	498cb03a 	or	r6,r9,r6
    afdc:	300cc03a 	cmpne	r6,r6,zero
    afe0:	0007883a 	mov	r3,zero
    afe4:	003f6806 	br	ad88 <_gp+0xffff0a1c>
    afe8:	20009c1e 	bne	r4,zero,b25c <__adddf3+0x630>
    afec:	80800044 	addi	r2,r16,1
    aff0:	1141ffcc 	andi	r5,r2,2047
    aff4:	01000044 	movi	r4,1
    aff8:	2140670e 	bge	r4,r5,b198 <__adddf3+0x56c>
    affc:	0101ffc4 	movi	r4,2047
    b000:	11007f26 	beq	r2,r4,b200 <__adddf3+0x5d4>
    b004:	898d883a 	add	r6,r17,r6
    b008:	4247883a 	add	r3,r8,r9
    b00c:	3451803a 	cmpltu	r8,r6,r17
    b010:	40d1883a 	add	r8,r8,r3
    b014:	402297fa 	slli	r17,r8,31
    b018:	300cd07a 	srli	r6,r6,1
    b01c:	4010d07a 	srli	r8,r8,1
    b020:	1021883a 	mov	r16,r2
    b024:	89a2b03a 	or	r17,r17,r6
    b028:	003f1f06 	br	aca8 <_gp+0xffff093c>
    b02c:	0081ffc4 	movi	r2,2047
    b030:	80bf481e 	bne	r16,r2,ad54 <_gp+0xffff09e8>
    b034:	003f1c06 	br	aca8 <_gp+0xffff093c>
    b038:	843ff844 	addi	r16,r16,-31
    b03c:	01000804 	movi	r4,32
    b040:	1406d83a 	srl	r3,r2,r16
    b044:	41005026 	beq	r8,r4,b188 <__adddf3+0x55c>
    b048:	01001004 	movi	r4,64
    b04c:	2211c83a 	sub	r8,r4,r8
    b050:	1204983a 	sll	r2,r2,r8
    b054:	88a2b03a 	or	r17,r17,r2
    b058:	8822c03a 	cmpne	r17,r17,zero
    b05c:	1c62b03a 	or	r17,r3,r17
    b060:	0011883a 	mov	r8,zero
    b064:	0021883a 	mov	r16,zero
    b068:	003f7106 	br	ae30 <_gp+0xffff0ac4>
    b06c:	193ff804 	addi	r4,r3,-32
    b070:	00800804 	movi	r2,32
    b074:	4908d83a 	srl	r4,r9,r4
    b078:	18804526 	beq	r3,r2,b190 <__adddf3+0x564>
    b07c:	00801004 	movi	r2,64
    b080:	10c5c83a 	sub	r2,r2,r3
    b084:	4886983a 	sll	r3,r9,r2
    b088:	198cb03a 	or	r6,r3,r6
    b08c:	300cc03a 	cmpne	r6,r6,zero
    b090:	218cb03a 	or	r6,r4,r6
    b094:	0007883a 	mov	r3,zero
    b098:	003f3b06 	br	ad88 <_gp+0xffff0a1c>
    b09c:	80002a26 	beq	r16,zero,b148 <__adddf3+0x51c>
    b0a0:	0101ffc4 	movi	r4,2047
    b0a4:	11006826 	beq	r2,r4,b248 <__adddf3+0x61c>
    b0a8:	00c7c83a 	sub	r3,zero,r3
    b0ac:	42002034 	orhi	r8,r8,128
    b0b0:	01000e04 	movi	r4,56
    b0b4:	20c07c16 	blt	r4,r3,b2a8 <__adddf3+0x67c>
    b0b8:	010007c4 	movi	r4,31
    b0bc:	20c0da16 	blt	r4,r3,b428 <__adddf3+0x7fc>
    b0c0:	01000804 	movi	r4,32
    b0c4:	20c9c83a 	sub	r4,r4,r3
    b0c8:	4114983a 	sll	r10,r8,r4
    b0cc:	88cad83a 	srl	r5,r17,r3
    b0d0:	8908983a 	sll	r4,r17,r4
    b0d4:	40c6d83a 	srl	r3,r8,r3
    b0d8:	5162b03a 	or	r17,r10,r5
    b0dc:	2008c03a 	cmpne	r4,r4,zero
    b0e0:	8922b03a 	or	r17,r17,r4
    b0e4:	3463c83a 	sub	r17,r6,r17
    b0e8:	48c7c83a 	sub	r3,r9,r3
    b0ec:	344d803a 	cmpltu	r6,r6,r17
    b0f0:	1991c83a 	sub	r8,r3,r6
    b0f4:	1021883a 	mov	r16,r2
    b0f8:	3825883a 	mov	r18,r7
    b0fc:	003f2706 	br	ad9c <_gp+0xffff0a30>
    b100:	24d0b03a 	or	r8,r4,r19
    b104:	40001b1e 	bne	r8,zero,b174 <__adddf3+0x548>
    b108:	0005883a 	mov	r2,zero
    b10c:	0007883a 	mov	r3,zero
    b110:	0021883a 	mov	r16,zero
    b114:	003f4d06 	br	ae4c <_gp+0xffff0ae0>
    b118:	008007c4 	movi	r2,31
    b11c:	11003c16 	blt	r2,r4,b210 <__adddf3+0x5e4>
    b120:	00800804 	movi	r2,32
    b124:	1105c83a 	sub	r2,r2,r4
    b128:	488e983a 	sll	r7,r9,r2
    b12c:	310ad83a 	srl	r5,r6,r4
    b130:	3084983a 	sll	r2,r6,r2
    b134:	4912d83a 	srl	r9,r9,r4
    b138:	394ab03a 	or	r5,r7,r5
    b13c:	1004c03a 	cmpne	r2,r2,zero
    b140:	288ab03a 	or	r5,r5,r2
    b144:	003f5306 	br	ae94 <_gp+0xffff0b28>
    b148:	4448b03a 	or	r4,r8,r17
    b14c:	20003e26 	beq	r4,zero,b248 <__adddf3+0x61c>
    b150:	00c6303a 	nor	r3,zero,r3
    b154:	18003a1e 	bne	r3,zero,b240 <__adddf3+0x614>
    b158:	3463c83a 	sub	r17,r6,r17
    b15c:	4a07c83a 	sub	r3,r9,r8
    b160:	344d803a 	cmpltu	r6,r6,r17
    b164:	1991c83a 	sub	r8,r3,r6
    b168:	1021883a 	mov	r16,r2
    b16c:	3825883a 	mov	r18,r7
    b170:	003f0a06 	br	ad9c <_gp+0xffff0a30>
    b174:	2023883a 	mov	r17,r4
    b178:	003f0d06 	br	adb0 <_gp+0xffff0a44>
    b17c:	0081ffc4 	movi	r2,2047
    b180:	80bf3f1e 	bne	r16,r2,ae80 <_gp+0xffff0b14>
    b184:	003ec806 	br	aca8 <_gp+0xffff093c>
    b188:	0005883a 	mov	r2,zero
    b18c:	003fb106 	br	b054 <_gp+0xffff0ce8>
    b190:	0007883a 	mov	r3,zero
    b194:	003fbc06 	br	b088 <_gp+0xffff0d1c>
    b198:	4444b03a 	or	r2,r8,r17
    b19c:	8000871e 	bne	r16,zero,b3bc <__adddf3+0x790>
    b1a0:	1000ba26 	beq	r2,zero,b48c <__adddf3+0x860>
    b1a4:	4984b03a 	or	r2,r9,r6
    b1a8:	103ebf26 	beq	r2,zero,aca8 <_gp+0xffff093c>
    b1ac:	8985883a 	add	r2,r17,r6
    b1b0:	4247883a 	add	r3,r8,r9
    b1b4:	1451803a 	cmpltu	r8,r2,r17
    b1b8:	40d1883a 	add	r8,r8,r3
    b1bc:	40c0202c 	andhi	r3,r8,128
    b1c0:	1023883a 	mov	r17,r2
    b1c4:	183f1a26 	beq	r3,zero,ae30 <_gp+0xffff0ac4>
    b1c8:	00bfe034 	movhi	r2,65408
    b1cc:	10bfffc4 	addi	r2,r2,-1
    b1d0:	2021883a 	mov	r16,r4
    b1d4:	4090703a 	and	r8,r8,r2
    b1d8:	003eb306 	br	aca8 <_gp+0xffff093c>
    b1dc:	4444b03a 	or	r2,r8,r17
    b1e0:	8000291e 	bne	r16,zero,b288 <__adddf3+0x65c>
    b1e4:	10004b1e 	bne	r2,zero,b314 <__adddf3+0x6e8>
    b1e8:	4990b03a 	or	r8,r9,r6
    b1ec:	40008b26 	beq	r8,zero,b41c <__adddf3+0x7f0>
    b1f0:	4811883a 	mov	r8,r9
    b1f4:	3023883a 	mov	r17,r6
    b1f8:	3825883a 	mov	r18,r7
    b1fc:	003eaa06 	br	aca8 <_gp+0xffff093c>
    b200:	1021883a 	mov	r16,r2
    b204:	0011883a 	mov	r8,zero
    b208:	0005883a 	mov	r2,zero
    b20c:	003f0f06 	br	ae4c <_gp+0xffff0ae0>
    b210:	217ff804 	addi	r5,r4,-32
    b214:	00800804 	movi	r2,32
    b218:	494ad83a 	srl	r5,r9,r5
    b21c:	20807d26 	beq	r4,r2,b414 <__adddf3+0x7e8>
    b220:	00801004 	movi	r2,64
    b224:	1109c83a 	sub	r4,r2,r4
    b228:	4912983a 	sll	r9,r9,r4
    b22c:	498cb03a 	or	r6,r9,r6
    b230:	300cc03a 	cmpne	r6,r6,zero
    b234:	298ab03a 	or	r5,r5,r6
    b238:	0013883a 	mov	r9,zero
    b23c:	003f1506 	br	ae94 <_gp+0xffff0b28>
    b240:	0101ffc4 	movi	r4,2047
    b244:	113f9a1e 	bne	r2,r4,b0b0 <_gp+0xffff0d44>
    b248:	4811883a 	mov	r8,r9
    b24c:	3023883a 	mov	r17,r6
    b250:	1021883a 	mov	r16,r2
    b254:	3825883a 	mov	r18,r7
    b258:	003e9306 	br	aca8 <_gp+0xffff093c>
    b25c:	8000161e 	bne	r16,zero,b2b8 <__adddf3+0x68c>
    b260:	444ab03a 	or	r5,r8,r17
    b264:	28005126 	beq	r5,zero,b3ac <__adddf3+0x780>
    b268:	0108303a 	nor	r4,zero,r4
    b26c:	20004d1e 	bne	r4,zero,b3a4 <__adddf3+0x778>
    b270:	89a3883a 	add	r17,r17,r6
    b274:	4253883a 	add	r9,r8,r9
    b278:	898d803a 	cmpltu	r6,r17,r6
    b27c:	3251883a 	add	r8,r6,r9
    b280:	1021883a 	mov	r16,r2
    b284:	003f0806 	br	aea8 <_gp+0xffff0b3c>
    b288:	1000301e 	bne	r2,zero,b34c <__adddf3+0x720>
    b28c:	4984b03a 	or	r2,r9,r6
    b290:	10007126 	beq	r2,zero,b458 <__adddf3+0x82c>
    b294:	4811883a 	mov	r8,r9
    b298:	3023883a 	mov	r17,r6
    b29c:	3825883a 	mov	r18,r7
    b2a0:	0401ffc4 	movi	r16,2047
    b2a4:	003e8006 	br	aca8 <_gp+0xffff093c>
    b2a8:	4462b03a 	or	r17,r8,r17
    b2ac:	8822c03a 	cmpne	r17,r17,zero
    b2b0:	0007883a 	mov	r3,zero
    b2b4:	003f8b06 	br	b0e4 <_gp+0xffff0d78>
    b2b8:	0141ffc4 	movi	r5,2047
    b2bc:	11403b26 	beq	r2,r5,b3ac <__adddf3+0x780>
    b2c0:	0109c83a 	sub	r4,zero,r4
    b2c4:	42002034 	orhi	r8,r8,128
    b2c8:	01400e04 	movi	r5,56
    b2cc:	29006716 	blt	r5,r4,b46c <__adddf3+0x840>
    b2d0:	014007c4 	movi	r5,31
    b2d4:	29007016 	blt	r5,r4,b498 <__adddf3+0x86c>
    b2d8:	01400804 	movi	r5,32
    b2dc:	290bc83a 	sub	r5,r5,r4
    b2e0:	4154983a 	sll	r10,r8,r5
    b2e4:	890ed83a 	srl	r7,r17,r4
    b2e8:	894a983a 	sll	r5,r17,r5
    b2ec:	4108d83a 	srl	r4,r8,r4
    b2f0:	51e2b03a 	or	r17,r10,r7
    b2f4:	280ac03a 	cmpne	r5,r5,zero
    b2f8:	8962b03a 	or	r17,r17,r5
    b2fc:	89a3883a 	add	r17,r17,r6
    b300:	2253883a 	add	r9,r4,r9
    b304:	898d803a 	cmpltu	r6,r17,r6
    b308:	3251883a 	add	r8,r6,r9
    b30c:	1021883a 	mov	r16,r2
    b310:	003ee506 	br	aea8 <_gp+0xffff0b3c>
    b314:	4984b03a 	or	r2,r9,r6
    b318:	103e6326 	beq	r2,zero,aca8 <_gp+0xffff093c>
    b31c:	8987c83a 	sub	r3,r17,r6
    b320:	88c9803a 	cmpltu	r4,r17,r3
    b324:	4245c83a 	sub	r2,r8,r9
    b328:	1105c83a 	sub	r2,r2,r4
    b32c:	1100202c 	andhi	r4,r2,128
    b330:	203ebb26 	beq	r4,zero,ae20 <_gp+0xffff0ab4>
    b334:	3463c83a 	sub	r17,r6,r17
    b338:	4a07c83a 	sub	r3,r9,r8
    b33c:	344d803a 	cmpltu	r6,r6,r17
    b340:	1991c83a 	sub	r8,r3,r6
    b344:	3825883a 	mov	r18,r7
    b348:	003e5706 	br	aca8 <_gp+0xffff093c>
    b34c:	4984b03a 	or	r2,r9,r6
    b350:	10002e26 	beq	r2,zero,b40c <__adddf3+0x7e0>
    b354:	4004d0fa 	srli	r2,r8,3
    b358:	8822d0fa 	srli	r17,r17,3
    b35c:	4010977a 	slli	r8,r8,29
    b360:	10c0022c 	andhi	r3,r2,8
    b364:	4462b03a 	or	r17,r8,r17
    b368:	18000826 	beq	r3,zero,b38c <__adddf3+0x760>
    b36c:	4808d0fa 	srli	r4,r9,3
    b370:	20c0022c 	andhi	r3,r4,8
    b374:	1800051e 	bne	r3,zero,b38c <__adddf3+0x760>
    b378:	300cd0fa 	srli	r6,r6,3
    b37c:	4806977a 	slli	r3,r9,29
    b380:	2005883a 	mov	r2,r4
    b384:	3825883a 	mov	r18,r7
    b388:	19a2b03a 	or	r17,r3,r6
    b38c:	8810d77a 	srli	r8,r17,29
    b390:	100490fa 	slli	r2,r2,3
    b394:	882290fa 	slli	r17,r17,3
    b398:	0401ffc4 	movi	r16,2047
    b39c:	4090b03a 	or	r8,r8,r2
    b3a0:	003e4106 	br	aca8 <_gp+0xffff093c>
    b3a4:	0141ffc4 	movi	r5,2047
    b3a8:	117fc71e 	bne	r2,r5,b2c8 <_gp+0xffff0f5c>
    b3ac:	4811883a 	mov	r8,r9
    b3b0:	3023883a 	mov	r17,r6
    b3b4:	1021883a 	mov	r16,r2
    b3b8:	003e3b06 	br	aca8 <_gp+0xffff093c>
    b3bc:	10002f26 	beq	r2,zero,b47c <__adddf3+0x850>
    b3c0:	4984b03a 	or	r2,r9,r6
    b3c4:	10001126 	beq	r2,zero,b40c <__adddf3+0x7e0>
    b3c8:	4004d0fa 	srli	r2,r8,3
    b3cc:	8822d0fa 	srli	r17,r17,3
    b3d0:	4010977a 	slli	r8,r8,29
    b3d4:	10c0022c 	andhi	r3,r2,8
    b3d8:	4462b03a 	or	r17,r8,r17
    b3dc:	183feb26 	beq	r3,zero,b38c <_gp+0xffff1020>
    b3e0:	4808d0fa 	srli	r4,r9,3
    b3e4:	20c0022c 	andhi	r3,r4,8
    b3e8:	183fe81e 	bne	r3,zero,b38c <_gp+0xffff1020>
    b3ec:	300cd0fa 	srli	r6,r6,3
    b3f0:	4806977a 	slli	r3,r9,29
    b3f4:	2005883a 	mov	r2,r4
    b3f8:	19a2b03a 	or	r17,r3,r6
    b3fc:	003fe306 	br	b38c <_gp+0xffff1020>
    b400:	0011883a 	mov	r8,zero
    b404:	0005883a 	mov	r2,zero
    b408:	003e3f06 	br	ad08 <_gp+0xffff099c>
    b40c:	0401ffc4 	movi	r16,2047
    b410:	003e2506 	br	aca8 <_gp+0xffff093c>
    b414:	0013883a 	mov	r9,zero
    b418:	003f8406 	br	b22c <_gp+0xffff0ec0>
    b41c:	0005883a 	mov	r2,zero
    b420:	0007883a 	mov	r3,zero
    b424:	003e8906 	br	ae4c <_gp+0xffff0ae0>
    b428:	197ff804 	addi	r5,r3,-32
    b42c:	01000804 	movi	r4,32
    b430:	414ad83a 	srl	r5,r8,r5
    b434:	19002426 	beq	r3,r4,b4c8 <__adddf3+0x89c>
    b438:	01001004 	movi	r4,64
    b43c:	20c7c83a 	sub	r3,r4,r3
    b440:	40c6983a 	sll	r3,r8,r3
    b444:	1c46b03a 	or	r3,r3,r17
    b448:	1806c03a 	cmpne	r3,r3,zero
    b44c:	28e2b03a 	or	r17,r5,r3
    b450:	0007883a 	mov	r3,zero
    b454:	003f2306 	br	b0e4 <_gp+0xffff0d78>
    b458:	0007883a 	mov	r3,zero
    b45c:	5811883a 	mov	r8,r11
    b460:	00bfffc4 	movi	r2,-1
    b464:	0401ffc4 	movi	r16,2047
    b468:	003e7806 	br	ae4c <_gp+0xffff0ae0>
    b46c:	4462b03a 	or	r17,r8,r17
    b470:	8822c03a 	cmpne	r17,r17,zero
    b474:	0009883a 	mov	r4,zero
    b478:	003fa006 	br	b2fc <_gp+0xffff0f90>
    b47c:	4811883a 	mov	r8,r9
    b480:	3023883a 	mov	r17,r6
    b484:	0401ffc4 	movi	r16,2047
    b488:	003e0706 	br	aca8 <_gp+0xffff093c>
    b48c:	4811883a 	mov	r8,r9
    b490:	3023883a 	mov	r17,r6
    b494:	003e0406 	br	aca8 <_gp+0xffff093c>
    b498:	21fff804 	addi	r7,r4,-32
    b49c:	01400804 	movi	r5,32
    b4a0:	41ced83a 	srl	r7,r8,r7
    b4a4:	21400a26 	beq	r4,r5,b4d0 <__adddf3+0x8a4>
    b4a8:	01401004 	movi	r5,64
    b4ac:	2909c83a 	sub	r4,r5,r4
    b4b0:	4108983a 	sll	r4,r8,r4
    b4b4:	2448b03a 	or	r4,r4,r17
    b4b8:	2008c03a 	cmpne	r4,r4,zero
    b4bc:	3922b03a 	or	r17,r7,r4
    b4c0:	0009883a 	mov	r4,zero
    b4c4:	003f8d06 	br	b2fc <_gp+0xffff0f90>
    b4c8:	0007883a 	mov	r3,zero
    b4cc:	003fdd06 	br	b444 <_gp+0xffff10d8>
    b4d0:	0009883a 	mov	r4,zero
    b4d4:	003ff706 	br	b4b4 <_gp+0xffff1148>

0000b4d8 <__divdf3>:
    b4d8:	defff004 	addi	sp,sp,-64
    b4dc:	dc800815 	stw	r18,32(sp)
    b4e0:	2824d53a 	srli	r18,r5,20
    b4e4:	dd800c15 	stw	r22,48(sp)
    b4e8:	282cd7fa 	srli	r22,r5,31
    b4ec:	dc000615 	stw	r16,24(sp)
    b4f0:	04000434 	movhi	r16,16
    b4f4:	843fffc4 	addi	r16,r16,-1
    b4f8:	dfc00f15 	stw	ra,60(sp)
    b4fc:	df000e15 	stw	fp,56(sp)
    b500:	ddc00d15 	stw	r23,52(sp)
    b504:	dd400b15 	stw	r21,44(sp)
    b508:	dd000a15 	stw	r20,40(sp)
    b50c:	dcc00915 	stw	r19,36(sp)
    b510:	dc400715 	stw	r17,28(sp)
    b514:	9481ffcc 	andi	r18,r18,2047
    b518:	2c20703a 	and	r16,r5,r16
    b51c:	b2003fcc 	andi	r8,r22,255
    b520:	90006126 	beq	r18,zero,b6a8 <__divdf3+0x1d0>
    b524:	0081ffc4 	movi	r2,2047
    b528:	202b883a 	mov	r21,r4
    b52c:	90803726 	beq	r18,r2,b60c <__divdf3+0x134>
    b530:	80800434 	orhi	r2,r16,16
    b534:	100490fa 	slli	r2,r2,3
    b538:	2020d77a 	srli	r16,r4,29
    b53c:	202a90fa 	slli	r21,r4,3
    b540:	94bf0044 	addi	r18,r18,-1023
    b544:	80a0b03a 	or	r16,r16,r2
    b548:	0013883a 	mov	r9,zero
    b54c:	000b883a 	mov	r5,zero
    b550:	3806d53a 	srli	r3,r7,20
    b554:	382ed7fa 	srli	r23,r7,31
    b558:	04400434 	movhi	r17,16
    b55c:	8c7fffc4 	addi	r17,r17,-1
    b560:	18c1ffcc 	andi	r3,r3,2047
    b564:	3029883a 	mov	r20,r6
    b568:	3c62703a 	and	r17,r7,r17
    b56c:	bf003fcc 	andi	fp,r23,255
    b570:	18006e26 	beq	r3,zero,b72c <__divdf3+0x254>
    b574:	0081ffc4 	movi	r2,2047
    b578:	18806626 	beq	r3,r2,b714 <__divdf3+0x23c>
    b57c:	88800434 	orhi	r2,r17,16
    b580:	100490fa 	slli	r2,r2,3
    b584:	3022d77a 	srli	r17,r6,29
    b588:	302890fa 	slli	r20,r6,3
    b58c:	18ff0044 	addi	r3,r3,-1023
    b590:	88a2b03a 	or	r17,r17,r2
    b594:	000f883a 	mov	r7,zero
    b598:	b5e6f03a 	xor	r19,r22,r23
    b59c:	3a4cb03a 	or	r6,r7,r9
    b5a0:	008003c4 	movi	r2,15
    b5a4:	9809883a 	mov	r4,r19
    b5a8:	90c7c83a 	sub	r3,r18,r3
    b5ac:	9cc03fcc 	andi	r19,r19,255
    b5b0:	11809636 	bltu	r2,r6,b80c <__divdf3+0x334>
    b5b4:	300c90ba 	slli	r6,r6,2
    b5b8:	00800074 	movhi	r2,1
    b5bc:	10ad7304 	addi	r2,r2,-18996
    b5c0:	308d883a 	add	r6,r6,r2
    b5c4:	30800017 	ldw	r2,0(r6)
    b5c8:	1000683a 	jmp	r2
    b5cc:	0000b80c 	andi	zero,zero,736
    b5d0:	0000b644 	movi	zero,729
    b5d4:	0000b7fc 	xorhi	zero,zero,735
    b5d8:	0000b638 	rdprs	zero,zero,728
    b5dc:	0000b7fc 	xorhi	zero,zero,735
    b5e0:	0000b7d0 	cmplti	zero,zero,735
    b5e4:	0000b7fc 	xorhi	zero,zero,735
    b5e8:	0000b638 	rdprs	zero,zero,728
    b5ec:	0000b644 	movi	zero,729
    b5f0:	0000b644 	movi	zero,729
    b5f4:	0000b7d0 	cmplti	zero,zero,735
    b5f8:	0000b638 	rdprs	zero,zero,728
    b5fc:	0000b628 	cmpgeui	zero,zero,728
    b600:	0000b628 	cmpgeui	zero,zero,728
    b604:	0000b628 	cmpgeui	zero,zero,728
    b608:	0000bb94 	movui	zero,750
    b60c:	2404b03a 	or	r2,r4,r16
    b610:	10006c1e 	bne	r2,zero,b7c4 <__divdf3+0x2ec>
    b614:	02400204 	movi	r9,8
    b618:	0021883a 	mov	r16,zero
    b61c:	002b883a 	mov	r21,zero
    b620:	01400084 	movi	r5,2
    b624:	003fca06 	br	b550 <_gp+0xffff11e4>
    b628:	8023883a 	mov	r17,r16
    b62c:	a829883a 	mov	r20,r21
    b630:	4039883a 	mov	fp,r8
    b634:	280f883a 	mov	r7,r5
    b638:	00800084 	movi	r2,2
    b63c:	3881601e 	bne	r7,r2,bbc0 <__divdf3+0x6e8>
    b640:	e027883a 	mov	r19,fp
    b644:	9900004c 	andi	r4,r19,1
    b648:	0081ffc4 	movi	r2,2047
    b64c:	0021883a 	mov	r16,zero
    b650:	002b883a 	mov	r21,zero
    b654:	1004953a 	slli	r2,r2,20
    b658:	20c03fcc 	andi	r3,r4,255
    b65c:	01400434 	movhi	r5,16
    b660:	297fffc4 	addi	r5,r5,-1
    b664:	180697fa 	slli	r3,r3,31
    b668:	8160703a 	and	r16,r16,r5
    b66c:	80a0b03a 	or	r16,r16,r2
    b670:	80c6b03a 	or	r3,r16,r3
    b674:	a805883a 	mov	r2,r21
    b678:	dfc00f17 	ldw	ra,60(sp)
    b67c:	df000e17 	ldw	fp,56(sp)
    b680:	ddc00d17 	ldw	r23,52(sp)
    b684:	dd800c17 	ldw	r22,48(sp)
    b688:	dd400b17 	ldw	r21,44(sp)
    b68c:	dd000a17 	ldw	r20,40(sp)
    b690:	dcc00917 	ldw	r19,36(sp)
    b694:	dc800817 	ldw	r18,32(sp)
    b698:	dc400717 	ldw	r17,28(sp)
    b69c:	dc000617 	ldw	r16,24(sp)
    b6a0:	dec01004 	addi	sp,sp,64
    b6a4:	f800283a 	ret
    b6a8:	2404b03a 	or	r2,r4,r16
    b6ac:	2023883a 	mov	r17,r4
    b6b0:	10003f26 	beq	r2,zero,b7b0 <__divdf3+0x2d8>
    b6b4:	80015e26 	beq	r16,zero,bc30 <__divdf3+0x758>
    b6b8:	8009883a 	mov	r4,r16
    b6bc:	d9800215 	stw	r6,8(sp)
    b6c0:	d9c00515 	stw	r7,20(sp)
    b6c4:	da000415 	stw	r8,16(sp)
    b6c8:	000d46c0 	call	d46c <__clzsi2>
    b6cc:	d9800217 	ldw	r6,8(sp)
    b6d0:	d9c00517 	ldw	r7,20(sp)
    b6d4:	da000417 	ldw	r8,16(sp)
    b6d8:	113ffd44 	addi	r4,r2,-11
    b6dc:	00c00704 	movi	r3,28
    b6e0:	19014f16 	blt	r3,r4,bc20 <__divdf3+0x748>
    b6e4:	00c00744 	movi	r3,29
    b6e8:	157ffe04 	addi	r21,r2,-8
    b6ec:	1907c83a 	sub	r3,r3,r4
    b6f0:	8560983a 	sll	r16,r16,r21
    b6f4:	88c6d83a 	srl	r3,r17,r3
    b6f8:	8d6a983a 	sll	r21,r17,r21
    b6fc:	1c20b03a 	or	r16,r3,r16
    b700:	1080fcc4 	addi	r2,r2,1011
    b704:	00a5c83a 	sub	r18,zero,r2
    b708:	0013883a 	mov	r9,zero
    b70c:	000b883a 	mov	r5,zero
    b710:	003f8f06 	br	b550 <_gp+0xffff11e4>
    b714:	3444b03a 	or	r2,r6,r17
    b718:	1000231e 	bne	r2,zero,b7a8 <__divdf3+0x2d0>
    b71c:	0023883a 	mov	r17,zero
    b720:	0029883a 	mov	r20,zero
    b724:	01c00084 	movi	r7,2
    b728:	003f9b06 	br	b598 <_gp+0xffff122c>
    b72c:	3444b03a 	or	r2,r6,r17
    b730:	10001926 	beq	r2,zero,b798 <__divdf3+0x2c0>
    b734:	88014b26 	beq	r17,zero,bc64 <__divdf3+0x78c>
    b738:	8809883a 	mov	r4,r17
    b73c:	d9400115 	stw	r5,4(sp)
    b740:	d9800215 	stw	r6,8(sp)
    b744:	da000415 	stw	r8,16(sp)
    b748:	da400315 	stw	r9,12(sp)
    b74c:	000d46c0 	call	d46c <__clzsi2>
    b750:	d9400117 	ldw	r5,4(sp)
    b754:	d9800217 	ldw	r6,8(sp)
    b758:	da000417 	ldw	r8,16(sp)
    b75c:	da400317 	ldw	r9,12(sp)
    b760:	113ffd44 	addi	r4,r2,-11
    b764:	00c00704 	movi	r3,28
    b768:	19013a16 	blt	r3,r4,bc54 <__divdf3+0x77c>
    b76c:	00c00744 	movi	r3,29
    b770:	153ffe04 	addi	r20,r2,-8
    b774:	1907c83a 	sub	r3,r3,r4
    b778:	8d22983a 	sll	r17,r17,r20
    b77c:	30c6d83a 	srl	r3,r6,r3
    b780:	3528983a 	sll	r20,r6,r20
    b784:	1c62b03a 	or	r17,r3,r17
    b788:	1080fcc4 	addi	r2,r2,1011
    b78c:	0087c83a 	sub	r3,zero,r2
    b790:	000f883a 	mov	r7,zero
    b794:	003f8006 	br	b598 <_gp+0xffff122c>
    b798:	0023883a 	mov	r17,zero
    b79c:	0029883a 	mov	r20,zero
    b7a0:	01c00044 	movi	r7,1
    b7a4:	003f7c06 	br	b598 <_gp+0xffff122c>
    b7a8:	01c000c4 	movi	r7,3
    b7ac:	003f7a06 	br	b598 <_gp+0xffff122c>
    b7b0:	02400104 	movi	r9,4
    b7b4:	0021883a 	mov	r16,zero
    b7b8:	002b883a 	mov	r21,zero
    b7bc:	01400044 	movi	r5,1
    b7c0:	003f6306 	br	b550 <_gp+0xffff11e4>
    b7c4:	02400304 	movi	r9,12
    b7c8:	014000c4 	movi	r5,3
    b7cc:	003f6006 	br	b550 <_gp+0xffff11e4>
    b7d0:	04000434 	movhi	r16,16
    b7d4:	0009883a 	mov	r4,zero
    b7d8:	843fffc4 	addi	r16,r16,-1
    b7dc:	057fffc4 	movi	r21,-1
    b7e0:	0081ffc4 	movi	r2,2047
    b7e4:	003f9b06 	br	b654 <_gp+0xffff12e8>
    b7e8:	00c00044 	movi	r3,1
    b7ec:	1887c83a 	sub	r3,r3,r2
    b7f0:	01000e04 	movi	r4,56
    b7f4:	20c1530e 	bge	r4,r3,bd44 <__divdf3+0x86c>
    b7f8:	9900004c 	andi	r4,r19,1
    b7fc:	0005883a 	mov	r2,zero
    b800:	0021883a 	mov	r16,zero
    b804:	002b883a 	mov	r21,zero
    b808:	003f9206 	br	b654 <_gp+0xffff12e8>
    b80c:	8c012e36 	bltu	r17,r16,bcc8 <__divdf3+0x7f0>
    b810:	84412c26 	beq	r16,r17,bcc4 <__divdf3+0x7ec>
    b814:	a82f883a 	mov	r23,r21
    b818:	18ffffc4 	addi	r3,r3,-1
    b81c:	002b883a 	mov	r21,zero
    b820:	a004d63a 	srli	r2,r20,24
    b824:	8822923a 	slli	r17,r17,8
    b828:	a028923a 	slli	r20,r20,8
    b82c:	8009883a 	mov	r4,r16
    b830:	88acb03a 	or	r22,r17,r2
    b834:	dd000015 	stw	r20,0(sp)
    b838:	b028d43a 	srli	r20,r22,16
    b83c:	d8c00215 	stw	r3,8(sp)
    b840:	b4bfffcc 	andi	r18,r22,65535
    b844:	a00b883a 	mov	r5,r20
    b848:	000ab700 	call	ab70 <__udivsi3>
    b84c:	100b883a 	mov	r5,r2
    b850:	9009883a 	mov	r4,r18
    b854:	1023883a 	mov	r17,r2
    b858:	000049c0 	call	49c <__mulsi3>
    b85c:	8009883a 	mov	r4,r16
    b860:	a00b883a 	mov	r5,r20
    b864:	1039883a 	mov	fp,r2
    b868:	000abd40 	call	abd4 <__umodsi3>
    b86c:	1004943a 	slli	r2,r2,16
    b870:	b808d43a 	srli	r4,r23,16
    b874:	d8c00217 	ldw	r3,8(sp)
    b878:	2084b03a 	or	r2,r4,r2
    b87c:	1700062e 	bgeu	r2,fp,b898 <__divdf3+0x3c0>
    b880:	1585883a 	add	r2,r2,r22
    b884:	893fffc4 	addi	r4,r17,-1
    b888:	15811d36 	bltu	r2,r22,bd00 <__divdf3+0x828>
    b88c:	17011c2e 	bgeu	r2,fp,bd00 <__divdf3+0x828>
    b890:	8c7fff84 	addi	r17,r17,-2
    b894:	1585883a 	add	r2,r2,r22
    b898:	1739c83a 	sub	fp,r2,fp
    b89c:	a00b883a 	mov	r5,r20
    b8a0:	e009883a 	mov	r4,fp
    b8a4:	d8c00215 	stw	r3,8(sp)
    b8a8:	000ab700 	call	ab70 <__udivsi3>
    b8ac:	100b883a 	mov	r5,r2
    b8b0:	9009883a 	mov	r4,r18
    b8b4:	1021883a 	mov	r16,r2
    b8b8:	000049c0 	call	49c <__mulsi3>
    b8bc:	a00b883a 	mov	r5,r20
    b8c0:	e009883a 	mov	r4,fp
    b8c4:	d8800415 	stw	r2,16(sp)
    b8c8:	000abd40 	call	abd4 <__umodsi3>
    b8cc:	1004943a 	slli	r2,r2,16
    b8d0:	da000417 	ldw	r8,16(sp)
    b8d4:	bdffffcc 	andi	r23,r23,65535
    b8d8:	b884b03a 	or	r2,r23,r2
    b8dc:	d8c00217 	ldw	r3,8(sp)
    b8e0:	1200062e 	bgeu	r2,r8,b8fc <__divdf3+0x424>
    b8e4:	1585883a 	add	r2,r2,r22
    b8e8:	813fffc4 	addi	r4,r16,-1
    b8ec:	15810236 	bltu	r2,r22,bcf8 <__divdf3+0x820>
    b8f0:	1201012e 	bgeu	r2,r8,bcf8 <__divdf3+0x820>
    b8f4:	843fff84 	addi	r16,r16,-2
    b8f8:	1585883a 	add	r2,r2,r22
    b8fc:	8822943a 	slli	r17,r17,16
    b900:	d9800017 	ldw	r6,0(sp)
    b904:	1211c83a 	sub	r8,r2,r8
    b908:	8c22b03a 	or	r17,r17,r16
    b90c:	373fffcc 	andi	fp,r6,65535
    b910:	8abfffcc 	andi	r10,r17,65535
    b914:	8820d43a 	srli	r16,r17,16
    b918:	5009883a 	mov	r4,r10
    b91c:	e00b883a 	mov	r5,fp
    b920:	302ed43a 	srli	r23,r6,16
    b924:	d8c00215 	stw	r3,8(sp)
    b928:	da000415 	stw	r8,16(sp)
    b92c:	da800115 	stw	r10,4(sp)
    b930:	000049c0 	call	49c <__mulsi3>
    b934:	800b883a 	mov	r5,r16
    b938:	e009883a 	mov	r4,fp
    b93c:	d8800515 	stw	r2,20(sp)
    b940:	000049c0 	call	49c <__mulsi3>
    b944:	8009883a 	mov	r4,r16
    b948:	b80b883a 	mov	r5,r23
    b94c:	d8800315 	stw	r2,12(sp)
    b950:	000049c0 	call	49c <__mulsi3>
    b954:	da800117 	ldw	r10,4(sp)
    b958:	b80b883a 	mov	r5,r23
    b95c:	1021883a 	mov	r16,r2
    b960:	5009883a 	mov	r4,r10
    b964:	000049c0 	call	49c <__mulsi3>
    b968:	d9c00517 	ldw	r7,20(sp)
    b96c:	da400317 	ldw	r9,12(sp)
    b970:	d8c00217 	ldw	r3,8(sp)
    b974:	3808d43a 	srli	r4,r7,16
    b978:	1245883a 	add	r2,r2,r9
    b97c:	da000417 	ldw	r8,16(sp)
    b980:	2085883a 	add	r2,r4,r2
    b984:	1240022e 	bgeu	r2,r9,b990 <__divdf3+0x4b8>
    b988:	01000074 	movhi	r4,1
    b98c:	8121883a 	add	r16,r16,r4
    b990:	1008d43a 	srli	r4,r2,16
    b994:	1004943a 	slli	r2,r2,16
    b998:	39ffffcc 	andi	r7,r7,65535
    b99c:	2409883a 	add	r4,r4,r16
    b9a0:	11c5883a 	add	r2,r2,r7
    b9a4:	4100bb36 	bltu	r8,r4,bc94 <__divdf3+0x7bc>
    b9a8:	4100d726 	beq	r8,r4,bd08 <__divdf3+0x830>
    b9ac:	4109c83a 	sub	r4,r8,r4
    b9b0:	a8a1c83a 	sub	r16,r21,r2
    b9b4:	ac2b803a 	cmpltu	r21,r21,r16
    b9b8:	256bc83a 	sub	r21,r4,r21
    b9bc:	b540d926 	beq	r22,r21,bd24 <__divdf3+0x84c>
    b9c0:	a00b883a 	mov	r5,r20
    b9c4:	a809883a 	mov	r4,r21
    b9c8:	d8c00215 	stw	r3,8(sp)
    b9cc:	000ab700 	call	ab70 <__udivsi3>
    b9d0:	100b883a 	mov	r5,r2
    b9d4:	9009883a 	mov	r4,r18
    b9d8:	d8800515 	stw	r2,20(sp)
    b9dc:	000049c0 	call	49c <__mulsi3>
    b9e0:	a809883a 	mov	r4,r21
    b9e4:	a00b883a 	mov	r5,r20
    b9e8:	d8800415 	stw	r2,16(sp)
    b9ec:	000abd40 	call	abd4 <__umodsi3>
    b9f0:	1004943a 	slli	r2,r2,16
    b9f4:	8008d43a 	srli	r4,r16,16
    b9f8:	da000417 	ldw	r8,16(sp)
    b9fc:	d8c00217 	ldw	r3,8(sp)
    ba00:	2084b03a 	or	r2,r4,r2
    ba04:	d9c00517 	ldw	r7,20(sp)
    ba08:	1200062e 	bgeu	r2,r8,ba24 <__divdf3+0x54c>
    ba0c:	1585883a 	add	r2,r2,r22
    ba10:	393fffc4 	addi	r4,r7,-1
    ba14:	1580c536 	bltu	r2,r22,bd2c <__divdf3+0x854>
    ba18:	1200c42e 	bgeu	r2,r8,bd2c <__divdf3+0x854>
    ba1c:	39ffff84 	addi	r7,r7,-2
    ba20:	1585883a 	add	r2,r2,r22
    ba24:	122bc83a 	sub	r21,r2,r8
    ba28:	a00b883a 	mov	r5,r20
    ba2c:	a809883a 	mov	r4,r21
    ba30:	d8c00215 	stw	r3,8(sp)
    ba34:	d9c00515 	stw	r7,20(sp)
    ba38:	000ab700 	call	ab70 <__udivsi3>
    ba3c:	9009883a 	mov	r4,r18
    ba40:	100b883a 	mov	r5,r2
    ba44:	d8800415 	stw	r2,16(sp)
    ba48:	000049c0 	call	49c <__mulsi3>
    ba4c:	a809883a 	mov	r4,r21
    ba50:	a00b883a 	mov	r5,r20
    ba54:	1025883a 	mov	r18,r2
    ba58:	000abd40 	call	abd4 <__umodsi3>
    ba5c:	1004943a 	slli	r2,r2,16
    ba60:	813fffcc 	andi	r4,r16,65535
    ba64:	d8c00217 	ldw	r3,8(sp)
    ba68:	20a0b03a 	or	r16,r4,r2
    ba6c:	d9c00517 	ldw	r7,20(sp)
    ba70:	da000417 	ldw	r8,16(sp)
    ba74:	8480062e 	bgeu	r16,r18,ba90 <__divdf3+0x5b8>
    ba78:	85a1883a 	add	r16,r16,r22
    ba7c:	40bfffc4 	addi	r2,r8,-1
    ba80:	8580ac36 	bltu	r16,r22,bd34 <__divdf3+0x85c>
    ba84:	8480ab2e 	bgeu	r16,r18,bd34 <__divdf3+0x85c>
    ba88:	423fff84 	addi	r8,r8,-2
    ba8c:	85a1883a 	add	r16,r16,r22
    ba90:	3804943a 	slli	r2,r7,16
    ba94:	84a1c83a 	sub	r16,r16,r18
    ba98:	e009883a 	mov	r4,fp
    ba9c:	1228b03a 	or	r20,r2,r8
    baa0:	a1ffffcc 	andi	r7,r20,65535
    baa4:	a024d43a 	srli	r18,r20,16
    baa8:	380b883a 	mov	r5,r7
    baac:	d8c00215 	stw	r3,8(sp)
    bab0:	d9c00515 	stw	r7,20(sp)
    bab4:	000049c0 	call	49c <__mulsi3>
    bab8:	900b883a 	mov	r5,r18
    babc:	e009883a 	mov	r4,fp
    bac0:	102b883a 	mov	r21,r2
    bac4:	000049c0 	call	49c <__mulsi3>
    bac8:	900b883a 	mov	r5,r18
    bacc:	b809883a 	mov	r4,r23
    bad0:	1039883a 	mov	fp,r2
    bad4:	000049c0 	call	49c <__mulsi3>
    bad8:	d9c00517 	ldw	r7,20(sp)
    badc:	b80b883a 	mov	r5,r23
    bae0:	1025883a 	mov	r18,r2
    bae4:	3809883a 	mov	r4,r7
    bae8:	000049c0 	call	49c <__mulsi3>
    baec:	a808d43a 	srli	r4,r21,16
    baf0:	1705883a 	add	r2,r2,fp
    baf4:	d8c00217 	ldw	r3,8(sp)
    baf8:	2085883a 	add	r2,r4,r2
    bafc:	1700022e 	bgeu	r2,fp,bb08 <__divdf3+0x630>
    bb00:	01000074 	movhi	r4,1
    bb04:	9125883a 	add	r18,r18,r4
    bb08:	1008d43a 	srli	r4,r2,16
    bb0c:	1004943a 	slli	r2,r2,16
    bb10:	ad7fffcc 	andi	r21,r21,65535
    bb14:	2489883a 	add	r4,r4,r18
    bb18:	1545883a 	add	r2,r2,r21
    bb1c:	81003836 	bltu	r16,r4,bc00 <__divdf3+0x728>
    bb20:	81003626 	beq	r16,r4,bbfc <__divdf3+0x724>
    bb24:	a5000054 	ori	r20,r20,1
    bb28:	1880ffc4 	addi	r2,r3,1023
    bb2c:	00bf2e0e 	bge	zero,r2,b7e8 <_gp+0xffff147c>
    bb30:	a10001cc 	andi	r4,r20,7
    bb34:	20000726 	beq	r4,zero,bb54 <__divdf3+0x67c>
    bb38:	a10003cc 	andi	r4,r20,15
    bb3c:	01400104 	movi	r5,4
    bb40:	21400426 	beq	r4,r5,bb54 <__divdf3+0x67c>
    bb44:	a149883a 	add	r4,r20,r5
    bb48:	2529803a 	cmpltu	r20,r4,r20
    bb4c:	8d23883a 	add	r17,r17,r20
    bb50:	2029883a 	mov	r20,r4
    bb54:	8900402c 	andhi	r4,r17,256
    bb58:	20000426 	beq	r4,zero,bb6c <__divdf3+0x694>
    bb5c:	18810004 	addi	r2,r3,1024
    bb60:	00ffc034 	movhi	r3,65280
    bb64:	18ffffc4 	addi	r3,r3,-1
    bb68:	88e2703a 	and	r17,r17,r3
    bb6c:	00c1ff84 	movi	r3,2046
    bb70:	18beb416 	blt	r3,r2,b644 <_gp+0xffff12d8>
    bb74:	a028d0fa 	srli	r20,r20,3
    bb78:	882a977a 	slli	r21,r17,29
    bb7c:	8820927a 	slli	r16,r17,9
    bb80:	1081ffcc 	andi	r2,r2,2047
    bb84:	ad2ab03a 	or	r21,r21,r20
    bb88:	8020d33a 	srli	r16,r16,12
    bb8c:	9900004c 	andi	r4,r19,1
    bb90:	003eb006 	br	b654 <_gp+0xffff12e8>
    bb94:	8080022c 	andhi	r2,r16,8
    bb98:	10001226 	beq	r2,zero,bbe4 <__divdf3+0x70c>
    bb9c:	8880022c 	andhi	r2,r17,8
    bba0:	1000101e 	bne	r2,zero,bbe4 <__divdf3+0x70c>
    bba4:	00800434 	movhi	r2,16
    bba8:	8c000234 	orhi	r16,r17,8
    bbac:	10bfffc4 	addi	r2,r2,-1
    bbb0:	b809883a 	mov	r4,r23
    bbb4:	80a0703a 	and	r16,r16,r2
    bbb8:	a02b883a 	mov	r21,r20
    bbbc:	003f0806 	br	b7e0 <_gp+0xffff1474>
    bbc0:	008000c4 	movi	r2,3
    bbc4:	3880b126 	beq	r7,r2,be8c <__divdf3+0x9b4>
    bbc8:	00800044 	movi	r2,1
    bbcc:	38805b1e 	bne	r7,r2,bd3c <__divdf3+0x864>
    bbd0:	e009883a 	mov	r4,fp
    bbd4:	0005883a 	mov	r2,zero
    bbd8:	0021883a 	mov	r16,zero
    bbdc:	002b883a 	mov	r21,zero
    bbe0:	003e9c06 	br	b654 <_gp+0xffff12e8>
    bbe4:	00800434 	movhi	r2,16
    bbe8:	84000234 	orhi	r16,r16,8
    bbec:	10bfffc4 	addi	r2,r2,-1
    bbf0:	b009883a 	mov	r4,r22
    bbf4:	80a0703a 	and	r16,r16,r2
    bbf8:	003ef906 	br	b7e0 <_gp+0xffff1474>
    bbfc:	103fca26 	beq	r2,zero,bb28 <_gp+0xffff17bc>
    bc00:	b421883a 	add	r16,r22,r16
    bc04:	a17fffc4 	addi	r5,r20,-1
    bc08:	8580422e 	bgeu	r16,r22,bd14 <__divdf3+0x83c>
    bc0c:	2829883a 	mov	r20,r5
    bc10:	813fc41e 	bne	r16,r4,bb24 <_gp+0xffff17b8>
    bc14:	d9800017 	ldw	r6,0(sp)
    bc18:	30bfc21e 	bne	r6,r2,bb24 <_gp+0xffff17b8>
    bc1c:	003fc206 	br	bb28 <_gp+0xffff17bc>
    bc20:	143ff604 	addi	r16,r2,-40
    bc24:	8c20983a 	sll	r16,r17,r16
    bc28:	002b883a 	mov	r21,zero
    bc2c:	003eb406 	br	b700 <_gp+0xffff1394>
    bc30:	d9800215 	stw	r6,8(sp)
    bc34:	d9c00515 	stw	r7,20(sp)
    bc38:	da000415 	stw	r8,16(sp)
    bc3c:	000d46c0 	call	d46c <__clzsi2>
    bc40:	10800804 	addi	r2,r2,32
    bc44:	da000417 	ldw	r8,16(sp)
    bc48:	d9c00517 	ldw	r7,20(sp)
    bc4c:	d9800217 	ldw	r6,8(sp)
    bc50:	003ea106 	br	b6d8 <_gp+0xffff136c>
    bc54:	147ff604 	addi	r17,r2,-40
    bc58:	3462983a 	sll	r17,r6,r17
    bc5c:	0029883a 	mov	r20,zero
    bc60:	003ec906 	br	b788 <_gp+0xffff141c>
    bc64:	3009883a 	mov	r4,r6
    bc68:	d9400115 	stw	r5,4(sp)
    bc6c:	d9800215 	stw	r6,8(sp)
    bc70:	da000415 	stw	r8,16(sp)
    bc74:	da400315 	stw	r9,12(sp)
    bc78:	000d46c0 	call	d46c <__clzsi2>
    bc7c:	10800804 	addi	r2,r2,32
    bc80:	da400317 	ldw	r9,12(sp)
    bc84:	da000417 	ldw	r8,16(sp)
    bc88:	d9800217 	ldw	r6,8(sp)
    bc8c:	d9400117 	ldw	r5,4(sp)
    bc90:	003eb306 	br	b760 <_gp+0xffff13f4>
    bc94:	d9800017 	ldw	r6,0(sp)
    bc98:	a9ab883a 	add	r21,r21,r6
    bc9c:	a98b803a 	cmpltu	r5,r21,r6
    bca0:	2d8b883a 	add	r5,r5,r22
    bca4:	2a11883a 	add	r8,r5,r8
    bca8:	897fffc4 	addi	r5,r17,-1
    bcac:	b2000c2e 	bgeu	r22,r8,bce0 <__divdf3+0x808>
    bcb0:	41003f36 	bltu	r8,r4,bdb0 <__divdf3+0x8d8>
    bcb4:	22006c26 	beq	r4,r8,be68 <__divdf3+0x990>
    bcb8:	4109c83a 	sub	r4,r8,r4
    bcbc:	2823883a 	mov	r17,r5
    bcc0:	003f3b06 	br	b9b0 <_gp+0xffff1644>
    bcc4:	ad3ed336 	bltu	r21,r20,b814 <_gp+0xffff14a8>
    bcc8:	a804d07a 	srli	r2,r21,1
    bccc:	802e97fa 	slli	r23,r16,31
    bcd0:	a82a97fa 	slli	r21,r21,31
    bcd4:	8020d07a 	srli	r16,r16,1
    bcd8:	b8aeb03a 	or	r23,r23,r2
    bcdc:	003ed006 	br	b820 <_gp+0xffff14b4>
    bce0:	b23ff51e 	bne	r22,r8,bcb8 <_gp+0xffff194c>
    bce4:	d9800017 	ldw	r6,0(sp)
    bce8:	a9bff12e 	bgeu	r21,r6,bcb0 <_gp+0xffff1944>
    bcec:	b109c83a 	sub	r4,r22,r4
    bcf0:	2823883a 	mov	r17,r5
    bcf4:	003f2e06 	br	b9b0 <_gp+0xffff1644>
    bcf8:	2021883a 	mov	r16,r4
    bcfc:	003eff06 	br	b8fc <_gp+0xffff1590>
    bd00:	2023883a 	mov	r17,r4
    bd04:	003ee406 	br	b898 <_gp+0xffff152c>
    bd08:	a8bfe236 	bltu	r21,r2,bc94 <_gp+0xffff1928>
    bd0c:	0009883a 	mov	r4,zero
    bd10:	003f2706 	br	b9b0 <_gp+0xffff1644>
    bd14:	81002d36 	bltu	r16,r4,bdcc <__divdf3+0x8f4>
    bd18:	24005626 	beq	r4,r16,be74 <__divdf3+0x99c>
    bd1c:	2829883a 	mov	r20,r5
    bd20:	003f8006 	br	bb24 <_gp+0xffff17b8>
    bd24:	053fffc4 	movi	r20,-1
    bd28:	003f7f06 	br	bb28 <_gp+0xffff17bc>
    bd2c:	200f883a 	mov	r7,r4
    bd30:	003f3c06 	br	ba24 <_gp+0xffff16b8>
    bd34:	1011883a 	mov	r8,r2
    bd38:	003f5506 	br	ba90 <_gp+0xffff1724>
    bd3c:	e027883a 	mov	r19,fp
    bd40:	003f7906 	br	bb28 <_gp+0xffff17bc>
    bd44:	010007c4 	movi	r4,31
    bd48:	20c02816 	blt	r4,r3,bdec <__divdf3+0x914>
    bd4c:	00800804 	movi	r2,32
    bd50:	10c5c83a 	sub	r2,r2,r3
    bd54:	888a983a 	sll	r5,r17,r2
    bd58:	a0c8d83a 	srl	r4,r20,r3
    bd5c:	a084983a 	sll	r2,r20,r2
    bd60:	88e2d83a 	srl	r17,r17,r3
    bd64:	2906b03a 	or	r3,r5,r4
    bd68:	1004c03a 	cmpne	r2,r2,zero
    bd6c:	1886b03a 	or	r3,r3,r2
    bd70:	188001cc 	andi	r2,r3,7
    bd74:	10000726 	beq	r2,zero,bd94 <__divdf3+0x8bc>
    bd78:	188003cc 	andi	r2,r3,15
    bd7c:	01000104 	movi	r4,4
    bd80:	11000426 	beq	r2,r4,bd94 <__divdf3+0x8bc>
    bd84:	1805883a 	mov	r2,r3
    bd88:	10c00104 	addi	r3,r2,4
    bd8c:	1885803a 	cmpltu	r2,r3,r2
    bd90:	88a3883a 	add	r17,r17,r2
    bd94:	8880202c 	andhi	r2,r17,128
    bd98:	10002926 	beq	r2,zero,be40 <__divdf3+0x968>
    bd9c:	9900004c 	andi	r4,r19,1
    bda0:	00800044 	movi	r2,1
    bda4:	0021883a 	mov	r16,zero
    bda8:	002b883a 	mov	r21,zero
    bdac:	003e2906 	br	b654 <_gp+0xffff12e8>
    bdb0:	d9800017 	ldw	r6,0(sp)
    bdb4:	8c7fff84 	addi	r17,r17,-2
    bdb8:	a9ab883a 	add	r21,r21,r6
    bdbc:	a98b803a 	cmpltu	r5,r21,r6
    bdc0:	2d8b883a 	add	r5,r5,r22
    bdc4:	2a11883a 	add	r8,r5,r8
    bdc8:	003ef806 	br	b9ac <_gp+0xffff1640>
    bdcc:	d9800017 	ldw	r6,0(sp)
    bdd0:	318f883a 	add	r7,r6,r6
    bdd4:	398b803a 	cmpltu	r5,r7,r6
    bdd8:	2d8d883a 	add	r6,r5,r22
    bddc:	81a1883a 	add	r16,r16,r6
    bde0:	a17fff84 	addi	r5,r20,-2
    bde4:	d9c00015 	stw	r7,0(sp)
    bde8:	003f8806 	br	bc0c <_gp+0xffff18a0>
    bdec:	013ff844 	movi	r4,-31
    bdf0:	2085c83a 	sub	r2,r4,r2
    bdf4:	8888d83a 	srl	r4,r17,r2
    bdf8:	00800804 	movi	r2,32
    bdfc:	18802126 	beq	r3,r2,be84 <__divdf3+0x9ac>
    be00:	04001004 	movi	r16,64
    be04:	80c7c83a 	sub	r3,r16,r3
    be08:	88e0983a 	sll	r16,r17,r3
    be0c:	8504b03a 	or	r2,r16,r20
    be10:	1004c03a 	cmpne	r2,r2,zero
    be14:	2084b03a 	or	r2,r4,r2
    be18:	144001cc 	andi	r17,r2,7
    be1c:	88000d1e 	bne	r17,zero,be54 <__divdf3+0x97c>
    be20:	0021883a 	mov	r16,zero
    be24:	102ad0fa 	srli	r21,r2,3
    be28:	9900004c 	andi	r4,r19,1
    be2c:	0005883a 	mov	r2,zero
    be30:	ac6ab03a 	or	r21,r21,r17
    be34:	003e0706 	br	b654 <_gp+0xffff12e8>
    be38:	1007883a 	mov	r3,r2
    be3c:	0023883a 	mov	r17,zero
    be40:	8820927a 	slli	r16,r17,9
    be44:	1805883a 	mov	r2,r3
    be48:	8822977a 	slli	r17,r17,29
    be4c:	8020d33a 	srli	r16,r16,12
    be50:	003ff406 	br	be24 <_gp+0xffff1ab8>
    be54:	10c003cc 	andi	r3,r2,15
    be58:	01000104 	movi	r4,4
    be5c:	193ff626 	beq	r3,r4,be38 <_gp+0xffff1acc>
    be60:	0023883a 	mov	r17,zero
    be64:	003fc806 	br	bd88 <_gp+0xffff1a1c>
    be68:	a8bfd136 	bltu	r21,r2,bdb0 <_gp+0xffff1a44>
    be6c:	2823883a 	mov	r17,r5
    be70:	003fa606 	br	bd0c <_gp+0xffff19a0>
    be74:	d9800017 	ldw	r6,0(sp)
    be78:	30bfd436 	bltu	r6,r2,bdcc <_gp+0xffff1a60>
    be7c:	2829883a 	mov	r20,r5
    be80:	003f6406 	br	bc14 <_gp+0xffff18a8>
    be84:	0021883a 	mov	r16,zero
    be88:	003fe006 	br	be0c <_gp+0xffff1aa0>
    be8c:	00800434 	movhi	r2,16
    be90:	8c000234 	orhi	r16,r17,8
    be94:	10bfffc4 	addi	r2,r2,-1
    be98:	e009883a 	mov	r4,fp
    be9c:	80a0703a 	and	r16,r16,r2
    bea0:	a02b883a 	mov	r21,r20
    bea4:	003e4e06 	br	b7e0 <_gp+0xffff1474>

0000bea8 <__eqdf2>:
    bea8:	2804d53a 	srli	r2,r5,20
    beac:	3806d53a 	srli	r3,r7,20
    beb0:	02000434 	movhi	r8,16
    beb4:	423fffc4 	addi	r8,r8,-1
    beb8:	1081ffcc 	andi	r2,r2,2047
    bebc:	0281ffc4 	movi	r10,2047
    bec0:	2a12703a 	and	r9,r5,r8
    bec4:	18c1ffcc 	andi	r3,r3,2047
    bec8:	3a10703a 	and	r8,r7,r8
    becc:	280ad7fa 	srli	r5,r5,31
    bed0:	380ed7fa 	srli	r7,r7,31
    bed4:	12801026 	beq	r2,r10,bf18 <__eqdf2+0x70>
    bed8:	0281ffc4 	movi	r10,2047
    bedc:	1a800a26 	beq	r3,r10,bf08 <__eqdf2+0x60>
    bee0:	10c00226 	beq	r2,r3,beec <__eqdf2+0x44>
    bee4:	00800044 	movi	r2,1
    bee8:	f800283a 	ret
    beec:	4a3ffd1e 	bne	r9,r8,bee4 <_gp+0xffff1b78>
    bef0:	21bffc1e 	bne	r4,r6,bee4 <_gp+0xffff1b78>
    bef4:	29c00c26 	beq	r5,r7,bf28 <__eqdf2+0x80>
    bef8:	103ffa1e 	bne	r2,zero,bee4 <_gp+0xffff1b78>
    befc:	2244b03a 	or	r2,r4,r9
    bf00:	1004c03a 	cmpne	r2,r2,zero
    bf04:	f800283a 	ret
    bf08:	3214b03a 	or	r10,r6,r8
    bf0c:	503ff426 	beq	r10,zero,bee0 <_gp+0xffff1b74>
    bf10:	00800044 	movi	r2,1
    bf14:	f800283a 	ret
    bf18:	2254b03a 	or	r10,r4,r9
    bf1c:	503fee26 	beq	r10,zero,bed8 <_gp+0xffff1b6c>
    bf20:	00800044 	movi	r2,1
    bf24:	f800283a 	ret
    bf28:	0005883a 	mov	r2,zero
    bf2c:	f800283a 	ret

0000bf30 <__gedf2>:
    bf30:	2804d53a 	srli	r2,r5,20
    bf34:	3806d53a 	srli	r3,r7,20
    bf38:	02000434 	movhi	r8,16
    bf3c:	423fffc4 	addi	r8,r8,-1
    bf40:	1081ffcc 	andi	r2,r2,2047
    bf44:	0241ffc4 	movi	r9,2047
    bf48:	2a14703a 	and	r10,r5,r8
    bf4c:	18c1ffcc 	andi	r3,r3,2047
    bf50:	3a10703a 	and	r8,r7,r8
    bf54:	280ad7fa 	srli	r5,r5,31
    bf58:	380ed7fa 	srli	r7,r7,31
    bf5c:	12401d26 	beq	r2,r9,bfd4 <__gedf2+0xa4>
    bf60:	0241ffc4 	movi	r9,2047
    bf64:	1a401226 	beq	r3,r9,bfb0 <__gedf2+0x80>
    bf68:	1000081e 	bne	r2,zero,bf8c <__gedf2+0x5c>
    bf6c:	2296b03a 	or	r11,r4,r10
    bf70:	5813003a 	cmpeq	r9,r11,zero
    bf74:	1800091e 	bne	r3,zero,bf9c <__gedf2+0x6c>
    bf78:	3218b03a 	or	r12,r6,r8
    bf7c:	6000071e 	bne	r12,zero,bf9c <__gedf2+0x6c>
    bf80:	0005883a 	mov	r2,zero
    bf84:	5800101e 	bne	r11,zero,bfc8 <__gedf2+0x98>
    bf88:	f800283a 	ret
    bf8c:	18000c1e 	bne	r3,zero,bfc0 <__gedf2+0x90>
    bf90:	3212b03a 	or	r9,r6,r8
    bf94:	48000c26 	beq	r9,zero,bfc8 <__gedf2+0x98>
    bf98:	0013883a 	mov	r9,zero
    bf9c:	39c03fcc 	andi	r7,r7,255
    bfa0:	48000826 	beq	r9,zero,bfc4 <__gedf2+0x94>
    bfa4:	38000926 	beq	r7,zero,bfcc <__gedf2+0x9c>
    bfa8:	00800044 	movi	r2,1
    bfac:	f800283a 	ret
    bfb0:	3212b03a 	or	r9,r6,r8
    bfb4:	483fec26 	beq	r9,zero,bf68 <_gp+0xffff1bfc>
    bfb8:	00bfff84 	movi	r2,-2
    bfbc:	f800283a 	ret
    bfc0:	39c03fcc 	andi	r7,r7,255
    bfc4:	29c00626 	beq	r5,r7,bfe0 <__gedf2+0xb0>
    bfc8:	283ff726 	beq	r5,zero,bfa8 <_gp+0xffff1c3c>
    bfcc:	00bfffc4 	movi	r2,-1
    bfd0:	f800283a 	ret
    bfd4:	2292b03a 	or	r9,r4,r10
    bfd8:	483fe126 	beq	r9,zero,bf60 <_gp+0xffff1bf4>
    bfdc:	003ff606 	br	bfb8 <_gp+0xffff1c4c>
    bfe0:	18bff916 	blt	r3,r2,bfc8 <_gp+0xffff1c5c>
    bfe4:	10c00316 	blt	r2,r3,bff4 <__gedf2+0xc4>
    bfe8:	42bff736 	bltu	r8,r10,bfc8 <_gp+0xffff1c5c>
    bfec:	52000326 	beq	r10,r8,bffc <__gedf2+0xcc>
    bff0:	5200042e 	bgeu	r10,r8,c004 <__gedf2+0xd4>
    bff4:	283fec1e 	bne	r5,zero,bfa8 <_gp+0xffff1c3c>
    bff8:	003ff406 	br	bfcc <_gp+0xffff1c60>
    bffc:	313ff236 	bltu	r6,r4,bfc8 <_gp+0xffff1c5c>
    c000:	21bffc36 	bltu	r4,r6,bff4 <_gp+0xffff1c88>
    c004:	0005883a 	mov	r2,zero
    c008:	f800283a 	ret

0000c00c <__ledf2>:
    c00c:	2804d53a 	srli	r2,r5,20
    c010:	3810d53a 	srli	r8,r7,20
    c014:	00c00434 	movhi	r3,16
    c018:	18ffffc4 	addi	r3,r3,-1
    c01c:	1081ffcc 	andi	r2,r2,2047
    c020:	0241ffc4 	movi	r9,2047
    c024:	28d4703a 	and	r10,r5,r3
    c028:	4201ffcc 	andi	r8,r8,2047
    c02c:	38c6703a 	and	r3,r7,r3
    c030:	280ad7fa 	srli	r5,r5,31
    c034:	380ed7fa 	srli	r7,r7,31
    c038:	12401f26 	beq	r2,r9,c0b8 <__ledf2+0xac>
    c03c:	0241ffc4 	movi	r9,2047
    c040:	42401426 	beq	r8,r9,c094 <__ledf2+0x88>
    c044:	1000091e 	bne	r2,zero,c06c <__ledf2+0x60>
    c048:	2296b03a 	or	r11,r4,r10
    c04c:	5813003a 	cmpeq	r9,r11,zero
    c050:	29403fcc 	andi	r5,r5,255
    c054:	40000a1e 	bne	r8,zero,c080 <__ledf2+0x74>
    c058:	30d8b03a 	or	r12,r6,r3
    c05c:	6000081e 	bne	r12,zero,c080 <__ledf2+0x74>
    c060:	0005883a 	mov	r2,zero
    c064:	5800111e 	bne	r11,zero,c0ac <__ledf2+0xa0>
    c068:	f800283a 	ret
    c06c:	29403fcc 	andi	r5,r5,255
    c070:	40000c1e 	bne	r8,zero,c0a4 <__ledf2+0x98>
    c074:	30d2b03a 	or	r9,r6,r3
    c078:	48000c26 	beq	r9,zero,c0ac <__ledf2+0xa0>
    c07c:	0013883a 	mov	r9,zero
    c080:	39c03fcc 	andi	r7,r7,255
    c084:	48000826 	beq	r9,zero,c0a8 <__ledf2+0x9c>
    c088:	38001126 	beq	r7,zero,c0d0 <__ledf2+0xc4>
    c08c:	00800044 	movi	r2,1
    c090:	f800283a 	ret
    c094:	30d2b03a 	or	r9,r6,r3
    c098:	483fea26 	beq	r9,zero,c044 <_gp+0xffff1cd8>
    c09c:	00800084 	movi	r2,2
    c0a0:	f800283a 	ret
    c0a4:	39c03fcc 	andi	r7,r7,255
    c0a8:	39400726 	beq	r7,r5,c0c8 <__ledf2+0xbc>
    c0ac:	2800081e 	bne	r5,zero,c0d0 <__ledf2+0xc4>
    c0b0:	00800044 	movi	r2,1
    c0b4:	f800283a 	ret
    c0b8:	2292b03a 	or	r9,r4,r10
    c0bc:	483fdf26 	beq	r9,zero,c03c <_gp+0xffff1cd0>
    c0c0:	00800084 	movi	r2,2
    c0c4:	f800283a 	ret
    c0c8:	4080030e 	bge	r8,r2,c0d8 <__ledf2+0xcc>
    c0cc:	383fef26 	beq	r7,zero,c08c <_gp+0xffff1d20>
    c0d0:	00bfffc4 	movi	r2,-1
    c0d4:	f800283a 	ret
    c0d8:	123feb16 	blt	r2,r8,c088 <_gp+0xffff1d1c>
    c0dc:	1abff336 	bltu	r3,r10,c0ac <_gp+0xffff1d40>
    c0e0:	50c00326 	beq	r10,r3,c0f0 <__ledf2+0xe4>
    c0e4:	50c0042e 	bgeu	r10,r3,c0f8 <__ledf2+0xec>
    c0e8:	283fe81e 	bne	r5,zero,c08c <_gp+0xffff1d20>
    c0ec:	003ff806 	br	c0d0 <_gp+0xffff1d64>
    c0f0:	313fee36 	bltu	r6,r4,c0ac <_gp+0xffff1d40>
    c0f4:	21bffc36 	bltu	r4,r6,c0e8 <_gp+0xffff1d7c>
    c0f8:	0005883a 	mov	r2,zero
    c0fc:	f800283a 	ret

0000c100 <__muldf3>:
    c100:	deffee04 	addi	sp,sp,-72
    c104:	dd000c15 	stw	r20,48(sp)
    c108:	2828d53a 	srli	r20,r5,20
    c10c:	ddc00f15 	stw	r23,60(sp)
    c110:	282ed7fa 	srli	r23,r5,31
    c114:	dc000815 	stw	r16,32(sp)
    c118:	04000434 	movhi	r16,16
    c11c:	dcc00b15 	stw	r19,44(sp)
    c120:	843fffc4 	addi	r16,r16,-1
    c124:	dfc01115 	stw	ra,68(sp)
    c128:	df001015 	stw	fp,64(sp)
    c12c:	dd800e15 	stw	r22,56(sp)
    c130:	dd400d15 	stw	r21,52(sp)
    c134:	dc800a15 	stw	r18,40(sp)
    c138:	dc400915 	stw	r17,36(sp)
    c13c:	a501ffcc 	andi	r20,r20,2047
    c140:	2c20703a 	and	r16,r5,r16
    c144:	b827883a 	mov	r19,r23
    c148:	ba403fcc 	andi	r9,r23,255
    c14c:	a0006026 	beq	r20,zero,c2d0 <__muldf3+0x1d0>
    c150:	0081ffc4 	movi	r2,2047
    c154:	202d883a 	mov	r22,r4
    c158:	a0803626 	beq	r20,r2,c234 <__muldf3+0x134>
    c15c:	84000434 	orhi	r16,r16,16
    c160:	200ad77a 	srli	r5,r4,29
    c164:	800490fa 	slli	r2,r16,3
    c168:	202c90fa 	slli	r22,r4,3
    c16c:	a53f0044 	addi	r20,r20,-1023
    c170:	28a0b03a 	or	r16,r5,r2
    c174:	002b883a 	mov	r21,zero
    c178:	000b883a 	mov	r5,zero
    c17c:	3804d53a 	srli	r2,r7,20
    c180:	3838d7fa 	srli	fp,r7,31
    c184:	04400434 	movhi	r17,16
    c188:	8c7fffc4 	addi	r17,r17,-1
    c18c:	1081ffcc 	andi	r2,r2,2047
    c190:	3025883a 	mov	r18,r6
    c194:	3c62703a 	and	r17,r7,r17
    c198:	e2803fcc 	andi	r10,fp,255
    c19c:	10006d26 	beq	r2,zero,c354 <__muldf3+0x254>
    c1a0:	00c1ffc4 	movi	r3,2047
    c1a4:	10c06526 	beq	r2,r3,c33c <__muldf3+0x23c>
    c1a8:	8c400434 	orhi	r17,r17,16
    c1ac:	300ed77a 	srli	r7,r6,29
    c1b0:	880690fa 	slli	r3,r17,3
    c1b4:	302490fa 	slli	r18,r6,3
    c1b8:	10bf0044 	addi	r2,r2,-1023
    c1bc:	38e2b03a 	or	r17,r7,r3
    c1c0:	000f883a 	mov	r7,zero
    c1c4:	a087883a 	add	r3,r20,r2
    c1c8:	010003c4 	movi	r4,15
    c1cc:	3d44b03a 	or	r2,r7,r21
    c1d0:	e5ccf03a 	xor	r6,fp,r23
    c1d4:	1a000044 	addi	r8,r3,1
    c1d8:	20809b36 	bltu	r4,r2,c448 <__muldf3+0x348>
    c1dc:	100490ba 	slli	r2,r2,2
    c1e0:	01000074 	movhi	r4,1
    c1e4:	21307d04 	addi	r4,r4,-15884
    c1e8:	1105883a 	add	r2,r2,r4
    c1ec:	10800017 	ldw	r2,0(r2)
    c1f0:	1000683a 	jmp	r2
    c1f4:	0000c448 	cmpgei	zero,zero,785
    c1f8:	0000c254 	movui	zero,777
    c1fc:	0000c254 	movui	zero,777
    c200:	0000c250 	cmplti	zero,zero,777
    c204:	0000c424 	muli	zero,zero,784
    c208:	0000c424 	muli	zero,zero,784
    c20c:	0000c40c 	andi	zero,zero,784
    c210:	0000c250 	cmplti	zero,zero,777
    c214:	0000c424 	muli	zero,zero,784
    c218:	0000c40c 	andi	zero,zero,784
    c21c:	0000c424 	muli	zero,zero,784
    c220:	0000c250 	cmplti	zero,zero,777
    c224:	0000c434 	movhi	zero,784
    c228:	0000c434 	movhi	zero,784
    c22c:	0000c434 	movhi	zero,784
    c230:	0000c794 	movui	zero,798
    c234:	2404b03a 	or	r2,r4,r16
    c238:	1000711e 	bne	r2,zero,c400 <__muldf3+0x300>
    c23c:	05400204 	movi	r21,8
    c240:	0021883a 	mov	r16,zero
    c244:	002d883a 	mov	r22,zero
    c248:	01400084 	movi	r5,2
    c24c:	003fcb06 	br	c17c <_gp+0xffff1e10>
    c250:	500d883a 	mov	r6,r10
    c254:	00800084 	movi	r2,2
    c258:	38805926 	beq	r7,r2,c3c0 <__muldf3+0x2c0>
    c25c:	008000c4 	movi	r2,3
    c260:	3881bb26 	beq	r7,r2,c950 <__muldf3+0x850>
    c264:	00800044 	movi	r2,1
    c268:	3881961e 	bne	r7,r2,c8c4 <__muldf3+0x7c4>
    c26c:	3027883a 	mov	r19,r6
    c270:	0005883a 	mov	r2,zero
    c274:	0021883a 	mov	r16,zero
    c278:	002d883a 	mov	r22,zero
    c27c:	1004953a 	slli	r2,r2,20
    c280:	98c03fcc 	andi	r3,r19,255
    c284:	04400434 	movhi	r17,16
    c288:	8c7fffc4 	addi	r17,r17,-1
    c28c:	180697fa 	slli	r3,r3,31
    c290:	8460703a 	and	r16,r16,r17
    c294:	80a0b03a 	or	r16,r16,r2
    c298:	80c6b03a 	or	r3,r16,r3
    c29c:	b005883a 	mov	r2,r22
    c2a0:	dfc01117 	ldw	ra,68(sp)
    c2a4:	df001017 	ldw	fp,64(sp)
    c2a8:	ddc00f17 	ldw	r23,60(sp)
    c2ac:	dd800e17 	ldw	r22,56(sp)
    c2b0:	dd400d17 	ldw	r21,52(sp)
    c2b4:	dd000c17 	ldw	r20,48(sp)
    c2b8:	dcc00b17 	ldw	r19,44(sp)
    c2bc:	dc800a17 	ldw	r18,40(sp)
    c2c0:	dc400917 	ldw	r17,36(sp)
    c2c4:	dc000817 	ldw	r16,32(sp)
    c2c8:	dec01204 	addi	sp,sp,72
    c2cc:	f800283a 	ret
    c2d0:	2404b03a 	or	r2,r4,r16
    c2d4:	202b883a 	mov	r21,r4
    c2d8:	10004426 	beq	r2,zero,c3ec <__muldf3+0x2ec>
    c2dc:	80015126 	beq	r16,zero,c824 <__muldf3+0x724>
    c2e0:	8009883a 	mov	r4,r16
    c2e4:	d9800715 	stw	r6,28(sp)
    c2e8:	d9c00215 	stw	r7,8(sp)
    c2ec:	da400415 	stw	r9,16(sp)
    c2f0:	000d46c0 	call	d46c <__clzsi2>
    c2f4:	d9800717 	ldw	r6,28(sp)
    c2f8:	d9c00217 	ldw	r7,8(sp)
    c2fc:	da400417 	ldw	r9,16(sp)
    c300:	113ffd44 	addi	r4,r2,-11
    c304:	00c00704 	movi	r3,28
    c308:	19014216 	blt	r3,r4,c814 <__muldf3+0x714>
    c30c:	00c00744 	movi	r3,29
    c310:	15bffe04 	addi	r22,r2,-8
    c314:	1907c83a 	sub	r3,r3,r4
    c318:	85a0983a 	sll	r16,r16,r22
    c31c:	a8c6d83a 	srl	r3,r21,r3
    c320:	adac983a 	sll	r22,r21,r22
    c324:	1c20b03a 	or	r16,r3,r16
    c328:	1080fcc4 	addi	r2,r2,1011
    c32c:	00a9c83a 	sub	r20,zero,r2
    c330:	002b883a 	mov	r21,zero
    c334:	000b883a 	mov	r5,zero
    c338:	003f9006 	br	c17c <_gp+0xffff1e10>
    c33c:	3446b03a 	or	r3,r6,r17
    c340:	1800281e 	bne	r3,zero,c3e4 <__muldf3+0x2e4>
    c344:	0023883a 	mov	r17,zero
    c348:	0025883a 	mov	r18,zero
    c34c:	01c00084 	movi	r7,2
    c350:	003f9c06 	br	c1c4 <_gp+0xffff1e58>
    c354:	3446b03a 	or	r3,r6,r17
    c358:	18001e26 	beq	r3,zero,c3d4 <__muldf3+0x2d4>
    c35c:	88012126 	beq	r17,zero,c7e4 <__muldf3+0x6e4>
    c360:	8809883a 	mov	r4,r17
    c364:	d9400215 	stw	r5,8(sp)
    c368:	d9800715 	stw	r6,28(sp)
    c36c:	da400415 	stw	r9,16(sp)
    c370:	da800315 	stw	r10,12(sp)
    c374:	000d46c0 	call	d46c <__clzsi2>
    c378:	d9400217 	ldw	r5,8(sp)
    c37c:	d9800717 	ldw	r6,28(sp)
    c380:	da400417 	ldw	r9,16(sp)
    c384:	da800317 	ldw	r10,12(sp)
    c388:	113ffd44 	addi	r4,r2,-11
    c38c:	00c00704 	movi	r3,28
    c390:	19011016 	blt	r3,r4,c7d4 <__muldf3+0x6d4>
    c394:	00c00744 	movi	r3,29
    c398:	14bffe04 	addi	r18,r2,-8
    c39c:	1907c83a 	sub	r3,r3,r4
    c3a0:	8ca2983a 	sll	r17,r17,r18
    c3a4:	30c6d83a 	srl	r3,r6,r3
    c3a8:	34a4983a 	sll	r18,r6,r18
    c3ac:	1c62b03a 	or	r17,r3,r17
    c3b0:	1080fcc4 	addi	r2,r2,1011
    c3b4:	0085c83a 	sub	r2,zero,r2
    c3b8:	000f883a 	mov	r7,zero
    c3bc:	003f8106 	br	c1c4 <_gp+0xffff1e58>
    c3c0:	3027883a 	mov	r19,r6
    c3c4:	0081ffc4 	movi	r2,2047
    c3c8:	0021883a 	mov	r16,zero
    c3cc:	002d883a 	mov	r22,zero
    c3d0:	003faa06 	br	c27c <_gp+0xffff1f10>
    c3d4:	0023883a 	mov	r17,zero
    c3d8:	0025883a 	mov	r18,zero
    c3dc:	01c00044 	movi	r7,1
    c3e0:	003f7806 	br	c1c4 <_gp+0xffff1e58>
    c3e4:	01c000c4 	movi	r7,3
    c3e8:	003f7606 	br	c1c4 <_gp+0xffff1e58>
    c3ec:	05400104 	movi	r21,4
    c3f0:	0021883a 	mov	r16,zero
    c3f4:	002d883a 	mov	r22,zero
    c3f8:	01400044 	movi	r5,1
    c3fc:	003f5f06 	br	c17c <_gp+0xffff1e10>
    c400:	05400304 	movi	r21,12
    c404:	014000c4 	movi	r5,3
    c408:	003f5c06 	br	c17c <_gp+0xffff1e10>
    c40c:	04000434 	movhi	r16,16
    c410:	0027883a 	mov	r19,zero
    c414:	843fffc4 	addi	r16,r16,-1
    c418:	05bfffc4 	movi	r22,-1
    c41c:	0081ffc4 	movi	r2,2047
    c420:	003f9606 	br	c27c <_gp+0xffff1f10>
    c424:	8023883a 	mov	r17,r16
    c428:	b025883a 	mov	r18,r22
    c42c:	280f883a 	mov	r7,r5
    c430:	003f8806 	br	c254 <_gp+0xffff1ee8>
    c434:	8023883a 	mov	r17,r16
    c438:	b025883a 	mov	r18,r22
    c43c:	480d883a 	mov	r6,r9
    c440:	280f883a 	mov	r7,r5
    c444:	003f8306 	br	c254 <_gp+0xffff1ee8>
    c448:	b026d43a 	srli	r19,r22,16
    c44c:	902ed43a 	srli	r23,r18,16
    c450:	b5bfffcc 	andi	r22,r22,65535
    c454:	94bfffcc 	andi	r18,r18,65535
    c458:	b00b883a 	mov	r5,r22
    c45c:	9009883a 	mov	r4,r18
    c460:	d8c00515 	stw	r3,20(sp)
    c464:	d9800715 	stw	r6,28(sp)
    c468:	da000615 	stw	r8,24(sp)
    c46c:	000049c0 	call	49c <__mulsi3>
    c470:	980b883a 	mov	r5,r19
    c474:	9009883a 	mov	r4,r18
    c478:	1029883a 	mov	r20,r2
    c47c:	000049c0 	call	49c <__mulsi3>
    c480:	b80b883a 	mov	r5,r23
    c484:	9809883a 	mov	r4,r19
    c488:	102b883a 	mov	r21,r2
    c48c:	000049c0 	call	49c <__mulsi3>
    c490:	b809883a 	mov	r4,r23
    c494:	b00b883a 	mov	r5,r22
    c498:	1039883a 	mov	fp,r2
    c49c:	000049c0 	call	49c <__mulsi3>
    c4a0:	a008d43a 	srli	r4,r20,16
    c4a4:	1545883a 	add	r2,r2,r21
    c4a8:	d8c00517 	ldw	r3,20(sp)
    c4ac:	2085883a 	add	r2,r4,r2
    c4b0:	d9800717 	ldw	r6,28(sp)
    c4b4:	da000617 	ldw	r8,24(sp)
    c4b8:	1540022e 	bgeu	r2,r21,c4c4 <__muldf3+0x3c4>
    c4bc:	01000074 	movhi	r4,1
    c4c0:	e139883a 	add	fp,fp,r4
    c4c4:	100e943a 	slli	r7,r2,16
    c4c8:	1004d43a 	srli	r2,r2,16
    c4cc:	882ad43a 	srli	r21,r17,16
    c4d0:	a53fffcc 	andi	r20,r20,65535
    c4d4:	8c7fffcc 	andi	r17,r17,65535
    c4d8:	3d29883a 	add	r20,r7,r20
    c4dc:	b00b883a 	mov	r5,r22
    c4e0:	8809883a 	mov	r4,r17
    c4e4:	d8c00515 	stw	r3,20(sp)
    c4e8:	d9800715 	stw	r6,28(sp)
    c4ec:	da000615 	stw	r8,24(sp)
    c4f0:	dd000115 	stw	r20,4(sp)
    c4f4:	d8800015 	stw	r2,0(sp)
    c4f8:	000049c0 	call	49c <__mulsi3>
    c4fc:	980b883a 	mov	r5,r19
    c500:	8809883a 	mov	r4,r17
    c504:	d8800215 	stw	r2,8(sp)
    c508:	000049c0 	call	49c <__mulsi3>
    c50c:	9809883a 	mov	r4,r19
    c510:	a80b883a 	mov	r5,r21
    c514:	1029883a 	mov	r20,r2
    c518:	000049c0 	call	49c <__mulsi3>
    c51c:	b00b883a 	mov	r5,r22
    c520:	a809883a 	mov	r4,r21
    c524:	d8800415 	stw	r2,16(sp)
    c528:	000049c0 	call	49c <__mulsi3>
    c52c:	d9c00217 	ldw	r7,8(sp)
    c530:	1505883a 	add	r2,r2,r20
    c534:	d8c00517 	ldw	r3,20(sp)
    c538:	3826d43a 	srli	r19,r7,16
    c53c:	d9800717 	ldw	r6,28(sp)
    c540:	da000617 	ldw	r8,24(sp)
    c544:	9885883a 	add	r2,r19,r2
    c548:	da400417 	ldw	r9,16(sp)
    c54c:	1500022e 	bgeu	r2,r20,c558 <__muldf3+0x458>
    c550:	01000074 	movhi	r4,1
    c554:	4913883a 	add	r9,r9,r4
    c558:	1028d43a 	srli	r20,r2,16
    c55c:	1004943a 	slli	r2,r2,16
    c560:	802cd43a 	srli	r22,r16,16
    c564:	843fffcc 	andi	r16,r16,65535
    c568:	3cffffcc 	andi	r19,r7,65535
    c56c:	9009883a 	mov	r4,r18
    c570:	800b883a 	mov	r5,r16
    c574:	a269883a 	add	r20,r20,r9
    c578:	d8c00515 	stw	r3,20(sp)
    c57c:	d9800715 	stw	r6,28(sp)
    c580:	da000615 	stw	r8,24(sp)
    c584:	14e7883a 	add	r19,r2,r19
    c588:	000049c0 	call	49c <__mulsi3>
    c58c:	9009883a 	mov	r4,r18
    c590:	b00b883a 	mov	r5,r22
    c594:	d8800315 	stw	r2,12(sp)
    c598:	000049c0 	call	49c <__mulsi3>
    c59c:	b809883a 	mov	r4,r23
    c5a0:	b00b883a 	mov	r5,r22
    c5a4:	d8800215 	stw	r2,8(sp)
    c5a8:	000049c0 	call	49c <__mulsi3>
    c5ac:	b80b883a 	mov	r5,r23
    c5b0:	8009883a 	mov	r4,r16
    c5b4:	d8800415 	stw	r2,16(sp)
    c5b8:	000049c0 	call	49c <__mulsi3>
    c5bc:	da800317 	ldw	r10,12(sp)
    c5c0:	d9c00217 	ldw	r7,8(sp)
    c5c4:	d9000017 	ldw	r4,0(sp)
    c5c8:	502ed43a 	srli	r23,r10,16
    c5cc:	11c5883a 	add	r2,r2,r7
    c5d0:	24e5883a 	add	r18,r4,r19
    c5d4:	b885883a 	add	r2,r23,r2
    c5d8:	d8c00517 	ldw	r3,20(sp)
    c5dc:	d9800717 	ldw	r6,28(sp)
    c5e0:	da000617 	ldw	r8,24(sp)
    c5e4:	da400417 	ldw	r9,16(sp)
    c5e8:	11c0022e 	bgeu	r2,r7,c5f4 <__muldf3+0x4f4>
    c5ec:	01000074 	movhi	r4,1
    c5f0:	4913883a 	add	r9,r9,r4
    c5f4:	100ed43a 	srli	r7,r2,16
    c5f8:	1004943a 	slli	r2,r2,16
    c5fc:	55ffffcc 	andi	r23,r10,65535
    c600:	3a53883a 	add	r9,r7,r9
    c604:	8809883a 	mov	r4,r17
    c608:	800b883a 	mov	r5,r16
    c60c:	d8c00515 	stw	r3,20(sp)
    c610:	d9800715 	stw	r6,28(sp)
    c614:	da000615 	stw	r8,24(sp)
    c618:	da400415 	stw	r9,16(sp)
    c61c:	15ef883a 	add	r23,r2,r23
    c620:	000049c0 	call	49c <__mulsi3>
    c624:	8809883a 	mov	r4,r17
    c628:	b00b883a 	mov	r5,r22
    c62c:	d8800215 	stw	r2,8(sp)
    c630:	000049c0 	call	49c <__mulsi3>
    c634:	b00b883a 	mov	r5,r22
    c638:	a809883a 	mov	r4,r21
    c63c:	d8800315 	stw	r2,12(sp)
    c640:	000049c0 	call	49c <__mulsi3>
    c644:	8009883a 	mov	r4,r16
    c648:	a80b883a 	mov	r5,r21
    c64c:	1023883a 	mov	r17,r2
    c650:	000049c0 	call	49c <__mulsi3>
    c654:	d9c00217 	ldw	r7,8(sp)
    c658:	da800317 	ldw	r10,12(sp)
    c65c:	d8c00517 	ldw	r3,20(sp)
    c660:	3808d43a 	srli	r4,r7,16
    c664:	1285883a 	add	r2,r2,r10
    c668:	d9800717 	ldw	r6,28(sp)
    c66c:	2085883a 	add	r2,r4,r2
    c670:	da000617 	ldw	r8,24(sp)
    c674:	da400417 	ldw	r9,16(sp)
    c678:	1280022e 	bgeu	r2,r10,c684 <__muldf3+0x584>
    c67c:	01000074 	movhi	r4,1
    c680:	8923883a 	add	r17,r17,r4
    c684:	1008943a 	slli	r4,r2,16
    c688:	39ffffcc 	andi	r7,r7,65535
    c68c:	e4b9883a 	add	fp,fp,r18
    c690:	21cf883a 	add	r7,r4,r7
    c694:	e4e7803a 	cmpltu	r19,fp,r19
    c698:	3d0f883a 	add	r7,r7,r20
    c69c:	bf39883a 	add	fp,r23,fp
    c6a0:	99c9883a 	add	r4,r19,r7
    c6a4:	e5ef803a 	cmpltu	r23,fp,r23
    c6a8:	490b883a 	add	r5,r9,r4
    c6ac:	1004d43a 	srli	r2,r2,16
    c6b0:	b965883a 	add	r18,r23,r5
    c6b4:	24c9803a 	cmpltu	r4,r4,r19
    c6b8:	3d29803a 	cmpltu	r20,r7,r20
    c6bc:	a128b03a 	or	r20,r20,r4
    c6c0:	95ef803a 	cmpltu	r23,r18,r23
    c6c4:	2a53803a 	cmpltu	r9,r5,r9
    c6c8:	a0a9883a 	add	r20,r20,r2
    c6cc:	4deeb03a 	or	r23,r9,r23
    c6d0:	a5ef883a 	add	r23,r20,r23
    c6d4:	bc63883a 	add	r17,r23,r17
    c6d8:	e004927a 	slli	r2,fp,9
    c6dc:	d9000117 	ldw	r4,4(sp)
    c6e0:	882e927a 	slli	r23,r17,9
    c6e4:	9022d5fa 	srli	r17,r18,23
    c6e8:	e038d5fa 	srli	fp,fp,23
    c6ec:	1104b03a 	or	r2,r2,r4
    c6f0:	9024927a 	slli	r18,r18,9
    c6f4:	1004c03a 	cmpne	r2,r2,zero
    c6f8:	bc62b03a 	or	r17,r23,r17
    c6fc:	1738b03a 	or	fp,r2,fp
    c700:	8880402c 	andhi	r2,r17,256
    c704:	e4a4b03a 	or	r18,fp,r18
    c708:	10000726 	beq	r2,zero,c728 <__muldf3+0x628>
    c70c:	9006d07a 	srli	r3,r18,1
    c710:	880497fa 	slli	r2,r17,31
    c714:	9480004c 	andi	r18,r18,1
    c718:	8822d07a 	srli	r17,r17,1
    c71c:	1ca4b03a 	or	r18,r3,r18
    c720:	14a4b03a 	or	r18,r2,r18
    c724:	4007883a 	mov	r3,r8
    c728:	1880ffc4 	addi	r2,r3,1023
    c72c:	0080460e 	bge	zero,r2,c848 <__muldf3+0x748>
    c730:	910001cc 	andi	r4,r18,7
    c734:	20000726 	beq	r4,zero,c754 <__muldf3+0x654>
    c738:	910003cc 	andi	r4,r18,15
    c73c:	01400104 	movi	r5,4
    c740:	21400426 	beq	r4,r5,c754 <__muldf3+0x654>
    c744:	9149883a 	add	r4,r18,r5
    c748:	24a5803a 	cmpltu	r18,r4,r18
    c74c:	8ca3883a 	add	r17,r17,r18
    c750:	2025883a 	mov	r18,r4
    c754:	8900402c 	andhi	r4,r17,256
    c758:	20000426 	beq	r4,zero,c76c <__muldf3+0x66c>
    c75c:	18810004 	addi	r2,r3,1024
    c760:	00ffc034 	movhi	r3,65280
    c764:	18ffffc4 	addi	r3,r3,-1
    c768:	88e2703a 	and	r17,r17,r3
    c76c:	00c1ff84 	movi	r3,2046
    c770:	18bf1316 	blt	r3,r2,c3c0 <_gp+0xffff2054>
    c774:	882c977a 	slli	r22,r17,29
    c778:	9024d0fa 	srli	r18,r18,3
    c77c:	8822927a 	slli	r17,r17,9
    c780:	1081ffcc 	andi	r2,r2,2047
    c784:	b4acb03a 	or	r22,r22,r18
    c788:	8820d33a 	srli	r16,r17,12
    c78c:	3027883a 	mov	r19,r6
    c790:	003eba06 	br	c27c <_gp+0xffff1f10>
    c794:	8080022c 	andhi	r2,r16,8
    c798:	10000926 	beq	r2,zero,c7c0 <__muldf3+0x6c0>
    c79c:	8880022c 	andhi	r2,r17,8
    c7a0:	1000071e 	bne	r2,zero,c7c0 <__muldf3+0x6c0>
    c7a4:	00800434 	movhi	r2,16
    c7a8:	8c000234 	orhi	r16,r17,8
    c7ac:	10bfffc4 	addi	r2,r2,-1
    c7b0:	e027883a 	mov	r19,fp
    c7b4:	80a0703a 	and	r16,r16,r2
    c7b8:	902d883a 	mov	r22,r18
    c7bc:	003f1706 	br	c41c <_gp+0xffff20b0>
    c7c0:	00800434 	movhi	r2,16
    c7c4:	84000234 	orhi	r16,r16,8
    c7c8:	10bfffc4 	addi	r2,r2,-1
    c7cc:	80a0703a 	and	r16,r16,r2
    c7d0:	003f1206 	br	c41c <_gp+0xffff20b0>
    c7d4:	147ff604 	addi	r17,r2,-40
    c7d8:	3462983a 	sll	r17,r6,r17
    c7dc:	0025883a 	mov	r18,zero
    c7e0:	003ef306 	br	c3b0 <_gp+0xffff2044>
    c7e4:	3009883a 	mov	r4,r6
    c7e8:	d9400215 	stw	r5,8(sp)
    c7ec:	d9800715 	stw	r6,28(sp)
    c7f0:	da400415 	stw	r9,16(sp)
    c7f4:	da800315 	stw	r10,12(sp)
    c7f8:	000d46c0 	call	d46c <__clzsi2>
    c7fc:	10800804 	addi	r2,r2,32
    c800:	da800317 	ldw	r10,12(sp)
    c804:	da400417 	ldw	r9,16(sp)
    c808:	d9800717 	ldw	r6,28(sp)
    c80c:	d9400217 	ldw	r5,8(sp)
    c810:	003edd06 	br	c388 <_gp+0xffff201c>
    c814:	143ff604 	addi	r16,r2,-40
    c818:	ac20983a 	sll	r16,r21,r16
    c81c:	002d883a 	mov	r22,zero
    c820:	003ec106 	br	c328 <_gp+0xffff1fbc>
    c824:	d9800715 	stw	r6,28(sp)
    c828:	d9c00215 	stw	r7,8(sp)
    c82c:	da400415 	stw	r9,16(sp)
    c830:	000d46c0 	call	d46c <__clzsi2>
    c834:	10800804 	addi	r2,r2,32
    c838:	da400417 	ldw	r9,16(sp)
    c83c:	d9c00217 	ldw	r7,8(sp)
    c840:	d9800717 	ldw	r6,28(sp)
    c844:	003eae06 	br	c300 <_gp+0xffff1f94>
    c848:	00c00044 	movi	r3,1
    c84c:	1887c83a 	sub	r3,r3,r2
    c850:	01000e04 	movi	r4,56
    c854:	20fe8516 	blt	r4,r3,c26c <_gp+0xffff1f00>
    c858:	010007c4 	movi	r4,31
    c85c:	20c01b16 	blt	r4,r3,c8cc <__muldf3+0x7cc>
    c860:	00800804 	movi	r2,32
    c864:	10c5c83a 	sub	r2,r2,r3
    c868:	888a983a 	sll	r5,r17,r2
    c86c:	90c8d83a 	srl	r4,r18,r3
    c870:	9084983a 	sll	r2,r18,r2
    c874:	88e2d83a 	srl	r17,r17,r3
    c878:	2906b03a 	or	r3,r5,r4
    c87c:	1004c03a 	cmpne	r2,r2,zero
    c880:	1886b03a 	or	r3,r3,r2
    c884:	188001cc 	andi	r2,r3,7
    c888:	10000726 	beq	r2,zero,c8a8 <__muldf3+0x7a8>
    c88c:	188003cc 	andi	r2,r3,15
    c890:	01000104 	movi	r4,4
    c894:	11000426 	beq	r2,r4,c8a8 <__muldf3+0x7a8>
    c898:	1805883a 	mov	r2,r3
    c89c:	10c00104 	addi	r3,r2,4
    c8a0:	1885803a 	cmpltu	r2,r3,r2
    c8a4:	88a3883a 	add	r17,r17,r2
    c8a8:	8880202c 	andhi	r2,r17,128
    c8ac:	10001c26 	beq	r2,zero,c920 <__muldf3+0x820>
    c8b0:	3027883a 	mov	r19,r6
    c8b4:	00800044 	movi	r2,1
    c8b8:	0021883a 	mov	r16,zero
    c8bc:	002d883a 	mov	r22,zero
    c8c0:	003e6e06 	br	c27c <_gp+0xffff1f10>
    c8c4:	4007883a 	mov	r3,r8
    c8c8:	003f9706 	br	c728 <_gp+0xffff23bc>
    c8cc:	017ff844 	movi	r5,-31
    c8d0:	2885c83a 	sub	r2,r5,r2
    c8d4:	888ad83a 	srl	r5,r17,r2
    c8d8:	00800804 	movi	r2,32
    c8dc:	18801a26 	beq	r3,r2,c948 <__muldf3+0x848>
    c8e0:	01001004 	movi	r4,64
    c8e4:	20c7c83a 	sub	r3,r4,r3
    c8e8:	88e2983a 	sll	r17,r17,r3
    c8ec:	8ca4b03a 	or	r18,r17,r18
    c8f0:	9004c03a 	cmpne	r2,r18,zero
    c8f4:	2884b03a 	or	r2,r5,r2
    c8f8:	144001cc 	andi	r17,r2,7
    c8fc:	88000d1e 	bne	r17,zero,c934 <__muldf3+0x834>
    c900:	0021883a 	mov	r16,zero
    c904:	102cd0fa 	srli	r22,r2,3
    c908:	3027883a 	mov	r19,r6
    c90c:	0005883a 	mov	r2,zero
    c910:	b46cb03a 	or	r22,r22,r17
    c914:	003e5906 	br	c27c <_gp+0xffff1f10>
    c918:	1007883a 	mov	r3,r2
    c91c:	0023883a 	mov	r17,zero
    c920:	8820927a 	slli	r16,r17,9
    c924:	1805883a 	mov	r2,r3
    c928:	8822977a 	slli	r17,r17,29
    c92c:	8020d33a 	srli	r16,r16,12
    c930:	003ff406 	br	c904 <_gp+0xffff2598>
    c934:	10c003cc 	andi	r3,r2,15
    c938:	01000104 	movi	r4,4
    c93c:	193ff626 	beq	r3,r4,c918 <_gp+0xffff25ac>
    c940:	0023883a 	mov	r17,zero
    c944:	003fd506 	br	c89c <_gp+0xffff2530>
    c948:	0023883a 	mov	r17,zero
    c94c:	003fe706 	br	c8ec <_gp+0xffff2580>
    c950:	00800434 	movhi	r2,16
    c954:	8c000234 	orhi	r16,r17,8
    c958:	10bfffc4 	addi	r2,r2,-1
    c95c:	3027883a 	mov	r19,r6
    c960:	80a0703a 	and	r16,r16,r2
    c964:	902d883a 	mov	r22,r18
    c968:	003eac06 	br	c41c <_gp+0xffff20b0>

0000c96c <__subdf3>:
    c96c:	02000434 	movhi	r8,16
    c970:	423fffc4 	addi	r8,r8,-1
    c974:	defffb04 	addi	sp,sp,-20
    c978:	2a14703a 	and	r10,r5,r8
    c97c:	3812d53a 	srli	r9,r7,20
    c980:	3a10703a 	and	r8,r7,r8
    c984:	2006d77a 	srli	r3,r4,29
    c988:	3004d77a 	srli	r2,r6,29
    c98c:	dc000015 	stw	r16,0(sp)
    c990:	501490fa 	slli	r10,r10,3
    c994:	2820d53a 	srli	r16,r5,20
    c998:	401090fa 	slli	r8,r8,3
    c99c:	dc800215 	stw	r18,8(sp)
    c9a0:	dc400115 	stw	r17,4(sp)
    c9a4:	dfc00415 	stw	ra,16(sp)
    c9a8:	202290fa 	slli	r17,r4,3
    c9ac:	dcc00315 	stw	r19,12(sp)
    c9b0:	4a41ffcc 	andi	r9,r9,2047
    c9b4:	0101ffc4 	movi	r4,2047
    c9b8:	2824d7fa 	srli	r18,r5,31
    c9bc:	8401ffcc 	andi	r16,r16,2047
    c9c0:	50c6b03a 	or	r3,r10,r3
    c9c4:	380ed7fa 	srli	r7,r7,31
    c9c8:	408ab03a 	or	r5,r8,r2
    c9cc:	300c90fa 	slli	r6,r6,3
    c9d0:	49009626 	beq	r9,r4,cc2c <__subdf3+0x2c0>
    c9d4:	39c0005c 	xori	r7,r7,1
    c9d8:	8245c83a 	sub	r2,r16,r9
    c9dc:	3c807426 	beq	r7,r18,cbb0 <__subdf3+0x244>
    c9e0:	0080af0e 	bge	zero,r2,cca0 <__subdf3+0x334>
    c9e4:	48002a1e 	bne	r9,zero,ca90 <__subdf3+0x124>
    c9e8:	2988b03a 	or	r4,r5,r6
    c9ec:	20009a1e 	bne	r4,zero,cc58 <__subdf3+0x2ec>
    c9f0:	888001cc 	andi	r2,r17,7
    c9f4:	10000726 	beq	r2,zero,ca14 <__subdf3+0xa8>
    c9f8:	888003cc 	andi	r2,r17,15
    c9fc:	01000104 	movi	r4,4
    ca00:	11000426 	beq	r2,r4,ca14 <__subdf3+0xa8>
    ca04:	890b883a 	add	r5,r17,r4
    ca08:	2c63803a 	cmpltu	r17,r5,r17
    ca0c:	1c47883a 	add	r3,r3,r17
    ca10:	2823883a 	mov	r17,r5
    ca14:	1880202c 	andhi	r2,r3,128
    ca18:	10005926 	beq	r2,zero,cb80 <__subdf3+0x214>
    ca1c:	84000044 	addi	r16,r16,1
    ca20:	0081ffc4 	movi	r2,2047
    ca24:	8080be26 	beq	r16,r2,cd20 <__subdf3+0x3b4>
    ca28:	017fe034 	movhi	r5,65408
    ca2c:	297fffc4 	addi	r5,r5,-1
    ca30:	1946703a 	and	r3,r3,r5
    ca34:	1804977a 	slli	r2,r3,29
    ca38:	1806927a 	slli	r3,r3,9
    ca3c:	8822d0fa 	srli	r17,r17,3
    ca40:	8401ffcc 	andi	r16,r16,2047
    ca44:	180ad33a 	srli	r5,r3,12
    ca48:	9100004c 	andi	r4,r18,1
    ca4c:	1444b03a 	or	r2,r2,r17
    ca50:	80c1ffcc 	andi	r3,r16,2047
    ca54:	1820953a 	slli	r16,r3,20
    ca58:	20c03fcc 	andi	r3,r4,255
    ca5c:	180897fa 	slli	r4,r3,31
    ca60:	00c00434 	movhi	r3,16
    ca64:	18ffffc4 	addi	r3,r3,-1
    ca68:	28c6703a 	and	r3,r5,r3
    ca6c:	1c06b03a 	or	r3,r3,r16
    ca70:	1906b03a 	or	r3,r3,r4
    ca74:	dfc00417 	ldw	ra,16(sp)
    ca78:	dcc00317 	ldw	r19,12(sp)
    ca7c:	dc800217 	ldw	r18,8(sp)
    ca80:	dc400117 	ldw	r17,4(sp)
    ca84:	dc000017 	ldw	r16,0(sp)
    ca88:	dec00504 	addi	sp,sp,20
    ca8c:	f800283a 	ret
    ca90:	0101ffc4 	movi	r4,2047
    ca94:	813fd626 	beq	r16,r4,c9f0 <_gp+0xffff2684>
    ca98:	29402034 	orhi	r5,r5,128
    ca9c:	01000e04 	movi	r4,56
    caa0:	2080a316 	blt	r4,r2,cd30 <__subdf3+0x3c4>
    caa4:	010007c4 	movi	r4,31
    caa8:	2080c616 	blt	r4,r2,cdc4 <__subdf3+0x458>
    caac:	01000804 	movi	r4,32
    cab0:	2089c83a 	sub	r4,r4,r2
    cab4:	2910983a 	sll	r8,r5,r4
    cab8:	308ed83a 	srl	r7,r6,r2
    cabc:	3108983a 	sll	r4,r6,r4
    cac0:	2884d83a 	srl	r2,r5,r2
    cac4:	41ccb03a 	or	r6,r8,r7
    cac8:	2008c03a 	cmpne	r4,r4,zero
    cacc:	310cb03a 	or	r6,r6,r4
    cad0:	898dc83a 	sub	r6,r17,r6
    cad4:	89a3803a 	cmpltu	r17,r17,r6
    cad8:	1887c83a 	sub	r3,r3,r2
    cadc:	1c47c83a 	sub	r3,r3,r17
    cae0:	3023883a 	mov	r17,r6
    cae4:	1880202c 	andhi	r2,r3,128
    cae8:	10002326 	beq	r2,zero,cb78 <__subdf3+0x20c>
    caec:	04c02034 	movhi	r19,128
    caf0:	9cffffc4 	addi	r19,r19,-1
    caf4:	1ce6703a 	and	r19,r3,r19
    caf8:	98007a26 	beq	r19,zero,cce4 <__subdf3+0x378>
    cafc:	9809883a 	mov	r4,r19
    cb00:	000d46c0 	call	d46c <__clzsi2>
    cb04:	113ffe04 	addi	r4,r2,-8
    cb08:	00c007c4 	movi	r3,31
    cb0c:	19007b16 	blt	r3,r4,ccfc <__subdf3+0x390>
    cb10:	00800804 	movi	r2,32
    cb14:	1105c83a 	sub	r2,r2,r4
    cb18:	8884d83a 	srl	r2,r17,r2
    cb1c:	9906983a 	sll	r3,r19,r4
    cb20:	8922983a 	sll	r17,r17,r4
    cb24:	10c4b03a 	or	r2,r2,r3
    cb28:	24007816 	blt	r4,r16,cd0c <__subdf3+0x3a0>
    cb2c:	2421c83a 	sub	r16,r4,r16
    cb30:	80c00044 	addi	r3,r16,1
    cb34:	010007c4 	movi	r4,31
    cb38:	20c09516 	blt	r4,r3,cd90 <__subdf3+0x424>
    cb3c:	01400804 	movi	r5,32
    cb40:	28cbc83a 	sub	r5,r5,r3
    cb44:	88c8d83a 	srl	r4,r17,r3
    cb48:	8962983a 	sll	r17,r17,r5
    cb4c:	114a983a 	sll	r5,r2,r5
    cb50:	10c6d83a 	srl	r3,r2,r3
    cb54:	8804c03a 	cmpne	r2,r17,zero
    cb58:	290ab03a 	or	r5,r5,r4
    cb5c:	28a2b03a 	or	r17,r5,r2
    cb60:	0021883a 	mov	r16,zero
    cb64:	003fa206 	br	c9f0 <_gp+0xffff2684>
    cb68:	2090b03a 	or	r8,r4,r2
    cb6c:	40018e26 	beq	r8,zero,d1a8 <__subdf3+0x83c>
    cb70:	1007883a 	mov	r3,r2
    cb74:	2023883a 	mov	r17,r4
    cb78:	888001cc 	andi	r2,r17,7
    cb7c:	103f9e1e 	bne	r2,zero,c9f8 <_gp+0xffff268c>
    cb80:	1804977a 	slli	r2,r3,29
    cb84:	8822d0fa 	srli	r17,r17,3
    cb88:	1810d0fa 	srli	r8,r3,3
    cb8c:	9100004c 	andi	r4,r18,1
    cb90:	1444b03a 	or	r2,r2,r17
    cb94:	00c1ffc4 	movi	r3,2047
    cb98:	80c02826 	beq	r16,r3,cc3c <__subdf3+0x2d0>
    cb9c:	01400434 	movhi	r5,16
    cba0:	297fffc4 	addi	r5,r5,-1
    cba4:	80e0703a 	and	r16,r16,r3
    cba8:	414a703a 	and	r5,r8,r5
    cbac:	003fa806 	br	ca50 <_gp+0xffff26e4>
    cbb0:	0080630e 	bge	zero,r2,cd40 <__subdf3+0x3d4>
    cbb4:	48003026 	beq	r9,zero,cc78 <__subdf3+0x30c>
    cbb8:	0101ffc4 	movi	r4,2047
    cbbc:	813f8c26 	beq	r16,r4,c9f0 <_gp+0xffff2684>
    cbc0:	29402034 	orhi	r5,r5,128
    cbc4:	01000e04 	movi	r4,56
    cbc8:	2080a90e 	bge	r4,r2,ce70 <__subdf3+0x504>
    cbcc:	298cb03a 	or	r6,r5,r6
    cbd0:	3012c03a 	cmpne	r9,r6,zero
    cbd4:	0005883a 	mov	r2,zero
    cbd8:	4c53883a 	add	r9,r9,r17
    cbdc:	4c63803a 	cmpltu	r17,r9,r17
    cbe0:	10c7883a 	add	r3,r2,r3
    cbe4:	88c7883a 	add	r3,r17,r3
    cbe8:	4823883a 	mov	r17,r9
    cbec:	1880202c 	andhi	r2,r3,128
    cbf0:	1000d026 	beq	r2,zero,cf34 <__subdf3+0x5c8>
    cbf4:	84000044 	addi	r16,r16,1
    cbf8:	0081ffc4 	movi	r2,2047
    cbfc:	8080fe26 	beq	r16,r2,cff8 <__subdf3+0x68c>
    cc00:	00bfe034 	movhi	r2,65408
    cc04:	10bfffc4 	addi	r2,r2,-1
    cc08:	1886703a 	and	r3,r3,r2
    cc0c:	880ad07a 	srli	r5,r17,1
    cc10:	180497fa 	slli	r2,r3,31
    cc14:	8900004c 	andi	r4,r17,1
    cc18:	2922b03a 	or	r17,r5,r4
    cc1c:	1806d07a 	srli	r3,r3,1
    cc20:	1462b03a 	or	r17,r2,r17
    cc24:	3825883a 	mov	r18,r7
    cc28:	003f7106 	br	c9f0 <_gp+0xffff2684>
    cc2c:	2984b03a 	or	r2,r5,r6
    cc30:	103f6826 	beq	r2,zero,c9d4 <_gp+0xffff2668>
    cc34:	39c03fcc 	andi	r7,r7,255
    cc38:	003f6706 	br	c9d8 <_gp+0xffff266c>
    cc3c:	4086b03a 	or	r3,r8,r2
    cc40:	18015226 	beq	r3,zero,d18c <__subdf3+0x820>
    cc44:	00c00434 	movhi	r3,16
    cc48:	41400234 	orhi	r5,r8,8
    cc4c:	18ffffc4 	addi	r3,r3,-1
    cc50:	28ca703a 	and	r5,r5,r3
    cc54:	003f7e06 	br	ca50 <_gp+0xffff26e4>
    cc58:	10bfffc4 	addi	r2,r2,-1
    cc5c:	1000491e 	bne	r2,zero,cd84 <__subdf3+0x418>
    cc60:	898fc83a 	sub	r7,r17,r6
    cc64:	89e3803a 	cmpltu	r17,r17,r7
    cc68:	1947c83a 	sub	r3,r3,r5
    cc6c:	1c47c83a 	sub	r3,r3,r17
    cc70:	3823883a 	mov	r17,r7
    cc74:	003f9b06 	br	cae4 <_gp+0xffff2778>
    cc78:	2988b03a 	or	r4,r5,r6
    cc7c:	203f5c26 	beq	r4,zero,c9f0 <_gp+0xffff2684>
    cc80:	10bfffc4 	addi	r2,r2,-1
    cc84:	1000931e 	bne	r2,zero,ced4 <__subdf3+0x568>
    cc88:	898d883a 	add	r6,r17,r6
    cc8c:	3463803a 	cmpltu	r17,r6,r17
    cc90:	1947883a 	add	r3,r3,r5
    cc94:	88c7883a 	add	r3,r17,r3
    cc98:	3023883a 	mov	r17,r6
    cc9c:	003fd306 	br	cbec <_gp+0xffff2880>
    cca0:	1000541e 	bne	r2,zero,cdf4 <__subdf3+0x488>
    cca4:	80800044 	addi	r2,r16,1
    cca8:	1081ffcc 	andi	r2,r2,2047
    ccac:	01000044 	movi	r4,1
    ccb0:	2080a20e 	bge	r4,r2,cf3c <__subdf3+0x5d0>
    ccb4:	8989c83a 	sub	r4,r17,r6
    ccb8:	8905803a 	cmpltu	r2,r17,r4
    ccbc:	1967c83a 	sub	r19,r3,r5
    ccc0:	98a7c83a 	sub	r19,r19,r2
    ccc4:	9880202c 	andhi	r2,r19,128
    ccc8:	10006326 	beq	r2,zero,ce58 <__subdf3+0x4ec>
    cccc:	3463c83a 	sub	r17,r6,r17
    ccd0:	28c7c83a 	sub	r3,r5,r3
    ccd4:	344d803a 	cmpltu	r6,r6,r17
    ccd8:	19a7c83a 	sub	r19,r3,r6
    ccdc:	3825883a 	mov	r18,r7
    cce0:	983f861e 	bne	r19,zero,cafc <_gp+0xffff2790>
    cce4:	8809883a 	mov	r4,r17
    cce8:	000d46c0 	call	d46c <__clzsi2>
    ccec:	10800804 	addi	r2,r2,32
    ccf0:	113ffe04 	addi	r4,r2,-8
    ccf4:	00c007c4 	movi	r3,31
    ccf8:	193f850e 	bge	r3,r4,cb10 <_gp+0xffff27a4>
    ccfc:	10bff604 	addi	r2,r2,-40
    cd00:	8884983a 	sll	r2,r17,r2
    cd04:	0023883a 	mov	r17,zero
    cd08:	243f880e 	bge	r4,r16,cb2c <_gp+0xffff27c0>
    cd0c:	00ffe034 	movhi	r3,65408
    cd10:	18ffffc4 	addi	r3,r3,-1
    cd14:	8121c83a 	sub	r16,r16,r4
    cd18:	10c6703a 	and	r3,r2,r3
    cd1c:	003f3406 	br	c9f0 <_gp+0xffff2684>
    cd20:	9100004c 	andi	r4,r18,1
    cd24:	000b883a 	mov	r5,zero
    cd28:	0005883a 	mov	r2,zero
    cd2c:	003f4806 	br	ca50 <_gp+0xffff26e4>
    cd30:	298cb03a 	or	r6,r5,r6
    cd34:	300cc03a 	cmpne	r6,r6,zero
    cd38:	0005883a 	mov	r2,zero
    cd3c:	003f6406 	br	cad0 <_gp+0xffff2764>
    cd40:	10009a1e 	bne	r2,zero,cfac <__subdf3+0x640>
    cd44:	82400044 	addi	r9,r16,1
    cd48:	4881ffcc 	andi	r2,r9,2047
    cd4c:	02800044 	movi	r10,1
    cd50:	5080670e 	bge	r10,r2,cef0 <__subdf3+0x584>
    cd54:	0081ffc4 	movi	r2,2047
    cd58:	4880af26 	beq	r9,r2,d018 <__subdf3+0x6ac>
    cd5c:	898d883a 	add	r6,r17,r6
    cd60:	1945883a 	add	r2,r3,r5
    cd64:	3447803a 	cmpltu	r3,r6,r17
    cd68:	1887883a 	add	r3,r3,r2
    cd6c:	182297fa 	slli	r17,r3,31
    cd70:	300cd07a 	srli	r6,r6,1
    cd74:	1806d07a 	srli	r3,r3,1
    cd78:	4821883a 	mov	r16,r9
    cd7c:	89a2b03a 	or	r17,r17,r6
    cd80:	003f1b06 	br	c9f0 <_gp+0xffff2684>
    cd84:	0101ffc4 	movi	r4,2047
    cd88:	813f441e 	bne	r16,r4,ca9c <_gp+0xffff2730>
    cd8c:	003f1806 	br	c9f0 <_gp+0xffff2684>
    cd90:	843ff844 	addi	r16,r16,-31
    cd94:	01400804 	movi	r5,32
    cd98:	1408d83a 	srl	r4,r2,r16
    cd9c:	19405026 	beq	r3,r5,cee0 <__subdf3+0x574>
    cda0:	01401004 	movi	r5,64
    cda4:	28c7c83a 	sub	r3,r5,r3
    cda8:	10c4983a 	sll	r2,r2,r3
    cdac:	88a2b03a 	or	r17,r17,r2
    cdb0:	8822c03a 	cmpne	r17,r17,zero
    cdb4:	2462b03a 	or	r17,r4,r17
    cdb8:	0007883a 	mov	r3,zero
    cdbc:	0021883a 	mov	r16,zero
    cdc0:	003f6d06 	br	cb78 <_gp+0xffff280c>
    cdc4:	11fff804 	addi	r7,r2,-32
    cdc8:	01000804 	movi	r4,32
    cdcc:	29ced83a 	srl	r7,r5,r7
    cdd0:	11004526 	beq	r2,r4,cee8 <__subdf3+0x57c>
    cdd4:	01001004 	movi	r4,64
    cdd8:	2089c83a 	sub	r4,r4,r2
    cddc:	2904983a 	sll	r2,r5,r4
    cde0:	118cb03a 	or	r6,r2,r6
    cde4:	300cc03a 	cmpne	r6,r6,zero
    cde8:	398cb03a 	or	r6,r7,r6
    cdec:	0005883a 	mov	r2,zero
    cdf0:	003f3706 	br	cad0 <_gp+0xffff2764>
    cdf4:	80002a26 	beq	r16,zero,cea0 <__subdf3+0x534>
    cdf8:	0101ffc4 	movi	r4,2047
    cdfc:	49006626 	beq	r9,r4,cf98 <__subdf3+0x62c>
    ce00:	0085c83a 	sub	r2,zero,r2
    ce04:	18c02034 	orhi	r3,r3,128
    ce08:	01000e04 	movi	r4,56
    ce0c:	20807e16 	blt	r4,r2,d008 <__subdf3+0x69c>
    ce10:	010007c4 	movi	r4,31
    ce14:	2080e716 	blt	r4,r2,d1b4 <__subdf3+0x848>
    ce18:	01000804 	movi	r4,32
    ce1c:	2089c83a 	sub	r4,r4,r2
    ce20:	1914983a 	sll	r10,r3,r4
    ce24:	8890d83a 	srl	r8,r17,r2
    ce28:	8908983a 	sll	r4,r17,r4
    ce2c:	1884d83a 	srl	r2,r3,r2
    ce30:	5222b03a 	or	r17,r10,r8
    ce34:	2006c03a 	cmpne	r3,r4,zero
    ce38:	88e2b03a 	or	r17,r17,r3
    ce3c:	3463c83a 	sub	r17,r6,r17
    ce40:	2885c83a 	sub	r2,r5,r2
    ce44:	344d803a 	cmpltu	r6,r6,r17
    ce48:	1187c83a 	sub	r3,r2,r6
    ce4c:	4821883a 	mov	r16,r9
    ce50:	3825883a 	mov	r18,r7
    ce54:	003f2306 	br	cae4 <_gp+0xffff2778>
    ce58:	24d0b03a 	or	r8,r4,r19
    ce5c:	40001b1e 	bne	r8,zero,cecc <__subdf3+0x560>
    ce60:	0005883a 	mov	r2,zero
    ce64:	0009883a 	mov	r4,zero
    ce68:	0021883a 	mov	r16,zero
    ce6c:	003f4906 	br	cb94 <_gp+0xffff2828>
    ce70:	010007c4 	movi	r4,31
    ce74:	20803a16 	blt	r4,r2,cf60 <__subdf3+0x5f4>
    ce78:	01000804 	movi	r4,32
    ce7c:	2089c83a 	sub	r4,r4,r2
    ce80:	2912983a 	sll	r9,r5,r4
    ce84:	3090d83a 	srl	r8,r6,r2
    ce88:	3108983a 	sll	r4,r6,r4
    ce8c:	2884d83a 	srl	r2,r5,r2
    ce90:	4a12b03a 	or	r9,r9,r8
    ce94:	2008c03a 	cmpne	r4,r4,zero
    ce98:	4912b03a 	or	r9,r9,r4
    ce9c:	003f4e06 	br	cbd8 <_gp+0xffff286c>
    cea0:	1c48b03a 	or	r4,r3,r17
    cea4:	20003c26 	beq	r4,zero,cf98 <__subdf3+0x62c>
    cea8:	0084303a 	nor	r2,zero,r2
    ceac:	1000381e 	bne	r2,zero,cf90 <__subdf3+0x624>
    ceb0:	3463c83a 	sub	r17,r6,r17
    ceb4:	28c5c83a 	sub	r2,r5,r3
    ceb8:	344d803a 	cmpltu	r6,r6,r17
    cebc:	1187c83a 	sub	r3,r2,r6
    cec0:	4821883a 	mov	r16,r9
    cec4:	3825883a 	mov	r18,r7
    cec8:	003f0606 	br	cae4 <_gp+0xffff2778>
    cecc:	2023883a 	mov	r17,r4
    ced0:	003f0906 	br	caf8 <_gp+0xffff278c>
    ced4:	0101ffc4 	movi	r4,2047
    ced8:	813f3a1e 	bne	r16,r4,cbc4 <_gp+0xffff2858>
    cedc:	003ec406 	br	c9f0 <_gp+0xffff2684>
    cee0:	0005883a 	mov	r2,zero
    cee4:	003fb106 	br	cdac <_gp+0xffff2a40>
    cee8:	0005883a 	mov	r2,zero
    ceec:	003fbc06 	br	cde0 <_gp+0xffff2a74>
    cef0:	1c44b03a 	or	r2,r3,r17
    cef4:	80008e1e 	bne	r16,zero,d130 <__subdf3+0x7c4>
    cef8:	1000c826 	beq	r2,zero,d21c <__subdf3+0x8b0>
    cefc:	2984b03a 	or	r2,r5,r6
    cf00:	103ebb26 	beq	r2,zero,c9f0 <_gp+0xffff2684>
    cf04:	8989883a 	add	r4,r17,r6
    cf08:	1945883a 	add	r2,r3,r5
    cf0c:	2447803a 	cmpltu	r3,r4,r17
    cf10:	1887883a 	add	r3,r3,r2
    cf14:	1880202c 	andhi	r2,r3,128
    cf18:	2023883a 	mov	r17,r4
    cf1c:	103f1626 	beq	r2,zero,cb78 <_gp+0xffff280c>
    cf20:	00bfe034 	movhi	r2,65408
    cf24:	10bfffc4 	addi	r2,r2,-1
    cf28:	5021883a 	mov	r16,r10
    cf2c:	1886703a 	and	r3,r3,r2
    cf30:	003eaf06 	br	c9f0 <_gp+0xffff2684>
    cf34:	3825883a 	mov	r18,r7
    cf38:	003f0f06 	br	cb78 <_gp+0xffff280c>
    cf3c:	1c44b03a 	or	r2,r3,r17
    cf40:	8000251e 	bne	r16,zero,cfd8 <__subdf3+0x66c>
    cf44:	1000661e 	bne	r2,zero,d0e0 <__subdf3+0x774>
    cf48:	2990b03a 	or	r8,r5,r6
    cf4c:	40009626 	beq	r8,zero,d1a8 <__subdf3+0x83c>
    cf50:	2807883a 	mov	r3,r5
    cf54:	3023883a 	mov	r17,r6
    cf58:	3825883a 	mov	r18,r7
    cf5c:	003ea406 	br	c9f0 <_gp+0xffff2684>
    cf60:	127ff804 	addi	r9,r2,-32
    cf64:	01000804 	movi	r4,32
    cf68:	2a52d83a 	srl	r9,r5,r9
    cf6c:	11008c26 	beq	r2,r4,d1a0 <__subdf3+0x834>
    cf70:	01001004 	movi	r4,64
    cf74:	2085c83a 	sub	r2,r4,r2
    cf78:	2884983a 	sll	r2,r5,r2
    cf7c:	118cb03a 	or	r6,r2,r6
    cf80:	300cc03a 	cmpne	r6,r6,zero
    cf84:	4992b03a 	or	r9,r9,r6
    cf88:	0005883a 	mov	r2,zero
    cf8c:	003f1206 	br	cbd8 <_gp+0xffff286c>
    cf90:	0101ffc4 	movi	r4,2047
    cf94:	493f9c1e 	bne	r9,r4,ce08 <_gp+0xffff2a9c>
    cf98:	2807883a 	mov	r3,r5
    cf9c:	3023883a 	mov	r17,r6
    cfa0:	4821883a 	mov	r16,r9
    cfa4:	3825883a 	mov	r18,r7
    cfa8:	003e9106 	br	c9f0 <_gp+0xffff2684>
    cfac:	80001f1e 	bne	r16,zero,d02c <__subdf3+0x6c0>
    cfb0:	1c48b03a 	or	r4,r3,r17
    cfb4:	20005a26 	beq	r4,zero,d120 <__subdf3+0x7b4>
    cfb8:	0084303a 	nor	r2,zero,r2
    cfbc:	1000561e 	bne	r2,zero,d118 <__subdf3+0x7ac>
    cfc0:	89a3883a 	add	r17,r17,r6
    cfc4:	1945883a 	add	r2,r3,r5
    cfc8:	898d803a 	cmpltu	r6,r17,r6
    cfcc:	3087883a 	add	r3,r6,r2
    cfd0:	4821883a 	mov	r16,r9
    cfd4:	003f0506 	br	cbec <_gp+0xffff2880>
    cfd8:	10002b1e 	bne	r2,zero,d088 <__subdf3+0x71c>
    cfdc:	2984b03a 	or	r2,r5,r6
    cfe0:	10008026 	beq	r2,zero,d1e4 <__subdf3+0x878>
    cfe4:	2807883a 	mov	r3,r5
    cfe8:	3023883a 	mov	r17,r6
    cfec:	3825883a 	mov	r18,r7
    cff0:	0401ffc4 	movi	r16,2047
    cff4:	003e7e06 	br	c9f0 <_gp+0xffff2684>
    cff8:	3809883a 	mov	r4,r7
    cffc:	0011883a 	mov	r8,zero
    d000:	0005883a 	mov	r2,zero
    d004:	003ee306 	br	cb94 <_gp+0xffff2828>
    d008:	1c62b03a 	or	r17,r3,r17
    d00c:	8822c03a 	cmpne	r17,r17,zero
    d010:	0005883a 	mov	r2,zero
    d014:	003f8906 	br	ce3c <_gp+0xffff2ad0>
    d018:	3809883a 	mov	r4,r7
    d01c:	4821883a 	mov	r16,r9
    d020:	0011883a 	mov	r8,zero
    d024:	0005883a 	mov	r2,zero
    d028:	003eda06 	br	cb94 <_gp+0xffff2828>
    d02c:	0101ffc4 	movi	r4,2047
    d030:	49003b26 	beq	r9,r4,d120 <__subdf3+0x7b4>
    d034:	0085c83a 	sub	r2,zero,r2
    d038:	18c02034 	orhi	r3,r3,128
    d03c:	01000e04 	movi	r4,56
    d040:	20806e16 	blt	r4,r2,d1fc <__subdf3+0x890>
    d044:	010007c4 	movi	r4,31
    d048:	20807716 	blt	r4,r2,d228 <__subdf3+0x8bc>
    d04c:	01000804 	movi	r4,32
    d050:	2089c83a 	sub	r4,r4,r2
    d054:	1914983a 	sll	r10,r3,r4
    d058:	8890d83a 	srl	r8,r17,r2
    d05c:	8908983a 	sll	r4,r17,r4
    d060:	1884d83a 	srl	r2,r3,r2
    d064:	5222b03a 	or	r17,r10,r8
    d068:	2006c03a 	cmpne	r3,r4,zero
    d06c:	88e2b03a 	or	r17,r17,r3
    d070:	89a3883a 	add	r17,r17,r6
    d074:	1145883a 	add	r2,r2,r5
    d078:	898d803a 	cmpltu	r6,r17,r6
    d07c:	3087883a 	add	r3,r6,r2
    d080:	4821883a 	mov	r16,r9
    d084:	003ed906 	br	cbec <_gp+0xffff2880>
    d088:	2984b03a 	or	r2,r5,r6
    d08c:	10004226 	beq	r2,zero,d198 <__subdf3+0x82c>
    d090:	1808d0fa 	srli	r4,r3,3
    d094:	8822d0fa 	srli	r17,r17,3
    d098:	1806977a 	slli	r3,r3,29
    d09c:	2080022c 	andhi	r2,r4,8
    d0a0:	1c62b03a 	or	r17,r3,r17
    d0a4:	10000826 	beq	r2,zero,d0c8 <__subdf3+0x75c>
    d0a8:	2812d0fa 	srli	r9,r5,3
    d0ac:	4880022c 	andhi	r2,r9,8
    d0b0:	1000051e 	bne	r2,zero,d0c8 <__subdf3+0x75c>
    d0b4:	300cd0fa 	srli	r6,r6,3
    d0b8:	2804977a 	slli	r2,r5,29
    d0bc:	4809883a 	mov	r4,r9
    d0c0:	3825883a 	mov	r18,r7
    d0c4:	11a2b03a 	or	r17,r2,r6
    d0c8:	8806d77a 	srli	r3,r17,29
    d0cc:	200890fa 	slli	r4,r4,3
    d0d0:	882290fa 	slli	r17,r17,3
    d0d4:	0401ffc4 	movi	r16,2047
    d0d8:	1906b03a 	or	r3,r3,r4
    d0dc:	003e4406 	br	c9f0 <_gp+0xffff2684>
    d0e0:	2984b03a 	or	r2,r5,r6
    d0e4:	103e4226 	beq	r2,zero,c9f0 <_gp+0xffff2684>
    d0e8:	8989c83a 	sub	r4,r17,r6
    d0ec:	8911803a 	cmpltu	r8,r17,r4
    d0f0:	1945c83a 	sub	r2,r3,r5
    d0f4:	1205c83a 	sub	r2,r2,r8
    d0f8:	1200202c 	andhi	r8,r2,128
    d0fc:	403e9a26 	beq	r8,zero,cb68 <_gp+0xffff27fc>
    d100:	3463c83a 	sub	r17,r6,r17
    d104:	28c5c83a 	sub	r2,r5,r3
    d108:	344d803a 	cmpltu	r6,r6,r17
    d10c:	1187c83a 	sub	r3,r2,r6
    d110:	3825883a 	mov	r18,r7
    d114:	003e3606 	br	c9f0 <_gp+0xffff2684>
    d118:	0101ffc4 	movi	r4,2047
    d11c:	493fc71e 	bne	r9,r4,d03c <_gp+0xffff2cd0>
    d120:	2807883a 	mov	r3,r5
    d124:	3023883a 	mov	r17,r6
    d128:	4821883a 	mov	r16,r9
    d12c:	003e3006 	br	c9f0 <_gp+0xffff2684>
    d130:	10003626 	beq	r2,zero,d20c <__subdf3+0x8a0>
    d134:	2984b03a 	or	r2,r5,r6
    d138:	10001726 	beq	r2,zero,d198 <__subdf3+0x82c>
    d13c:	1808d0fa 	srli	r4,r3,3
    d140:	8822d0fa 	srli	r17,r17,3
    d144:	1806977a 	slli	r3,r3,29
    d148:	2080022c 	andhi	r2,r4,8
    d14c:	1c62b03a 	or	r17,r3,r17
    d150:	10000726 	beq	r2,zero,d170 <__subdf3+0x804>
    d154:	2812d0fa 	srli	r9,r5,3
    d158:	4880022c 	andhi	r2,r9,8
    d15c:	1000041e 	bne	r2,zero,d170 <__subdf3+0x804>
    d160:	300cd0fa 	srli	r6,r6,3
    d164:	2804977a 	slli	r2,r5,29
    d168:	4809883a 	mov	r4,r9
    d16c:	11a2b03a 	or	r17,r2,r6
    d170:	8806d77a 	srli	r3,r17,29
    d174:	200890fa 	slli	r4,r4,3
    d178:	882290fa 	slli	r17,r17,3
    d17c:	3825883a 	mov	r18,r7
    d180:	1906b03a 	or	r3,r3,r4
    d184:	0401ffc4 	movi	r16,2047
    d188:	003e1906 	br	c9f0 <_gp+0xffff2684>
    d18c:	000b883a 	mov	r5,zero
    d190:	0005883a 	mov	r2,zero
    d194:	003e2e06 	br	ca50 <_gp+0xffff26e4>
    d198:	0401ffc4 	movi	r16,2047
    d19c:	003e1406 	br	c9f0 <_gp+0xffff2684>
    d1a0:	0005883a 	mov	r2,zero
    d1a4:	003f7506 	br	cf7c <_gp+0xffff2c10>
    d1a8:	0005883a 	mov	r2,zero
    d1ac:	0009883a 	mov	r4,zero
    d1b0:	003e7806 	br	cb94 <_gp+0xffff2828>
    d1b4:	123ff804 	addi	r8,r2,-32
    d1b8:	01000804 	movi	r4,32
    d1bc:	1a10d83a 	srl	r8,r3,r8
    d1c0:	11002526 	beq	r2,r4,d258 <__subdf3+0x8ec>
    d1c4:	01001004 	movi	r4,64
    d1c8:	2085c83a 	sub	r2,r4,r2
    d1cc:	1884983a 	sll	r2,r3,r2
    d1d0:	1444b03a 	or	r2,r2,r17
    d1d4:	1004c03a 	cmpne	r2,r2,zero
    d1d8:	40a2b03a 	or	r17,r8,r2
    d1dc:	0005883a 	mov	r2,zero
    d1e0:	003f1606 	br	ce3c <_gp+0xffff2ad0>
    d1e4:	02000434 	movhi	r8,16
    d1e8:	0009883a 	mov	r4,zero
    d1ec:	423fffc4 	addi	r8,r8,-1
    d1f0:	00bfffc4 	movi	r2,-1
    d1f4:	0401ffc4 	movi	r16,2047
    d1f8:	003e6606 	br	cb94 <_gp+0xffff2828>
    d1fc:	1c62b03a 	or	r17,r3,r17
    d200:	8822c03a 	cmpne	r17,r17,zero
    d204:	0005883a 	mov	r2,zero
    d208:	003f9906 	br	d070 <_gp+0xffff2d04>
    d20c:	2807883a 	mov	r3,r5
    d210:	3023883a 	mov	r17,r6
    d214:	0401ffc4 	movi	r16,2047
    d218:	003df506 	br	c9f0 <_gp+0xffff2684>
    d21c:	2807883a 	mov	r3,r5
    d220:	3023883a 	mov	r17,r6
    d224:	003df206 	br	c9f0 <_gp+0xffff2684>
    d228:	123ff804 	addi	r8,r2,-32
    d22c:	01000804 	movi	r4,32
    d230:	1a10d83a 	srl	r8,r3,r8
    d234:	11000a26 	beq	r2,r4,d260 <__subdf3+0x8f4>
    d238:	01001004 	movi	r4,64
    d23c:	2085c83a 	sub	r2,r4,r2
    d240:	1884983a 	sll	r2,r3,r2
    d244:	1444b03a 	or	r2,r2,r17
    d248:	1004c03a 	cmpne	r2,r2,zero
    d24c:	40a2b03a 	or	r17,r8,r2
    d250:	0005883a 	mov	r2,zero
    d254:	003f8606 	br	d070 <_gp+0xffff2d04>
    d258:	0005883a 	mov	r2,zero
    d25c:	003fdc06 	br	d1d0 <_gp+0xffff2e64>
    d260:	0005883a 	mov	r2,zero
    d264:	003ff706 	br	d244 <_gp+0xffff2ed8>

0000d268 <__fixdfsi>:
    d268:	280cd53a 	srli	r6,r5,20
    d26c:	00c00434 	movhi	r3,16
    d270:	18ffffc4 	addi	r3,r3,-1
    d274:	3181ffcc 	andi	r6,r6,2047
    d278:	01c0ff84 	movi	r7,1022
    d27c:	28c6703a 	and	r3,r5,r3
    d280:	280ad7fa 	srli	r5,r5,31
    d284:	3980120e 	bge	r7,r6,d2d0 <__fixdfsi+0x68>
    d288:	00810744 	movi	r2,1053
    d28c:	11800c16 	blt	r2,r6,d2c0 <__fixdfsi+0x58>
    d290:	00810cc4 	movi	r2,1075
    d294:	1185c83a 	sub	r2,r2,r6
    d298:	01c007c4 	movi	r7,31
    d29c:	18c00434 	orhi	r3,r3,16
    d2a0:	38800d16 	blt	r7,r2,d2d8 <__fixdfsi+0x70>
    d2a4:	31befb44 	addi	r6,r6,-1043
    d2a8:	2084d83a 	srl	r2,r4,r2
    d2ac:	1986983a 	sll	r3,r3,r6
    d2b0:	1884b03a 	or	r2,r3,r2
    d2b4:	28000726 	beq	r5,zero,d2d4 <__fixdfsi+0x6c>
    d2b8:	0085c83a 	sub	r2,zero,r2
    d2bc:	f800283a 	ret
    d2c0:	00a00034 	movhi	r2,32768
    d2c4:	10bfffc4 	addi	r2,r2,-1
    d2c8:	2885883a 	add	r2,r5,r2
    d2cc:	f800283a 	ret
    d2d0:	0005883a 	mov	r2,zero
    d2d4:	f800283a 	ret
    d2d8:	008104c4 	movi	r2,1043
    d2dc:	1185c83a 	sub	r2,r2,r6
    d2e0:	1884d83a 	srl	r2,r3,r2
    d2e4:	003ff306 	br	d2b4 <_gp+0xffff2f48>

0000d2e8 <__floatsidf>:
    d2e8:	defffd04 	addi	sp,sp,-12
    d2ec:	dfc00215 	stw	ra,8(sp)
    d2f0:	dc400115 	stw	r17,4(sp)
    d2f4:	dc000015 	stw	r16,0(sp)
    d2f8:	20002b26 	beq	r4,zero,d3a8 <__floatsidf+0xc0>
    d2fc:	2023883a 	mov	r17,r4
    d300:	2020d7fa 	srli	r16,r4,31
    d304:	20002d16 	blt	r4,zero,d3bc <__floatsidf+0xd4>
    d308:	8809883a 	mov	r4,r17
    d30c:	000d46c0 	call	d46c <__clzsi2>
    d310:	01410784 	movi	r5,1054
    d314:	288bc83a 	sub	r5,r5,r2
    d318:	01010cc4 	movi	r4,1075
    d31c:	2149c83a 	sub	r4,r4,r5
    d320:	00c007c4 	movi	r3,31
    d324:	1900160e 	bge	r3,r4,d380 <__floatsidf+0x98>
    d328:	00c104c4 	movi	r3,1043
    d32c:	1947c83a 	sub	r3,r3,r5
    d330:	88c6983a 	sll	r3,r17,r3
    d334:	00800434 	movhi	r2,16
    d338:	10bfffc4 	addi	r2,r2,-1
    d33c:	1886703a 	and	r3,r3,r2
    d340:	2941ffcc 	andi	r5,r5,2047
    d344:	800d883a 	mov	r6,r16
    d348:	0005883a 	mov	r2,zero
    d34c:	280a953a 	slli	r5,r5,20
    d350:	31803fcc 	andi	r6,r6,255
    d354:	01000434 	movhi	r4,16
    d358:	300c97fa 	slli	r6,r6,31
    d35c:	213fffc4 	addi	r4,r4,-1
    d360:	1906703a 	and	r3,r3,r4
    d364:	1946b03a 	or	r3,r3,r5
    d368:	1986b03a 	or	r3,r3,r6
    d36c:	dfc00217 	ldw	ra,8(sp)
    d370:	dc400117 	ldw	r17,4(sp)
    d374:	dc000017 	ldw	r16,0(sp)
    d378:	dec00304 	addi	sp,sp,12
    d37c:	f800283a 	ret
    d380:	00c002c4 	movi	r3,11
    d384:	1887c83a 	sub	r3,r3,r2
    d388:	88c6d83a 	srl	r3,r17,r3
    d38c:	8904983a 	sll	r2,r17,r4
    d390:	01000434 	movhi	r4,16
    d394:	213fffc4 	addi	r4,r4,-1
    d398:	2941ffcc 	andi	r5,r5,2047
    d39c:	1906703a 	and	r3,r3,r4
    d3a0:	800d883a 	mov	r6,r16
    d3a4:	003fe906 	br	d34c <_gp+0xffff2fe0>
    d3a8:	000d883a 	mov	r6,zero
    d3ac:	000b883a 	mov	r5,zero
    d3b0:	0007883a 	mov	r3,zero
    d3b4:	0005883a 	mov	r2,zero
    d3b8:	003fe406 	br	d34c <_gp+0xffff2fe0>
    d3bc:	0123c83a 	sub	r17,zero,r4
    d3c0:	003fd106 	br	d308 <_gp+0xffff2f9c>

0000d3c4 <__floatunsidf>:
    d3c4:	defffe04 	addi	sp,sp,-8
    d3c8:	dc000015 	stw	r16,0(sp)
    d3cc:	dfc00115 	stw	ra,4(sp)
    d3d0:	2021883a 	mov	r16,r4
    d3d4:	20002226 	beq	r4,zero,d460 <__floatunsidf+0x9c>
    d3d8:	000d46c0 	call	d46c <__clzsi2>
    d3dc:	01010784 	movi	r4,1054
    d3e0:	2089c83a 	sub	r4,r4,r2
    d3e4:	01810cc4 	movi	r6,1075
    d3e8:	310dc83a 	sub	r6,r6,r4
    d3ec:	00c007c4 	movi	r3,31
    d3f0:	1980120e 	bge	r3,r6,d43c <__floatunsidf+0x78>
    d3f4:	00c104c4 	movi	r3,1043
    d3f8:	1907c83a 	sub	r3,r3,r4
    d3fc:	80ca983a 	sll	r5,r16,r3
    d400:	00800434 	movhi	r2,16
    d404:	10bfffc4 	addi	r2,r2,-1
    d408:	2101ffcc 	andi	r4,r4,2047
    d40c:	0021883a 	mov	r16,zero
    d410:	288a703a 	and	r5,r5,r2
    d414:	2008953a 	slli	r4,r4,20
    d418:	00c00434 	movhi	r3,16
    d41c:	18ffffc4 	addi	r3,r3,-1
    d420:	28c6703a 	and	r3,r5,r3
    d424:	8005883a 	mov	r2,r16
    d428:	1906b03a 	or	r3,r3,r4
    d42c:	dfc00117 	ldw	ra,4(sp)
    d430:	dc000017 	ldw	r16,0(sp)
    d434:	dec00204 	addi	sp,sp,8
    d438:	f800283a 	ret
    d43c:	00c002c4 	movi	r3,11
    d440:	188bc83a 	sub	r5,r3,r2
    d444:	814ad83a 	srl	r5,r16,r5
    d448:	00c00434 	movhi	r3,16
    d44c:	18ffffc4 	addi	r3,r3,-1
    d450:	81a0983a 	sll	r16,r16,r6
    d454:	2101ffcc 	andi	r4,r4,2047
    d458:	28ca703a 	and	r5,r5,r3
    d45c:	003fed06 	br	d414 <_gp+0xffff30a8>
    d460:	0009883a 	mov	r4,zero
    d464:	000b883a 	mov	r5,zero
    d468:	003fea06 	br	d414 <_gp+0xffff30a8>

0000d46c <__clzsi2>:
    d46c:	00bfffd4 	movui	r2,65535
    d470:	11000536 	bltu	r2,r4,d488 <__clzsi2+0x1c>
    d474:	00803fc4 	movi	r2,255
    d478:	11000f36 	bltu	r2,r4,d4b8 <__clzsi2+0x4c>
    d47c:	00800804 	movi	r2,32
    d480:	0007883a 	mov	r3,zero
    d484:	00000506 	br	d49c <__clzsi2+0x30>
    d488:	00804034 	movhi	r2,256
    d48c:	10bfffc4 	addi	r2,r2,-1
    d490:	11000c2e 	bgeu	r2,r4,d4c4 <__clzsi2+0x58>
    d494:	00800204 	movi	r2,8
    d498:	00c00604 	movi	r3,24
    d49c:	20c8d83a 	srl	r4,r4,r3
    d4a0:	00c00074 	movhi	r3,1
    d4a4:	18c1e504 	addi	r3,r3,1940
    d4a8:	1909883a 	add	r4,r3,r4
    d4ac:	20c00003 	ldbu	r3,0(r4)
    d4b0:	10c5c83a 	sub	r2,r2,r3
    d4b4:	f800283a 	ret
    d4b8:	00800604 	movi	r2,24
    d4bc:	00c00204 	movi	r3,8
    d4c0:	003ff606 	br	d49c <_gp+0xffff3130>
    d4c4:	00800404 	movi	r2,16
    d4c8:	1007883a 	mov	r3,r2
    d4cc:	003ff306 	br	d49c <_gp+0xffff3130>

0000d4d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d4d0:	defffe04 	addi	sp,sp,-8
    d4d4:	dfc00115 	stw	ra,4(sp)
    d4d8:	df000015 	stw	fp,0(sp)
    d4dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d4e0:	d0a00b17 	ldw	r2,-32724(gp)
    d4e4:	10000326 	beq	r2,zero,d4f4 <alt_get_errno+0x24>
    d4e8:	d0a00b17 	ldw	r2,-32724(gp)
    d4ec:	103ee83a 	callr	r2
    d4f0:	00000106 	br	d4f8 <alt_get_errno+0x28>
    d4f4:	d0a6d104 	addi	r2,gp,-25788
}
    d4f8:	e037883a 	mov	sp,fp
    d4fc:	dfc00117 	ldw	ra,4(sp)
    d500:	df000017 	ldw	fp,0(sp)
    d504:	dec00204 	addi	sp,sp,8
    d508:	f800283a 	ret

0000d50c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d50c:	defffb04 	addi	sp,sp,-20
    d510:	dfc00415 	stw	ra,16(sp)
    d514:	df000315 	stw	fp,12(sp)
    d518:	df000304 	addi	fp,sp,12
    d51c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d520:	e0bfff17 	ldw	r2,-4(fp)
    d524:	10000816 	blt	r2,zero,d548 <close+0x3c>
    d528:	01400304 	movi	r5,12
    d52c:	e13fff17 	ldw	r4,-4(fp)
    d530:	000049c0 	call	49c <__mulsi3>
    d534:	1007883a 	mov	r3,r2
    d538:	00800074 	movhi	r2,1
    d53c:	10846304 	addi	r2,r2,4492
    d540:	1885883a 	add	r2,r3,r2
    d544:	00000106 	br	d54c <close+0x40>
    d548:	0005883a 	mov	r2,zero
    d54c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d550:	e0bffd17 	ldw	r2,-12(fp)
    d554:	10001926 	beq	r2,zero,d5bc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d558:	e0bffd17 	ldw	r2,-12(fp)
    d55c:	10800017 	ldw	r2,0(r2)
    d560:	10800417 	ldw	r2,16(r2)
    d564:	10000626 	beq	r2,zero,d580 <close+0x74>
    d568:	e0bffd17 	ldw	r2,-12(fp)
    d56c:	10800017 	ldw	r2,0(r2)
    d570:	10800417 	ldw	r2,16(r2)
    d574:	e13ffd17 	ldw	r4,-12(fp)
    d578:	103ee83a 	callr	r2
    d57c:	00000106 	br	d584 <close+0x78>
    d580:	0005883a 	mov	r2,zero
    d584:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d588:	e13fff17 	ldw	r4,-4(fp)
    d58c:	000decc0 	call	decc <alt_release_fd>
    if (rval < 0)
    d590:	e0bffe17 	ldw	r2,-8(fp)
    d594:	1000070e 	bge	r2,zero,d5b4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    d598:	000d4d00 	call	d4d0 <alt_get_errno>
    d59c:	1007883a 	mov	r3,r2
    d5a0:	e0bffe17 	ldw	r2,-8(fp)
    d5a4:	0085c83a 	sub	r2,zero,r2
    d5a8:	18800015 	stw	r2,0(r3)
      return -1;
    d5ac:	00bfffc4 	movi	r2,-1
    d5b0:	00000706 	br	d5d0 <close+0xc4>
    }
    return 0;
    d5b4:	0005883a 	mov	r2,zero
    d5b8:	00000506 	br	d5d0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d5bc:	000d4d00 	call	d4d0 <alt_get_errno>
    d5c0:	1007883a 	mov	r3,r2
    d5c4:	00801444 	movi	r2,81
    d5c8:	18800015 	stw	r2,0(r3)
    return -1;
    d5cc:	00bfffc4 	movi	r2,-1
  }
}
    d5d0:	e037883a 	mov	sp,fp
    d5d4:	dfc00117 	ldw	ra,4(sp)
    d5d8:	df000017 	ldw	fp,0(sp)
    d5dc:	dec00204 	addi	sp,sp,8
    d5e0:	f800283a 	ret

0000d5e4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d5e4:	defffc04 	addi	sp,sp,-16
    d5e8:	df000315 	stw	fp,12(sp)
    d5ec:	df000304 	addi	fp,sp,12
    d5f0:	e13ffd15 	stw	r4,-12(fp)
    d5f4:	e17ffe15 	stw	r5,-8(fp)
    d5f8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d5fc:	e0bfff17 	ldw	r2,-4(fp)
}
    d600:	e037883a 	mov	sp,fp
    d604:	df000017 	ldw	fp,0(sp)
    d608:	dec00104 	addi	sp,sp,4
    d60c:	f800283a 	ret

0000d610 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d610:	defffe04 	addi	sp,sp,-8
    d614:	dfc00115 	stw	ra,4(sp)
    d618:	df000015 	stw	fp,0(sp)
    d61c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d620:	d0a00b17 	ldw	r2,-32724(gp)
    d624:	10000326 	beq	r2,zero,d634 <alt_get_errno+0x24>
    d628:	d0a00b17 	ldw	r2,-32724(gp)
    d62c:	103ee83a 	callr	r2
    d630:	00000106 	br	d638 <alt_get_errno+0x28>
    d634:	d0a6d104 	addi	r2,gp,-25788
}
    d638:	e037883a 	mov	sp,fp
    d63c:	dfc00117 	ldw	ra,4(sp)
    d640:	df000017 	ldw	fp,0(sp)
    d644:	dec00204 	addi	sp,sp,8
    d648:	f800283a 	ret

0000d64c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d64c:	defffb04 	addi	sp,sp,-20
    d650:	dfc00415 	stw	ra,16(sp)
    d654:	df000315 	stw	fp,12(sp)
    d658:	df000304 	addi	fp,sp,12
    d65c:	e13ffe15 	stw	r4,-8(fp)
    d660:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d664:	e0bffe17 	ldw	r2,-8(fp)
    d668:	10000816 	blt	r2,zero,d68c <fstat+0x40>
    d66c:	01400304 	movi	r5,12
    d670:	e13ffe17 	ldw	r4,-8(fp)
    d674:	000049c0 	call	49c <__mulsi3>
    d678:	1007883a 	mov	r3,r2
    d67c:	00800074 	movhi	r2,1
    d680:	10846304 	addi	r2,r2,4492
    d684:	1885883a 	add	r2,r3,r2
    d688:	00000106 	br	d690 <fstat+0x44>
    d68c:	0005883a 	mov	r2,zero
    d690:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    d694:	e0bffd17 	ldw	r2,-12(fp)
    d698:	10001026 	beq	r2,zero,d6dc <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d69c:	e0bffd17 	ldw	r2,-12(fp)
    d6a0:	10800017 	ldw	r2,0(r2)
    d6a4:	10800817 	ldw	r2,32(r2)
    d6a8:	10000726 	beq	r2,zero,d6c8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    d6ac:	e0bffd17 	ldw	r2,-12(fp)
    d6b0:	10800017 	ldw	r2,0(r2)
    d6b4:	10800817 	ldw	r2,32(r2)
    d6b8:	e17fff17 	ldw	r5,-4(fp)
    d6bc:	e13ffd17 	ldw	r4,-12(fp)
    d6c0:	103ee83a 	callr	r2
    d6c4:	00000a06 	br	d6f0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d6c8:	e0bfff17 	ldw	r2,-4(fp)
    d6cc:	00c80004 	movi	r3,8192
    d6d0:	10c00115 	stw	r3,4(r2)
      return 0;
    d6d4:	0005883a 	mov	r2,zero
    d6d8:	00000506 	br	d6f0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d6dc:	000d6100 	call	d610 <alt_get_errno>
    d6e0:	1007883a 	mov	r3,r2
    d6e4:	00801444 	movi	r2,81
    d6e8:	18800015 	stw	r2,0(r3)
    return -1;
    d6ec:	00bfffc4 	movi	r2,-1
  }
}
    d6f0:	e037883a 	mov	sp,fp
    d6f4:	dfc00117 	ldw	ra,4(sp)
    d6f8:	df000017 	ldw	fp,0(sp)
    d6fc:	dec00204 	addi	sp,sp,8
    d700:	f800283a 	ret

0000d704 <alt_getchar>:
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    d704:	defffe04 	addi	sp,sp,-8
    d708:	dfc00115 	stw	ra,4(sp)
    d70c:	df000015 	stw	fp,0(sp)
    d710:	d839883a 	mov	fp,sp
    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    }
    return c;
#else
    return getchar();
    d714:	d0a00117 	ldw	r2,-32764(gp)
    d718:	10800117 	ldw	r2,4(r2)
    d71c:	1009883a 	mov	r4,r2
    d720:	000fda00 	call	fda0 <getc>
#endif
#endif
}
    d724:	e037883a 	mov	sp,fp
    d728:	dfc00117 	ldw	ra,4(sp)
    d72c:	df000017 	ldw	fp,0(sp)
    d730:	dec00204 	addi	sp,sp,8
    d734:	f800283a 	ret

0000d738 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d738:	defffe04 	addi	sp,sp,-8
    d73c:	dfc00115 	stw	ra,4(sp)
    d740:	df000015 	stw	fp,0(sp)
    d744:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d748:	d0a00b17 	ldw	r2,-32724(gp)
    d74c:	10000326 	beq	r2,zero,d75c <alt_get_errno+0x24>
    d750:	d0a00b17 	ldw	r2,-32724(gp)
    d754:	103ee83a 	callr	r2
    d758:	00000106 	br	d760 <alt_get_errno+0x28>
    d75c:	d0a6d104 	addi	r2,gp,-25788
}
    d760:	e037883a 	mov	sp,fp
    d764:	dfc00117 	ldw	ra,4(sp)
    d768:	df000017 	ldw	fp,0(sp)
    d76c:	dec00204 	addi	sp,sp,8
    d770:	f800283a 	ret

0000d774 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d774:	deffed04 	addi	sp,sp,-76
    d778:	dfc01215 	stw	ra,72(sp)
    d77c:	df001115 	stw	fp,68(sp)
    d780:	df001104 	addi	fp,sp,68
    d784:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d788:	e0bfff17 	ldw	r2,-4(fp)
    d78c:	10000816 	blt	r2,zero,d7b0 <isatty+0x3c>
    d790:	01400304 	movi	r5,12
    d794:	e13fff17 	ldw	r4,-4(fp)
    d798:	000049c0 	call	49c <__mulsi3>
    d79c:	1007883a 	mov	r3,r2
    d7a0:	00800074 	movhi	r2,1
    d7a4:	10846304 	addi	r2,r2,4492
    d7a8:	1885883a 	add	r2,r3,r2
    d7ac:	00000106 	br	d7b4 <isatty+0x40>
    d7b0:	0005883a 	mov	r2,zero
    d7b4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d7b8:	e0bfef17 	ldw	r2,-68(fp)
    d7bc:	10000e26 	beq	r2,zero,d7f8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d7c0:	e0bfef17 	ldw	r2,-68(fp)
    d7c4:	10800017 	ldw	r2,0(r2)
    d7c8:	10800817 	ldw	r2,32(r2)
    d7cc:	1000021e 	bne	r2,zero,d7d8 <isatty+0x64>
    {
      return 1;
    d7d0:	00800044 	movi	r2,1
    d7d4:	00000d06 	br	d80c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d7d8:	e0bff004 	addi	r2,fp,-64
    d7dc:	100b883a 	mov	r5,r2
    d7e0:	e13fff17 	ldw	r4,-4(fp)
    d7e4:	000d64c0 	call	d64c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d7e8:	e0bff117 	ldw	r2,-60(fp)
    d7ec:	10880020 	cmpeqi	r2,r2,8192
    d7f0:	10803fcc 	andi	r2,r2,255
    d7f4:	00000506 	br	d80c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d7f8:	000d7380 	call	d738 <alt_get_errno>
    d7fc:	1007883a 	mov	r3,r2
    d800:	00801444 	movi	r2,81
    d804:	18800015 	stw	r2,0(r3)
    return 0;
    d808:	0005883a 	mov	r2,zero
  }
}
    d80c:	e037883a 	mov	sp,fp
    d810:	dfc00117 	ldw	ra,4(sp)
    d814:	df000017 	ldw	fp,0(sp)
    d818:	dec00204 	addi	sp,sp,8
    d81c:	f800283a 	ret

0000d820 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d820:	defffc04 	addi	sp,sp,-16
    d824:	df000315 	stw	fp,12(sp)
    d828:	df000304 	addi	fp,sp,12
    d82c:	e13ffd15 	stw	r4,-12(fp)
    d830:	e17ffe15 	stw	r5,-8(fp)
    d834:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d838:	e0fffe17 	ldw	r3,-8(fp)
    d83c:	e0bffd17 	ldw	r2,-12(fp)
    d840:	18800c26 	beq	r3,r2,d874 <alt_load_section+0x54>
  {
    while( to != end )
    d844:	00000806 	br	d868 <alt_load_section+0x48>
    {
      *to++ = *from++;
    d848:	e0bffe17 	ldw	r2,-8(fp)
    d84c:	10c00104 	addi	r3,r2,4
    d850:	e0fffe15 	stw	r3,-8(fp)
    d854:	e0fffd17 	ldw	r3,-12(fp)
    d858:	19000104 	addi	r4,r3,4
    d85c:	e13ffd15 	stw	r4,-12(fp)
    d860:	18c00017 	ldw	r3,0(r3)
    d864:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d868:	e0fffe17 	ldw	r3,-8(fp)
    d86c:	e0bfff17 	ldw	r2,-4(fp)
    d870:	18bff51e 	bne	r3,r2,d848 <_gp+0xffff34dc>
    {
      *to++ = *from++;
    }
  }
}
    d874:	0001883a 	nop
    d878:	e037883a 	mov	sp,fp
    d87c:	df000017 	ldw	fp,0(sp)
    d880:	dec00104 	addi	sp,sp,4
    d884:	f800283a 	ret

0000d888 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d888:	defffe04 	addi	sp,sp,-8
    d88c:	dfc00115 	stw	ra,4(sp)
    d890:	df000015 	stw	fp,0(sp)
    d894:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d898:	01800074 	movhi	r6,1
    d89c:	3188eb04 	addi	r6,r6,9132
    d8a0:	01400074 	movhi	r5,1
    d8a4:	29423004 	addi	r5,r5,2240
    d8a8:	01000074 	movhi	r4,1
    d8ac:	2108eb04 	addi	r4,r4,9132
    d8b0:	000d8200 	call	d820 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d8b4:	01800034 	movhi	r6,0
    d8b8:	31808c04 	addi	r6,r6,560
    d8bc:	01400034 	movhi	r5,0
    d8c0:	29400804 	addi	r5,r5,32
    d8c4:	01000034 	movhi	r4,0
    d8c8:	21000804 	addi	r4,r4,32
    d8cc:	000d8200 	call	d820 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d8d0:	01800074 	movhi	r6,1
    d8d4:	31823004 	addi	r6,r6,2240
    d8d8:	01400074 	movhi	r5,1
    d8dc:	29415404 	addi	r5,r5,1360
    d8e0:	01000074 	movhi	r4,1
    d8e4:	21015404 	addi	r4,r4,1360
    d8e8:	000d8200 	call	d820 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d8ec:	000ef0c0 	call	ef0c <alt_dcache_flush_all>
  alt_icache_flush_all();
    d8f0:	000f0cc0 	call	f0cc <alt_icache_flush_all>
}
    d8f4:	0001883a 	nop
    d8f8:	e037883a 	mov	sp,fp
    d8fc:	dfc00117 	ldw	ra,4(sp)
    d900:	df000017 	ldw	fp,0(sp)
    d904:	dec00204 	addi	sp,sp,8
    d908:	f800283a 	ret

0000d90c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d90c:	defffe04 	addi	sp,sp,-8
    d910:	dfc00115 	stw	ra,4(sp)
    d914:	df000015 	stw	fp,0(sp)
    d918:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d91c:	d0a00b17 	ldw	r2,-32724(gp)
    d920:	10000326 	beq	r2,zero,d930 <alt_get_errno+0x24>
    d924:	d0a00b17 	ldw	r2,-32724(gp)
    d928:	103ee83a 	callr	r2
    d92c:	00000106 	br	d934 <alt_get_errno+0x28>
    d930:	d0a6d104 	addi	r2,gp,-25788
}
    d934:	e037883a 	mov	sp,fp
    d938:	dfc00117 	ldw	ra,4(sp)
    d93c:	df000017 	ldw	fp,0(sp)
    d940:	dec00204 	addi	sp,sp,8
    d944:	f800283a 	ret

0000d948 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d948:	defff904 	addi	sp,sp,-28
    d94c:	dfc00615 	stw	ra,24(sp)
    d950:	df000515 	stw	fp,20(sp)
    d954:	df000504 	addi	fp,sp,20
    d958:	e13ffd15 	stw	r4,-12(fp)
    d95c:	e17ffe15 	stw	r5,-8(fp)
    d960:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d964:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d968:	e0bffd17 	ldw	r2,-12(fp)
    d96c:	10000816 	blt	r2,zero,d990 <lseek+0x48>
    d970:	01400304 	movi	r5,12
    d974:	e13ffd17 	ldw	r4,-12(fp)
    d978:	000049c0 	call	49c <__mulsi3>
    d97c:	1007883a 	mov	r3,r2
    d980:	00800074 	movhi	r2,1
    d984:	10846304 	addi	r2,r2,4492
    d988:	1885883a 	add	r2,r3,r2
    d98c:	00000106 	br	d994 <lseek+0x4c>
    d990:	0005883a 	mov	r2,zero
    d994:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    d998:	e0bffc17 	ldw	r2,-16(fp)
    d99c:	10001026 	beq	r2,zero,d9e0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    d9a0:	e0bffc17 	ldw	r2,-16(fp)
    d9a4:	10800017 	ldw	r2,0(r2)
    d9a8:	10800717 	ldw	r2,28(r2)
    d9ac:	10000926 	beq	r2,zero,d9d4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    d9b0:	e0bffc17 	ldw	r2,-16(fp)
    d9b4:	10800017 	ldw	r2,0(r2)
    d9b8:	10800717 	ldw	r2,28(r2)
    d9bc:	e1bfff17 	ldw	r6,-4(fp)
    d9c0:	e17ffe17 	ldw	r5,-8(fp)
    d9c4:	e13ffc17 	ldw	r4,-16(fp)
    d9c8:	103ee83a 	callr	r2
    d9cc:	e0bffb15 	stw	r2,-20(fp)
    d9d0:	00000506 	br	d9e8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    d9d4:	00bfde84 	movi	r2,-134
    d9d8:	e0bffb15 	stw	r2,-20(fp)
    d9dc:	00000206 	br	d9e8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    d9e0:	00bfebc4 	movi	r2,-81
    d9e4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    d9e8:	e0bffb17 	ldw	r2,-20(fp)
    d9ec:	1000070e 	bge	r2,zero,da0c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    d9f0:	000d90c0 	call	d90c <alt_get_errno>
    d9f4:	1007883a 	mov	r3,r2
    d9f8:	e0bffb17 	ldw	r2,-20(fp)
    d9fc:	0085c83a 	sub	r2,zero,r2
    da00:	18800015 	stw	r2,0(r3)
    rc = -1;
    da04:	00bfffc4 	movi	r2,-1
    da08:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    da0c:	e0bffb17 	ldw	r2,-20(fp)
}
    da10:	e037883a 	mov	sp,fp
    da14:	dfc00117 	ldw	ra,4(sp)
    da18:	df000017 	ldw	fp,0(sp)
    da1c:	dec00204 	addi	sp,sp,8
    da20:	f800283a 	ret

0000da24 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    da24:	defffd04 	addi	sp,sp,-12
    da28:	dfc00215 	stw	ra,8(sp)
    da2c:	df000115 	stw	fp,4(sp)
    da30:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    da34:	0009883a 	mov	r4,zero
    da38:	000e1a00 	call	e1a0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    da3c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    da40:	000e1d80 	call	e1d8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    da44:	01800074 	movhi	r6,1
    da48:	31822804 	addi	r6,r6,2208
    da4c:	01400074 	movhi	r5,1
    da50:	29422804 	addi	r5,r5,2208
    da54:	01000074 	movhi	r4,1
    da58:	21022804 	addi	r4,r4,2208
    da5c:	000f4700 	call	f470 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    da60:	000f00c0 	call	f00c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    da64:	01000074 	movhi	r4,1
    da68:	213c1b04 	addi	r4,r4,-3988
    da6c:	000fc300 	call	fc30 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    da70:	d0a6d217 	ldw	r2,-25784(gp)
    da74:	d0e6d317 	ldw	r3,-25780(gp)
    da78:	d126d417 	ldw	r4,-25776(gp)
    da7c:	200d883a 	mov	r6,r4
    da80:	180b883a 	mov	r5,r3
    da84:	1009883a 	mov	r4,r2
    da88:	000045c0 	call	45c <main>
    da8c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    da90:	01000044 	movi	r4,1
    da94:	000d50c0 	call	d50c <close>
  exit (result);
    da98:	e13fff17 	ldw	r4,-4(fp)
    da9c:	000fc440 	call	fc44 <exit>

0000daa0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    daa0:	defffe04 	addi	sp,sp,-8
    daa4:	df000115 	stw	fp,4(sp)
    daa8:	df000104 	addi	fp,sp,4
    daac:	e13fff15 	stw	r4,-4(fp)
}
    dab0:	0001883a 	nop
    dab4:	e037883a 	mov	sp,fp
    dab8:	df000017 	ldw	fp,0(sp)
    dabc:	dec00104 	addi	sp,sp,4
    dac0:	f800283a 	ret

0000dac4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    dac4:	defffe04 	addi	sp,sp,-8
    dac8:	df000115 	stw	fp,4(sp)
    dacc:	df000104 	addi	fp,sp,4
    dad0:	e13fff15 	stw	r4,-4(fp)
}
    dad4:	0001883a 	nop
    dad8:	e037883a 	mov	sp,fp
    dadc:	df000017 	ldw	fp,0(sp)
    dae0:	dec00104 	addi	sp,sp,4
    dae4:	f800283a 	ret

0000dae8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    dae8:	defff204 	addi	sp,sp,-56
    daec:	dfc00a15 	stw	ra,40(sp)
    daf0:	df000915 	stw	fp,36(sp)
    daf4:	df000904 	addi	fp,sp,36
    daf8:	e13fff15 	stw	r4,-4(fp)
    dafc:	e1400215 	stw	r5,8(fp)
    db00:	e1800315 	stw	r6,12(fp)
    db04:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
    db08:	e0800204 	addi	r2,fp,8
    db0c:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    db10:	e0bfff17 	ldw	r2,-4(fp)
    db14:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
    db18:	00006f06 	br	dcd8 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    db1c:	e0bff807 	ldb	r2,-32(fp)
    db20:	10800960 	cmpeqi	r2,r2,37
    db24:	1000041e 	bne	r2,zero,db38 <alt_printf+0x50>
        {
            alt_putchar(c);
    db28:	e0bff807 	ldb	r2,-32(fp)
    db2c:	1009883a 	mov	r4,r2
    db30:	000dd140 	call	dd14 <alt_putchar>
    db34:	00006806 	br	dcd8 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    db38:	e0bff717 	ldw	r2,-36(fp)
    db3c:	10c00044 	addi	r3,r2,1
    db40:	e0fff715 	stw	r3,-36(fp)
    db44:	10800003 	ldbu	r2,0(r2)
    db48:	e0bff805 	stb	r2,-32(fp)
    db4c:	e0bff807 	ldb	r2,-32(fp)
    db50:	10006926 	beq	r2,zero,dcf8 <alt_printf+0x210>
            {
                if (c == '%')
    db54:	e0bff807 	ldb	r2,-32(fp)
    db58:	10800958 	cmpnei	r2,r2,37
    db5c:	1000041e 	bne	r2,zero,db70 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    db60:	e0bff807 	ldb	r2,-32(fp)
    db64:	1009883a 	mov	r4,r2
    db68:	000dd140 	call	dd14 <alt_putchar>
    db6c:	00005a06 	br	dcd8 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
    db70:	e0bff807 	ldb	r2,-32(fp)
    db74:	108018d8 	cmpnei	r2,r2,99
    db78:	1000081e 	bne	r2,zero,db9c <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
    db7c:	e0bffe17 	ldw	r2,-8(fp)
    db80:	10c00104 	addi	r3,r2,4
    db84:	e0fffe15 	stw	r3,-8(fp)
    db88:	10800017 	ldw	r2,0(r2)
    db8c:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
    db90:	e13ffd17 	ldw	r4,-12(fp)
    db94:	000dd140 	call	dd14 <alt_putchar>
    db98:	00004f06 	br	dcd8 <alt_printf+0x1f0>
                }
                else if (c == 'x')
    db9c:	e0bff807 	ldb	r2,-32(fp)
    dba0:	10801e18 	cmpnei	r2,r2,120
    dba4:	1000341e 	bne	r2,zero,dc78 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    dba8:	e0bffe17 	ldw	r2,-8(fp)
    dbac:	10c00104 	addi	r3,r2,4
    dbb0:	e0fffe15 	stw	r3,-8(fp)
    dbb4:	10800017 	ldw	r2,0(r2)
    dbb8:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    dbbc:	e0bffb17 	ldw	r2,-20(fp)
    dbc0:	1000031e 	bne	r2,zero,dbd0 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
    dbc4:	01000c04 	movi	r4,48
    dbc8:	000dd140 	call	dd14 <alt_putchar>
                        continue;
    dbcc:	00004206 	br	dcd8 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    dbd0:	00800704 	movi	r2,28
    dbd4:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
    dbd8:	00000306 	br	dbe8 <alt_printf+0x100>
                        digit_shift -= 4;
    dbdc:	e0bff917 	ldw	r2,-28(fp)
    dbe0:	10bfff04 	addi	r2,r2,-4
    dbe4:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    dbe8:	00c003c4 	movi	r3,15
    dbec:	e0bff917 	ldw	r2,-28(fp)
    dbf0:	1884983a 	sll	r2,r3,r2
    dbf4:	1007883a 	mov	r3,r2
    dbf8:	e0bffb17 	ldw	r2,-20(fp)
    dbfc:	1884703a 	and	r2,r3,r2
    dc00:	103ff626 	beq	r2,zero,dbdc <_gp+0xffff3870>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    dc04:	00001906 	br	dc6c <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    dc08:	00c003c4 	movi	r3,15
    dc0c:	e0bff917 	ldw	r2,-28(fp)
    dc10:	1884983a 	sll	r2,r3,r2
    dc14:	1007883a 	mov	r3,r2
    dc18:	e0bffb17 	ldw	r2,-20(fp)
    dc1c:	1886703a 	and	r3,r3,r2
    dc20:	e0bff917 	ldw	r2,-28(fp)
    dc24:	1884d83a 	srl	r2,r3,r2
    dc28:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
    dc2c:	e0bffc17 	ldw	r2,-16(fp)
    dc30:	108002a8 	cmpgeui	r2,r2,10
    dc34:	1000041e 	bne	r2,zero,dc48 <alt_printf+0x160>
                            c = '0' + digit;
    dc38:	e0bffc17 	ldw	r2,-16(fp)
    dc3c:	10800c04 	addi	r2,r2,48
    dc40:	e0bff805 	stb	r2,-32(fp)
    dc44:	00000306 	br	dc54 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
    dc48:	e0bffc17 	ldw	r2,-16(fp)
    dc4c:	108015c4 	addi	r2,r2,87
    dc50:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
    dc54:	e0bff807 	ldb	r2,-32(fp)
    dc58:	1009883a 	mov	r4,r2
    dc5c:	000dd140 	call	dd14 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    dc60:	e0bff917 	ldw	r2,-28(fp)
    dc64:	10bfff04 	addi	r2,r2,-4
    dc68:	e0bff915 	stw	r2,-28(fp)
    dc6c:	e0bff917 	ldw	r2,-28(fp)
    dc70:	103fe50e 	bge	r2,zero,dc08 <_gp+0xffff389c>
    dc74:	00001806 	br	dcd8 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    dc78:	e0bff807 	ldb	r2,-32(fp)
    dc7c:	10801cd8 	cmpnei	r2,r2,115
    dc80:	1000151e 	bne	r2,zero,dcd8 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    dc84:	e0bffe17 	ldw	r2,-8(fp)
    dc88:	10c00104 	addi	r3,r2,4
    dc8c:	e0fffe15 	stw	r3,-8(fp)
    dc90:	10800017 	ldw	r2,0(r2)
    dc94:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
    dc98:	00000906 	br	dcc0 <alt_printf+0x1d8>
                      alt_putchar(*s++);
    dc9c:	e0bffa17 	ldw	r2,-24(fp)
    dca0:	10c00044 	addi	r3,r2,1
    dca4:	e0fffa15 	stw	r3,-24(fp)
    dca8:	10800003 	ldbu	r2,0(r2)
    dcac:	10803fcc 	andi	r2,r2,255
    dcb0:	1080201c 	xori	r2,r2,128
    dcb4:	10bfe004 	addi	r2,r2,-128
    dcb8:	1009883a 	mov	r4,r2
    dcbc:	000dd140 	call	dd14 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    dcc0:	e0bffa17 	ldw	r2,-24(fp)
    dcc4:	10800003 	ldbu	r2,0(r2)
    dcc8:	10803fcc 	andi	r2,r2,255
    dccc:	1080201c 	xori	r2,r2,128
    dcd0:	10bfe004 	addi	r2,r2,-128
    dcd4:	103ff11e 	bne	r2,zero,dc9c <_gp+0xffff3930>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    dcd8:	e0bff717 	ldw	r2,-36(fp)
    dcdc:	10c00044 	addi	r3,r2,1
    dce0:	e0fff715 	stw	r3,-36(fp)
    dce4:	10800003 	ldbu	r2,0(r2)
    dce8:	e0bff805 	stb	r2,-32(fp)
    dcec:	e0bff807 	ldb	r2,-32(fp)
    dcf0:	103f8a1e 	bne	r2,zero,db1c <_gp+0xffff37b0>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    dcf4:	00000106 	br	dcfc <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
    dcf8:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    dcfc:	0001883a 	nop
    dd00:	e037883a 	mov	sp,fp
    dd04:	dfc00117 	ldw	ra,4(sp)
    dd08:	df000017 	ldw	fp,0(sp)
    dd0c:	dec00504 	addi	sp,sp,20
    dd10:	f800283a 	ret

0000dd14 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    dd14:	defffd04 	addi	sp,sp,-12
    dd18:	dfc00215 	stw	ra,8(sp)
    dd1c:	df000115 	stw	fp,4(sp)
    dd20:	df000104 	addi	fp,sp,4
    dd24:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    dd28:	d0a00117 	ldw	r2,-32764(gp)
    dd2c:	10800217 	ldw	r2,8(r2)
    dd30:	100b883a 	mov	r5,r2
    dd34:	e13fff17 	ldw	r4,-4(fp)
    dd38:	000ff440 	call	ff44 <putc>
#endif
#endif
}
    dd3c:	e037883a 	mov	sp,fp
    dd40:	dfc00117 	ldw	ra,4(sp)
    dd44:	df000017 	ldw	fp,0(sp)
    dd48:	dec00204 	addi	sp,sp,8
    dd4c:	f800283a 	ret

0000dd50 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    dd50:	defffd04 	addi	sp,sp,-12
    dd54:	dfc00215 	stw	ra,8(sp)
    dd58:	df000115 	stw	fp,4(sp)
    dd5c:	df000104 	addi	fp,sp,4
    dd60:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
    dd64:	d0a00117 	ldw	r2,-32764(gp)
    dd68:	10800217 	ldw	r2,8(r2)
    dd6c:	100b883a 	mov	r5,r2
    dd70:	e13fff17 	ldw	r4,-4(fp)
    dd74:	000fd180 	call	fd18 <fputs>
#endif
#endif
}
    dd78:	e037883a 	mov	sp,fp
    dd7c:	dfc00117 	ldw	ra,4(sp)
    dd80:	df000017 	ldw	fp,0(sp)
    dd84:	dec00204 	addi	sp,sp,8
    dd88:	f800283a 	ret

0000dd8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dd8c:	defffe04 	addi	sp,sp,-8
    dd90:	dfc00115 	stw	ra,4(sp)
    dd94:	df000015 	stw	fp,0(sp)
    dd98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dd9c:	d0a00b17 	ldw	r2,-32724(gp)
    dda0:	10000326 	beq	r2,zero,ddb0 <alt_get_errno+0x24>
    dda4:	d0a00b17 	ldw	r2,-32724(gp)
    dda8:	103ee83a 	callr	r2
    ddac:	00000106 	br	ddb4 <alt_get_errno+0x28>
    ddb0:	d0a6d104 	addi	r2,gp,-25788
}
    ddb4:	e037883a 	mov	sp,fp
    ddb8:	dfc00117 	ldw	ra,4(sp)
    ddbc:	df000017 	ldw	fp,0(sp)
    ddc0:	dec00204 	addi	sp,sp,8
    ddc4:	f800283a 	ret

0000ddc8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    ddc8:	defff904 	addi	sp,sp,-28
    ddcc:	dfc00615 	stw	ra,24(sp)
    ddd0:	df000515 	stw	fp,20(sp)
    ddd4:	df000504 	addi	fp,sp,20
    ddd8:	e13ffd15 	stw	r4,-12(fp)
    dddc:	e17ffe15 	stw	r5,-8(fp)
    dde0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dde4:	e0bffd17 	ldw	r2,-12(fp)
    dde8:	10000816 	blt	r2,zero,de0c <read+0x44>
    ddec:	01400304 	movi	r5,12
    ddf0:	e13ffd17 	ldw	r4,-12(fp)
    ddf4:	000049c0 	call	49c <__mulsi3>
    ddf8:	1007883a 	mov	r3,r2
    ddfc:	00800074 	movhi	r2,1
    de00:	10846304 	addi	r2,r2,4492
    de04:	1885883a 	add	r2,r3,r2
    de08:	00000106 	br	de10 <read+0x48>
    de0c:	0005883a 	mov	r2,zero
    de10:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    de14:	e0bffb17 	ldw	r2,-20(fp)
    de18:	10002226 	beq	r2,zero,dea4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    de1c:	e0bffb17 	ldw	r2,-20(fp)
    de20:	10800217 	ldw	r2,8(r2)
    de24:	108000cc 	andi	r2,r2,3
    de28:	10800060 	cmpeqi	r2,r2,1
    de2c:	1000181e 	bne	r2,zero,de90 <read+0xc8>
        (fd->dev->read))
    de30:	e0bffb17 	ldw	r2,-20(fp)
    de34:	10800017 	ldw	r2,0(r2)
    de38:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    de3c:	10001426 	beq	r2,zero,de90 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    de40:	e0bffb17 	ldw	r2,-20(fp)
    de44:	10800017 	ldw	r2,0(r2)
    de48:	10800517 	ldw	r2,20(r2)
    de4c:	e0ffff17 	ldw	r3,-4(fp)
    de50:	180d883a 	mov	r6,r3
    de54:	e17ffe17 	ldw	r5,-8(fp)
    de58:	e13ffb17 	ldw	r4,-20(fp)
    de5c:	103ee83a 	callr	r2
    de60:	e0bffc15 	stw	r2,-16(fp)
    de64:	e0bffc17 	ldw	r2,-16(fp)
    de68:	1000070e 	bge	r2,zero,de88 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    de6c:	000dd8c0 	call	dd8c <alt_get_errno>
    de70:	1007883a 	mov	r3,r2
    de74:	e0bffc17 	ldw	r2,-16(fp)
    de78:	0085c83a 	sub	r2,zero,r2
    de7c:	18800015 	stw	r2,0(r3)
          return -1;
    de80:	00bfffc4 	movi	r2,-1
    de84:	00000c06 	br	deb8 <read+0xf0>
        }
        return rval;
    de88:	e0bffc17 	ldw	r2,-16(fp)
    de8c:	00000a06 	br	deb8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    de90:	000dd8c0 	call	dd8c <alt_get_errno>
    de94:	1007883a 	mov	r3,r2
    de98:	00800344 	movi	r2,13
    de9c:	18800015 	stw	r2,0(r3)
    dea0:	00000406 	br	deb4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    dea4:	000dd8c0 	call	dd8c <alt_get_errno>
    dea8:	1007883a 	mov	r3,r2
    deac:	00801444 	movi	r2,81
    deb0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    deb4:	00bfffc4 	movi	r2,-1
}
    deb8:	e037883a 	mov	sp,fp
    debc:	dfc00117 	ldw	ra,4(sp)
    dec0:	df000017 	ldw	fp,0(sp)
    dec4:	dec00204 	addi	sp,sp,8
    dec8:	f800283a 	ret

0000decc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    decc:	defffc04 	addi	sp,sp,-16
    ded0:	dfc00315 	stw	ra,12(sp)
    ded4:	df000215 	stw	fp,8(sp)
    ded8:	dc000115 	stw	r16,4(sp)
    dedc:	df000204 	addi	fp,sp,8
    dee0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    dee4:	e0bffe17 	ldw	r2,-8(fp)
    dee8:	108000d0 	cmplti	r2,r2,3
    deec:	1000111e 	bne	r2,zero,df34 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    def0:	04000074 	movhi	r16,1
    def4:	84046304 	addi	r16,r16,4492
    def8:	e0bffe17 	ldw	r2,-8(fp)
    defc:	01400304 	movi	r5,12
    df00:	1009883a 	mov	r4,r2
    df04:	000049c0 	call	49c <__mulsi3>
    df08:	8085883a 	add	r2,r16,r2
    df0c:	10800204 	addi	r2,r2,8
    df10:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    df14:	04000074 	movhi	r16,1
    df18:	84046304 	addi	r16,r16,4492
    df1c:	e0bffe17 	ldw	r2,-8(fp)
    df20:	01400304 	movi	r5,12
    df24:	1009883a 	mov	r4,r2
    df28:	000049c0 	call	49c <__mulsi3>
    df2c:	8085883a 	add	r2,r16,r2
    df30:	10000015 	stw	zero,0(r2)
  }
}
    df34:	0001883a 	nop
    df38:	e6ffff04 	addi	sp,fp,-4
    df3c:	dfc00217 	ldw	ra,8(sp)
    df40:	df000117 	ldw	fp,4(sp)
    df44:	dc000017 	ldw	r16,0(sp)
    df48:	dec00304 	addi	sp,sp,12
    df4c:	f800283a 	ret

0000df50 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    df50:	defff904 	addi	sp,sp,-28
    df54:	df000615 	stw	fp,24(sp)
    df58:	df000604 	addi	fp,sp,24
    df5c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    df60:	0005303a 	rdctl	r2,status
    df64:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    df68:	e0fffe17 	ldw	r3,-8(fp)
    df6c:	00bfff84 	movi	r2,-2
    df70:	1884703a 	and	r2,r3,r2
    df74:	1001703a 	wrctl	status,r2
  
  return context;
    df78:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    df7c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    df80:	d0a00c17 	ldw	r2,-32720(gp)
    df84:	10c000c4 	addi	r3,r2,3
    df88:	00bfff04 	movi	r2,-4
    df8c:	1884703a 	and	r2,r3,r2
    df90:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    df94:	d0e00c17 	ldw	r3,-32720(gp)
    df98:	e0bfff17 	ldw	r2,-4(fp)
    df9c:	1887883a 	add	r3,r3,r2
    dfa0:	008000b4 	movhi	r2,2
    dfa4:	10a1a804 	addi	r2,r2,-31072
    dfa8:	10c0062e 	bgeu	r2,r3,dfc4 <sbrk+0x74>
    dfac:	e0bffb17 	ldw	r2,-20(fp)
    dfb0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dfb4:	e0bffa17 	ldw	r2,-24(fp)
    dfb8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    dfbc:	00bfffc4 	movi	r2,-1
    dfc0:	00000b06 	br	dff0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    dfc4:	d0a00c17 	ldw	r2,-32720(gp)
    dfc8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    dfcc:	d0e00c17 	ldw	r3,-32720(gp)
    dfd0:	e0bfff17 	ldw	r2,-4(fp)
    dfd4:	1885883a 	add	r2,r3,r2
    dfd8:	d0a00c15 	stw	r2,-32720(gp)
    dfdc:	e0bffb17 	ldw	r2,-20(fp)
    dfe0:	e0bffc15 	stw	r2,-16(fp)
    dfe4:	e0bffc17 	ldw	r2,-16(fp)
    dfe8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    dfec:	e0bffd17 	ldw	r2,-12(fp)
} 
    dff0:	e037883a 	mov	sp,fp
    dff4:	df000017 	ldw	fp,0(sp)
    dff8:	dec00104 	addi	sp,sp,4
    dffc:	f800283a 	ret

0000e000 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    e000:	defffd04 	addi	sp,sp,-12
    e004:	dfc00215 	stw	ra,8(sp)
    e008:	df000115 	stw	fp,4(sp)
    e00c:	df000104 	addi	fp,sp,4
    e010:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    e014:	e13fff17 	ldw	r4,-4(fp)
    e018:	000edb40 	call	edb4 <alt_busy_sleep>
}
    e01c:	e037883a 	mov	sp,fp
    e020:	dfc00117 	ldw	ra,4(sp)
    e024:	df000017 	ldw	fp,0(sp)
    e028:	dec00204 	addi	sp,sp,8
    e02c:	f800283a 	ret

0000e030 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e030:	defffe04 	addi	sp,sp,-8
    e034:	dfc00115 	stw	ra,4(sp)
    e038:	df000015 	stw	fp,0(sp)
    e03c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e040:	d0a00b17 	ldw	r2,-32724(gp)
    e044:	10000326 	beq	r2,zero,e054 <alt_get_errno+0x24>
    e048:	d0a00b17 	ldw	r2,-32724(gp)
    e04c:	103ee83a 	callr	r2
    e050:	00000106 	br	e058 <alt_get_errno+0x28>
    e054:	d0a6d104 	addi	r2,gp,-25788
}
    e058:	e037883a 	mov	sp,fp
    e05c:	dfc00117 	ldw	ra,4(sp)
    e060:	df000017 	ldw	fp,0(sp)
    e064:	dec00204 	addi	sp,sp,8
    e068:	f800283a 	ret

0000e06c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    e06c:	defff904 	addi	sp,sp,-28
    e070:	dfc00615 	stw	ra,24(sp)
    e074:	df000515 	stw	fp,20(sp)
    e078:	df000504 	addi	fp,sp,20
    e07c:	e13ffd15 	stw	r4,-12(fp)
    e080:	e17ffe15 	stw	r5,-8(fp)
    e084:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e088:	e0bffd17 	ldw	r2,-12(fp)
    e08c:	10000816 	blt	r2,zero,e0b0 <write+0x44>
    e090:	01400304 	movi	r5,12
    e094:	e13ffd17 	ldw	r4,-12(fp)
    e098:	000049c0 	call	49c <__mulsi3>
    e09c:	1007883a 	mov	r3,r2
    e0a0:	00800074 	movhi	r2,1
    e0a4:	10846304 	addi	r2,r2,4492
    e0a8:	1885883a 	add	r2,r3,r2
    e0ac:	00000106 	br	e0b4 <write+0x48>
    e0b0:	0005883a 	mov	r2,zero
    e0b4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e0b8:	e0bffb17 	ldw	r2,-20(fp)
    e0bc:	10002126 	beq	r2,zero,e144 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    e0c0:	e0bffb17 	ldw	r2,-20(fp)
    e0c4:	10800217 	ldw	r2,8(r2)
    e0c8:	108000cc 	andi	r2,r2,3
    e0cc:	10001826 	beq	r2,zero,e130 <write+0xc4>
    e0d0:	e0bffb17 	ldw	r2,-20(fp)
    e0d4:	10800017 	ldw	r2,0(r2)
    e0d8:	10800617 	ldw	r2,24(r2)
    e0dc:	10001426 	beq	r2,zero,e130 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    e0e0:	e0bffb17 	ldw	r2,-20(fp)
    e0e4:	10800017 	ldw	r2,0(r2)
    e0e8:	10800617 	ldw	r2,24(r2)
    e0ec:	e0ffff17 	ldw	r3,-4(fp)
    e0f0:	180d883a 	mov	r6,r3
    e0f4:	e17ffe17 	ldw	r5,-8(fp)
    e0f8:	e13ffb17 	ldw	r4,-20(fp)
    e0fc:	103ee83a 	callr	r2
    e100:	e0bffc15 	stw	r2,-16(fp)
    e104:	e0bffc17 	ldw	r2,-16(fp)
    e108:	1000070e 	bge	r2,zero,e128 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    e10c:	000e0300 	call	e030 <alt_get_errno>
    e110:	1007883a 	mov	r3,r2
    e114:	e0bffc17 	ldw	r2,-16(fp)
    e118:	0085c83a 	sub	r2,zero,r2
    e11c:	18800015 	stw	r2,0(r3)
        return -1;
    e120:	00bfffc4 	movi	r2,-1
    e124:	00000c06 	br	e158 <write+0xec>
      }
      return rval;
    e128:	e0bffc17 	ldw	r2,-16(fp)
    e12c:	00000a06 	br	e158 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    e130:	000e0300 	call	e030 <alt_get_errno>
    e134:	1007883a 	mov	r3,r2
    e138:	00800344 	movi	r2,13
    e13c:	18800015 	stw	r2,0(r3)
    e140:	00000406 	br	e154 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    e144:	000e0300 	call	e030 <alt_get_errno>
    e148:	1007883a 	mov	r3,r2
    e14c:	00801444 	movi	r2,81
    e150:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e154:	00bfffc4 	movi	r2,-1
}
    e158:	e037883a 	mov	sp,fp
    e15c:	dfc00117 	ldw	ra,4(sp)
    e160:	df000017 	ldw	fp,0(sp)
    e164:	dec00204 	addi	sp,sp,8
    e168:	f800283a 	ret

0000e16c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    e16c:	defffd04 	addi	sp,sp,-12
    e170:	dfc00215 	stw	ra,8(sp)
    e174:	df000115 	stw	fp,4(sp)
    e178:	df000104 	addi	fp,sp,4
    e17c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    e180:	d1600804 	addi	r5,gp,-32736
    e184:	e13fff17 	ldw	r4,-4(fp)
    e188:	000ef680 	call	ef68 <alt_dev_llist_insert>
}
    e18c:	e037883a 	mov	sp,fp
    e190:	dfc00117 	ldw	ra,4(sp)
    e194:	df000017 	ldw	fp,0(sp)
    e198:	dec00204 	addi	sp,sp,8
    e19c:	f800283a 	ret

0000e1a0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    e1a0:	defffd04 	addi	sp,sp,-12
    e1a4:	dfc00215 	stw	ra,8(sp)
    e1a8:	df000115 	stw	fp,4(sp)
    e1ac:	df000104 	addi	fp,sp,4
    e1b0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    e1b4:	000f9140 	call	f914 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    e1b8:	00800044 	movi	r2,1
    e1bc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    e1c0:	0001883a 	nop
    e1c4:	e037883a 	mov	sp,fp
    e1c8:	dfc00117 	ldw	ra,4(sp)
    e1cc:	df000017 	ldw	fp,0(sp)
    e1d0:	dec00204 	addi	sp,sp,8
    e1d4:	f800283a 	ret

0000e1d8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    e1d8:	defffe04 	addi	sp,sp,-8
    e1dc:	dfc00115 	stw	ra,4(sp)
    e1e0:	df000015 	stw	fp,0(sp)
    e1e4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    e1e8:	01800144 	movi	r6,5
    e1ec:	000b883a 	mov	r5,zero
    e1f0:	01000074 	movhi	r4,1
    e1f4:	2104cd04 	addi	r4,r4,4916
    e1f8:	000e3840 	call	e384 <altera_avalon_jtag_uart_init>
    e1fc:	01000074 	movhi	r4,1
    e200:	2104c304 	addi	r4,r4,4876
    e204:	000e16c0 	call	e16c <alt_dev_reg>
}
    e208:	0001883a 	nop
    e20c:	e037883a 	mov	sp,fp
    e210:	dfc00117 	ldw	ra,4(sp)
    e214:	df000017 	ldw	fp,0(sp)
    e218:	dec00204 	addi	sp,sp,8
    e21c:	f800283a 	ret

0000e220 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    e220:	defffa04 	addi	sp,sp,-24
    e224:	dfc00515 	stw	ra,20(sp)
    e228:	df000415 	stw	fp,16(sp)
    e22c:	df000404 	addi	fp,sp,16
    e230:	e13ffd15 	stw	r4,-12(fp)
    e234:	e17ffe15 	stw	r5,-8(fp)
    e238:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e23c:	e0bffd17 	ldw	r2,-12(fp)
    e240:	10800017 	ldw	r2,0(r2)
    e244:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    e248:	e0bffc17 	ldw	r2,-16(fp)
    e24c:	10c00a04 	addi	r3,r2,40
    e250:	e0bffd17 	ldw	r2,-12(fp)
    e254:	10800217 	ldw	r2,8(r2)
    e258:	100f883a 	mov	r7,r2
    e25c:	e1bfff17 	ldw	r6,-4(fp)
    e260:	e17ffe17 	ldw	r5,-8(fp)
    e264:	1809883a 	mov	r4,r3
    e268:	000e8480 	call	e848 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    e26c:	e037883a 	mov	sp,fp
    e270:	dfc00117 	ldw	ra,4(sp)
    e274:	df000017 	ldw	fp,0(sp)
    e278:	dec00204 	addi	sp,sp,8
    e27c:	f800283a 	ret

0000e280 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    e280:	defffa04 	addi	sp,sp,-24
    e284:	dfc00515 	stw	ra,20(sp)
    e288:	df000415 	stw	fp,16(sp)
    e28c:	df000404 	addi	fp,sp,16
    e290:	e13ffd15 	stw	r4,-12(fp)
    e294:	e17ffe15 	stw	r5,-8(fp)
    e298:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e29c:	e0bffd17 	ldw	r2,-12(fp)
    e2a0:	10800017 	ldw	r2,0(r2)
    e2a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    e2a8:	e0bffc17 	ldw	r2,-16(fp)
    e2ac:	10c00a04 	addi	r3,r2,40
    e2b0:	e0bffd17 	ldw	r2,-12(fp)
    e2b4:	10800217 	ldw	r2,8(r2)
    e2b8:	100f883a 	mov	r7,r2
    e2bc:	e1bfff17 	ldw	r6,-4(fp)
    e2c0:	e17ffe17 	ldw	r5,-8(fp)
    e2c4:	1809883a 	mov	r4,r3
    e2c8:	000ea640 	call	ea64 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    e2cc:	e037883a 	mov	sp,fp
    e2d0:	dfc00117 	ldw	ra,4(sp)
    e2d4:	df000017 	ldw	fp,0(sp)
    e2d8:	dec00204 	addi	sp,sp,8
    e2dc:	f800283a 	ret

0000e2e0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    e2e0:	defffc04 	addi	sp,sp,-16
    e2e4:	dfc00315 	stw	ra,12(sp)
    e2e8:	df000215 	stw	fp,8(sp)
    e2ec:	df000204 	addi	fp,sp,8
    e2f0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e2f4:	e0bfff17 	ldw	r2,-4(fp)
    e2f8:	10800017 	ldw	r2,0(r2)
    e2fc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    e300:	e0bffe17 	ldw	r2,-8(fp)
    e304:	10c00a04 	addi	r3,r2,40
    e308:	e0bfff17 	ldw	r2,-4(fp)
    e30c:	10800217 	ldw	r2,8(r2)
    e310:	100b883a 	mov	r5,r2
    e314:	1809883a 	mov	r4,r3
    e318:	000e6f00 	call	e6f0 <altera_avalon_jtag_uart_close>
}
    e31c:	e037883a 	mov	sp,fp
    e320:	dfc00117 	ldw	ra,4(sp)
    e324:	df000017 	ldw	fp,0(sp)
    e328:	dec00204 	addi	sp,sp,8
    e32c:	f800283a 	ret

0000e330 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    e330:	defffa04 	addi	sp,sp,-24
    e334:	dfc00515 	stw	ra,20(sp)
    e338:	df000415 	stw	fp,16(sp)
    e33c:	df000404 	addi	fp,sp,16
    e340:	e13ffd15 	stw	r4,-12(fp)
    e344:	e17ffe15 	stw	r5,-8(fp)
    e348:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    e34c:	e0bffd17 	ldw	r2,-12(fp)
    e350:	10800017 	ldw	r2,0(r2)
    e354:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    e358:	e0bffc17 	ldw	r2,-16(fp)
    e35c:	10800a04 	addi	r2,r2,40
    e360:	e1bfff17 	ldw	r6,-4(fp)
    e364:	e17ffe17 	ldw	r5,-8(fp)
    e368:	1009883a 	mov	r4,r2
    e36c:	000e7580 	call	e758 <altera_avalon_jtag_uart_ioctl>
}
    e370:	e037883a 	mov	sp,fp
    e374:	dfc00117 	ldw	ra,4(sp)
    e378:	df000017 	ldw	fp,0(sp)
    e37c:	dec00204 	addi	sp,sp,8
    e380:	f800283a 	ret

0000e384 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    e384:	defffa04 	addi	sp,sp,-24
    e388:	dfc00515 	stw	ra,20(sp)
    e38c:	df000415 	stw	fp,16(sp)
    e390:	df000404 	addi	fp,sp,16
    e394:	e13ffd15 	stw	r4,-12(fp)
    e398:	e17ffe15 	stw	r5,-8(fp)
    e39c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e3a0:	e0bffd17 	ldw	r2,-12(fp)
    e3a4:	00c00044 	movi	r3,1
    e3a8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    e3ac:	e0bffd17 	ldw	r2,-12(fp)
    e3b0:	10800017 	ldw	r2,0(r2)
    e3b4:	10800104 	addi	r2,r2,4
    e3b8:	1007883a 	mov	r3,r2
    e3bc:	e0bffd17 	ldw	r2,-12(fp)
    e3c0:	10800817 	ldw	r2,32(r2)
    e3c4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    e3c8:	e0bffe17 	ldw	r2,-8(fp)
    e3cc:	e0ffff17 	ldw	r3,-4(fp)
    e3d0:	d8000015 	stw	zero,0(sp)
    e3d4:	e1fffd17 	ldw	r7,-12(fp)
    e3d8:	01800074 	movhi	r6,1
    e3dc:	31b91104 	addi	r6,r6,-7100
    e3e0:	180b883a 	mov	r5,r3
    e3e4:	1009883a 	mov	r4,r2
    e3e8:	000f0ec0 	call	f0ec <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    e3ec:	e0bffd17 	ldw	r2,-12(fp)
    e3f0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    e3f4:	e0bffd17 	ldw	r2,-12(fp)
    e3f8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e3fc:	d0e6d617 	ldw	r3,-25768(gp)
    e400:	e1fffd17 	ldw	r7,-12(fp)
    e404:	01800074 	movhi	r6,1
    e408:	31b99404 	addi	r6,r6,-6576
    e40c:	180b883a 	mov	r5,r3
    e410:	1009883a 	mov	r4,r2
    e414:	000ec880 	call	ec88 <alt_alarm_start>
    e418:	1000040e 	bge	r2,zero,e42c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    e41c:	e0fffd17 	ldw	r3,-12(fp)
    e420:	00a00034 	movhi	r2,32768
    e424:	10bfffc4 	addi	r2,r2,-1
    e428:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    e42c:	0001883a 	nop
    e430:	e037883a 	mov	sp,fp
    e434:	dfc00117 	ldw	ra,4(sp)
    e438:	df000017 	ldw	fp,0(sp)
    e43c:	dec00204 	addi	sp,sp,8
    e440:	f800283a 	ret

0000e444 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    e444:	defff804 	addi	sp,sp,-32
    e448:	df000715 	stw	fp,28(sp)
    e44c:	df000704 	addi	fp,sp,28
    e450:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    e454:	e0bfff17 	ldw	r2,-4(fp)
    e458:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    e45c:	e0bffb17 	ldw	r2,-20(fp)
    e460:	10800017 	ldw	r2,0(r2)
    e464:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e468:	e0bffc17 	ldw	r2,-16(fp)
    e46c:	10800104 	addi	r2,r2,4
    e470:	10800037 	ldwio	r2,0(r2)
    e474:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    e478:	e0bffd17 	ldw	r2,-12(fp)
    e47c:	1080c00c 	andi	r2,r2,768
    e480:	10006d26 	beq	r2,zero,e638 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    e484:	e0bffd17 	ldw	r2,-12(fp)
    e488:	1080400c 	andi	r2,r2,256
    e48c:	10003526 	beq	r2,zero,e564 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    e490:	00800074 	movhi	r2,1
    e494:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e498:	e0bffb17 	ldw	r2,-20(fp)
    e49c:	10800a17 	ldw	r2,40(r2)
    e4a0:	10800044 	addi	r2,r2,1
    e4a4:	1081ffcc 	andi	r2,r2,2047
    e4a8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    e4ac:	e0bffb17 	ldw	r2,-20(fp)
    e4b0:	10c00b17 	ldw	r3,44(r2)
    e4b4:	e0bffe17 	ldw	r2,-8(fp)
    e4b8:	18801526 	beq	r3,r2,e510 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    e4bc:	e0bffc17 	ldw	r2,-16(fp)
    e4c0:	10800037 	ldwio	r2,0(r2)
    e4c4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    e4c8:	e0bff917 	ldw	r2,-28(fp)
    e4cc:	10a0000c 	andi	r2,r2,32768
    e4d0:	10001126 	beq	r2,zero,e518 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    e4d4:	e0bffb17 	ldw	r2,-20(fp)
    e4d8:	10800a17 	ldw	r2,40(r2)
    e4dc:	e0fff917 	ldw	r3,-28(fp)
    e4e0:	1809883a 	mov	r4,r3
    e4e4:	e0fffb17 	ldw	r3,-20(fp)
    e4e8:	1885883a 	add	r2,r3,r2
    e4ec:	10800e04 	addi	r2,r2,56
    e4f0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e4f4:	e0bffb17 	ldw	r2,-20(fp)
    e4f8:	10800a17 	ldw	r2,40(r2)
    e4fc:	10800044 	addi	r2,r2,1
    e500:	10c1ffcc 	andi	r3,r2,2047
    e504:	e0bffb17 	ldw	r2,-20(fp)
    e508:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    e50c:	003fe206 	br	e498 <_gp+0xffff412c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    e510:	0001883a 	nop
    e514:	00000106 	br	e51c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    e518:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    e51c:	e0bff917 	ldw	r2,-28(fp)
    e520:	10bfffec 	andhi	r2,r2,65535
    e524:	10000f26 	beq	r2,zero,e564 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e528:	e0bffb17 	ldw	r2,-20(fp)
    e52c:	10c00817 	ldw	r3,32(r2)
    e530:	00bfff84 	movi	r2,-2
    e534:	1886703a 	and	r3,r3,r2
    e538:	e0bffb17 	ldw	r2,-20(fp)
    e53c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    e540:	e0bffc17 	ldw	r2,-16(fp)
    e544:	10800104 	addi	r2,r2,4
    e548:	1007883a 	mov	r3,r2
    e54c:	e0bffb17 	ldw	r2,-20(fp)
    e550:	10800817 	ldw	r2,32(r2)
    e554:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e558:	e0bffc17 	ldw	r2,-16(fp)
    e55c:	10800104 	addi	r2,r2,4
    e560:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    e564:	e0bffd17 	ldw	r2,-12(fp)
    e568:	1080800c 	andi	r2,r2,512
    e56c:	103fbe26 	beq	r2,zero,e468 <_gp+0xffff40fc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    e570:	e0bffd17 	ldw	r2,-12(fp)
    e574:	1004d43a 	srli	r2,r2,16
    e578:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    e57c:	00001406 	br	e5d0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    e580:	e0bffc17 	ldw	r2,-16(fp)
    e584:	e0fffb17 	ldw	r3,-20(fp)
    e588:	18c00d17 	ldw	r3,52(r3)
    e58c:	e13ffb17 	ldw	r4,-20(fp)
    e590:	20c7883a 	add	r3,r4,r3
    e594:	18c20e04 	addi	r3,r3,2104
    e598:	18c00003 	ldbu	r3,0(r3)
    e59c:	18c03fcc 	andi	r3,r3,255
    e5a0:	18c0201c 	xori	r3,r3,128
    e5a4:	18ffe004 	addi	r3,r3,-128
    e5a8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e5ac:	e0bffb17 	ldw	r2,-20(fp)
    e5b0:	10800d17 	ldw	r2,52(r2)
    e5b4:	10800044 	addi	r2,r2,1
    e5b8:	10c1ffcc 	andi	r3,r2,2047
    e5bc:	e0bffb17 	ldw	r2,-20(fp)
    e5c0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    e5c4:	e0bffa17 	ldw	r2,-24(fp)
    e5c8:	10bfffc4 	addi	r2,r2,-1
    e5cc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    e5d0:	e0bffa17 	ldw	r2,-24(fp)
    e5d4:	10000526 	beq	r2,zero,e5ec <altera_avalon_jtag_uart_irq+0x1a8>
    e5d8:	e0bffb17 	ldw	r2,-20(fp)
    e5dc:	10c00d17 	ldw	r3,52(r2)
    e5e0:	e0bffb17 	ldw	r2,-20(fp)
    e5e4:	10800c17 	ldw	r2,48(r2)
    e5e8:	18bfe51e 	bne	r3,r2,e580 <_gp+0xffff4214>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    e5ec:	e0bffa17 	ldw	r2,-24(fp)
    e5f0:	103f9d26 	beq	r2,zero,e468 <_gp+0xffff40fc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e5f4:	e0bffb17 	ldw	r2,-20(fp)
    e5f8:	10c00817 	ldw	r3,32(r2)
    e5fc:	00bfff44 	movi	r2,-3
    e600:	1886703a 	and	r3,r3,r2
    e604:	e0bffb17 	ldw	r2,-20(fp)
    e608:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e60c:	e0bffb17 	ldw	r2,-20(fp)
    e610:	10800017 	ldw	r2,0(r2)
    e614:	10800104 	addi	r2,r2,4
    e618:	1007883a 	mov	r3,r2
    e61c:	e0bffb17 	ldw	r2,-20(fp)
    e620:	10800817 	ldw	r2,32(r2)
    e624:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e628:	e0bffc17 	ldw	r2,-16(fp)
    e62c:	10800104 	addi	r2,r2,4
    e630:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    e634:	003f8c06 	br	e468 <_gp+0xffff40fc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    e638:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    e63c:	0001883a 	nop
    e640:	e037883a 	mov	sp,fp
    e644:	df000017 	ldw	fp,0(sp)
    e648:	dec00104 	addi	sp,sp,4
    e64c:	f800283a 	ret

0000e650 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    e650:	defff804 	addi	sp,sp,-32
    e654:	df000715 	stw	fp,28(sp)
    e658:	df000704 	addi	fp,sp,28
    e65c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    e660:	e0bffb17 	ldw	r2,-20(fp)
    e664:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    e668:	e0bff917 	ldw	r2,-28(fp)
    e66c:	10800017 	ldw	r2,0(r2)
    e670:	10800104 	addi	r2,r2,4
    e674:	10800037 	ldwio	r2,0(r2)
    e678:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    e67c:	e0bffa17 	ldw	r2,-24(fp)
    e680:	1081000c 	andi	r2,r2,1024
    e684:	10000b26 	beq	r2,zero,e6b4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    e688:	e0bff917 	ldw	r2,-28(fp)
    e68c:	10800017 	ldw	r2,0(r2)
    e690:	10800104 	addi	r2,r2,4
    e694:	1007883a 	mov	r3,r2
    e698:	e0bff917 	ldw	r2,-28(fp)
    e69c:	10800817 	ldw	r2,32(r2)
    e6a0:	10810014 	ori	r2,r2,1024
    e6a4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    e6a8:	e0bff917 	ldw	r2,-28(fp)
    e6ac:	10000915 	stw	zero,36(r2)
    e6b0:	00000a06 	br	e6dc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    e6b4:	e0bff917 	ldw	r2,-28(fp)
    e6b8:	10c00917 	ldw	r3,36(r2)
    e6bc:	00a00034 	movhi	r2,32768
    e6c0:	10bfff04 	addi	r2,r2,-4
    e6c4:	10c00536 	bltu	r2,r3,e6dc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    e6c8:	e0bff917 	ldw	r2,-28(fp)
    e6cc:	10800917 	ldw	r2,36(r2)
    e6d0:	10c00044 	addi	r3,r2,1
    e6d4:	e0bff917 	ldw	r2,-28(fp)
    e6d8:	10c00915 	stw	r3,36(r2)
    e6dc:	d0a6d617 	ldw	r2,-25768(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    e6e0:	e037883a 	mov	sp,fp
    e6e4:	df000017 	ldw	fp,0(sp)
    e6e8:	dec00104 	addi	sp,sp,4
    e6ec:	f800283a 	ret

0000e6f0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    e6f0:	defffd04 	addi	sp,sp,-12
    e6f4:	df000215 	stw	fp,8(sp)
    e6f8:	df000204 	addi	fp,sp,8
    e6fc:	e13ffe15 	stw	r4,-8(fp)
    e700:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    e704:	00000506 	br	e71c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    e708:	e0bfff17 	ldw	r2,-4(fp)
    e70c:	1090000c 	andi	r2,r2,16384
    e710:	10000226 	beq	r2,zero,e71c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    e714:	00bffd44 	movi	r2,-11
    e718:	00000b06 	br	e748 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    e71c:	e0bffe17 	ldw	r2,-8(fp)
    e720:	10c00d17 	ldw	r3,52(r2)
    e724:	e0bffe17 	ldw	r2,-8(fp)
    e728:	10800c17 	ldw	r2,48(r2)
    e72c:	18800526 	beq	r3,r2,e744 <altera_avalon_jtag_uart_close+0x54>
    e730:	e0bffe17 	ldw	r2,-8(fp)
    e734:	10c00917 	ldw	r3,36(r2)
    e738:	e0bffe17 	ldw	r2,-8(fp)
    e73c:	10800117 	ldw	r2,4(r2)
    e740:	18bff136 	bltu	r3,r2,e708 <_gp+0xffff439c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    e744:	0005883a 	mov	r2,zero
}
    e748:	e037883a 	mov	sp,fp
    e74c:	df000017 	ldw	fp,0(sp)
    e750:	dec00104 	addi	sp,sp,4
    e754:	f800283a 	ret

0000e758 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    e758:	defffa04 	addi	sp,sp,-24
    e75c:	df000515 	stw	fp,20(sp)
    e760:	df000504 	addi	fp,sp,20
    e764:	e13ffd15 	stw	r4,-12(fp)
    e768:	e17ffe15 	stw	r5,-8(fp)
    e76c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    e770:	00bff9c4 	movi	r2,-25
    e774:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    e778:	e0bffe17 	ldw	r2,-8(fp)
    e77c:	10da8060 	cmpeqi	r3,r2,27137
    e780:	1800031e 	bne	r3,zero,e790 <altera_avalon_jtag_uart_ioctl+0x38>
    e784:	109a80a0 	cmpeqi	r2,r2,27138
    e788:	1000181e 	bne	r2,zero,e7ec <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    e78c:	00002906 	br	e834 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    e790:	e0bffd17 	ldw	r2,-12(fp)
    e794:	10c00117 	ldw	r3,4(r2)
    e798:	00a00034 	movhi	r2,32768
    e79c:	10bfffc4 	addi	r2,r2,-1
    e7a0:	18802126 	beq	r3,r2,e828 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    e7a4:	e0bfff17 	ldw	r2,-4(fp)
    e7a8:	10800017 	ldw	r2,0(r2)
    e7ac:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    e7b0:	e0bffc17 	ldw	r2,-16(fp)
    e7b4:	10800090 	cmplti	r2,r2,2
    e7b8:	1000061e 	bne	r2,zero,e7d4 <altera_avalon_jtag_uart_ioctl+0x7c>
    e7bc:	e0fffc17 	ldw	r3,-16(fp)
    e7c0:	00a00034 	movhi	r2,32768
    e7c4:	10bfffc4 	addi	r2,r2,-1
    e7c8:	18800226 	beq	r3,r2,e7d4 <altera_avalon_jtag_uart_ioctl+0x7c>
    e7cc:	e0bffc17 	ldw	r2,-16(fp)
    e7d0:	00000206 	br	e7dc <altera_avalon_jtag_uart_ioctl+0x84>
    e7d4:	00a00034 	movhi	r2,32768
    e7d8:	10bfff84 	addi	r2,r2,-2
    e7dc:	e0fffd17 	ldw	r3,-12(fp)
    e7e0:	18800115 	stw	r2,4(r3)
      rc = 0;
    e7e4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    e7e8:	00000f06 	br	e828 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    e7ec:	e0bffd17 	ldw	r2,-12(fp)
    e7f0:	10c00117 	ldw	r3,4(r2)
    e7f4:	00a00034 	movhi	r2,32768
    e7f8:	10bfffc4 	addi	r2,r2,-1
    e7fc:	18800c26 	beq	r3,r2,e830 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    e800:	e0bffd17 	ldw	r2,-12(fp)
    e804:	10c00917 	ldw	r3,36(r2)
    e808:	e0bffd17 	ldw	r2,-12(fp)
    e80c:	10800117 	ldw	r2,4(r2)
    e810:	1885803a 	cmpltu	r2,r3,r2
    e814:	10c03fcc 	andi	r3,r2,255
    e818:	e0bfff17 	ldw	r2,-4(fp)
    e81c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    e820:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    e824:	00000206 	br	e830 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    e828:	0001883a 	nop
    e82c:	00000106 	br	e834 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    e830:	0001883a 	nop

  default:
    break;
  }

  return rc;
    e834:	e0bffb17 	ldw	r2,-20(fp)
}
    e838:	e037883a 	mov	sp,fp
    e83c:	df000017 	ldw	fp,0(sp)
    e840:	dec00104 	addi	sp,sp,4
    e844:	f800283a 	ret

0000e848 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    e848:	defff304 	addi	sp,sp,-52
    e84c:	dfc00c15 	stw	ra,48(sp)
    e850:	df000b15 	stw	fp,44(sp)
    e854:	df000b04 	addi	fp,sp,44
    e858:	e13ffc15 	stw	r4,-16(fp)
    e85c:	e17ffd15 	stw	r5,-12(fp)
    e860:	e1bffe15 	stw	r6,-8(fp)
    e864:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    e868:	e0bffd17 	ldw	r2,-12(fp)
    e86c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e870:	00004706 	br	e990 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    e874:	e0bffc17 	ldw	r2,-16(fp)
    e878:	10800a17 	ldw	r2,40(r2)
    e87c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    e880:	e0bffc17 	ldw	r2,-16(fp)
    e884:	10800b17 	ldw	r2,44(r2)
    e888:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    e88c:	e0fff717 	ldw	r3,-36(fp)
    e890:	e0bff817 	ldw	r2,-32(fp)
    e894:	18800536 	bltu	r3,r2,e8ac <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    e898:	e0fff717 	ldw	r3,-36(fp)
    e89c:	e0bff817 	ldw	r2,-32(fp)
    e8a0:	1885c83a 	sub	r2,r3,r2
    e8a4:	e0bff615 	stw	r2,-40(fp)
    e8a8:	00000406 	br	e8bc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    e8ac:	00c20004 	movi	r3,2048
    e8b0:	e0bff817 	ldw	r2,-32(fp)
    e8b4:	1885c83a 	sub	r2,r3,r2
    e8b8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    e8bc:	e0bff617 	ldw	r2,-40(fp)
    e8c0:	10001e26 	beq	r2,zero,e93c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    e8c4:	e0fffe17 	ldw	r3,-8(fp)
    e8c8:	e0bff617 	ldw	r2,-40(fp)
    e8cc:	1880022e 	bgeu	r3,r2,e8d8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    e8d0:	e0bffe17 	ldw	r2,-8(fp)
    e8d4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    e8d8:	e0bffc17 	ldw	r2,-16(fp)
    e8dc:	10c00e04 	addi	r3,r2,56
    e8e0:	e0bff817 	ldw	r2,-32(fp)
    e8e4:	1885883a 	add	r2,r3,r2
    e8e8:	e1bff617 	ldw	r6,-40(fp)
    e8ec:	100b883a 	mov	r5,r2
    e8f0:	e13ff517 	ldw	r4,-44(fp)
    e8f4:	0005c4c0 	call	5c4c <memcpy>
      ptr   += n;
    e8f8:	e0fff517 	ldw	r3,-44(fp)
    e8fc:	e0bff617 	ldw	r2,-40(fp)
    e900:	1885883a 	add	r2,r3,r2
    e904:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    e908:	e0fffe17 	ldw	r3,-8(fp)
    e90c:	e0bff617 	ldw	r2,-40(fp)
    e910:	1885c83a 	sub	r2,r3,r2
    e914:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e918:	e0fff817 	ldw	r3,-32(fp)
    e91c:	e0bff617 	ldw	r2,-40(fp)
    e920:	1885883a 	add	r2,r3,r2
    e924:	10c1ffcc 	andi	r3,r2,2047
    e928:	e0bffc17 	ldw	r2,-16(fp)
    e92c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    e930:	e0bffe17 	ldw	r2,-8(fp)
    e934:	00bfcf16 	blt	zero,r2,e874 <_gp+0xffff4508>
    e938:	00000106 	br	e940 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    e93c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    e940:	e0fff517 	ldw	r3,-44(fp)
    e944:	e0bffd17 	ldw	r2,-12(fp)
    e948:	1880141e 	bne	r3,r2,e99c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    e94c:	e0bfff17 	ldw	r2,-4(fp)
    e950:	1090000c 	andi	r2,r2,16384
    e954:	1000131e 	bne	r2,zero,e9a4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    e958:	0001883a 	nop
    e95c:	e0bffc17 	ldw	r2,-16(fp)
    e960:	10c00a17 	ldw	r3,40(r2)
    e964:	e0bff717 	ldw	r2,-36(fp)
    e968:	1880051e 	bne	r3,r2,e980 <altera_avalon_jtag_uart_read+0x138>
    e96c:	e0bffc17 	ldw	r2,-16(fp)
    e970:	10c00917 	ldw	r3,36(r2)
    e974:	e0bffc17 	ldw	r2,-16(fp)
    e978:	10800117 	ldw	r2,4(r2)
    e97c:	18bff736 	bltu	r3,r2,e95c <_gp+0xffff45f0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    e980:	e0bffc17 	ldw	r2,-16(fp)
    e984:	10c00a17 	ldw	r3,40(r2)
    e988:	e0bff717 	ldw	r2,-36(fp)
    e98c:	18800726 	beq	r3,r2,e9ac <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e990:	e0bffe17 	ldw	r2,-8(fp)
    e994:	00bfb716 	blt	zero,r2,e874 <_gp+0xffff4508>
    e998:	00000506 	br	e9b0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    e99c:	0001883a 	nop
    e9a0:	00000306 	br	e9b0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    e9a4:	0001883a 	nop
    e9a8:	00000106 	br	e9b0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    e9ac:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    e9b0:	e0fff517 	ldw	r3,-44(fp)
    e9b4:	e0bffd17 	ldw	r2,-12(fp)
    e9b8:	18801826 	beq	r3,r2,ea1c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e9bc:	0005303a 	rdctl	r2,status
    e9c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e9c4:	e0fffb17 	ldw	r3,-20(fp)
    e9c8:	00bfff84 	movi	r2,-2
    e9cc:	1884703a 	and	r2,r3,r2
    e9d0:	1001703a 	wrctl	status,r2
  
  return context;
    e9d4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    e9d8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e9dc:	e0bffc17 	ldw	r2,-16(fp)
    e9e0:	10800817 	ldw	r2,32(r2)
    e9e4:	10c00054 	ori	r3,r2,1
    e9e8:	e0bffc17 	ldw	r2,-16(fp)
    e9ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e9f0:	e0bffc17 	ldw	r2,-16(fp)
    e9f4:	10800017 	ldw	r2,0(r2)
    e9f8:	10800104 	addi	r2,r2,4
    e9fc:	1007883a 	mov	r3,r2
    ea00:	e0bffc17 	ldw	r2,-16(fp)
    ea04:	10800817 	ldw	r2,32(r2)
    ea08:	18800035 	stwio	r2,0(r3)
    ea0c:	e0bffa17 	ldw	r2,-24(fp)
    ea10:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ea14:	e0bff917 	ldw	r2,-28(fp)
    ea18:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    ea1c:	e0fff517 	ldw	r3,-44(fp)
    ea20:	e0bffd17 	ldw	r2,-12(fp)
    ea24:	18800426 	beq	r3,r2,ea38 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    ea28:	e0fff517 	ldw	r3,-44(fp)
    ea2c:	e0bffd17 	ldw	r2,-12(fp)
    ea30:	1885c83a 	sub	r2,r3,r2
    ea34:	00000606 	br	ea50 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    ea38:	e0bfff17 	ldw	r2,-4(fp)
    ea3c:	1090000c 	andi	r2,r2,16384
    ea40:	10000226 	beq	r2,zero,ea4c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    ea44:	00bffd44 	movi	r2,-11
    ea48:	00000106 	br	ea50 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    ea4c:	00bffec4 	movi	r2,-5
}
    ea50:	e037883a 	mov	sp,fp
    ea54:	dfc00117 	ldw	ra,4(sp)
    ea58:	df000017 	ldw	fp,0(sp)
    ea5c:	dec00204 	addi	sp,sp,8
    ea60:	f800283a 	ret

0000ea64 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    ea64:	defff304 	addi	sp,sp,-52
    ea68:	dfc00c15 	stw	ra,48(sp)
    ea6c:	df000b15 	stw	fp,44(sp)
    ea70:	df000b04 	addi	fp,sp,44
    ea74:	e13ffc15 	stw	r4,-16(fp)
    ea78:	e17ffd15 	stw	r5,-12(fp)
    ea7c:	e1bffe15 	stw	r6,-8(fp)
    ea80:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    ea84:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    ea88:	e0bffd17 	ldw	r2,-12(fp)
    ea8c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    ea90:	00003706 	br	eb70 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    ea94:	e0bffc17 	ldw	r2,-16(fp)
    ea98:	10800c17 	ldw	r2,48(r2)
    ea9c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    eaa0:	e0bffc17 	ldw	r2,-16(fp)
    eaa4:	10800d17 	ldw	r2,52(r2)
    eaa8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    eaac:	e0fff917 	ldw	r3,-28(fp)
    eab0:	e0bff517 	ldw	r2,-44(fp)
    eab4:	1880062e 	bgeu	r3,r2,ead0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    eab8:	e0fff517 	ldw	r3,-44(fp)
    eabc:	e0bff917 	ldw	r2,-28(fp)
    eac0:	1885c83a 	sub	r2,r3,r2
    eac4:	10bfffc4 	addi	r2,r2,-1
    eac8:	e0bff615 	stw	r2,-40(fp)
    eacc:	00000b06 	br	eafc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    ead0:	e0bff517 	ldw	r2,-44(fp)
    ead4:	10000526 	beq	r2,zero,eaec <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    ead8:	00c20004 	movi	r3,2048
    eadc:	e0bff917 	ldw	r2,-28(fp)
    eae0:	1885c83a 	sub	r2,r3,r2
    eae4:	e0bff615 	stw	r2,-40(fp)
    eae8:	00000406 	br	eafc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    eaec:	00c1ffc4 	movi	r3,2047
    eaf0:	e0bff917 	ldw	r2,-28(fp)
    eaf4:	1885c83a 	sub	r2,r3,r2
    eaf8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    eafc:	e0bff617 	ldw	r2,-40(fp)
    eb00:	10001e26 	beq	r2,zero,eb7c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    eb04:	e0fffe17 	ldw	r3,-8(fp)
    eb08:	e0bff617 	ldw	r2,-40(fp)
    eb0c:	1880022e 	bgeu	r3,r2,eb18 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    eb10:	e0bffe17 	ldw	r2,-8(fp)
    eb14:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    eb18:	e0bffc17 	ldw	r2,-16(fp)
    eb1c:	10c20e04 	addi	r3,r2,2104
    eb20:	e0bff917 	ldw	r2,-28(fp)
    eb24:	1885883a 	add	r2,r3,r2
    eb28:	e1bff617 	ldw	r6,-40(fp)
    eb2c:	e17ffd17 	ldw	r5,-12(fp)
    eb30:	1009883a 	mov	r4,r2
    eb34:	0005c4c0 	call	5c4c <memcpy>
      ptr   += n;
    eb38:	e0fffd17 	ldw	r3,-12(fp)
    eb3c:	e0bff617 	ldw	r2,-40(fp)
    eb40:	1885883a 	add	r2,r3,r2
    eb44:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    eb48:	e0fffe17 	ldw	r3,-8(fp)
    eb4c:	e0bff617 	ldw	r2,-40(fp)
    eb50:	1885c83a 	sub	r2,r3,r2
    eb54:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    eb58:	e0fff917 	ldw	r3,-28(fp)
    eb5c:	e0bff617 	ldw	r2,-40(fp)
    eb60:	1885883a 	add	r2,r3,r2
    eb64:	10c1ffcc 	andi	r3,r2,2047
    eb68:	e0bffc17 	ldw	r2,-16(fp)
    eb6c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    eb70:	e0bffe17 	ldw	r2,-8(fp)
    eb74:	00bfc716 	blt	zero,r2,ea94 <_gp+0xffff4728>
    eb78:	00000106 	br	eb80 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    eb7c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eb80:	0005303a 	rdctl	r2,status
    eb84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eb88:	e0fffb17 	ldw	r3,-20(fp)
    eb8c:	00bfff84 	movi	r2,-2
    eb90:	1884703a 	and	r2,r3,r2
    eb94:	1001703a 	wrctl	status,r2
  
  return context;
    eb98:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    eb9c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    eba0:	e0bffc17 	ldw	r2,-16(fp)
    eba4:	10800817 	ldw	r2,32(r2)
    eba8:	10c00094 	ori	r3,r2,2
    ebac:	e0bffc17 	ldw	r2,-16(fp)
    ebb0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ebb4:	e0bffc17 	ldw	r2,-16(fp)
    ebb8:	10800017 	ldw	r2,0(r2)
    ebbc:	10800104 	addi	r2,r2,4
    ebc0:	1007883a 	mov	r3,r2
    ebc4:	e0bffc17 	ldw	r2,-16(fp)
    ebc8:	10800817 	ldw	r2,32(r2)
    ebcc:	18800035 	stwio	r2,0(r3)
    ebd0:	e0bffa17 	ldw	r2,-24(fp)
    ebd4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ebd8:	e0bff817 	ldw	r2,-32(fp)
    ebdc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    ebe0:	e0bffe17 	ldw	r2,-8(fp)
    ebe4:	0080100e 	bge	zero,r2,ec28 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    ebe8:	e0bfff17 	ldw	r2,-4(fp)
    ebec:	1090000c 	andi	r2,r2,16384
    ebf0:	1000101e 	bne	r2,zero,ec34 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    ebf4:	0001883a 	nop
    ebf8:	e0bffc17 	ldw	r2,-16(fp)
    ebfc:	10c00d17 	ldw	r3,52(r2)
    ec00:	e0bff517 	ldw	r2,-44(fp)
    ec04:	1880051e 	bne	r3,r2,ec1c <altera_avalon_jtag_uart_write+0x1b8>
    ec08:	e0bffc17 	ldw	r2,-16(fp)
    ec0c:	10c00917 	ldw	r3,36(r2)
    ec10:	e0bffc17 	ldw	r2,-16(fp)
    ec14:	10800117 	ldw	r2,4(r2)
    ec18:	18bff736 	bltu	r3,r2,ebf8 <_gp+0xffff488c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    ec1c:	e0bffc17 	ldw	r2,-16(fp)
    ec20:	10800917 	ldw	r2,36(r2)
    ec24:	1000051e 	bne	r2,zero,ec3c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    ec28:	e0bffe17 	ldw	r2,-8(fp)
    ec2c:	00bfd016 	blt	zero,r2,eb70 <_gp+0xffff4804>
    ec30:	00000306 	br	ec40 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    ec34:	0001883a 	nop
    ec38:	00000106 	br	ec40 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    ec3c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    ec40:	e0fffd17 	ldw	r3,-12(fp)
    ec44:	e0bff717 	ldw	r2,-36(fp)
    ec48:	18800426 	beq	r3,r2,ec5c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    ec4c:	e0fffd17 	ldw	r3,-12(fp)
    ec50:	e0bff717 	ldw	r2,-36(fp)
    ec54:	1885c83a 	sub	r2,r3,r2
    ec58:	00000606 	br	ec74 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    ec5c:	e0bfff17 	ldw	r2,-4(fp)
    ec60:	1090000c 	andi	r2,r2,16384
    ec64:	10000226 	beq	r2,zero,ec70 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    ec68:	00bffd44 	movi	r2,-11
    ec6c:	00000106 	br	ec74 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    ec70:	00bffec4 	movi	r2,-5
}
    ec74:	e037883a 	mov	sp,fp
    ec78:	dfc00117 	ldw	ra,4(sp)
    ec7c:	df000017 	ldw	fp,0(sp)
    ec80:	dec00204 	addi	sp,sp,8
    ec84:	f800283a 	ret

0000ec88 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    ec88:	defff504 	addi	sp,sp,-44
    ec8c:	df000a15 	stw	fp,40(sp)
    ec90:	df000a04 	addi	fp,sp,40
    ec94:	e13ffc15 	stw	r4,-16(fp)
    ec98:	e17ffd15 	stw	r5,-12(fp)
    ec9c:	e1bffe15 	stw	r6,-8(fp)
    eca0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    eca4:	e03ff615 	stw	zero,-40(fp)
    eca8:	d0a6d617 	ldw	r2,-25768(gp)
  
  if (alt_ticks_per_second ())
    ecac:	10003c26 	beq	r2,zero,eda0 <alt_alarm_start+0x118>
  {
    if (alarm)
    ecb0:	e0bffc17 	ldw	r2,-16(fp)
    ecb4:	10003826 	beq	r2,zero,ed98 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    ecb8:	e0bffc17 	ldw	r2,-16(fp)
    ecbc:	e0fffe17 	ldw	r3,-8(fp)
    ecc0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    ecc4:	e0bffc17 	ldw	r2,-16(fp)
    ecc8:	e0ffff17 	ldw	r3,-4(fp)
    eccc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ecd0:	0005303a 	rdctl	r2,status
    ecd4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ecd8:	e0fff917 	ldw	r3,-28(fp)
    ecdc:	00bfff84 	movi	r2,-2
    ece0:	1884703a 	and	r2,r3,r2
    ece4:	1001703a 	wrctl	status,r2
  
  return context;
    ece8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    ecec:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    ecf0:	d0a6d717 	ldw	r2,-25764(gp)
      
      current_nticks = alt_nticks();
    ecf4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    ecf8:	e0fffd17 	ldw	r3,-12(fp)
    ecfc:	e0bff617 	ldw	r2,-40(fp)
    ed00:	1885883a 	add	r2,r3,r2
    ed04:	10c00044 	addi	r3,r2,1
    ed08:	e0bffc17 	ldw	r2,-16(fp)
    ed0c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    ed10:	e0bffc17 	ldw	r2,-16(fp)
    ed14:	10c00217 	ldw	r3,8(r2)
    ed18:	e0bff617 	ldw	r2,-40(fp)
    ed1c:	1880042e 	bgeu	r3,r2,ed30 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    ed20:	e0bffc17 	ldw	r2,-16(fp)
    ed24:	00c00044 	movi	r3,1
    ed28:	10c00405 	stb	r3,16(r2)
    ed2c:	00000206 	br	ed38 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    ed30:	e0bffc17 	ldw	r2,-16(fp)
    ed34:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    ed38:	e0bffc17 	ldw	r2,-16(fp)
    ed3c:	d0e00e04 	addi	r3,gp,-32712
    ed40:	e0fffa15 	stw	r3,-24(fp)
    ed44:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    ed48:	e0bffb17 	ldw	r2,-20(fp)
    ed4c:	e0fffa17 	ldw	r3,-24(fp)
    ed50:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    ed54:	e0bffa17 	ldw	r2,-24(fp)
    ed58:	10c00017 	ldw	r3,0(r2)
    ed5c:	e0bffb17 	ldw	r2,-20(fp)
    ed60:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    ed64:	e0bffa17 	ldw	r2,-24(fp)
    ed68:	10800017 	ldw	r2,0(r2)
    ed6c:	e0fffb17 	ldw	r3,-20(fp)
    ed70:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    ed74:	e0bffa17 	ldw	r2,-24(fp)
    ed78:	e0fffb17 	ldw	r3,-20(fp)
    ed7c:	10c00015 	stw	r3,0(r2)
    ed80:	e0bff817 	ldw	r2,-32(fp)
    ed84:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ed88:	e0bff717 	ldw	r2,-36(fp)
    ed8c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    ed90:	0005883a 	mov	r2,zero
    ed94:	00000306 	br	eda4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    ed98:	00bffa84 	movi	r2,-22
    ed9c:	00000106 	br	eda4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    eda0:	00bfde84 	movi	r2,-134
  }
}
    eda4:	e037883a 	mov	sp,fp
    eda8:	df000017 	ldw	fp,0(sp)
    edac:	dec00104 	addi	sp,sp,4
    edb0:	f800283a 	ret

0000edb4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    edb4:	defffa04 	addi	sp,sp,-24
    edb8:	dfc00515 	stw	ra,20(sp)
    edbc:	df000415 	stw	fp,16(sp)
    edc0:	df000404 	addi	fp,sp,16
    edc4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    edc8:	00800244 	movi	r2,9
    edcc:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    edd0:	014003f4 	movhi	r5,15
    edd4:	29509004 	addi	r5,r5,16960
    edd8:	e13ffd17 	ldw	r4,-12(fp)
    eddc:	000049c0 	call	49c <__mulsi3>
    ede0:	100b883a 	mov	r5,r2
    ede4:	0100bef4 	movhi	r4,763
    ede8:	213c2004 	addi	r4,r4,-3968
    edec:	000ab700 	call	ab70 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    edf0:	100b883a 	mov	r5,r2
    edf4:	01200034 	movhi	r4,32768
    edf8:	213fffc4 	addi	r4,r4,-1
    edfc:	000ab700 	call	ab70 <__udivsi3>
    ee00:	100b883a 	mov	r5,r2
    ee04:	e13fff17 	ldw	r4,-4(fp)
    ee08:	000ab700 	call	ab70 <__udivsi3>
    ee0c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    ee10:	e0bffe17 	ldw	r2,-8(fp)
    ee14:	10002a26 	beq	r2,zero,eec0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    ee18:	e03ffc15 	stw	zero,-16(fp)
    ee1c:	00001706 	br	ee7c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    ee20:	00a00034 	movhi	r2,32768
    ee24:	10bfffc4 	addi	r2,r2,-1
    ee28:	10bfffc4 	addi	r2,r2,-1
    ee2c:	103ffe1e 	bne	r2,zero,ee28 <_gp+0xffff4abc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    ee30:	014003f4 	movhi	r5,15
    ee34:	29509004 	addi	r5,r5,16960
    ee38:	e13ffd17 	ldw	r4,-12(fp)
    ee3c:	000049c0 	call	49c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    ee40:	100b883a 	mov	r5,r2
    ee44:	0100bef4 	movhi	r4,763
    ee48:	213c2004 	addi	r4,r4,-3968
    ee4c:	000ab700 	call	ab70 <__udivsi3>
    ee50:	100b883a 	mov	r5,r2
    ee54:	01200034 	movhi	r4,32768
    ee58:	213fffc4 	addi	r4,r4,-1
    ee5c:	000ab700 	call	ab70 <__udivsi3>
    ee60:	1007883a 	mov	r3,r2
    ee64:	e0bfff17 	ldw	r2,-4(fp)
    ee68:	10c5c83a 	sub	r2,r2,r3
    ee6c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    ee70:	e0bffc17 	ldw	r2,-16(fp)
    ee74:	10800044 	addi	r2,r2,1
    ee78:	e0bffc15 	stw	r2,-16(fp)
    ee7c:	e0fffc17 	ldw	r3,-16(fp)
    ee80:	e0bffe17 	ldw	r2,-8(fp)
    ee84:	18bfe616 	blt	r3,r2,ee20 <_gp+0xffff4ab4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    ee88:	014003f4 	movhi	r5,15
    ee8c:	29509004 	addi	r5,r5,16960
    ee90:	e13ffd17 	ldw	r4,-12(fp)
    ee94:	000049c0 	call	49c <__mulsi3>
    ee98:	100b883a 	mov	r5,r2
    ee9c:	0100bef4 	movhi	r4,763
    eea0:	213c2004 	addi	r4,r4,-3968
    eea4:	000ab700 	call	ab70 <__udivsi3>
    eea8:	e17fff17 	ldw	r5,-4(fp)
    eeac:	1009883a 	mov	r4,r2
    eeb0:	000049c0 	call	49c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    eeb4:	10bfffc4 	addi	r2,r2,-1
    eeb8:	103ffe1e 	bne	r2,zero,eeb4 <_gp+0xffff4b48>
    eebc:	00000d06 	br	eef4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    eec0:	014003f4 	movhi	r5,15
    eec4:	29509004 	addi	r5,r5,16960
    eec8:	e13ffd17 	ldw	r4,-12(fp)
    eecc:	000049c0 	call	49c <__mulsi3>
    eed0:	100b883a 	mov	r5,r2
    eed4:	0100bef4 	movhi	r4,763
    eed8:	213c2004 	addi	r4,r4,-3968
    eedc:	000ab700 	call	ab70 <__udivsi3>
    eee0:	e17fff17 	ldw	r5,-4(fp)
    eee4:	1009883a 	mov	r4,r2
    eee8:	000049c0 	call	49c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    eeec:	10bfffc4 	addi	r2,r2,-1
    eef0:	00bffe16 	blt	zero,r2,eeec <_gp+0xffff4b80>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    eef4:	0005883a 	mov	r2,zero
}
    eef8:	e037883a 	mov	sp,fp
    eefc:	dfc00117 	ldw	ra,4(sp)
    ef00:	df000017 	ldw	fp,0(sp)
    ef04:	dec00204 	addi	sp,sp,8
    ef08:	f800283a 	ret

0000ef0c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    ef0c:	deffff04 	addi	sp,sp,-4
    ef10:	df000015 	stw	fp,0(sp)
    ef14:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    ef18:	0001883a 	nop
    ef1c:	e037883a 	mov	sp,fp
    ef20:	df000017 	ldw	fp,0(sp)
    ef24:	dec00104 	addi	sp,sp,4
    ef28:	f800283a 	ret

0000ef2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ef2c:	defffe04 	addi	sp,sp,-8
    ef30:	dfc00115 	stw	ra,4(sp)
    ef34:	df000015 	stw	fp,0(sp)
    ef38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ef3c:	d0a00b17 	ldw	r2,-32724(gp)
    ef40:	10000326 	beq	r2,zero,ef50 <alt_get_errno+0x24>
    ef44:	d0a00b17 	ldw	r2,-32724(gp)
    ef48:	103ee83a 	callr	r2
    ef4c:	00000106 	br	ef54 <alt_get_errno+0x28>
    ef50:	d0a6d104 	addi	r2,gp,-25788
}
    ef54:	e037883a 	mov	sp,fp
    ef58:	dfc00117 	ldw	ra,4(sp)
    ef5c:	df000017 	ldw	fp,0(sp)
    ef60:	dec00204 	addi	sp,sp,8
    ef64:	f800283a 	ret

0000ef68 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    ef68:	defffa04 	addi	sp,sp,-24
    ef6c:	dfc00515 	stw	ra,20(sp)
    ef70:	df000415 	stw	fp,16(sp)
    ef74:	df000404 	addi	fp,sp,16
    ef78:	e13ffe15 	stw	r4,-8(fp)
    ef7c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    ef80:	e0bffe17 	ldw	r2,-8(fp)
    ef84:	10000326 	beq	r2,zero,ef94 <alt_dev_llist_insert+0x2c>
    ef88:	e0bffe17 	ldw	r2,-8(fp)
    ef8c:	10800217 	ldw	r2,8(r2)
    ef90:	1000061e 	bne	r2,zero,efac <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    ef94:	000ef2c0 	call	ef2c <alt_get_errno>
    ef98:	1007883a 	mov	r3,r2
    ef9c:	00800584 	movi	r2,22
    efa0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    efa4:	00bffa84 	movi	r2,-22
    efa8:	00001306 	br	eff8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    efac:	e0bffe17 	ldw	r2,-8(fp)
    efb0:	e0ffff17 	ldw	r3,-4(fp)
    efb4:	e0fffc15 	stw	r3,-16(fp)
    efb8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    efbc:	e0bffd17 	ldw	r2,-12(fp)
    efc0:	e0fffc17 	ldw	r3,-16(fp)
    efc4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    efc8:	e0bffc17 	ldw	r2,-16(fp)
    efcc:	10c00017 	ldw	r3,0(r2)
    efd0:	e0bffd17 	ldw	r2,-12(fp)
    efd4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    efd8:	e0bffc17 	ldw	r2,-16(fp)
    efdc:	10800017 	ldw	r2,0(r2)
    efe0:	e0fffd17 	ldw	r3,-12(fp)
    efe4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    efe8:	e0bffc17 	ldw	r2,-16(fp)
    efec:	e0fffd17 	ldw	r3,-12(fp)
    eff0:	10c00015 	stw	r3,0(r2)

  return 0;  
    eff4:	0005883a 	mov	r2,zero
}
    eff8:	e037883a 	mov	sp,fp
    effc:	dfc00117 	ldw	ra,4(sp)
    f000:	df000017 	ldw	fp,0(sp)
    f004:	dec00204 	addi	sp,sp,8
    f008:	f800283a 	ret

0000f00c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f00c:	defffd04 	addi	sp,sp,-12
    f010:	dfc00215 	stw	ra,8(sp)
    f014:	df000115 	stw	fp,4(sp)
    f018:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f01c:	00800074 	movhi	r2,1
    f020:	10815304 	addi	r2,r2,1356
    f024:	e0bfff15 	stw	r2,-4(fp)
    f028:	00000606 	br	f044 <_do_ctors+0x38>
        (*ctor) (); 
    f02c:	e0bfff17 	ldw	r2,-4(fp)
    f030:	10800017 	ldw	r2,0(r2)
    f034:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f038:	e0bfff17 	ldw	r2,-4(fp)
    f03c:	10bfff04 	addi	r2,r2,-4
    f040:	e0bfff15 	stw	r2,-4(fp)
    f044:	e0ffff17 	ldw	r3,-4(fp)
    f048:	00800074 	movhi	r2,1
    f04c:	10815404 	addi	r2,r2,1360
    f050:	18bff62e 	bgeu	r3,r2,f02c <_gp+0xffff4cc0>
        (*ctor) (); 
}
    f054:	0001883a 	nop
    f058:	e037883a 	mov	sp,fp
    f05c:	dfc00117 	ldw	ra,4(sp)
    f060:	df000017 	ldw	fp,0(sp)
    f064:	dec00204 	addi	sp,sp,8
    f068:	f800283a 	ret

0000f06c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f06c:	defffd04 	addi	sp,sp,-12
    f070:	dfc00215 	stw	ra,8(sp)
    f074:	df000115 	stw	fp,4(sp)
    f078:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f07c:	00800074 	movhi	r2,1
    f080:	10815304 	addi	r2,r2,1356
    f084:	e0bfff15 	stw	r2,-4(fp)
    f088:	00000606 	br	f0a4 <_do_dtors+0x38>
        (*dtor) (); 
    f08c:	e0bfff17 	ldw	r2,-4(fp)
    f090:	10800017 	ldw	r2,0(r2)
    f094:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f098:	e0bfff17 	ldw	r2,-4(fp)
    f09c:	10bfff04 	addi	r2,r2,-4
    f0a0:	e0bfff15 	stw	r2,-4(fp)
    f0a4:	e0ffff17 	ldw	r3,-4(fp)
    f0a8:	00800074 	movhi	r2,1
    f0ac:	10815404 	addi	r2,r2,1360
    f0b0:	18bff62e 	bgeu	r3,r2,f08c <_gp+0xffff4d20>
        (*dtor) (); 
}
    f0b4:	0001883a 	nop
    f0b8:	e037883a 	mov	sp,fp
    f0bc:	dfc00117 	ldw	ra,4(sp)
    f0c0:	df000017 	ldw	fp,0(sp)
    f0c4:	dec00204 	addi	sp,sp,8
    f0c8:	f800283a 	ret

0000f0cc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    f0cc:	deffff04 	addi	sp,sp,-4
    f0d0:	df000015 	stw	fp,0(sp)
    f0d4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    f0d8:	0001883a 	nop
    f0dc:	e037883a 	mov	sp,fp
    f0e0:	df000017 	ldw	fp,0(sp)
    f0e4:	dec00104 	addi	sp,sp,4
    f0e8:	f800283a 	ret

0000f0ec <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    f0ec:	defff904 	addi	sp,sp,-28
    f0f0:	dfc00615 	stw	ra,24(sp)
    f0f4:	df000515 	stw	fp,20(sp)
    f0f8:	df000504 	addi	fp,sp,20
    f0fc:	e13ffc15 	stw	r4,-16(fp)
    f100:	e17ffd15 	stw	r5,-12(fp)
    f104:	e1bffe15 	stw	r6,-8(fp)
    f108:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    f10c:	e0800217 	ldw	r2,8(fp)
    f110:	d8800015 	stw	r2,0(sp)
    f114:	e1ffff17 	ldw	r7,-4(fp)
    f118:	e1bffe17 	ldw	r6,-8(fp)
    f11c:	e17ffd17 	ldw	r5,-12(fp)
    f120:	e13ffc17 	ldw	r4,-16(fp)
    f124:	000f29c0 	call	f29c <alt_iic_isr_register>
}  
    f128:	e037883a 	mov	sp,fp
    f12c:	dfc00117 	ldw	ra,4(sp)
    f130:	df000017 	ldw	fp,0(sp)
    f134:	dec00204 	addi	sp,sp,8
    f138:	f800283a 	ret

0000f13c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    f13c:	defff904 	addi	sp,sp,-28
    f140:	df000615 	stw	fp,24(sp)
    f144:	df000604 	addi	fp,sp,24
    f148:	e13ffe15 	stw	r4,-8(fp)
    f14c:	e17fff15 	stw	r5,-4(fp)
    f150:	e0bfff17 	ldw	r2,-4(fp)
    f154:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f158:	0005303a 	rdctl	r2,status
    f15c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f160:	e0fffb17 	ldw	r3,-20(fp)
    f164:	00bfff84 	movi	r2,-2
    f168:	1884703a 	and	r2,r3,r2
    f16c:	1001703a 	wrctl	status,r2
  
  return context;
    f170:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    f174:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    f178:	00c00044 	movi	r3,1
    f17c:	e0bffa17 	ldw	r2,-24(fp)
    f180:	1884983a 	sll	r2,r3,r2
    f184:	1007883a 	mov	r3,r2
    f188:	d0a6d517 	ldw	r2,-25772(gp)
    f18c:	1884b03a 	or	r2,r3,r2
    f190:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f194:	d0a6d517 	ldw	r2,-25772(gp)
    f198:	100170fa 	wrctl	ienable,r2
    f19c:	e0bffc17 	ldw	r2,-16(fp)
    f1a0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f1a4:	e0bffd17 	ldw	r2,-12(fp)
    f1a8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    f1ac:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    f1b0:	0001883a 	nop
}
    f1b4:	e037883a 	mov	sp,fp
    f1b8:	df000017 	ldw	fp,0(sp)
    f1bc:	dec00104 	addi	sp,sp,4
    f1c0:	f800283a 	ret

0000f1c4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    f1c4:	defff904 	addi	sp,sp,-28
    f1c8:	df000615 	stw	fp,24(sp)
    f1cc:	df000604 	addi	fp,sp,24
    f1d0:	e13ffe15 	stw	r4,-8(fp)
    f1d4:	e17fff15 	stw	r5,-4(fp)
    f1d8:	e0bfff17 	ldw	r2,-4(fp)
    f1dc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f1e0:	0005303a 	rdctl	r2,status
    f1e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f1e8:	e0fffb17 	ldw	r3,-20(fp)
    f1ec:	00bfff84 	movi	r2,-2
    f1f0:	1884703a 	and	r2,r3,r2
    f1f4:	1001703a 	wrctl	status,r2
  
  return context;
    f1f8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    f1fc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    f200:	00c00044 	movi	r3,1
    f204:	e0bffa17 	ldw	r2,-24(fp)
    f208:	1884983a 	sll	r2,r3,r2
    f20c:	0084303a 	nor	r2,zero,r2
    f210:	1007883a 	mov	r3,r2
    f214:	d0a6d517 	ldw	r2,-25772(gp)
    f218:	1884703a 	and	r2,r3,r2
    f21c:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f220:	d0a6d517 	ldw	r2,-25772(gp)
    f224:	100170fa 	wrctl	ienable,r2
    f228:	e0bffc17 	ldw	r2,-16(fp)
    f22c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f230:	e0bffd17 	ldw	r2,-12(fp)
    f234:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    f238:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    f23c:	0001883a 	nop
}
    f240:	e037883a 	mov	sp,fp
    f244:	df000017 	ldw	fp,0(sp)
    f248:	dec00104 	addi	sp,sp,4
    f24c:	f800283a 	ret

0000f250 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    f250:	defffc04 	addi	sp,sp,-16
    f254:	df000315 	stw	fp,12(sp)
    f258:	df000304 	addi	fp,sp,12
    f25c:	e13ffe15 	stw	r4,-8(fp)
    f260:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    f264:	000530fa 	rdctl	r2,ienable
    f268:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    f26c:	00c00044 	movi	r3,1
    f270:	e0bfff17 	ldw	r2,-4(fp)
    f274:	1884983a 	sll	r2,r3,r2
    f278:	1007883a 	mov	r3,r2
    f27c:	e0bffd17 	ldw	r2,-12(fp)
    f280:	1884703a 	and	r2,r3,r2
    f284:	1004c03a 	cmpne	r2,r2,zero
    f288:	10803fcc 	andi	r2,r2,255
}
    f28c:	e037883a 	mov	sp,fp
    f290:	df000017 	ldw	fp,0(sp)
    f294:	dec00104 	addi	sp,sp,4
    f298:	f800283a 	ret

0000f29c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    f29c:	defff504 	addi	sp,sp,-44
    f2a0:	dfc00a15 	stw	ra,40(sp)
    f2a4:	df000915 	stw	fp,36(sp)
    f2a8:	df000904 	addi	fp,sp,36
    f2ac:	e13ffc15 	stw	r4,-16(fp)
    f2b0:	e17ffd15 	stw	r5,-12(fp)
    f2b4:	e1bffe15 	stw	r6,-8(fp)
    f2b8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    f2bc:	00bffa84 	movi	r2,-22
    f2c0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    f2c4:	e0bffd17 	ldw	r2,-12(fp)
    f2c8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    f2cc:	e0bff817 	ldw	r2,-32(fp)
    f2d0:	10800808 	cmpgei	r2,r2,32
    f2d4:	1000271e 	bne	r2,zero,f374 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f2d8:	0005303a 	rdctl	r2,status
    f2dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f2e0:	e0fffb17 	ldw	r3,-20(fp)
    f2e4:	00bfff84 	movi	r2,-2
    f2e8:	1884703a 	and	r2,r3,r2
    f2ec:	1001703a 	wrctl	status,r2
  
  return context;
    f2f0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    f2f4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    f2f8:	00800074 	movhi	r2,1
    f2fc:	108fc304 	addi	r2,r2,16140
    f300:	e0fff817 	ldw	r3,-32(fp)
    f304:	180690fa 	slli	r3,r3,3
    f308:	10c5883a 	add	r2,r2,r3
    f30c:	e0fffe17 	ldw	r3,-8(fp)
    f310:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    f314:	00800074 	movhi	r2,1
    f318:	108fc304 	addi	r2,r2,16140
    f31c:	e0fff817 	ldw	r3,-32(fp)
    f320:	180690fa 	slli	r3,r3,3
    f324:	10c5883a 	add	r2,r2,r3
    f328:	10800104 	addi	r2,r2,4
    f32c:	e0ffff17 	ldw	r3,-4(fp)
    f330:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    f334:	e0bffe17 	ldw	r2,-8(fp)
    f338:	10000526 	beq	r2,zero,f350 <alt_iic_isr_register+0xb4>
    f33c:	e0bff817 	ldw	r2,-32(fp)
    f340:	100b883a 	mov	r5,r2
    f344:	e13ffc17 	ldw	r4,-16(fp)
    f348:	000f13c0 	call	f13c <alt_ic_irq_enable>
    f34c:	00000406 	br	f360 <alt_iic_isr_register+0xc4>
    f350:	e0bff817 	ldw	r2,-32(fp)
    f354:	100b883a 	mov	r5,r2
    f358:	e13ffc17 	ldw	r4,-16(fp)
    f35c:	000f1c40 	call	f1c4 <alt_ic_irq_disable>
    f360:	e0bff715 	stw	r2,-36(fp)
    f364:	e0bffa17 	ldw	r2,-24(fp)
    f368:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f36c:	e0bff917 	ldw	r2,-28(fp)
    f370:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    f374:	e0bff717 	ldw	r2,-36(fp)
}
    f378:	e037883a 	mov	sp,fp
    f37c:	dfc00117 	ldw	ra,4(sp)
    f380:	df000017 	ldw	fp,0(sp)
    f384:	dec00204 	addi	sp,sp,8
    f388:	f800283a 	ret

0000f38c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    f38c:	defff804 	addi	sp,sp,-32
    f390:	dfc00715 	stw	ra,28(sp)
    f394:	df000615 	stw	fp,24(sp)
    f398:	dc000515 	stw	r16,20(sp)
    f39c:	df000604 	addi	fp,sp,24
    f3a0:	e13ffb15 	stw	r4,-20(fp)
    f3a4:	e17ffc15 	stw	r5,-16(fp)
    f3a8:	e1bffd15 	stw	r6,-12(fp)
    f3ac:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    f3b0:	e1bffe17 	ldw	r6,-8(fp)
    f3b4:	e17ffd17 	ldw	r5,-12(fp)
    f3b8:	e13ffc17 	ldw	r4,-16(fp)
    f3bc:	000f6140 	call	f614 <open>
    f3c0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    f3c4:	e0bffa17 	ldw	r2,-24(fp)
    f3c8:	10002216 	blt	r2,zero,f454 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    f3cc:	04000074 	movhi	r16,1
    f3d0:	84046304 	addi	r16,r16,4492
    f3d4:	e0bffa17 	ldw	r2,-24(fp)
    f3d8:	01400304 	movi	r5,12
    f3dc:	1009883a 	mov	r4,r2
    f3e0:	000049c0 	call	49c <__mulsi3>
    f3e4:	8085883a 	add	r2,r16,r2
    f3e8:	10c00017 	ldw	r3,0(r2)
    f3ec:	e0bffb17 	ldw	r2,-20(fp)
    f3f0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    f3f4:	04000074 	movhi	r16,1
    f3f8:	84046304 	addi	r16,r16,4492
    f3fc:	e0bffa17 	ldw	r2,-24(fp)
    f400:	01400304 	movi	r5,12
    f404:	1009883a 	mov	r4,r2
    f408:	000049c0 	call	49c <__mulsi3>
    f40c:	8085883a 	add	r2,r16,r2
    f410:	10800104 	addi	r2,r2,4
    f414:	10c00017 	ldw	r3,0(r2)
    f418:	e0bffb17 	ldw	r2,-20(fp)
    f41c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f420:	04000074 	movhi	r16,1
    f424:	84046304 	addi	r16,r16,4492
    f428:	e0bffa17 	ldw	r2,-24(fp)
    f42c:	01400304 	movi	r5,12
    f430:	1009883a 	mov	r4,r2
    f434:	000049c0 	call	49c <__mulsi3>
    f438:	8085883a 	add	r2,r16,r2
    f43c:	10800204 	addi	r2,r2,8
    f440:	10c00017 	ldw	r3,0(r2)
    f444:	e0bffb17 	ldw	r2,-20(fp)
    f448:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    f44c:	e13ffa17 	ldw	r4,-24(fp)
    f450:	000decc0 	call	decc <alt_release_fd>
  }
} 
    f454:	0001883a 	nop
    f458:	e6ffff04 	addi	sp,fp,-4
    f45c:	dfc00217 	ldw	ra,8(sp)
    f460:	df000117 	ldw	fp,4(sp)
    f464:	dc000017 	ldw	r16,0(sp)
    f468:	dec00304 	addi	sp,sp,12
    f46c:	f800283a 	ret

0000f470 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f470:	defffb04 	addi	sp,sp,-20
    f474:	dfc00415 	stw	ra,16(sp)
    f478:	df000315 	stw	fp,12(sp)
    f47c:	df000304 	addi	fp,sp,12
    f480:	e13ffd15 	stw	r4,-12(fp)
    f484:	e17ffe15 	stw	r5,-8(fp)
    f488:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    f48c:	01c07fc4 	movi	r7,511
    f490:	01800044 	movi	r6,1
    f494:	e17ffd17 	ldw	r5,-12(fp)
    f498:	01000074 	movhi	r4,1
    f49c:	21046604 	addi	r4,r4,4504
    f4a0:	000f38c0 	call	f38c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    f4a4:	01c07fc4 	movi	r7,511
    f4a8:	000d883a 	mov	r6,zero
    f4ac:	e17ffe17 	ldw	r5,-8(fp)
    f4b0:	01000074 	movhi	r4,1
    f4b4:	21046304 	addi	r4,r4,4492
    f4b8:	000f38c0 	call	f38c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    f4bc:	01c07fc4 	movi	r7,511
    f4c0:	01800044 	movi	r6,1
    f4c4:	e17fff17 	ldw	r5,-4(fp)
    f4c8:	01000074 	movhi	r4,1
    f4cc:	21046904 	addi	r4,r4,4516
    f4d0:	000f38c0 	call	f38c <alt_open_fd>
}  
    f4d4:	0001883a 	nop
    f4d8:	e037883a 	mov	sp,fp
    f4dc:	dfc00117 	ldw	ra,4(sp)
    f4e0:	df000017 	ldw	fp,0(sp)
    f4e4:	dec00204 	addi	sp,sp,8
    f4e8:	f800283a 	ret

0000f4ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f4ec:	defffe04 	addi	sp,sp,-8
    f4f0:	dfc00115 	stw	ra,4(sp)
    f4f4:	df000015 	stw	fp,0(sp)
    f4f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f4fc:	d0a00b17 	ldw	r2,-32724(gp)
    f500:	10000326 	beq	r2,zero,f510 <alt_get_errno+0x24>
    f504:	d0a00b17 	ldw	r2,-32724(gp)
    f508:	103ee83a 	callr	r2
    f50c:	00000106 	br	f514 <alt_get_errno+0x28>
    f510:	d0a6d104 	addi	r2,gp,-25788
}
    f514:	e037883a 	mov	sp,fp
    f518:	dfc00117 	ldw	ra,4(sp)
    f51c:	df000017 	ldw	fp,0(sp)
    f520:	dec00204 	addi	sp,sp,8
    f524:	f800283a 	ret

0000f528 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    f528:	defffb04 	addi	sp,sp,-20
    f52c:	dfc00415 	stw	ra,16(sp)
    f530:	df000315 	stw	fp,12(sp)
    f534:	dc000215 	stw	r16,8(sp)
    f538:	df000304 	addi	fp,sp,12
    f53c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f540:	e0bffe17 	ldw	r2,-8(fp)
    f544:	10800217 	ldw	r2,8(r2)
    f548:	10d00034 	orhi	r3,r2,16384
    f54c:	e0bffe17 	ldw	r2,-8(fp)
    f550:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f554:	e03ffd15 	stw	zero,-12(fp)
    f558:	00002306 	br	f5e8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f55c:	04000074 	movhi	r16,1
    f560:	84046304 	addi	r16,r16,4492
    f564:	e0bffd17 	ldw	r2,-12(fp)
    f568:	01400304 	movi	r5,12
    f56c:	1009883a 	mov	r4,r2
    f570:	000049c0 	call	49c <__mulsi3>
    f574:	8085883a 	add	r2,r16,r2
    f578:	10c00017 	ldw	r3,0(r2)
    f57c:	e0bffe17 	ldw	r2,-8(fp)
    f580:	10800017 	ldw	r2,0(r2)
    f584:	1880151e 	bne	r3,r2,f5dc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f588:	04000074 	movhi	r16,1
    f58c:	84046304 	addi	r16,r16,4492
    f590:	e0bffd17 	ldw	r2,-12(fp)
    f594:	01400304 	movi	r5,12
    f598:	1009883a 	mov	r4,r2
    f59c:	000049c0 	call	49c <__mulsi3>
    f5a0:	8085883a 	add	r2,r16,r2
    f5a4:	10800204 	addi	r2,r2,8
    f5a8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f5ac:	10000b0e 	bge	r2,zero,f5dc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    f5b0:	01400304 	movi	r5,12
    f5b4:	e13ffd17 	ldw	r4,-12(fp)
    f5b8:	000049c0 	call	49c <__mulsi3>
    f5bc:	1007883a 	mov	r3,r2
    f5c0:	00800074 	movhi	r2,1
    f5c4:	10846304 	addi	r2,r2,4492
    f5c8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f5cc:	e0bffe17 	ldw	r2,-8(fp)
    f5d0:	18800226 	beq	r3,r2,f5dc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    f5d4:	00bffcc4 	movi	r2,-13
    f5d8:	00000806 	br	f5fc <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f5dc:	e0bffd17 	ldw	r2,-12(fp)
    f5e0:	10800044 	addi	r2,r2,1
    f5e4:	e0bffd15 	stw	r2,-12(fp)
    f5e8:	d0a00a17 	ldw	r2,-32728(gp)
    f5ec:	1007883a 	mov	r3,r2
    f5f0:	e0bffd17 	ldw	r2,-12(fp)
    f5f4:	18bfd92e 	bgeu	r3,r2,f55c <_gp+0xffff51f0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    f5f8:	0005883a 	mov	r2,zero
}
    f5fc:	e6ffff04 	addi	sp,fp,-4
    f600:	dfc00217 	ldw	ra,8(sp)
    f604:	df000117 	ldw	fp,4(sp)
    f608:	dc000017 	ldw	r16,0(sp)
    f60c:	dec00304 	addi	sp,sp,12
    f610:	f800283a 	ret

0000f614 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f614:	defff604 	addi	sp,sp,-40
    f618:	dfc00915 	stw	ra,36(sp)
    f61c:	df000815 	stw	fp,32(sp)
    f620:	df000804 	addi	fp,sp,32
    f624:	e13ffd15 	stw	r4,-12(fp)
    f628:	e17ffe15 	stw	r5,-8(fp)
    f62c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    f630:	00bfffc4 	movi	r2,-1
    f634:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    f638:	00bffb44 	movi	r2,-19
    f63c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    f640:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f644:	d1600804 	addi	r5,gp,-32736
    f648:	e13ffd17 	ldw	r4,-12(fp)
    f64c:	000f9380 	call	f938 <alt_find_dev>
    f650:	e0bff815 	stw	r2,-32(fp)
    f654:	e0bff817 	ldw	r2,-32(fp)
    f658:	1000051e 	bne	r2,zero,f670 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    f65c:	e13ffd17 	ldw	r4,-12(fp)
    f660:	000f9c80 	call	f9c8 <alt_find_file>
    f664:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    f668:	00800044 	movi	r2,1
    f66c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    f670:	e0bff817 	ldw	r2,-32(fp)
    f674:	10002b26 	beq	r2,zero,f724 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    f678:	e13ff817 	ldw	r4,-32(fp)
    f67c:	000fad00 	call	fad0 <alt_get_fd>
    f680:	e0bff915 	stw	r2,-28(fp)
    f684:	e0bff917 	ldw	r2,-28(fp)
    f688:	1000030e 	bge	r2,zero,f698 <open+0x84>
    {
      status = index;
    f68c:	e0bff917 	ldw	r2,-28(fp)
    f690:	e0bffa15 	stw	r2,-24(fp)
    f694:	00002506 	br	f72c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    f698:	01400304 	movi	r5,12
    f69c:	e13ff917 	ldw	r4,-28(fp)
    f6a0:	000049c0 	call	49c <__mulsi3>
    f6a4:	1007883a 	mov	r3,r2
    f6a8:	00800074 	movhi	r2,1
    f6ac:	10846304 	addi	r2,r2,4492
    f6b0:	1885883a 	add	r2,r3,r2
    f6b4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    f6b8:	e0fffe17 	ldw	r3,-8(fp)
    f6bc:	00900034 	movhi	r2,16384
    f6c0:	10bfffc4 	addi	r2,r2,-1
    f6c4:	1886703a 	and	r3,r3,r2
    f6c8:	e0bffc17 	ldw	r2,-16(fp)
    f6cc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    f6d0:	e0bffb17 	ldw	r2,-20(fp)
    f6d4:	1000051e 	bne	r2,zero,f6ec <open+0xd8>
    f6d8:	e13ffc17 	ldw	r4,-16(fp)
    f6dc:	000f5280 	call	f528 <alt_file_locked>
    f6e0:	e0bffa15 	stw	r2,-24(fp)
    f6e4:	e0bffa17 	ldw	r2,-24(fp)
    f6e8:	10001016 	blt	r2,zero,f72c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    f6ec:	e0bff817 	ldw	r2,-32(fp)
    f6f0:	10800317 	ldw	r2,12(r2)
    f6f4:	10000826 	beq	r2,zero,f718 <open+0x104>
    f6f8:	e0bff817 	ldw	r2,-32(fp)
    f6fc:	10800317 	ldw	r2,12(r2)
    f700:	e1ffff17 	ldw	r7,-4(fp)
    f704:	e1bffe17 	ldw	r6,-8(fp)
    f708:	e17ffd17 	ldw	r5,-12(fp)
    f70c:	e13ffc17 	ldw	r4,-16(fp)
    f710:	103ee83a 	callr	r2
    f714:	00000106 	br	f71c <open+0x108>
    f718:	0005883a 	mov	r2,zero
    f71c:	e0bffa15 	stw	r2,-24(fp)
    f720:	00000206 	br	f72c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    f724:	00bffb44 	movi	r2,-19
    f728:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    f72c:	e0bffa17 	ldw	r2,-24(fp)
    f730:	1000090e 	bge	r2,zero,f758 <open+0x144>
  {
    alt_release_fd (index);  
    f734:	e13ff917 	ldw	r4,-28(fp)
    f738:	000decc0 	call	decc <alt_release_fd>
    ALT_ERRNO = -status;
    f73c:	000f4ec0 	call	f4ec <alt_get_errno>
    f740:	1007883a 	mov	r3,r2
    f744:	e0bffa17 	ldw	r2,-24(fp)
    f748:	0085c83a 	sub	r2,zero,r2
    f74c:	18800015 	stw	r2,0(r3)
    return -1;
    f750:	00bfffc4 	movi	r2,-1
    f754:	00000106 	br	f75c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    f758:	e0bff917 	ldw	r2,-28(fp)
}
    f75c:	e037883a 	mov	sp,fp
    f760:	dfc00117 	ldw	ra,4(sp)
    f764:	df000017 	ldw	fp,0(sp)
    f768:	dec00204 	addi	sp,sp,8
    f76c:	f800283a 	ret

0000f770 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    f770:	defffa04 	addi	sp,sp,-24
    f774:	df000515 	stw	fp,20(sp)
    f778:	df000504 	addi	fp,sp,20
    f77c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f780:	0005303a 	rdctl	r2,status
    f784:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f788:	e0fffc17 	ldw	r3,-16(fp)
    f78c:	00bfff84 	movi	r2,-2
    f790:	1884703a 	and	r2,r3,r2
    f794:	1001703a 	wrctl	status,r2
  
  return context;
    f798:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    f79c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    f7a0:	e0bfff17 	ldw	r2,-4(fp)
    f7a4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f7a8:	e0bffd17 	ldw	r2,-12(fp)
    f7ac:	10800017 	ldw	r2,0(r2)
    f7b0:	e0fffd17 	ldw	r3,-12(fp)
    f7b4:	18c00117 	ldw	r3,4(r3)
    f7b8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    f7bc:	e0bffd17 	ldw	r2,-12(fp)
    f7c0:	10800117 	ldw	r2,4(r2)
    f7c4:	e0fffd17 	ldw	r3,-12(fp)
    f7c8:	18c00017 	ldw	r3,0(r3)
    f7cc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f7d0:	e0bffd17 	ldw	r2,-12(fp)
    f7d4:	e0fffd17 	ldw	r3,-12(fp)
    f7d8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    f7dc:	e0bffd17 	ldw	r2,-12(fp)
    f7e0:	e0fffd17 	ldw	r3,-12(fp)
    f7e4:	10c00015 	stw	r3,0(r2)
    f7e8:	e0bffb17 	ldw	r2,-20(fp)
    f7ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f7f0:	e0bffe17 	ldw	r2,-8(fp)
    f7f4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    f7f8:	0001883a 	nop
    f7fc:	e037883a 	mov	sp,fp
    f800:	df000017 	ldw	fp,0(sp)
    f804:	dec00104 	addi	sp,sp,4
    f808:	f800283a 	ret

0000f80c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f80c:	defffb04 	addi	sp,sp,-20
    f810:	dfc00415 	stw	ra,16(sp)
    f814:	df000315 	stw	fp,12(sp)
    f818:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f81c:	d0a00e17 	ldw	r2,-32712(gp)
    f820:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f824:	d0a6d717 	ldw	r2,-25764(gp)
    f828:	10800044 	addi	r2,r2,1
    f82c:	d0a6d715 	stw	r2,-25764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f830:	00002e06 	br	f8ec <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    f834:	e0bffd17 	ldw	r2,-12(fp)
    f838:	10800017 	ldw	r2,0(r2)
    f83c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f840:	e0bffd17 	ldw	r2,-12(fp)
    f844:	10800403 	ldbu	r2,16(r2)
    f848:	10803fcc 	andi	r2,r2,255
    f84c:	10000426 	beq	r2,zero,f860 <alt_tick+0x54>
    f850:	d0a6d717 	ldw	r2,-25764(gp)
    f854:	1000021e 	bne	r2,zero,f860 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    f858:	e0bffd17 	ldw	r2,-12(fp)
    f85c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f860:	e0bffd17 	ldw	r2,-12(fp)
    f864:	10800217 	ldw	r2,8(r2)
    f868:	d0e6d717 	ldw	r3,-25764(gp)
    f86c:	18801d36 	bltu	r3,r2,f8e4 <alt_tick+0xd8>
    f870:	e0bffd17 	ldw	r2,-12(fp)
    f874:	10800403 	ldbu	r2,16(r2)
    f878:	10803fcc 	andi	r2,r2,255
    f87c:	1000191e 	bne	r2,zero,f8e4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    f880:	e0bffd17 	ldw	r2,-12(fp)
    f884:	10800317 	ldw	r2,12(r2)
    f888:	e0fffd17 	ldw	r3,-12(fp)
    f88c:	18c00517 	ldw	r3,20(r3)
    f890:	1809883a 	mov	r4,r3
    f894:	103ee83a 	callr	r2
    f898:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    f89c:	e0bfff17 	ldw	r2,-4(fp)
    f8a0:	1000031e 	bne	r2,zero,f8b0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    f8a4:	e13ffd17 	ldw	r4,-12(fp)
    f8a8:	000f7700 	call	f770 <alt_alarm_stop>
    f8ac:	00000d06 	br	f8e4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    f8b0:	e0bffd17 	ldw	r2,-12(fp)
    f8b4:	10c00217 	ldw	r3,8(r2)
    f8b8:	e0bfff17 	ldw	r2,-4(fp)
    f8bc:	1887883a 	add	r3,r3,r2
    f8c0:	e0bffd17 	ldw	r2,-12(fp)
    f8c4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    f8c8:	e0bffd17 	ldw	r2,-12(fp)
    f8cc:	10c00217 	ldw	r3,8(r2)
    f8d0:	d0a6d717 	ldw	r2,-25764(gp)
    f8d4:	1880032e 	bgeu	r3,r2,f8e4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    f8d8:	e0bffd17 	ldw	r2,-12(fp)
    f8dc:	00c00044 	movi	r3,1
    f8e0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    f8e4:	e0bffe17 	ldw	r2,-8(fp)
    f8e8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f8ec:	e0fffd17 	ldw	r3,-12(fp)
    f8f0:	d0a00e04 	addi	r2,gp,-32712
    f8f4:	18bfcf1e 	bne	r3,r2,f834 <_gp+0xffff54c8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    f8f8:	0001883a 	nop
}
    f8fc:	0001883a 	nop
    f900:	e037883a 	mov	sp,fp
    f904:	dfc00117 	ldw	ra,4(sp)
    f908:	df000017 	ldw	fp,0(sp)
    f90c:	dec00204 	addi	sp,sp,8
    f910:	f800283a 	ret

0000f914 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    f914:	deffff04 	addi	sp,sp,-4
    f918:	df000015 	stw	fp,0(sp)
    f91c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    f920:	000170fa 	wrctl	ienable,zero
}
    f924:	0001883a 	nop
    f928:	e037883a 	mov	sp,fp
    f92c:	df000017 	ldw	fp,0(sp)
    f930:	dec00104 	addi	sp,sp,4
    f934:	f800283a 	ret

0000f938 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    f938:	defffa04 	addi	sp,sp,-24
    f93c:	dfc00515 	stw	ra,20(sp)
    f940:	df000415 	stw	fp,16(sp)
    f944:	df000404 	addi	fp,sp,16
    f948:	e13ffe15 	stw	r4,-8(fp)
    f94c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    f950:	e0bfff17 	ldw	r2,-4(fp)
    f954:	10800017 	ldw	r2,0(r2)
    f958:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    f95c:	e13ffe17 	ldw	r4,-8(fp)
    f960:	00072540 	call	7254 <strlen>
    f964:	10800044 	addi	r2,r2,1
    f968:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f96c:	00000d06 	br	f9a4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    f970:	e0bffc17 	ldw	r2,-16(fp)
    f974:	10800217 	ldw	r2,8(r2)
    f978:	e0fffd17 	ldw	r3,-12(fp)
    f97c:	180d883a 	mov	r6,r3
    f980:	e17ffe17 	ldw	r5,-8(fp)
    f984:	1009883a 	mov	r4,r2
    f988:	000fe280 	call	fe28 <memcmp>
    f98c:	1000021e 	bne	r2,zero,f998 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    f990:	e0bffc17 	ldw	r2,-16(fp)
    f994:	00000706 	br	f9b4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    f998:	e0bffc17 	ldw	r2,-16(fp)
    f99c:	10800017 	ldw	r2,0(r2)
    f9a0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f9a4:	e0fffc17 	ldw	r3,-16(fp)
    f9a8:	e0bfff17 	ldw	r2,-4(fp)
    f9ac:	18bff01e 	bne	r3,r2,f970 <_gp+0xffff5604>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    f9b0:	0005883a 	mov	r2,zero
}
    f9b4:	e037883a 	mov	sp,fp
    f9b8:	dfc00117 	ldw	ra,4(sp)
    f9bc:	df000017 	ldw	fp,0(sp)
    f9c0:	dec00204 	addi	sp,sp,8
    f9c4:	f800283a 	ret

0000f9c8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    f9c8:	defffb04 	addi	sp,sp,-20
    f9cc:	dfc00415 	stw	ra,16(sp)
    f9d0:	df000315 	stw	fp,12(sp)
    f9d4:	df000304 	addi	fp,sp,12
    f9d8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    f9dc:	d0a00617 	ldw	r2,-32744(gp)
    f9e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f9e4:	00003106 	br	faac <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    f9e8:	e0bffd17 	ldw	r2,-12(fp)
    f9ec:	10800217 	ldw	r2,8(r2)
    f9f0:	1009883a 	mov	r4,r2
    f9f4:	00072540 	call	7254 <strlen>
    f9f8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    f9fc:	e0bffd17 	ldw	r2,-12(fp)
    fa00:	10c00217 	ldw	r3,8(r2)
    fa04:	e0bffe17 	ldw	r2,-8(fp)
    fa08:	10bfffc4 	addi	r2,r2,-1
    fa0c:	1885883a 	add	r2,r3,r2
    fa10:	10800003 	ldbu	r2,0(r2)
    fa14:	10803fcc 	andi	r2,r2,255
    fa18:	1080201c 	xori	r2,r2,128
    fa1c:	10bfe004 	addi	r2,r2,-128
    fa20:	10800bd8 	cmpnei	r2,r2,47
    fa24:	1000031e 	bne	r2,zero,fa34 <alt_find_file+0x6c>
    {
      len -= 1;
    fa28:	e0bffe17 	ldw	r2,-8(fp)
    fa2c:	10bfffc4 	addi	r2,r2,-1
    fa30:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    fa34:	e0bffe17 	ldw	r2,-8(fp)
    fa38:	e0ffff17 	ldw	r3,-4(fp)
    fa3c:	1885883a 	add	r2,r3,r2
    fa40:	10800003 	ldbu	r2,0(r2)
    fa44:	10803fcc 	andi	r2,r2,255
    fa48:	1080201c 	xori	r2,r2,128
    fa4c:	10bfe004 	addi	r2,r2,-128
    fa50:	10800be0 	cmpeqi	r2,r2,47
    fa54:	1000081e 	bne	r2,zero,fa78 <alt_find_file+0xb0>
    fa58:	e0bffe17 	ldw	r2,-8(fp)
    fa5c:	e0ffff17 	ldw	r3,-4(fp)
    fa60:	1885883a 	add	r2,r3,r2
    fa64:	10800003 	ldbu	r2,0(r2)
    fa68:	10803fcc 	andi	r2,r2,255
    fa6c:	1080201c 	xori	r2,r2,128
    fa70:	10bfe004 	addi	r2,r2,-128
    fa74:	10000a1e 	bne	r2,zero,faa0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    fa78:	e0bffd17 	ldw	r2,-12(fp)
    fa7c:	10800217 	ldw	r2,8(r2)
    fa80:	e0fffe17 	ldw	r3,-8(fp)
    fa84:	180d883a 	mov	r6,r3
    fa88:	e17fff17 	ldw	r5,-4(fp)
    fa8c:	1009883a 	mov	r4,r2
    fa90:	000fe280 	call	fe28 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    fa94:	1000021e 	bne	r2,zero,faa0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    fa98:	e0bffd17 	ldw	r2,-12(fp)
    fa9c:	00000706 	br	fabc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    faa0:	e0bffd17 	ldw	r2,-12(fp)
    faa4:	10800017 	ldw	r2,0(r2)
    faa8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    faac:	e0fffd17 	ldw	r3,-12(fp)
    fab0:	d0a00604 	addi	r2,gp,-32744
    fab4:	18bfcc1e 	bne	r3,r2,f9e8 <_gp+0xffff567c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    fab8:	0005883a 	mov	r2,zero
}
    fabc:	e037883a 	mov	sp,fp
    fac0:	dfc00117 	ldw	ra,4(sp)
    fac4:	df000017 	ldw	fp,0(sp)
    fac8:	dec00204 	addi	sp,sp,8
    facc:	f800283a 	ret

0000fad0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    fad0:	defffa04 	addi	sp,sp,-24
    fad4:	dfc00515 	stw	ra,20(sp)
    fad8:	df000415 	stw	fp,16(sp)
    fadc:	dc000315 	stw	r16,12(sp)
    fae0:	df000404 	addi	fp,sp,16
    fae4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    fae8:	00bffa04 	movi	r2,-24
    faec:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    faf0:	e03ffc15 	stw	zero,-16(fp)
    faf4:	00001d06 	br	fb6c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    faf8:	04000074 	movhi	r16,1
    fafc:	84046304 	addi	r16,r16,4492
    fb00:	e0bffc17 	ldw	r2,-16(fp)
    fb04:	01400304 	movi	r5,12
    fb08:	1009883a 	mov	r4,r2
    fb0c:	000049c0 	call	49c <__mulsi3>
    fb10:	8085883a 	add	r2,r16,r2
    fb14:	10800017 	ldw	r2,0(r2)
    fb18:	1000111e 	bne	r2,zero,fb60 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    fb1c:	04000074 	movhi	r16,1
    fb20:	84046304 	addi	r16,r16,4492
    fb24:	e0bffc17 	ldw	r2,-16(fp)
    fb28:	01400304 	movi	r5,12
    fb2c:	1009883a 	mov	r4,r2
    fb30:	000049c0 	call	49c <__mulsi3>
    fb34:	8085883a 	add	r2,r16,r2
    fb38:	e0fffe17 	ldw	r3,-8(fp)
    fb3c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    fb40:	d0e00a17 	ldw	r3,-32728(gp)
    fb44:	e0bffc17 	ldw	r2,-16(fp)
    fb48:	1880020e 	bge	r3,r2,fb54 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    fb4c:	e0bffc17 	ldw	r2,-16(fp)
    fb50:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
    fb54:	e0bffc17 	ldw	r2,-16(fp)
    fb58:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    fb5c:	00000606 	br	fb78 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    fb60:	e0bffc17 	ldw	r2,-16(fp)
    fb64:	10800044 	addi	r2,r2,1
    fb68:	e0bffc15 	stw	r2,-16(fp)
    fb6c:	e0bffc17 	ldw	r2,-16(fp)
    fb70:	10800810 	cmplti	r2,r2,32
    fb74:	103fe01e 	bne	r2,zero,faf8 <_gp+0xffff578c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    fb78:	e0bffd17 	ldw	r2,-12(fp)
}
    fb7c:	e6ffff04 	addi	sp,fp,-4
    fb80:	dfc00217 	ldw	ra,8(sp)
    fb84:	df000117 	ldw	fp,4(sp)
    fb88:	dc000017 	ldw	r16,0(sp)
    fb8c:	dec00304 	addi	sp,sp,12
    fb90:	f800283a 	ret

0000fb94 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    fb94:	defffe04 	addi	sp,sp,-8
    fb98:	df000115 	stw	fp,4(sp)
    fb9c:	df000104 	addi	fp,sp,4
    fba0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    fba4:	e0bfff17 	ldw	r2,-4(fp)
    fba8:	10bffe84 	addi	r2,r2,-6
    fbac:	10c00428 	cmpgeui	r3,r2,16
    fbb0:	18001a1e 	bne	r3,zero,fc1c <alt_exception_cause_generated_bad_addr+0x88>
    fbb4:	100690ba 	slli	r3,r2,2
    fbb8:	00800074 	movhi	r2,1
    fbbc:	10bef304 	addi	r2,r2,-1076
    fbc0:	1885883a 	add	r2,r3,r2
    fbc4:	10800017 	ldw	r2,0(r2)
    fbc8:	1000683a 	jmp	r2
    fbcc:	0000fc0c 	andi	zero,zero,1008
    fbd0:	0000fc0c 	andi	zero,zero,1008
    fbd4:	0000fc1c 	xori	zero,zero,1008
    fbd8:	0000fc1c 	xori	zero,zero,1008
    fbdc:	0000fc1c 	xori	zero,zero,1008
    fbe0:	0000fc0c 	andi	zero,zero,1008
    fbe4:	0000fc14 	movui	zero,1008
    fbe8:	0000fc1c 	xori	zero,zero,1008
    fbec:	0000fc0c 	andi	zero,zero,1008
    fbf0:	0000fc0c 	andi	zero,zero,1008
    fbf4:	0000fc1c 	xori	zero,zero,1008
    fbf8:	0000fc0c 	andi	zero,zero,1008
    fbfc:	0000fc14 	movui	zero,1008
    fc00:	0000fc1c 	xori	zero,zero,1008
    fc04:	0000fc1c 	xori	zero,zero,1008
    fc08:	0000fc0c 	andi	zero,zero,1008
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    fc0c:	00800044 	movi	r2,1
    fc10:	00000306 	br	fc20 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    fc14:	0005883a 	mov	r2,zero
    fc18:	00000106 	br	fc20 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    fc1c:	0005883a 	mov	r2,zero
  }
}
    fc20:	e037883a 	mov	sp,fp
    fc24:	df000017 	ldw	fp,0(sp)
    fc28:	dec00104 	addi	sp,sp,4
    fc2c:	f800283a 	ret

0000fc30 <atexit>:
    fc30:	200b883a 	mov	r5,r4
    fc34:	000f883a 	mov	r7,zero
    fc38:	000d883a 	mov	r6,zero
    fc3c:	0009883a 	mov	r4,zero
    fc40:	00100941 	jmpi	10094 <__register_exitproc>

0000fc44 <exit>:
    fc44:	defffe04 	addi	sp,sp,-8
    fc48:	000b883a 	mov	r5,zero
    fc4c:	dc000015 	stw	r16,0(sp)
    fc50:	dfc00115 	stw	ra,4(sp)
    fc54:	2021883a 	mov	r16,r4
    fc58:	00101ac0 	call	101ac <__call_exitprocs>
    fc5c:	00800074 	movhi	r2,1
    fc60:	1088db04 	addi	r2,r2,9068
    fc64:	11000017 	ldw	r4,0(r2)
    fc68:	20800f17 	ldw	r2,60(r4)
    fc6c:	10000126 	beq	r2,zero,fc74 <exit+0x30>
    fc70:	103ee83a 	callr	r2
    fc74:	8009883a 	mov	r4,r16
    fc78:	001051c0 	call	1051c <_exit>

0000fc7c <_fputs_r>:
    fc7c:	defff804 	addi	sp,sp,-32
    fc80:	dc400615 	stw	r17,24(sp)
    fc84:	2023883a 	mov	r17,r4
    fc88:	2809883a 	mov	r4,r5
    fc8c:	dc000515 	stw	r16,20(sp)
    fc90:	dfc00715 	stw	ra,28(sp)
    fc94:	3021883a 	mov	r16,r6
    fc98:	d9400315 	stw	r5,12(sp)
    fc9c:	00072540 	call	7254 <strlen>
    fca0:	d8800215 	stw	r2,8(sp)
    fca4:	d8800415 	stw	r2,16(sp)
    fca8:	d8800304 	addi	r2,sp,12
    fcac:	d8800015 	stw	r2,0(sp)
    fcb0:	00800044 	movi	r2,1
    fcb4:	d8800115 	stw	r2,4(sp)
    fcb8:	88000226 	beq	r17,zero,fcc4 <_fputs_r+0x48>
    fcbc:	88800e17 	ldw	r2,56(r17)
    fcc0:	10001226 	beq	r2,zero,fd0c <_fputs_r+0x90>
    fcc4:	8080030b 	ldhu	r2,12(r16)
    fcc8:	10c8000c 	andi	r3,r2,8192
    fccc:	1800061e 	bne	r3,zero,fce8 <_fputs_r+0x6c>
    fcd0:	81001917 	ldw	r4,100(r16)
    fcd4:	00f7ffc4 	movi	r3,-8193
    fcd8:	10880014 	ori	r2,r2,8192
    fcdc:	20c6703a 	and	r3,r4,r3
    fce0:	8080030d 	sth	r2,12(r16)
    fce4:	80c01915 	stw	r3,100(r16)
    fce8:	d80d883a 	mov	r6,sp
    fcec:	800b883a 	mov	r5,r16
    fcf0:	8809883a 	mov	r4,r17
    fcf4:	0008edc0 	call	8edc <__sfvwrite_r>
    fcf8:	dfc00717 	ldw	ra,28(sp)
    fcfc:	dc400617 	ldw	r17,24(sp)
    fd00:	dc000517 	ldw	r16,20(sp)
    fd04:	dec00804 	addi	sp,sp,32
    fd08:	f800283a 	ret
    fd0c:	8809883a 	mov	r4,r17
    fd10:	0004ab80 	call	4ab8 <__sinit>
    fd14:	003feb06 	br	fcc4 <_gp+0xffff5958>

0000fd18 <fputs>:
    fd18:	00800074 	movhi	r2,1
    fd1c:	1088dc04 	addi	r2,r2,9072
    fd20:	280d883a 	mov	r6,r5
    fd24:	200b883a 	mov	r5,r4
    fd28:	11000017 	ldw	r4,0(r2)
    fd2c:	000fc7c1 	jmpi	fc7c <_fputs_r>

0000fd30 <_getc_r>:
    fd30:	defffd04 	addi	sp,sp,-12
    fd34:	dc000115 	stw	r16,4(sp)
    fd38:	dfc00215 	stw	ra,8(sp)
    fd3c:	2021883a 	mov	r16,r4
    fd40:	20000226 	beq	r4,zero,fd4c <_getc_r+0x1c>
    fd44:	20800e17 	ldw	r2,56(r4)
    fd48:	10000c26 	beq	r2,zero,fd7c <_getc_r+0x4c>
    fd4c:	28800117 	ldw	r2,4(r5)
    fd50:	10bfffc4 	addi	r2,r2,-1
    fd54:	28800115 	stw	r2,4(r5)
    fd58:	10000c16 	blt	r2,zero,fd8c <_getc_r+0x5c>
    fd5c:	28800017 	ldw	r2,0(r5)
    fd60:	10c00044 	addi	r3,r2,1
    fd64:	28c00015 	stw	r3,0(r5)
    fd68:	10800003 	ldbu	r2,0(r2)
    fd6c:	dfc00217 	ldw	ra,8(sp)
    fd70:	dc000117 	ldw	r16,4(sp)
    fd74:	dec00304 	addi	sp,sp,12
    fd78:	f800283a 	ret
    fd7c:	d9400015 	stw	r5,0(sp)
    fd80:	0004ab80 	call	4ab8 <__sinit>
    fd84:	d9400017 	ldw	r5,0(sp)
    fd88:	003ff006 	br	fd4c <_gp+0xffff59e0>
    fd8c:	8009883a 	mov	r4,r16
    fd90:	dfc00217 	ldw	ra,8(sp)
    fd94:	dc000117 	ldw	r16,4(sp)
    fd98:	dec00304 	addi	sp,sp,12
    fd9c:	001000c1 	jmpi	1000c <__srget_r>

0000fda0 <getc>:
    fda0:	00800074 	movhi	r2,1
    fda4:	defffd04 	addi	sp,sp,-12
    fda8:	1088dc04 	addi	r2,r2,9072
    fdac:	dc400115 	stw	r17,4(sp)
    fdb0:	14400017 	ldw	r17,0(r2)
    fdb4:	dc000015 	stw	r16,0(sp)
    fdb8:	dfc00215 	stw	ra,8(sp)
    fdbc:	2021883a 	mov	r16,r4
    fdc0:	88000226 	beq	r17,zero,fdcc <getc+0x2c>
    fdc4:	88800e17 	ldw	r2,56(r17)
    fdc8:	10000d26 	beq	r2,zero,fe00 <getc+0x60>
    fdcc:	80800117 	ldw	r2,4(r16)
    fdd0:	10bfffc4 	addi	r2,r2,-1
    fdd4:	80800115 	stw	r2,4(r16)
    fdd8:	10000c16 	blt	r2,zero,fe0c <getc+0x6c>
    fddc:	80800017 	ldw	r2,0(r16)
    fde0:	10c00044 	addi	r3,r2,1
    fde4:	80c00015 	stw	r3,0(r16)
    fde8:	10800003 	ldbu	r2,0(r2)
    fdec:	dfc00217 	ldw	ra,8(sp)
    fdf0:	dc400117 	ldw	r17,4(sp)
    fdf4:	dc000017 	ldw	r16,0(sp)
    fdf8:	dec00304 	addi	sp,sp,12
    fdfc:	f800283a 	ret
    fe00:	8809883a 	mov	r4,r17
    fe04:	0004ab80 	call	4ab8 <__sinit>
    fe08:	003ff006 	br	fdcc <_gp+0xffff5a60>
    fe0c:	800b883a 	mov	r5,r16
    fe10:	8809883a 	mov	r4,r17
    fe14:	dfc00217 	ldw	ra,8(sp)
    fe18:	dc400117 	ldw	r17,4(sp)
    fe1c:	dc000017 	ldw	r16,0(sp)
    fe20:	dec00304 	addi	sp,sp,12
    fe24:	001000c1 	jmpi	1000c <__srget_r>

0000fe28 <memcmp>:
    fe28:	01c000c4 	movi	r7,3
    fe2c:	3980192e 	bgeu	r7,r6,fe94 <memcmp+0x6c>
    fe30:	2144b03a 	or	r2,r4,r5
    fe34:	11c4703a 	and	r2,r2,r7
    fe38:	10000f26 	beq	r2,zero,fe78 <memcmp+0x50>
    fe3c:	20800003 	ldbu	r2,0(r4)
    fe40:	28c00003 	ldbu	r3,0(r5)
    fe44:	10c0151e 	bne	r2,r3,fe9c <memcmp+0x74>
    fe48:	31bfff84 	addi	r6,r6,-2
    fe4c:	01ffffc4 	movi	r7,-1
    fe50:	00000406 	br	fe64 <memcmp+0x3c>
    fe54:	20800003 	ldbu	r2,0(r4)
    fe58:	28c00003 	ldbu	r3,0(r5)
    fe5c:	31bfffc4 	addi	r6,r6,-1
    fe60:	10c00e1e 	bne	r2,r3,fe9c <memcmp+0x74>
    fe64:	21000044 	addi	r4,r4,1
    fe68:	29400044 	addi	r5,r5,1
    fe6c:	31fff91e 	bne	r6,r7,fe54 <_gp+0xffff5ae8>
    fe70:	0005883a 	mov	r2,zero
    fe74:	f800283a 	ret
    fe78:	20c00017 	ldw	r3,0(r4)
    fe7c:	28800017 	ldw	r2,0(r5)
    fe80:	18bfee1e 	bne	r3,r2,fe3c <_gp+0xffff5ad0>
    fe84:	31bfff04 	addi	r6,r6,-4
    fe88:	21000104 	addi	r4,r4,4
    fe8c:	29400104 	addi	r5,r5,4
    fe90:	39bff936 	bltu	r7,r6,fe78 <_gp+0xffff5b0c>
    fe94:	303fe91e 	bne	r6,zero,fe3c <_gp+0xffff5ad0>
    fe98:	003ff506 	br	fe70 <_gp+0xffff5b04>
    fe9c:	10c5c83a 	sub	r2,r2,r3
    fea0:	f800283a 	ret

0000fea4 <_putc_r>:
    fea4:	defffc04 	addi	sp,sp,-16
    fea8:	dc000215 	stw	r16,8(sp)
    feac:	dfc00315 	stw	ra,12(sp)
    feb0:	2021883a 	mov	r16,r4
    feb4:	20000226 	beq	r4,zero,fec0 <_putc_r+0x1c>
    feb8:	20800e17 	ldw	r2,56(r4)
    febc:	10001b26 	beq	r2,zero,ff2c <_putc_r+0x88>
    fec0:	30800217 	ldw	r2,8(r6)
    fec4:	10bfffc4 	addi	r2,r2,-1
    fec8:	30800215 	stw	r2,8(r6)
    fecc:	10000a16 	blt	r2,zero,fef8 <_putc_r+0x54>
    fed0:	30800017 	ldw	r2,0(r6)
    fed4:	11400005 	stb	r5,0(r2)
    fed8:	30800017 	ldw	r2,0(r6)
    fedc:	10c00044 	addi	r3,r2,1
    fee0:	30c00015 	stw	r3,0(r6)
    fee4:	10800003 	ldbu	r2,0(r2)
    fee8:	dfc00317 	ldw	ra,12(sp)
    feec:	dc000217 	ldw	r16,8(sp)
    fef0:	dec00404 	addi	sp,sp,16
    fef4:	f800283a 	ret
    fef8:	30c00617 	ldw	r3,24(r6)
    fefc:	10c00616 	blt	r2,r3,ff18 <_putc_r+0x74>
    ff00:	30800017 	ldw	r2,0(r6)
    ff04:	00c00284 	movi	r3,10
    ff08:	11400005 	stb	r5,0(r2)
    ff0c:	30800017 	ldw	r2,0(r6)
    ff10:	11400003 	ldbu	r5,0(r2)
    ff14:	28fff11e 	bne	r5,r3,fedc <_gp+0xffff5b70>
    ff18:	8009883a 	mov	r4,r16
    ff1c:	dfc00317 	ldw	ra,12(sp)
    ff20:	dc000217 	ldw	r16,8(sp)
    ff24:	dec00404 	addi	sp,sp,16
    ff28:	0009b781 	jmpi	9b78 <__swbuf_r>
    ff2c:	d9400015 	stw	r5,0(sp)
    ff30:	d9800115 	stw	r6,4(sp)
    ff34:	0004ab80 	call	4ab8 <__sinit>
    ff38:	d9800117 	ldw	r6,4(sp)
    ff3c:	d9400017 	ldw	r5,0(sp)
    ff40:	003fdf06 	br	fec0 <_gp+0xffff5b54>

0000ff44 <putc>:
    ff44:	00800074 	movhi	r2,1
    ff48:	defffc04 	addi	sp,sp,-16
    ff4c:	1088dc04 	addi	r2,r2,9072
    ff50:	dc000115 	stw	r16,4(sp)
    ff54:	14000017 	ldw	r16,0(r2)
    ff58:	dc400215 	stw	r17,8(sp)
    ff5c:	dfc00315 	stw	ra,12(sp)
    ff60:	2023883a 	mov	r17,r4
    ff64:	80000226 	beq	r16,zero,ff70 <putc+0x2c>
    ff68:	80800e17 	ldw	r2,56(r16)
    ff6c:	10001a26 	beq	r2,zero,ffd8 <putc+0x94>
    ff70:	28800217 	ldw	r2,8(r5)
    ff74:	10bfffc4 	addi	r2,r2,-1
    ff78:	28800215 	stw	r2,8(r5)
    ff7c:	10000b16 	blt	r2,zero,ffac <putc+0x68>
    ff80:	28800017 	ldw	r2,0(r5)
    ff84:	14400005 	stb	r17,0(r2)
    ff88:	28800017 	ldw	r2,0(r5)
    ff8c:	10c00044 	addi	r3,r2,1
    ff90:	28c00015 	stw	r3,0(r5)
    ff94:	10800003 	ldbu	r2,0(r2)
    ff98:	dfc00317 	ldw	ra,12(sp)
    ff9c:	dc400217 	ldw	r17,8(sp)
    ffa0:	dc000117 	ldw	r16,4(sp)
    ffa4:	dec00404 	addi	sp,sp,16
    ffa8:	f800283a 	ret
    ffac:	28c00617 	ldw	r3,24(r5)
    ffb0:	10c00e16 	blt	r2,r3,ffec <putc+0xa8>
    ffb4:	28800017 	ldw	r2,0(r5)
    ffb8:	01000284 	movi	r4,10
    ffbc:	14400005 	stb	r17,0(r2)
    ffc0:	28800017 	ldw	r2,0(r5)
    ffc4:	10c00003 	ldbu	r3,0(r2)
    ffc8:	193ff01e 	bne	r3,r4,ff8c <_gp+0xffff5c20>
    ffcc:	280d883a 	mov	r6,r5
    ffd0:	180b883a 	mov	r5,r3
    ffd4:	00000706 	br	fff4 <putc+0xb0>
    ffd8:	8009883a 	mov	r4,r16
    ffdc:	d9400015 	stw	r5,0(sp)
    ffe0:	0004ab80 	call	4ab8 <__sinit>
    ffe4:	d9400017 	ldw	r5,0(sp)
    ffe8:	003fe106 	br	ff70 <_gp+0xffff5c04>
    ffec:	280d883a 	mov	r6,r5
    fff0:	880b883a 	mov	r5,r17
    fff4:	8009883a 	mov	r4,r16
    fff8:	dfc00317 	ldw	ra,12(sp)
    fffc:	dc400217 	ldw	r17,8(sp)
   10000:	dc000117 	ldw	r16,4(sp)
   10004:	dec00404 	addi	sp,sp,16
   10008:	0009b781 	jmpi	9b78 <__swbuf_r>

0001000c <__srget_r>:
   1000c:	defffd04 	addi	sp,sp,-12
   10010:	dc400115 	stw	r17,4(sp)
   10014:	dc000015 	stw	r16,0(sp)
   10018:	dfc00215 	stw	ra,8(sp)
   1001c:	2023883a 	mov	r17,r4
   10020:	2821883a 	mov	r16,r5
   10024:	20000226 	beq	r4,zero,10030 <__srget_r+0x24>
   10028:	20800e17 	ldw	r2,56(r4)
   1002c:	10001026 	beq	r2,zero,10070 <__srget_r+0x64>
   10030:	800b883a 	mov	r5,r16
   10034:	8809883a 	mov	r4,r17
   10038:	00103480 	call	10348 <__srefill_r>
   1003c:	10000e1e 	bne	r2,zero,10078 <__srget_r+0x6c>
   10040:	80c00017 	ldw	r3,0(r16)
   10044:	80800117 	ldw	r2,4(r16)
   10048:	19000044 	addi	r4,r3,1
   1004c:	10bfffc4 	addi	r2,r2,-1
   10050:	80800115 	stw	r2,4(r16)
   10054:	81000015 	stw	r4,0(r16)
   10058:	18800003 	ldbu	r2,0(r3)
   1005c:	dfc00217 	ldw	ra,8(sp)
   10060:	dc400117 	ldw	r17,4(sp)
   10064:	dc000017 	ldw	r16,0(sp)
   10068:	dec00304 	addi	sp,sp,12
   1006c:	f800283a 	ret
   10070:	0004ab80 	call	4ab8 <__sinit>
   10074:	003fee06 	br	10030 <_gp+0xffff5cc4>
   10078:	00bfffc4 	movi	r2,-1
   1007c:	003ff706 	br	1005c <_gp+0xffff5cf0>

00010080 <__srget>:
   10080:	00800074 	movhi	r2,1
   10084:	1088dc04 	addi	r2,r2,9072
   10088:	200b883a 	mov	r5,r4
   1008c:	11000017 	ldw	r4,0(r2)
   10090:	001000c1 	jmpi	1000c <__srget_r>

00010094 <__register_exitproc>:
   10094:	defffa04 	addi	sp,sp,-24
   10098:	dc000315 	stw	r16,12(sp)
   1009c:	04000074 	movhi	r16,1
   100a0:	8408db04 	addi	r16,r16,9068
   100a4:	80c00017 	ldw	r3,0(r16)
   100a8:	dc400415 	stw	r17,16(sp)
   100ac:	dfc00515 	stw	ra,20(sp)
   100b0:	18805217 	ldw	r2,328(r3)
   100b4:	2023883a 	mov	r17,r4
   100b8:	10003726 	beq	r2,zero,10198 <__register_exitproc+0x104>
   100bc:	10c00117 	ldw	r3,4(r2)
   100c0:	010007c4 	movi	r4,31
   100c4:	20c00e16 	blt	r4,r3,10100 <__register_exitproc+0x6c>
   100c8:	1a000044 	addi	r8,r3,1
   100cc:	8800221e 	bne	r17,zero,10158 <__register_exitproc+0xc4>
   100d0:	18c00084 	addi	r3,r3,2
   100d4:	18c7883a 	add	r3,r3,r3
   100d8:	18c7883a 	add	r3,r3,r3
   100dc:	12000115 	stw	r8,4(r2)
   100e0:	10c7883a 	add	r3,r2,r3
   100e4:	19400015 	stw	r5,0(r3)
   100e8:	0005883a 	mov	r2,zero
   100ec:	dfc00517 	ldw	ra,20(sp)
   100f0:	dc400417 	ldw	r17,16(sp)
   100f4:	dc000317 	ldw	r16,12(sp)
   100f8:	dec00604 	addi	sp,sp,24
   100fc:	f800283a 	ret
   10100:	00800034 	movhi	r2,0
   10104:	10800004 	addi	r2,r2,0
   10108:	10002626 	beq	r2,zero,101a4 <__register_exitproc+0x110>
   1010c:	01006404 	movi	r4,400
   10110:	d9400015 	stw	r5,0(sp)
   10114:	d9800115 	stw	r6,4(sp)
   10118:	d9c00215 	stw	r7,8(sp)
   1011c:	00000000 	call	0 <__alt_mem_onchip_mem>
   10120:	d9400017 	ldw	r5,0(sp)
   10124:	d9800117 	ldw	r6,4(sp)
   10128:	d9c00217 	ldw	r7,8(sp)
   1012c:	10001d26 	beq	r2,zero,101a4 <__register_exitproc+0x110>
   10130:	81000017 	ldw	r4,0(r16)
   10134:	10000115 	stw	zero,4(r2)
   10138:	02000044 	movi	r8,1
   1013c:	22405217 	ldw	r9,328(r4)
   10140:	0007883a 	mov	r3,zero
   10144:	12400015 	stw	r9,0(r2)
   10148:	20805215 	stw	r2,328(r4)
   1014c:	10006215 	stw	zero,392(r2)
   10150:	10006315 	stw	zero,396(r2)
   10154:	883fde26 	beq	r17,zero,100d0 <_gp+0xffff5d64>
   10158:	18c9883a 	add	r4,r3,r3
   1015c:	2109883a 	add	r4,r4,r4
   10160:	1109883a 	add	r4,r2,r4
   10164:	21802215 	stw	r6,136(r4)
   10168:	01800044 	movi	r6,1
   1016c:	12406217 	ldw	r9,392(r2)
   10170:	30cc983a 	sll	r6,r6,r3
   10174:	4992b03a 	or	r9,r9,r6
   10178:	12406215 	stw	r9,392(r2)
   1017c:	21c04215 	stw	r7,264(r4)
   10180:	01000084 	movi	r4,2
   10184:	893fd21e 	bne	r17,r4,100d0 <_gp+0xffff5d64>
   10188:	11006317 	ldw	r4,396(r2)
   1018c:	218cb03a 	or	r6,r4,r6
   10190:	11806315 	stw	r6,396(r2)
   10194:	003fce06 	br	100d0 <_gp+0xffff5d64>
   10198:	18805304 	addi	r2,r3,332
   1019c:	18805215 	stw	r2,328(r3)
   101a0:	003fc606 	br	100bc <_gp+0xffff5d50>
   101a4:	00bfffc4 	movi	r2,-1
   101a8:	003fd006 	br	100ec <_gp+0xffff5d80>

000101ac <__call_exitprocs>:
   101ac:	defff504 	addi	sp,sp,-44
   101b0:	df000915 	stw	fp,36(sp)
   101b4:	dd400615 	stw	r21,24(sp)
   101b8:	dc800315 	stw	r18,12(sp)
   101bc:	dfc00a15 	stw	ra,40(sp)
   101c0:	ddc00815 	stw	r23,32(sp)
   101c4:	dd800715 	stw	r22,28(sp)
   101c8:	dd000515 	stw	r20,20(sp)
   101cc:	dcc00415 	stw	r19,16(sp)
   101d0:	dc400215 	stw	r17,8(sp)
   101d4:	dc000115 	stw	r16,4(sp)
   101d8:	d9000015 	stw	r4,0(sp)
   101dc:	2839883a 	mov	fp,r5
   101e0:	04800044 	movi	r18,1
   101e4:	057fffc4 	movi	r21,-1
   101e8:	00800074 	movhi	r2,1
   101ec:	1088db04 	addi	r2,r2,9068
   101f0:	12000017 	ldw	r8,0(r2)
   101f4:	45005217 	ldw	r20,328(r8)
   101f8:	44c05204 	addi	r19,r8,328
   101fc:	a0001c26 	beq	r20,zero,10270 <__call_exitprocs+0xc4>
   10200:	a0800117 	ldw	r2,4(r20)
   10204:	15ffffc4 	addi	r23,r2,-1
   10208:	b8000d16 	blt	r23,zero,10240 <__call_exitprocs+0x94>
   1020c:	14000044 	addi	r16,r2,1
   10210:	8421883a 	add	r16,r16,r16
   10214:	8421883a 	add	r16,r16,r16
   10218:	84402004 	addi	r17,r16,128
   1021c:	a463883a 	add	r17,r20,r17
   10220:	a421883a 	add	r16,r20,r16
   10224:	e0001e26 	beq	fp,zero,102a0 <__call_exitprocs+0xf4>
   10228:	80804017 	ldw	r2,256(r16)
   1022c:	e0801c26 	beq	fp,r2,102a0 <__call_exitprocs+0xf4>
   10230:	bdffffc4 	addi	r23,r23,-1
   10234:	843fff04 	addi	r16,r16,-4
   10238:	8c7fff04 	addi	r17,r17,-4
   1023c:	bd7ff91e 	bne	r23,r21,10224 <_gp+0xffff5eb8>
   10240:	00800034 	movhi	r2,0
   10244:	10800004 	addi	r2,r2,0
   10248:	10000926 	beq	r2,zero,10270 <__call_exitprocs+0xc4>
   1024c:	a0800117 	ldw	r2,4(r20)
   10250:	1000301e 	bne	r2,zero,10314 <__call_exitprocs+0x168>
   10254:	a0800017 	ldw	r2,0(r20)
   10258:	10003226 	beq	r2,zero,10324 <__call_exitprocs+0x178>
   1025c:	a009883a 	mov	r4,r20
   10260:	98800015 	stw	r2,0(r19)
   10264:	00000000 	call	0 <__alt_mem_onchip_mem>
   10268:	9d000017 	ldw	r20,0(r19)
   1026c:	a03fe41e 	bne	r20,zero,10200 <_gp+0xffff5e94>
   10270:	dfc00a17 	ldw	ra,40(sp)
   10274:	df000917 	ldw	fp,36(sp)
   10278:	ddc00817 	ldw	r23,32(sp)
   1027c:	dd800717 	ldw	r22,28(sp)
   10280:	dd400617 	ldw	r21,24(sp)
   10284:	dd000517 	ldw	r20,20(sp)
   10288:	dcc00417 	ldw	r19,16(sp)
   1028c:	dc800317 	ldw	r18,12(sp)
   10290:	dc400217 	ldw	r17,8(sp)
   10294:	dc000117 	ldw	r16,4(sp)
   10298:	dec00b04 	addi	sp,sp,44
   1029c:	f800283a 	ret
   102a0:	a0800117 	ldw	r2,4(r20)
   102a4:	80c00017 	ldw	r3,0(r16)
   102a8:	10bfffc4 	addi	r2,r2,-1
   102ac:	15c01426 	beq	r2,r23,10300 <__call_exitprocs+0x154>
   102b0:	80000015 	stw	zero,0(r16)
   102b4:	183fde26 	beq	r3,zero,10230 <_gp+0xffff5ec4>
   102b8:	95c8983a 	sll	r4,r18,r23
   102bc:	a0806217 	ldw	r2,392(r20)
   102c0:	a5800117 	ldw	r22,4(r20)
   102c4:	2084703a 	and	r2,r4,r2
   102c8:	10000b26 	beq	r2,zero,102f8 <__call_exitprocs+0x14c>
   102cc:	a0806317 	ldw	r2,396(r20)
   102d0:	2088703a 	and	r4,r4,r2
   102d4:	20000c1e 	bne	r4,zero,10308 <__call_exitprocs+0x15c>
   102d8:	89400017 	ldw	r5,0(r17)
   102dc:	d9000017 	ldw	r4,0(sp)
   102e0:	183ee83a 	callr	r3
   102e4:	a0800117 	ldw	r2,4(r20)
   102e8:	15bfbf1e 	bne	r2,r22,101e8 <_gp+0xffff5e7c>
   102ec:	98800017 	ldw	r2,0(r19)
   102f0:	153fcf26 	beq	r2,r20,10230 <_gp+0xffff5ec4>
   102f4:	003fbc06 	br	101e8 <_gp+0xffff5e7c>
   102f8:	183ee83a 	callr	r3
   102fc:	003ff906 	br	102e4 <_gp+0xffff5f78>
   10300:	a5c00115 	stw	r23,4(r20)
   10304:	003feb06 	br	102b4 <_gp+0xffff5f48>
   10308:	89000017 	ldw	r4,0(r17)
   1030c:	183ee83a 	callr	r3
   10310:	003ff406 	br	102e4 <_gp+0xffff5f78>
   10314:	a0800017 	ldw	r2,0(r20)
   10318:	a027883a 	mov	r19,r20
   1031c:	1029883a 	mov	r20,r2
   10320:	003fb606 	br	101fc <_gp+0xffff5e90>
   10324:	0005883a 	mov	r2,zero
   10328:	003ffb06 	br	10318 <_gp+0xffff5fac>

0001032c <lflush>:
   1032c:	2080030b 	ldhu	r2,12(r4)
   10330:	00c00244 	movi	r3,9
   10334:	1080024c 	andi	r2,r2,9
   10338:	10c00226 	beq	r2,r3,10344 <lflush+0x18>
   1033c:	0005883a 	mov	r2,zero
   10340:	f800283a 	ret
   10344:	00047281 	jmpi	4728 <fflush>

00010348 <__srefill_r>:
   10348:	defffc04 	addi	sp,sp,-16
   1034c:	dc400115 	stw	r17,4(sp)
   10350:	dc000015 	stw	r16,0(sp)
   10354:	dfc00315 	stw	ra,12(sp)
   10358:	dc800215 	stw	r18,8(sp)
   1035c:	2023883a 	mov	r17,r4
   10360:	2821883a 	mov	r16,r5
   10364:	20000226 	beq	r4,zero,10370 <__srefill_r+0x28>
   10368:	20800e17 	ldw	r2,56(r4)
   1036c:	10003c26 	beq	r2,zero,10460 <__srefill_r+0x118>
   10370:	80c0030b 	ldhu	r3,12(r16)
   10374:	1908000c 	andi	r4,r3,8192
   10378:	1805883a 	mov	r2,r3
   1037c:	2000071e 	bne	r4,zero,1039c <__srefill_r+0x54>
   10380:	81001917 	ldw	r4,100(r16)
   10384:	18880014 	ori	r2,r3,8192
   10388:	00f7ffc4 	movi	r3,-8193
   1038c:	20c8703a 	and	r4,r4,r3
   10390:	8080030d 	sth	r2,12(r16)
   10394:	1007883a 	mov	r3,r2
   10398:	81001915 	stw	r4,100(r16)
   1039c:	80000115 	stw	zero,4(r16)
   103a0:	1100080c 	andi	r4,r2,32
   103a4:	2000571e 	bne	r4,zero,10504 <__srefill_r+0x1bc>
   103a8:	1100010c 	andi	r4,r2,4
   103ac:	20001f26 	beq	r4,zero,1042c <__srefill_r+0xe4>
   103b0:	81400c17 	ldw	r5,48(r16)
   103b4:	28000826 	beq	r5,zero,103d8 <__srefill_r+0x90>
   103b8:	80801004 	addi	r2,r16,64
   103bc:	28800226 	beq	r5,r2,103c8 <__srefill_r+0x80>
   103c0:	8809883a 	mov	r4,r17
   103c4:	0004c2c0 	call	4c2c <_free_r>
   103c8:	80800f17 	ldw	r2,60(r16)
   103cc:	80000c15 	stw	zero,48(r16)
   103d0:	80800115 	stw	r2,4(r16)
   103d4:	1000391e 	bne	r2,zero,104bc <__srefill_r+0x174>
   103d8:	80800417 	ldw	r2,16(r16)
   103dc:	10004b26 	beq	r2,zero,1050c <__srefill_r+0x1c4>
   103e0:	8480030b 	ldhu	r18,12(r16)
   103e4:	908000cc 	andi	r2,r18,3
   103e8:	10001f1e 	bne	r2,zero,10468 <__srefill_r+0x120>
   103ec:	81800417 	ldw	r6,16(r16)
   103f0:	80800817 	ldw	r2,32(r16)
   103f4:	81c00517 	ldw	r7,20(r16)
   103f8:	81400717 	ldw	r5,28(r16)
   103fc:	81800015 	stw	r6,0(r16)
   10400:	8809883a 	mov	r4,r17
   10404:	103ee83a 	callr	r2
   10408:	80800115 	stw	r2,4(r16)
   1040c:	00800e0e 	bge	zero,r2,10448 <__srefill_r+0x100>
   10410:	0005883a 	mov	r2,zero
   10414:	dfc00317 	ldw	ra,12(sp)
   10418:	dc800217 	ldw	r18,8(sp)
   1041c:	dc400117 	ldw	r17,4(sp)
   10420:	dc000017 	ldw	r16,0(sp)
   10424:	dec00404 	addi	sp,sp,16
   10428:	f800283a 	ret
   1042c:	1100040c 	andi	r4,r2,16
   10430:	20003026 	beq	r4,zero,104f4 <__srefill_r+0x1ac>
   10434:	1080020c 	andi	r2,r2,8
   10438:	1000241e 	bne	r2,zero,104cc <__srefill_r+0x184>
   1043c:	18c00114 	ori	r3,r3,4
   10440:	80c0030d 	sth	r3,12(r16)
   10444:	003fe406 	br	103d8 <_gp+0xffff606c>
   10448:	80c0030b 	ldhu	r3,12(r16)
   1044c:	1000161e 	bne	r2,zero,104a8 <__srefill_r+0x160>
   10450:	18c00814 	ori	r3,r3,32
   10454:	00bfffc4 	movi	r2,-1
   10458:	80c0030d 	sth	r3,12(r16)
   1045c:	003fed06 	br	10414 <_gp+0xffff60a8>
   10460:	0004ab80 	call	4ab8 <__sinit>
   10464:	003fc206 	br	10370 <_gp+0xffff6004>
   10468:	00800074 	movhi	r2,1
   1046c:	1088db04 	addi	r2,r2,9068
   10470:	11000017 	ldw	r4,0(r2)
   10474:	01400074 	movhi	r5,1
   10478:	00800044 	movi	r2,1
   1047c:	2940cb04 	addi	r5,r5,812
   10480:	8080030d 	sth	r2,12(r16)
   10484:	0004f3c0 	call	4f3c <_fwalk>
   10488:	00800244 	movi	r2,9
   1048c:	8480030d 	sth	r18,12(r16)
   10490:	9480024c 	andi	r18,r18,9
   10494:	90bfd51e 	bne	r18,r2,103ec <_gp+0xffff6080>
   10498:	800b883a 	mov	r5,r16
   1049c:	8809883a 	mov	r4,r17
   104a0:	00044b00 	call	44b0 <__sflush_r>
   104a4:	003fd106 	br	103ec <_gp+0xffff6080>
   104a8:	18c01014 	ori	r3,r3,64
   104ac:	80000115 	stw	zero,4(r16)
   104b0:	00bfffc4 	movi	r2,-1
   104b4:	80c0030d 	sth	r3,12(r16)
   104b8:	003fd606 	br	10414 <_gp+0xffff60a8>
   104bc:	80c00e17 	ldw	r3,56(r16)
   104c0:	0005883a 	mov	r2,zero
   104c4:	80c00015 	stw	r3,0(r16)
   104c8:	003fd206 	br	10414 <_gp+0xffff60a8>
   104cc:	800b883a 	mov	r5,r16
   104d0:	8809883a 	mov	r4,r17
   104d4:	00046cc0 	call	46cc <_fflush_r>
   104d8:	10000a1e 	bne	r2,zero,10504 <__srefill_r+0x1bc>
   104dc:	8080030b 	ldhu	r2,12(r16)
   104e0:	00fffdc4 	movi	r3,-9
   104e4:	80000215 	stw	zero,8(r16)
   104e8:	1886703a 	and	r3,r3,r2
   104ec:	80000615 	stw	zero,24(r16)
   104f0:	003fd206 	br	1043c <_gp+0xffff60d0>
   104f4:	00800244 	movi	r2,9
   104f8:	88800015 	stw	r2,0(r17)
   104fc:	18c01014 	ori	r3,r3,64
   10500:	80c0030d 	sth	r3,12(r16)
   10504:	00bfffc4 	movi	r2,-1
   10508:	003fc206 	br	10414 <_gp+0xffff60a8>
   1050c:	800b883a 	mov	r5,r16
   10510:	8809883a 	mov	r4,r17
   10514:	00051a00 	call	51a0 <__smakebuf_r>
   10518:	003fb106 	br	103e0 <_gp+0xffff6074>

0001051c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1051c:	defffd04 	addi	sp,sp,-12
   10520:	df000215 	stw	fp,8(sp)
   10524:	df000204 	addi	fp,sp,8
   10528:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1052c:	0001883a 	nop
   10530:	e0bfff17 	ldw	r2,-4(fp)
   10534:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   10538:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1053c:	10000226 	beq	r2,zero,10548 <_exit+0x2c>
    ALT_SIM_FAIL();
   10540:	002af070 	cmpltui	zero,zero,43969
   10544:	00000106 	br	1054c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   10548:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1054c:	003fff06 	br	1054c <_gp+0xffff61e0>
